<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Robin&#39;s Blog</title>
  
  <subtitle>Welcome to my blog</subtitle>
  <link href="http://ruobingw.com/atom.xml" rel="self"/>
  
  <link href="http://ruobingw.com/"/>
  <updated>2025-04-23T03:04:56.143Z</updated>
  <id>http://ruobingw.com/</id>
  
  <author>
    <name>Ruobing Wang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数位DP</title>
    <link href="http://ruobingw.com/posts/%E6%95%B0%E4%BD%8DDP/"/>
    <id>http://ruobingw.com/posts/%E6%95%B0%E4%BD%8DDP/</id>
    <published>2025-04-10T22:06:19.000Z</published>
    <updated>2025-04-23T03:04:56.143Z</updated>
    
    <content type="html"><![CDATA[<h1 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h1><div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>此教程参考 <a href="https://leetcode.cn/problems/numbers-with-repeated-digits/solutions/1748539/by-endlesscheng-c5vg/">0x3f 的 数位dp思路</a></p><p>主要包含：</p><ul><li><a href="https://www.bilibili.com/video/BV1rS4y1s721/?t=19m36s&amp;vd_source=54f34024c3784d45de85a3f70808ab70">模板 v1.0</a></li><li><a href="https://www.bilibili.com/video/BV1rS4y1s721/?t=19m36s&amp;vd_source=54f34024c3784d45de85a3f70808ab70">模板 v2.0 - 上下界版本</a></li></ul><p>感谢支持！</p></div><p>一定有的参数</p><ul><li><p>i, lowerBound (limitLow), UpperBound (limitHigh)</p></li><li><p>lowerBound, UpperBound在函数中一般不变化</p></li><li><p>前导零：</p><ul><li>如果是数位比较，所以需要前补零 （一般为补充下界前导零）</li><li>反之如果是求各数位的和那么此时前导零没有影响所以不用补零</li></ul></li><li><p>根据题目的要求来更新答案</p></li></ul><h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><p><a href="https://leetcode.cn/problems/count-symmetric-integers/">2843. 统计对称整数的数目</a></p><p>无记忆化搜索：纯模板：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    String lowStr;</span><br><span class="line">    String highStr;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countSymmetricIntegers</span><span class="params">(<span class="type">int</span> low, <span class="type">int</span> high)</span> {</span><br><span class="line">        <span class="comment">// 尝试用数位dp v2.0解题</span></span><br><span class="line">        <span class="comment">// 1. 一定有三个参：i, 下界，上界</span></span><br><span class="line">        lowStr = String.valueOf(low);</span><br><span class="line">        <span class="type">int</span> <span class="variable">nLow</span> <span class="operator">=</span> lowStr.length();</span><br><span class="line">        highStr = String.valueOf(high);</span><br><span class="line">        <span class="comment">// 由于是数位比较，所以前补零</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; highStr.length() - nLow; i++) {</span><br><span class="line">            lowStr = <span class="string">"0"</span> + lowStr;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 2. 由于需要判断对称,我们需要sum来记录</span></span><br><span class="line">        <span class="comment">// 2.1 需要判断是前半还是后半</span></span><br><span class="line">        <span class="comment">// 2.2 需要判断前导0</span></span><br><span class="line">        <span class="comment">// 2.3 需要判断从哪里开始，因为 i 只是到了当前位，而当前位我们可以选择填或不填</span></span><br><span class="line">        <span class="comment">// 2.2 和 2.3 可以合并</span></span><br><span class="line">        <span class="keyword">return</span> digitDPDFS(<span class="number">0</span>, <span class="literal">true</span>, <span class="literal">true</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">digitDPDFS</span><span class="params">(<span class="type">int</span> i, <span class="type">boolean</span> limitLow, <span class="type">boolean</span> limitHigh, <span class="type">int</span> start, <span class="type">int</span> prevSum, <span class="type">int</span> afterSum)</span> {</span><br><span class="line">        <span class="comment">// System.out.println(i + " " + highStr.length());</span></span><br><span class="line">        <span class="keyword">if</span> (i == highStr.length()) {</span><br><span class="line">            <span class="keyword">if</span> (prevSum == afterSum) <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">// 说明我们找到了一个合法方案；</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据limit来确定上界下界</span></span><br><span class="line">        <span class="type">int</span> lowerBound;</span><br><span class="line">        <span class="keyword">if</span> (limitLow) lowerBound = lowStr.charAt(i) - <span class="string">'0'</span>;</span><br><span class="line">        <span class="keyword">else</span> lowerBound = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> higherBound;</span><br><span class="line">        <span class="keyword">if</span> (limitHigh) higherBound = highStr.charAt(i) - <span class="string">'0'</span>;</span><br><span class="line">        <span class="keyword">else</span> higherBound = <span class="number">9</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// System.out.println("lowerBound: " + lowerBound + " " + "HigherBound: " + higherBound);</span></span><br><span class="line">      <span class="comment">// 如果前面没有填数字，且剩余数位个数是奇数，那么当前数位不能填数字</span></span><br><span class="line">        <span class="keyword">if</span> (start &lt; <span class="number">0</span> &amp;&amp; (highStr.length() - i) % <span class="number">2</span> &gt; <span class="number">0</span>) {</span><br><span class="line">          <span class="comment">// 当前方没有数字（为0）并且此时lowerbound不为0时，我们没有合法方案</span></span><br><span class="line">            <span class="keyword">return</span> lowerBound &gt; <span class="number">0</span> ? <span class="number">0</span> : digitDPDFS(i + <span class="number">1</span>, <span class="literal">true</span>, <span class="literal">false</span>, start, prevSum, afterSum);</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isLeft</span> <span class="operator">=</span> start &lt; <span class="number">0</span> || i &lt; (start + highStr.length()) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">d</span> <span class="operator">=</span> lowerBound; d &lt;= higherBound; d++) {</span><br><span class="line">            <span class="comment">// System.out.println("d: " + d);</span></span><br><span class="line">            <span class="keyword">if</span> (isLeft) prevSum += d;</span><br><span class="line">            <span class="keyword">else</span> afterSum += d;</span><br><span class="line">            res += digitDPDFS(</span><br><span class="line">                i + <span class="number">1</span>, </span><br><span class="line">                limitLow &amp;&amp; d == lowerBound, </span><br><span class="line">                limitHigh &amp;&amp; d == higherBound, </span><br><span class="line">                start &lt; <span class="number">0</span> &amp;&amp; d &gt; <span class="number">0</span> ? i : start,</span><br><span class="line">                prevSum, afterSum);</span><br><span class="line">            <span class="keyword">if</span> (isLeft) prevSum -= d;</span><br><span class="line">            <span class="keyword">else</span> afterSum -= d;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>含有memo的</p><p><a href="https://leetcode.cn/problems/count-of-integers/">2719. 统计整数数目</a></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">MOD</span> <span class="operator">=</span> <span class="number">1000000000</span> + <span class="number">7</span>;</span><br><span class="line">    <span class="type">int</span> min_sum, max_sum;</span><br><span class="line">    <span class="type">char</span>[] num1Char, num2Char;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="type">int</span>[][][] memo;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">count</span><span class="params">(String num1, String num2, <span class="type">int</span> min_sum, <span class="type">int</span> max_sum)</span> {</span><br><span class="line">        <span class="built_in">this</span>.min_sum = min_sum;</span><br><span class="line">        <span class="built_in">this</span>.max_sum = max_sum;</span><br><span class="line">        <span class="comment">// 尝试使用dp 2.0 模板解题</span></span><br><span class="line">        <span class="comment">// 1. 补充前导零</span></span><br><span class="line">        <span class="keyword">while</span> (num1.length() &lt; num2.length()) {</span><br><span class="line">            num1 = <span class="string">"0"</span> + num1; </span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">        num1Char = num1.toCharArray();</span><br><span class="line">        num2Char = num2.toCharArray();</span><br><span class="line">        </span><br><span class="line">        n = num2Char.length;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// memo for [i, isNum, curSum]</span></span><br><span class="line">        memo = <span class="keyword">new</span> <span class="title class_">int</span>[n][<span class="number">2</span>][max_sum + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[][] mat : memo) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span>[] row : mat) {</span><br><span class="line">                Arrays.fill(row, -<span class="number">1</span>);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 2. 需要 i, limitLow, limitHigh, isNum</span></span><br><span class="line">        <span class="comment">// 2.1 额外的我们需要判断当前数字和: curSum</span></span><br><span class="line">        <span class="keyword">return</span> dfs(<span class="number">0</span>, <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="number">0</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> i, <span class="type">boolean</span> limitLow, <span class="type">boolean</span> limitHigh, <span class="type">boolean</span> isNum, <span class="type">int</span> curSum)</span> {</span><br><span class="line">        <span class="keyword">if</span> (i == n) {</span><br><span class="line">            <span class="keyword">if</span> (curSum &gt;= <span class="built_in">this</span>.min_sum &amp;&amp; curSum &lt;= <span class="built_in">this</span>.max_sum) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (curSum &gt; <span class="built_in">this</span>.max_sum) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// System.out.println(i + " " + curSum);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 只记录 不 受到 limitLow 或 limitHigh 约束时的状态 i</span></span><br><span class="line">        <span class="comment">// 因为受到影响的不会再被用到，因此无需记忆</span></span><br><span class="line">        <span class="keyword">if</span> (!limitLow &amp;&amp; !limitHigh &amp;&amp; memo[i][isNum ? <span class="number">1</span> : <span class="number">0</span>][curSum] != -<span class="number">1</span>) {</span><br><span class="line">            <span class="keyword">return</span> memo[i][isNum ? <span class="number">1</span> : <span class="number">0</span>][curSum];</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 跳过，即前方没有数字 (isNum = false) 且当前位为0 (num1Char[i] == '0')</span></span><br><span class="line">        <span class="comment">// 注意此时limitLow一定是true，因为后续的数会被限制</span></span><br><span class="line">        <span class="keyword">if</span> (!isNum &amp;&amp; num1Char[i] == <span class="string">'0'</span>) {</span><br><span class="line">            res = (dfs(i + <span class="number">1</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, curSum)) % MOD;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">lowerBound</span> <span class="operator">=</span> limitLow ? num1Char[i] - <span class="string">'0'</span> : <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">upperBound</span> <span class="operator">=</span> limitHigh ? num2Char[i] - <span class="string">'0'</span> : <span class="number">9</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">d0</span> <span class="operator">=</span> isNum ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">d</span> <span class="operator">=</span> Math.max(d0, lowerBound); d &lt;= upperBound; d++) {</span><br><span class="line">            <span class="comment">// System.out.println(i + " " + d + " " + curSum);</span></span><br><span class="line">            res = (res + dfs(i + <span class="number">1</span>, limitLow &amp;&amp; d == lowerBound, limitHigh &amp;&amp; d == upperBound, <span class="literal">true</span>, curSum + d)) % MOD;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">         <span class="keyword">if</span> (!limitLow &amp;&amp; !limitHigh) {</span><br><span class="line">            memo[i][isNum ? <span class="number">1</span> : <span class="number">0</span>][curSum] = res;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><a href="https://leetcode.cn/problems/count-largest-group/">1399. 统计最大组的数目</a></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    String nStr;</span><br><span class="line">    Map&lt;Integer, Integer&gt; hm = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span>[][] memo;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countLargestGroup</span><span class="params">(<span class="type">int</span> n)</span> {</span><br><span class="line">        <span class="comment">// 查看数位是否相等，尝试使用数位dp</span></span><br><span class="line">        <span class="comment">// n 是上界，因此此题没有下界，尝试使用v1.0解题</span></span><br><span class="line">        <span class="comment">// 由于是求数位和那么此时前导零没有影响，不处理</span></span><br><span class="line">        nStr = String.valueOf(n);</span><br><span class="line">        digitDP(<span class="number">0</span>, <span class="literal">true</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxValue</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> value : hm.values()) {</span><br><span class="line">            <span class="keyword">if</span> (value &gt; maxValue) {</span><br><span class="line">                res = <span class="number">1</span>;</span><br><span class="line">                maxValue = value;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (value == maxValue) res++;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">digitDP</span><span class="params">(<span class="type">int</span> i, <span class="type">boolean</span> limitHigh, <span class="type">int</span> digitSum)</span> {</span><br><span class="line">        <span class="keyword">if</span> (i == nStr.length()) {</span><br><span class="line">            <span class="keyword">if</span> (digitSum &gt; <span class="number">0</span>) {</span><br><span class="line">                hm.merge(digitSum, <span class="number">1</span>, (a, b) -&gt; a + b);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">upperBound</span> <span class="operator">=</span> limitHigh ? nStr.charAt(i) - <span class="string">'0'</span> : <span class="number">9</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">0</span>; d &lt; upperBound + <span class="number">1</span>; d++) {</span><br><span class="line">            digitDP(i + <span class="number">1</span>, limitHigh &amp;&amp; d == upperBound, digitSum + d);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上边的方法无法记忆化，因为一直累加的话target无法复用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countLargestGroup</span><span class="params">(<span class="type">int</span> n)</span> {</span><br><span class="line">        <span class="type">char</span>[] s = String.valueOf(n).toCharArray();</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> s.length;</span><br><span class="line">        <span class="type">int</span>[][] memo = <span class="keyword">new</span> <span class="title class_">int</span>[m][m * <span class="number">9</span> + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] row : memo) {</span><br><span class="line">            Arrays.fill(row, -<span class="number">1</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">maxCnt</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">target</span> <span class="operator">=</span> <span class="number">1</span>; target &lt;= m * <span class="number">9</span>; target++) { <span class="comment">// 枚举目标数位和</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">cnt</span> <span class="operator">=</span> dfs(<span class="number">0</span>, target, <span class="literal">true</span>, s, memo);</span><br><span class="line">            <span class="keyword">if</span> (cnt &gt; maxCnt) {</span><br><span class="line">                maxCnt = cnt;</span><br><span class="line">                ans = <span class="number">1</span>;</span><br><span class="line">            } <span class="keyword">else</span> <span class="keyword">if</span> (cnt == maxCnt) {</span><br><span class="line">                ans++;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> left, <span class="type">boolean</span> limitHigh, <span class="type">char</span>[] s, <span class="type">int</span>[][] memo)</span> {</span><br><span class="line">        <span class="keyword">if</span> (i == s.length) {</span><br><span class="line">            <span class="keyword">return</span> left == <span class="number">0</span> ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (!limitHigh &amp;&amp; memo[i][left] != -<span class="number">1</span>) {</span><br><span class="line">            <span class="keyword">return</span> memo[i][left];</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">hi</span> <span class="operator">=</span> limitHigh ? s[i] - <span class="string">'0'</span> : <span class="number">9</span>; <span class="comment">// 当前数位至多填 hi</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">0</span>; d &lt;= Math.min(hi, left); d++) { <span class="comment">// 枚举当前数位填 d</span></span><br><span class="line">            res += dfs(i + <span class="number">1</span>, left - d, limitHigh &amp;&amp; d == hi, s, memo);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!limitHigh) {</span><br><span class="line">            memo[i][left] = res;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>两个问题：</p><blockquote><p>为什么 <code>target</code> 的最大值是 <code>9 * m</code> </p></blockquote><p>在这道题中，我们关注的是每个数字的 <strong>数位和</strong>，比如：</p><ul><li><code>123</code> 的数位和是 <code>1 + 2 + 3 = 6</code></li><li><code>999</code> 的数位和是 <code>9 + 9 + 9 = 27</code></li></ul><h4 id="m-是-n-的位数"><a href="#m-是-n-的位数" class="headerlink" title="m 是 n 的位数"></a><code>m</code> 是 <code>n</code> 的位数</h4><p>你已经通过：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span>[] s = String.valueOf(n).toCharArray();</span><br><span class="line"><span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> s.length;</span><br></pre></td></tr></tbody></table></figure><p>得到了 <code>n</code> 的位数是 <code>m</code>。</p><p>每一位的数值最大是 9</p><p>十进制中，一个数的每一位最多是 <code>9</code>。所以，<code>m</code> 位数的最大数位和是：</p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">9 + 9 + ... + 9 (m 个 9) = 9 * m</span><br></pre></td></tr></tbody></table></figure><p>所以：当你在枚举 <code>target</code> 的时候</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">target</span> <span class="operator">=</span> <span class="number">1</span>; target &lt;= m * <span class="number">9</span>; target++)</span><br></pre></td></tr></tbody></table></figure><p>你是在枚举所有 <strong>可能出现的数位和</strong>（从 1 到最大值 <code>9 * m</code>），这也就是这个区间的由来。</p><p>如果 <code>n = 9999</code>，那：</p><ul><li>它是 4 位数 → <code>m = 4</code></li><li>每一位最大是 <code>9</code> → 最大数位和 = <code>4 * 9 = 36</code></li><li>所以 <code>target</code> 最大枚举到 36 是没问题的</li></ul><blockquote><p>为什么要把 <code>left</code> 定义成<strong>剩余的数位和</strong>，而不是<strong>已填的数位和</strong>？<br> 因为这样可以让 <code>target = 1, 2, ..., 9*m</code> <strong>复用同一个记忆化搜索的结果</strong>。<br> 如果反过来，从 <code>0</code> 累加到 <code>target</code>，那么 <code>memo</code> 的内容就和 <code>target</code> 绑定，<strong>无法复用</strong>。</p></blockquote><p>我们定义 <code>dfs(i, left)</code> 表示从第 <code>i</code> 位开始，还剩下 <code>left</code> 的数位和要分配。</p><p>这个“剩余”写法的好处是：</p><ul><li><strong>每次递归的目标结构是统一的</strong>，只和剩余值有关。</li><li>所有 <code>target</code> 值之间的搜索过程是可以共用的。</li></ul><p>假设定义：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dfs(i, sum) <span class="comment">// sum 是当前已填入的数位和</span></span><br></pre></td></tr></tbody></table></figure><p>这样做的问题是：</p><ul><li>每个 <code>target</code> 都要单独从 <code>sum = 0</code> 开始递归；</li><li>那么你记忆化的 <code>memo[i][sum]</code> 是专门为这个 <code>target</code> 服务的；</li><li>切换 <code>target</code> 后，memo 不能复用 → 大量重复计算！</li></ul><p>假设我们要处理 <code>n = 99</code> → 两位数 → 最大 target 是 <code>9 * 2 = 18</code></p><p>我们要枚举所有 <code>target = 1~18</code>，看哪些数（在 <code>1~99</code> 范围内）数位和等于 <code>target</code>。</p><p>我们用的是：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dfs(i, left) <span class="comment">// left 是剩下的目标值</span></span><br></pre></td></tr></tbody></table></figure><p>例如：</p><ul><li><p>处理 target = 10 的时候会调用：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dfs(0, 10)</span><br><span class="line">dfs(1, 3)</span><br><span class="line">...</span><br></pre></td></tr></tbody></table></figure></li><li><p>处理 target = 12 的时候也会调用：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dfs(0, 12)</span><br><span class="line">dfs(1, 3) ←这个子问题可以复用之前 target=10 的 dfs(1,3) 结果</span><br><span class="line">...</span><br></pre></td></tr></tbody></table></figure></li></ul><p>如果是：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dfs(i, curSum)</span><br></pre></td></tr></tbody></table></figure><p>处理 target = 10 和 target = 12 时会分别从 <code>curSum = 0</code> 开始向上累加。<br>这时候 <code>curSum = 3</code> 是在不同的路径、不同的目标下产生的 → 所以<strong>memo 无法共用</strong>，只能重新算。</p><p>一个详细例子 比如 n = 99：为什么 <code>dfs(1, 3)</code> 会在多个 target 中被共用。</p><p>我们处理的问题是：</p><p>我们使用数位 DP 来统计对于某个 <code>target</code>（数位和）来说，有多少个 <code>x</code> 满足：</p><ul><li><code>x &lt;= n</code></li><li><code>x</code> 的数位和等于 <code>target</code></li></ul><p>我们定义：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dfs(i, left, limitHigh)</span><br></pre></td></tr></tbody></table></figure><ul><li><code>i</code>：当前正在填第几位（从左往右）</li><li><code>left</code>：还需要填的数位和</li><li><code>limitHigh</code>：是否受限于原数字 <code>s</code> 的上界（true 代表必须 ≤ n 对应位）</li></ul><p>为什么处理 target=10 和 target=12 时，<strong>某些子状态（比如 <code>dfs(1, 3)</code>) 是可以共用的</strong>。</p><p>我们从：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dfs(<span class="number">0</span>, <span class="number">10</span>, <span class="literal">true</span>)</span><br></pre></td></tr></tbody></table></figure><p>开始递归。第一位最多填 <code>9</code>，我们可以枚举 <code>d=0</code> 到 <code>9</code>：</p><ul><li><p>当我们填第一位是 <code>7</code>，就剩下 <code>10 - 7 = 3</code> 要在第二位填完 → 会递归：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dfs(<span class="number">1</span>, <span class="number">3</span>, <span class="literal">false</span>) <span class="comment">// 不受限了</span></span><br></pre></td></tr></tbody></table></figure></li></ul><p>类似地：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dfs(<span class="number">0</span>, <span class="number">12</span>, <span class="literal">true</span>)</span><br></pre></td></tr></tbody></table></figure><p>枚举第一位是 <code>9</code> 时，还剩下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">12</span> - <span class="number">9</span> = <span class="number">3</span></span><br></pre></td></tr></tbody></table></figure><p>所以会递归到：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dfs(<span class="number">1</span>, <span class="number">3</span>, <span class="literal">false</span>) <span class="comment">// again!</span></span><br></pre></td></tr></tbody></table></figure><p>无论是从 <code>target=10</code> 还是 <code>target=12</code> 出发，它们都可能在中间产生：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dfs(<span class="number">1</span>, <span class="number">3</span>, <span class="literal">false</span>)</span><br></pre></td></tr></tbody></table></figure><blockquote><p>因为这个状态只和「当前是第1位」+「还需要填3的和」+「不受限」有关</p></blockquote><p>如果换成：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dfs(i, curSum)</span><br></pre></td></tr></tbody></table></figure><p>那 target = 10 和 target = 12 的时候，它们的起点不同：</p><ul><li>dfs(0, 0, 10)</li><li>dfs(0, 0, 12)</li></ul><p>在后续过程中你会分别得到 dfs(1, 3, 10) 和 dfs(1, 3, 12)</p><p>虽然当前和是 <code>3</code>，但是目标不一样，<strong>无法共用状态</strong>。</p><p>因为 <code>dfs(1, 3)</code> 的含义是：</p><blockquote><p>“从i = 1位（第二位）开始，构造所有数位和为3的合法组合”。</p></blockquote><p>这和前面选的是哪个 <code>target</code> 无关，它只关心 <strong>当前位置</strong> 和 <strong>还剩下多少和要凑</strong>。</p>]]></content>
    
    
    <summary type="html">记录数位dp的相关习题</summary>
    
    
    
    <category term="Algorithms" scheme="http://ruobingw.com/categories/Algorithms/"/>
    
    
    <category term="动态规划" scheme="http://ruobingw.com/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    <category term="dp" scheme="http://ruobingw.com/tags/dp/"/>
    
    <category term="数位dp" scheme="http://ruobingw.com/tags/%E6%95%B0%E4%BD%8Ddp/"/>
    
  </entry>
  
  <entry>
    <title>DDIA</title>
    <link href="http://ruobingw.com/posts/DDIA/"/>
    <id>http://ruobingw.com/posts/DDIA/</id>
    <published>2025-03-30T04:47:16.000Z</published>
    <updated>2025-04-23T03:04:56.141Z</updated>
    
    <content type="html"><![CDATA[<h1 id="可靠，可扩展，可维护"><a href="#可靠，可扩展，可维护" class="headerlink" title="可靠，可扩展，可维护"></a>可靠，可扩展，可维护</h1>]]></content>
    
    
    <summary type="html">学习系统设计 - 数据密集型程序设计</summary>
    
    
    
    <category term="Interview" scheme="http://ruobingw.com/categories/Interview/"/>
    
    <category term="System-Design" scheme="http://ruobingw.com/categories/Interview/System-Design/"/>
    
    
    <category term="Designing Data-Intensive Applications" scheme="http://ruobingw.com/tags/Designing-Data-Intensive-Applications/"/>
    
  </entry>
  
  <entry>
    <title>滑动窗口</title>
    <link href="http://ruobingw.com/posts/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/"/>
    <id>http://ruobingw.com/posts/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/</id>
    <published>2024-10-07T01:35:40.000Z</published>
    <updated>2024-11-11T07:42:53.770Z</updated>
    
    <content type="html"><![CDATA[<div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>根据题单 <a href="https://huxulm.github.io/lc-rating/list/sw">滑动窗口 - 0x3F</a> 来归类总结 关于滑动窗口类的问题</p></div><h1 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h1><p>定长滑动窗口</p><h1 id="定长滑动窗口"><a href="#定长滑动窗口" class="headerlink" title="定长滑动窗口"></a><strong>定长滑动窗口</strong></h1><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p><a href="https://leetcode.cn/problems/maximum-number-of-vowels-in-a-substring-of-given-length/">1456. 定长子串中元音的最大数目</a></p><p><a href="https://leetcode.cn/problems/number-of-sub-arrays-of-size-k-and-average-greater-than-or-equal-to-threshold/">1343. 大小为 K 且平均值大于等于阈值的子数组数目</a></p><p><a href="https://leetcode.cn/problems/maximum-average-subarray-i/">643. 子数组最大平均数 I</a></p><h2 id="题解和思路"><a href="#题解和思路" class="headerlink" title="题解和思路"></a>题解和思路</h2><p>定长滑窗的思路可以分成三步：</p><ol><li>进窗口  2. 更新答案  3.出窗口。</li></ol><p>例题：</p><p><a href="https://leetcode.cn/problems/maximum-number-of-vowels-in-a-substring-of-given-length/">1456. 定长子串中元音的最大数目</a></p><p>入：下标为 i 的元素进入窗口，更新相关统计量。如果 i&lt;k−1 则重复第一步。<br>更新：更新答案。一般是更新最大值/最小值。<br>出：下标为 i−k+1 的元素离开窗口，更新相关统计量。</p><p>需要特别注意的是，这个思路是在循环中保证了长度为K的窗口，进和出在一起发生，因此更新答案在进和出的中间。</p><p>思路很简单，当不满足长度时持续进入窗口，满足长度的 <strong>时刻</strong> 来记录和更新答案，然后（对于下一轮循环会多出的项）移除</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxVowels</span><span class="params">(String s, <span class="type">int</span> k)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line">        Set&lt;Character&gt; vowelSet = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        vowelSet.add(<span class="string">'a'</span>);</span><br><span class="line">        vowelSet.add(<span class="string">'e'</span>);</span><br><span class="line">        vowelSet.add(<span class="string">'i'</span>);</span><br><span class="line">        vowelSet.add(<span class="string">'o'</span>);</span><br><span class="line">        vowelSet.add(<span class="string">'u'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ret</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">char</span>[] stochar = s.toCharArray();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) {</span><br><span class="line">            <span class="type">char</span> <span class="variable">inChar</span> <span class="operator">=</span> stochar[i];</span><br><span class="line">            <span class="keyword">if</span> (vowelSet.contains(inChar)) {</span><br><span class="line">                count++;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (i &lt; k - <span class="number">1</span>) {</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            ret = Math.max(count, ret);</span><br><span class="line"></span><br><span class="line">            <span class="type">char</span> <span class="variable">outChar</span> <span class="operator">=</span> stochar[i - k + <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (vowelSet.contains(outChar)) {</span><br><span class="line">                count--;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>（也可以使用left, right）或者先处理窗口再移动</p><p><a href="https://leetcode.cn/problems/number-of-sub-arrays-of-size-k-and-average-greater-than-or-equal-to-threshold/">1343. 大小为 K 且平均值大于等于阈值的子数组数目</a></p><p>同样的思路</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numOfSubarrays</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> k, <span class="type">int</span> threshold)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> arr.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">            sum += arr[i];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (i &lt; k - <span class="number">1</span>) {</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (sum / k &gt;= threshold) {</span><br><span class="line">                count++;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            sum -= arr[i - k + <span class="number">1</span>];</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><a href="https://leetcode.cn/problems/maximum-average-subarray-i/">643. 子数组最大平均数 I</a></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">findMaxAverage</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">double</span> <span class="variable">avg</span> <span class="operator">=</span> -<span class="number">10e4</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> nums[i];</span><br><span class="line">            sum += num;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (i &lt; k - <span class="number">1</span>) {</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            avg = Math.max(avg, (<span class="type">double</span>) sum / k);</span><br><span class="line"></span><br><span class="line">            sum -= nums[i - k + <span class="number">1</span>];</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> avg;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>不定长总结：</p><p>首先滑动窗口在于一个「单调性」，移动某一个指针（一般为右指针）能够使值单调增加/减少，移动另一个指针（一般为左指针）能够使得值单调减少/增加</p><h1 id="越长越合法"><a href="#越长越合法" class="headerlink" title="越长越合法"></a>越长越合法</h1><p>一般要写 <code>ans += left</code></p><p>滑动窗口的内层循环结束时，右端点固定在 right，左端点在 <code>0, 1, 2, ... , left−1</code> 的所有子数组（子串）都是合法的，这一共有 left 个</p><p>「关键」在于如何reuse结果，是一个视角的问题通过 <a href="https://leetcode.cn/problems/number-of-substrings-containing-all-three-characters/">1358. 包含所有三种字符的子字符串数目</a> 来进行分析</p><h2 id="例题-1"><a href="#例题-1" class="headerlink" title="例题"></a>例题</h2><p><a href="https://leetcode.cn/problems/number-of-substrings-containing-all-three-characters/">1358. 包含所有三种字符的子字符串数目</a></p><p><a href="https://leetcode.cn/problems/count-subarrays-where-max-element-appears-at-least-k-times/">2962. 统计最大元素出现至少 K 次的子数组</a></p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p><a href="https://leetcode.cn/problems/number-of-substrings-containing-all-three-characters/">1358. 包含所有三种字符的子字符串数目</a></p><p>比如此题存在两种视角：</p><p><code>numberOfSubstringsMethod1</code> 方法中是以<code>left</code>为开头，所有从<code>right</code>开始的到<code>n</code>的子串都合法：</p><p><code>[left, right]</code>  <code>[left, right + 1]</code> <code>[left, right + 2]</code> … <code>[left, n - 1]</code> 所以有 <code>n - right</code> 个</p><p>所以在每一次<code>inner while loop</code>中，<code>left</code>每移动一次就需要更新答案。</p><p>而</p><p><code>numberOfSubstringsMethod2</code> 方法则是以<code>right</code>为结尾，所有 左端点为0到left - 1 的字符串都满足条件:</p><p><code>[0, right]</code>  <code>[1, right]</code> <code>[2, right]</code> … <code>[left - 1, right]</code> 所以有 <code>left</code> 个</p><p>所以在每一次<code>inner while loop</code>「结束后」再更新答案</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numberOfSubstrings</span><span class="params">(String s)</span> {</span><br><span class="line">        <span class="keyword">return</span> numberOfSubstringsMethod2(s);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">numberOfSubstringsMethod1</span><span class="params">(String s)</span> {</span><br><span class="line">        <span class="type">char</span>[] sChar = s.toCharArray();</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span>[] hs = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];</span><br><span class="line">        <span class="keyword">while</span> (right &lt; n) {</span><br><span class="line">            hs[sChar[right] - <span class="string">'a'</span>]++;</span><br><span class="line">            <span class="keyword">while</span> (hs[<span class="number">0</span>] &gt;= <span class="number">1</span> &amp;&amp; hs[<span class="number">1</span>] &gt;= <span class="number">1</span> &amp;&amp; hs[<span class="number">2</span>] &gt;= <span class="number">1</span>) {</span><br><span class="line">                count += n - right; <span class="comment">// 意思是 以 left 为开头的， right以及right到n的所有子串都符合条件</span></span><br><span class="line">                <span class="type">char</span> <span class="variable">leftChar</span> <span class="operator">=</span> sChar[left];</span><br><span class="line">                hs[leftChar - <span class="string">'a'</span>]--;</span><br><span class="line">                left++;</span><br><span class="line">            }</span><br><span class="line">            right++;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">numberOfSubstringsMethod2</span><span class="params">(String s)</span> {</span><br><span class="line">        <span class="type">char</span>[] sChar = s.toCharArray();</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span>[] hs = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];</span><br><span class="line">        <span class="keyword">while</span> (right &lt; n) {</span><br><span class="line">            hs[sChar[right] - <span class="string">'a'</span>]++;</span><br><span class="line">            <span class="keyword">while</span> (hs[<span class="number">0</span>] &gt;= <span class="number">1</span> &amp;&amp; hs[<span class="number">1</span>] &gt;= <span class="number">1</span> &amp;&amp; hs[<span class="number">2</span>] &gt;= <span class="number">1</span>) {</span><br><span class="line">                <span class="type">char</span> <span class="variable">leftChar</span> <span class="operator">=</span> sChar[left];</span><br><span class="line">                hs[leftChar - <span class="string">'a'</span>]--;</span><br><span class="line">                left++;</span><br><span class="line">            }</span><br><span class="line">            count += left; <span class="comment">// 意思是 以 right 为结尾的， 左端点为0到left - 1 的字符串都满足条件。（所以是left个）因为left从inner while 出来的时候是第一个不满足条件的。</span></span><br><span class="line">            right++;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><a href="https://leetcode.cn/problems/count-subarrays-where-max-element-appears-at-least-k-times/">2962. 统计最大元素出现至少 K 次的子数组</a></p><p>同理：可以直接秒杀这道题</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">countSubarrays</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> Arrays.stream(nums).max().getAsInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">long</span> <span class="variable">ret</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (right &lt; n) {</span><br><span class="line">            <span class="keyword">if</span> (nums[right] == max) {</span><br><span class="line">                count++;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">while</span> (count &gt;= k) {</span><br><span class="line">                ret += n - right;</span><br><span class="line">                <span class="keyword">if</span> (nums[left] == max) count--;</span><br><span class="line">                left++;</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">// ret += left;</span></span><br><span class="line">            right++;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="越短越合法"><a href="#越短越合法" class="headerlink" title="越短越合法"></a>越短越合法</h1><p>关键在于如何理解 「增量」 </p><p>首先我们看看窗口内的子数组怎么“数”的问题，比如数组[1,2,3,4]，当前窗口[1,2,3]。</p><p>我们全量数一次窗口内的子数组: [1], [1,2], [1,2,3], [2], [2,3], [3], 一共6个，当right右移后，窗口变成[1,2,3,4]，这时如果我们再进行“全量数”，上一个窗口[1,2,3]就被重复计算了。</p><p>为了消除这种重复，我们需要使用“增量数”，从右向左看，right右移后，窗口新增一个元素，会新增哪些子数组？ 例如[1,2,3] -&gt; [1,2,3,4] 窗口内新增一个元素4时，新增的子数组肯定要包含4，以4为右端点，新增的子数组是[4],[3,4],[2,3,4],[1,2,3,4]， 一共4个，这个增量就是窗口大小right-left+1。</p><p>那么为什么是 right - left + 1</p><p>当窗口右端 <code>right</code> 向右移动一位时，窗口内新增了一个元素。为了计算由于这个新增元素所带来的新增子数组数量，我们需要考虑以新元素为右端点的所有子数组。</p><p>具体来说，所有以位置 <code>right</code> 为右端点、左端点从 <code>left</code> 到 <code>right</code> 之间的子数组，都是新增的。这些子数组形式如下：</p><ul><li>从位置 <code>left</code> 到 <code>right</code> 的子数组 <code>[A[left], A[left+1], ..., A[right]]</code></li><li>从位置 <code>left+1</code> 到 <code>right</code> 的子数组 <code>[A[left+1], ..., A[right]]</code></li><li>…</li><li>从位置 <code>right</code> 到 <code>right</code> 的子数组 <code>[A[right]]</code></li></ul><p>总共有 <code>right - left + 1</code> 个子数组。这是因为左端点可以取从 <code>left</code> 到 <code>right</code> 的任意位置，共计 <code>right - left + 1</code> 个可能。</p><p>因此，<code>right - left + 1</code> 表示了新增的子数组数量，即以新元素为右端点的所有可能子数组的数量。这些子数组在之前的窗口中并不存在，所以不会造成重复计数。</p><h2 id="例题-2"><a href="#例题-2" class="headerlink" title="例题"></a>例题</h2><p><a href="https://leetcode.cn/problems/subarray-product-less-than-k/">713. 乘积小于 K 的子数组</a></p><h2 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h2><p><a href="https://leetcode.cn/problems/subarray-product-less-than-k/">713. 乘积小于 K 的子数组</a></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numSubarrayProductLessThanK</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mult</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (k &lt;= <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (right &lt; n) {</span><br><span class="line">            mult *= nums[right];</span><br><span class="line">            <span class="keyword">while</span> (mult &gt;= k) {</span><br><span class="line">                mult /= nums[left];</span><br><span class="line">                left++;</span><br><span class="line">            }</span><br><span class="line">            count += right - left + <span class="number">1</span>;</span><br><span class="line">            right++;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <summary type="html">滑动窗口相关问题和思路</summary>
    
    
    
    <category term="Algorithms" scheme="http://ruobingw.com/categories/Algorithms/"/>
    
    
    <category term="Sliding Window" scheme="http://ruobingw.com/tags/Sliding-Window/"/>
    
    <category term="滑动窗口" scheme="http://ruobingw.com/tags/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/"/>
    
  </entry>
  
  <entry>
    <title>闫氏DP分析法</title>
    <link href="http://ruobingw.com/posts/%E9%97%AB%E6%B0%8FDP%E5%88%86%E6%9E%90%E6%B3%95/"/>
    <id>http://ruobingw.com/posts/%E9%97%AB%E6%B0%8FDP%E5%88%86%E6%9E%90%E6%B3%95/</id>
    <published>2024-04-17T03:08:11.000Z</published>
    <updated>2024-05-15T04:17:52.592Z</updated>
    
    <content type="html"><![CDATA[<h1 id="思考方式"><a href="#思考方式" class="headerlink" title="思考方式"></a>思考方式</h1><p>拿到问题 可以分成 <code>状态表示</code> + <code>状态计算</code></p><p>计算复杂度： 状态数量（多少个状态） X 状态转移方程计算量</p><p><strong>状态表示：</strong></p><p>状态表示 f(i,j) -&gt; 集合 和 属性</p><p>集合指的是 f(i,j) 定义条件下的一种类型集合</p><p>属性一般有三种 Max, Min, 方案数</p><p><img src="/posts/%E9%97%AB%E6%B0%8FDP%E5%88%86%E6%9E%90%E6%B3%95/dp_0.png" alt="dp_0"></p><p>举个例子对于 01 背包问题来说</p><p>「f(i,j) 就指 对于前 i 个物品（条件一），满足容量小于等于j的（条件二）取法集合」<code>集合</code> 「集合中价值最大」(<code>属性：Max</code>)</p><p><strong>状态计算</strong>:</p><p>状态怎么被计算出也就是集合是如何划分的，比如当前集合如何划分为若干个更小的子集，子集可以被前面更小的算出来，子集划分一般遵循<strong>不重不漏</strong>，但是比如如果求最大值最小值，那么就可以重复，但是求方案书就不能够重复</p><p>对于01背包问题来说，集合可以被划分为包含i，或者不包含i</p><h1 id="背包问题"><a href="#背包问题" class="headerlink" title="背包问题"></a>背包问题</h1><p>背包问题都是说在</p><p>N 个物品，每个物品体积Vi, 价值 Wi</p><p>容积为 V 的背包</p><p>目标是让选择的物品总价值<strong>最大</strong>求<strong>最大值</strong></p><p><strong>01 背包：</strong>每个物品「<strong>至多</strong>」选择一次</p><p><strong>完全背包：</strong>每个物品<strong>「无数」</strong>次选择</p><p><strong>多重背包：</strong>每个物品有 <strong>「Xi」</strong> 个</p><p><strong>分组背包：</strong>有<strong>N</strong>组，每个组有若干个物品，每组只能选<strong>1</strong>个</p><h2 id="01背包"><a href="#01背包" class="headerlink" title="01背包"></a>01背包</h2><p><img src="/posts/%E9%97%AB%E6%B0%8FDP%E5%88%86%E6%9E%90%E6%B3%95/01_0.png" alt="01_0"></p><h3 id="一维优化："><a href="#一维优化：" class="headerlink" title="一维优化："></a>一维优化：</h3><p>能一维优化的原因在于我们当前结果只和i - 1有关，所以在刚要更新的时候当前数组中的值就已经是上一次的值所以无需二维</p><p>但是主要讨论下为什么需要倒序，j为什么从m倒退到v[i]</p><blockquote><p><a href="https://blog.csdn.net/qq_52416556/article/details/124486448?spm=1001.2014.3001.5501">CSDN blog</a></p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) {</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> m; j &gt;= v[i]; j--) {</span><br><span class="line">        f[j] = max(f[j], f[j - v[i]] + w[i]);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>假设有3件物品，背包的总体积为10<br>物品       体积      价值<br>i = 1         4           5<br>i = 2         5           6<br>i = 3         6           7<br>如果 <code>f[0][j]</code> 总共0件物品，所以最大价值为 0， 即 <code>f[0][j] == 0 </code>也是成立的<br>如果 j 层循环是递增的： </p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) { </span><br><span class="line">   <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> v[i]; j &lt;= m; j++) {</span><br><span class="line">        f[j] = max(f[j], f[j - v[i]] + w[i]);</span><br><span class="line">   }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>当还未进入循环时(初始状态):<br>f[0] = 0;  f[1] = 0;  f[2] = 0;  f[3] = 0;  f[4] = 0;<br>f[5] = 0;  f[6] = 0;  f[7] = 0;  f[8] = 0;  f[9] = 0; f[10] = 0;<br>当进入循环 i == 1 时：<br>f[4] = max(f[4], f[0] + 5); 即max(0, 5) = 5; 即f[4] = 5;<br>f[5] = max(f[5], f[1] + 5); 即max(0, 5) = 5; 即f[5] = 5;<br>f[6] = max(f[6], f[2] + 5); 即max(0, 5) = 5; 即f[6] = 5;<br>f[7] = max(f[7], f[3] + 5); 即max(0, 5) = 5; 即f[7] = 5;</p><p>重点来了！！！<br>f[8] = max(f[8], f[4] + 5); 即max(0, 5 + 5) = 10; 即f[8] = 10;<br>这里就已经出错了</p><p>因为此时处于 i == 1 这一层，<strong>即物品只有一件，不存在单件物品满足价值为10</strong><br>所以已经出错了。这也是为什么<strong>完全背包可以正序，因为它的物品个数是无限</strong></p><p>这里是因为在f[8]时候会再一次选用f[4]的结果而f[4]已经用过了不能再用了，（01背包定义）</p><p>所以需要从m开始到v[i]以防之前的数被计算过从而导致后面的结果被污染</p><h2 id="完全背包"><a href="#完全背包" class="headerlink" title="完全背包"></a>完全背包</h2><p><img src="/posts/%E9%97%AB%E6%B0%8FDP%E5%88%86%E6%9E%90%E6%B3%95/wanquan_0.png" alt="wanquan_0"></p><p>状态优化：<br><img src="/posts/%E9%97%AB%E6%B0%8FDP%E5%88%86%E6%9E%90%E6%B3%95/wanquan_1.png" alt="wanquan_1"></p><h2 id="多重背包"><a href="#多重背包" class="headerlink" title="多重背包"></a>多重背包</h2><p><img src="/posts/%E9%97%AB%E6%B0%8FDP%E5%88%86%E6%9E%90%E6%B3%95/duochong_0.png" alt="duochong_0"></p><h4 id="二进制优化"><a href="#二进制优化" class="headerlink" title="二进制优化"></a>二进制优化</h4><p>（确实不是很懂，主要是为什么分组之后变成选和不选的合理性在哪里？需要做题手推一下）</p><h2 id="分组背包"><a href="#分组背包" class="headerlink" title="分组背包"></a>分组背包</h2><p><img src="/posts/%E9%97%AB%E6%B0%8FDP%E5%88%86%E6%9E%90%E6%B3%95/fenzu_0.png" alt="fenzu_0"></p><h1 id="线性dp"><a href="#线性dp" class="headerlink" title="线性dp"></a>线性dp</h1><p>线性dp一般指递推的顺序是线性的，比如从左到右。但是定义不重要</p><h2 id="Acwing-889-数字三角形"><a href="#Acwing-889-数字三角形" class="headerlink" title="Acwing - 889 - 数字三角形"></a><a href="https://www.acwing.com/problem/content/900/">Acwing - 889 - 数字三角形</a></h2><blockquote><p>注：图中状态计算有误应该是左上和右上</p></blockquote><p><img src="/posts/%E9%97%AB%E6%B0%8FDP%E5%88%86%E6%9E%90%E6%B3%95/shuzisanjiao0.png" alt="shuzisanjiao0"></p><h2 id="最长上升子序列"><a href="#最长上升子序列" class="headerlink" title="最长上升子序列"></a><a href="https://www.acwing.com/problem/content/897/">最长上升子序列</a></h2><p>这里的状态计算中指的是当前数的上一个数，比如当前数如果是idx = i 那么上一个是可以是 0(当前数是第一个数，前面一个数不存在), a0, a1, a2, … ai - 1</p><p>需要满足 ai - 1 &lt; ai</p><p>所以转移方程就是</p><p>ai = Max(f[j] + 1), aj &lt; ai, j = 0 … i - 1</p><p><img src="/posts/%E9%97%AB%E6%B0%8FDP%E5%88%86%E6%9E%90%E6%B3%95/shangshengzixulie_0.png" alt="shangshengzixulie_0"></p><h2 id="最长公共子序列"><a href="#最长公共子序列" class="headerlink" title="最长公共子序列"></a>最长公共子序列</h2><p><img src="/posts/%E9%97%AB%E6%B0%8FDP%E5%88%86%E6%9E%90%E6%B3%95/gonggongzixulie_0.png" alt="gonggongzixulie_0"></p><h2 id="编辑距离"><a href="#编辑距离" class="headerlink" title="编辑距离"></a>编辑距离</h2><h1 id="区间DP"><a href="#区间DP" class="headerlink" title="区间DP"></a>区间DP</h1><p>指的是在定义状态时定义了一个区间即状态表示指的是一个区间</p><h2 id="石子合并"><a href="#石子合并" class="headerlink" title="石子合并"></a>石子合并</h2><p>这里状态是指分割点，因为最后一次一定是<code>将两堆合并成一堆</code>所以<code>f[i, j]</code>就可以由，左边1，2，3，…，k-2，k-1个 右边 k- 1, k-2, k-3，…， 2，1个两堆组成</p><p><img src="/posts/%E9%97%AB%E6%B0%8FDP%E5%88%86%E6%9E%90%E6%B3%95/shizihebing_0.png" alt="shizihebing_0"></p><p>假设最后一步合并剩下：</p><p>左边 [i, k] 右边 [k + 1, j] 两堆</p><p>那么这时候的最小代价 Min 属性就是</p><p>组成左边一堆石子i, k的合并方式的最小代价 - Min(f[i, k]) </p><p>组成右边边一堆石子i, k的合并方式的最小代价 - Min(f[k + 1, j])</p><p>组成当前堆 [i, j] 堆石子的代价 - 区间[i, j]的代价 （可以使用前缀和公式得出前缀和s[j] - s[i - 1]从而快速获取其代价）</p><p>综上：f[i, j] = Min(f[i, k] + f[k + 1, j] + s[j] - s[i - 1]) where k = i ~ j - 1因为这里我们需要保留右边有至少一堆</p><blockquote><p>注：区间dp问题需要注意状态的顺序，看代码之后的总结：</p></blockquote><p>所有的区间dp问题枚举时，第一维通常是枚举区间长度，并且一般 len = 1 时用来初始化，枚举从 len = 2 开始；第二维枚举起点 i （右端点 j 自动获得，j = i + len - 1）</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">1</span>; len &lt;= n; len++) {         <span class="comment">// 区间长度</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i + len - <span class="number">1</span> &lt;= n; i++) { <span class="comment">// 枚举起点</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + len - <span class="number">1</span>;                 <span class="comment">// 区间终点</span></span><br><span class="line">        <span class="keyword">if</span> (len == <span class="number">1</span>) {</span><br><span class="line">            dp[i][j] = 初始值</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> i; k &lt; j; k++) {        <span class="comment">// 枚举分割点，构造状态转移方程</span></span><br><span class="line">            dp[i][j] = min(dp[i][j], dp[i][k] + dp[k + <span class="number">1</span>][j] + w[i][j]);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <summary type="html">记录动态规划的相关习题</summary>
    
    
    
    <category term="Algorithms" scheme="http://ruobingw.com/categories/Algorithms/"/>
    
    
    <category term="动态规划" scheme="http://ruobingw.com/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    <category term="dp" scheme="http://ruobingw.com/tags/dp/"/>
    
  </entry>
  
  <entry>
    <title>Math</title>
    <link href="http://ruobingw.com/posts/Math/"/>
    <id>http://ruobingw.com/posts/Math/</id>
    <published>2024-03-10T06:16:26.000Z</published>
    <updated>2024-11-25T06:59:31.466Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><p><a href="https://leetcode.cn/problems/find-the-minimum-possible-sum-of-a-beautiful-array/">2834. 找出美丽数组的最小和</a> - 等差数列</p><p><a href="https://leetcode.cn/problems/count-primes/">204. 计数质数</a> - 埃氏筛</p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p><a href="https://leetcode.cn/problems/find-the-minimum-possible-sum-of-a-beautiful-array/">2834. 找出美丽数组的最小和</a></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MOD</span> <span class="operator">=</span> (<span class="type">int</span>)<span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minimumPossibleSum</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> target)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> target / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= m) {</span><br><span class="line">            <span class="keyword">return</span> (<span class="type">int</span>)(((<span class="type">long</span>)<span class="number">1</span> + n) * n / <span class="number">2</span> % MOD);</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="type">long</span> <span class="variable">firstPart</span> <span class="operator">=</span> (((<span class="type">long</span>)(<span class="number">1</span> + m) * m) / <span class="number">2</span> % MOD);</span><br><span class="line">            <span class="type">long</span> <span class="variable">secondPart</span> <span class="operator">=</span> (((((<span class="type">long</span>) target + target + (n - m) - <span class="number">1</span>) * (n - m)) / <span class="number">2</span>) % MOD);</span><br><span class="line">            <span class="comment">// System.out.println(firstPart + " " + secondPart);</span></span><br><span class="line">            <span class="keyword">return</span> (<span class="type">int</span>)((<span class="type">long</span>)(firstPart + secondPart) % MOD);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>Quote:  <a href="https://leetcode.cn/problems/find-the-minimum-possible-sum-of-a-beautiful-array/">lc-2834</a></p></blockquote><p>复习一下等差数列的求和公式：一个等差数列的和，等于其首项与末项的和，乘以项数除以2。所以从 1 一直加到 n 的和就是 <code>(n + 1) * n / 2</code>。</p><p>题目的基本思想是，如果 target = 7, n = 3，那么最优解就是取从 1 到 <code>7 // 2 = 3</code>：<code>[1, 2, 3]</code>，这样的和最小，所以就是取从 1 到 n 的 n 个数，和为 <code>(n + 1) * n / 2</code>。</p><p>但也有复杂情况，那就是如果 <code>n &gt; target // 2</code>，例如 target = 7, n = 6，那么这时 <code>[1, 2, 3]</code> 后面如果继续添加元素 <code>4</code>，就会出现 <code>3 + 4 = 7</code>，违反了元素和不能等于 target 的要求，所以下一个元素只能从 <code>target = 7</code> 开始取，才能确保元素和不为 target。也就是需要在 target 起取 <code>n - target//2</code> 个数，最后的数组为 <code>[1 .. target//2] + [target .. target//2 + n]</code>，直接计算和即可。</p><p><a href="https://leetcode.cn/problems/count-primes/">204. 计数质数</a></p><p>埃氏筛（Sieve of Eratosthenes）的技巧在于标记数组中不是 Prime 的数。</p><p>思路大概是：</p><blockquote><p>作者：Sweetiee 🍬<br>链接：<a href="https://leetcode.cn/problems/count-primes/solutions/507445/kuai-lai-miao-dong-shai-zhi-shu-by-sweetiee/">https://leetcode.cn/problems/count-primes/solutions/507445/kuai-lai-miao-dong-shai-zhi-shu-by-sweetiee/</a><br>来源：力扣（LeetCode）</p></blockquote><ol><li>初始化长度 O(n) 的标记数组，表示这个数组是否为质数。数组初始化所有的数都是质数.</li><li>从 2 开始将当前数字的倍数全都标记为合数。标记到 sqrt(n)  时停止即可。具体可以看来自维基百科的动画：</li></ol><p><img src="/posts/Math/find_prime.gif" alt="find_prime"></p><p>这里有两个难点：</p><ol><li>第一个是为什么 从 i 开始 到 sqrt(n) 结束</li><li>另一个是在标记Prime的时候为什么是从 i * i 开始</li></ol><p><strong>为什么 从 i 开始 到 sqrt(n) 结束</strong></p><p>比如 n = 36</p><p>可以分为下面几对：</p><p>(1, 36)，(2, 18)， (3, 12)， (4, 9)， (6, 6)</p><p>在筛到 sqrt(36)时，</p><p>2 会去标记 4 6 8 … 36</p><p>3 会去标记 9 12 … </p><p>所有大于6的因数都会在小的因数标记时被标记因此不需要额外检查</p><p><strong>为什么从 i * i 开始标记？</strong></p><p>假设当前我们正在处理一个质数 x，那么它的倍数是 x,2x,3x,…</p><ul><li>这是因为，所有例如 2x, 3x, 在处理比 x 小的质数时已经被标记为合数了。</li><li>举个例子，当你处理 2 的倍数时，已经标记了2, 4, 6, 8 当你处理 3 时，就不需要标记这些数了（比如6）</li></ul><p>代码：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countPrimes</span><span class="params">(<span class="type">int</span> n)</span> {</span><br><span class="line">        <span class="comment">// 埃氏筛</span></span><br><span class="line">        <span class="type">boolean</span>[] isPrime = <span class="keyword">new</span> <span class="title class_">boolean</span>[n];</span><br><span class="line">        Arrays.fill(isPrime, <span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt; Math.sqrt(n); i++) {</span><br><span class="line">            <span class="keyword">if</span> (isPrime[i]) {</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i * i; j &lt; n; j += i) {</span><br><span class="line">                    isPrime[j] = <span class="literal">false</span>;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">cnt</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt; n; i++) {</span><br><span class="line">            <span class="keyword">if</span> (isPrime[i]) cnt++;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <summary type="html">收集一些数学技巧</summary>
    
    
    
    <category term="Algorithms" scheme="http://ruobingw.com/categories/Algorithms/"/>
    
    
    <category term="Math" scheme="http://ruobingw.com/tags/Math/"/>
    
  </entry>
  
  <entry>
    <title>Blind-Sheet</title>
    <link href="http://ruobingw.com/posts/Blind-Sheet/"/>
    <id>http://ruobingw.com/posts/Blind-Sheet/</id>
    <published>2024-03-05T04:49:31.000Z</published>
    <updated>2024-05-15T04:17:52.549Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>❓ -&gt; 虽然做出了但有更妙的解法</p></blockquote><h1 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h1><p><a href="https://leetcode.cn/problems/insert-interval/">57. 插入区间</a> [❌]</p><p>这道题主要是两个考点</p><ol><li><p>分类讨论：</p><p>设newInterval 为 [L,R]</p><p>Intervals[i] 为 [cL, cR]</p><p>完全不重叠的情况：</p><p>cR &lt; L 即 intervals[i] 在 [L,R]<code>左方</code></p><p>R &lt; cL 即 intervals[i] 在 [L,R]<code>右方</code></p><p>那么其他的情况即为可能出现重叠的情况</p></li><li><p>什么时候加入答案</p><p>如果每次更新都加入答案就会重复加入，因此我们只需要在碰到不重叠的时候加入一次即可。</p><p>由于按照左端点排序，因此第一个不重叠的位置就是R &lt; cL </p></li><li><p>最后对于空数组的处理我们可以用一个flag，如果更新过的答案之前加入过，那么就可以跳过。如果没有加入过说明是第一次加入，那么就加入答案数组，避免数组为空</p></li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[][] insert(<span class="type">int</span>[][] intervals, <span class="type">int</span>[] newInterval) {</span><br><span class="line">        <span class="type">int</span> <span class="variable">cur</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> intervals.length;</span><br><span class="line">        List&lt;<span class="type">int</span>[]&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">newLeft</span> <span class="operator">=</span> newInterval[<span class="number">0</span>], newRight = newInterval[<span class="number">1</span>];</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">insearted</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (; cur &lt; length; cur++) {</span><br><span class="line">            <span class="type">int</span> <span class="variable">curLeft</span> <span class="operator">=</span> intervals[cur][<span class="number">0</span>], curRight = intervals[cur][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (curLeft &gt; newRight) {</span><br><span class="line">                <span class="keyword">if</span> (!insearted) {</span><br><span class="line">                    res.add(<span class="keyword">new</span> <span class="title class_">int</span>[] {newLeft, newRight});</span><br><span class="line">                    insearted = <span class="literal">true</span>;</span><br><span class="line">                }</span><br><span class="line">                res.add(<span class="keyword">new</span> <span class="title class_">int</span>[]{curLeft, curRight});</span><br><span class="line">            } <span class="keyword">else</span> <span class="keyword">if</span> (curRight &lt; newLeft) {</span><br><span class="line">                res.add(<span class="keyword">new</span> <span class="title class_">int</span>[]{curLeft, curRight});</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                newLeft = Math.min(curLeft, newLeft);</span><br><span class="line">                newRight = Math.max(curRight, newRight);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!insearted) {</span><br><span class="line">            res.add(<span class="keyword">new</span> <span class="title class_">int</span>[] {newLeft, newRight});</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[][] ret = <span class="keyword">new</span> <span class="title class_">int</span>[res.size()][<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; res.size(); i++) {</span><br><span class="line">            ret[i] = res.get(i);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><a href="https://leetcode.cn/problems/3sum/">15. 三数之和</a> [✅]</p><p>相向双指针应用题</p><p>本题主要考察两个：</p><ol><li>循环不变量</li><li>两数之和的相向双指针</li></ol><p>（其实挺简单的就是不要迷）</p><p>固定左边，那么中间的和右边的指针就是两数之和问题，然后为了解决重复的数组问题，那么需要在检查到和之前数相同时直接跳过就好了：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">threeSum</span><span class="params">(<span class="type">int</span>[] nums)</span> {</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="comment">// Arrays.stream(nums).forEach(a -&gt; System.out.print(a + " "));</span></span><br><span class="line">        <span class="comment">// System.out.println();</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; ret = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (;i &lt; n - <span class="number">2</span>; ) {</span><br><span class="line">            <span class="keyword">if</span> (i != <span class="number">0</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>]) {</span><br><span class="line">                i++;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> n - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (j &lt; k) {</span><br><span class="line">                <span class="comment">// System.out.println(nums[i] + " " + nums[j] + " " + nums[k]);</span></span><br><span class="line">                <span class="keyword">if</span> (j != i + <span class="number">1</span> &amp;&amp; nums[j] == nums[j - <span class="number">1</span>]) {</span><br><span class="line">                    j++;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">if</span> (nums[i] + nums[j] + nums[k] &lt; <span class="number">0</span>) {</span><br><span class="line">                    j++;</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    <span class="keyword">if</span> (k != n - <span class="number">1</span> &amp;&amp; nums[k] == nums[k + <span class="number">1</span>]) {</span><br><span class="line">                        k--;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    }</span><br><span class="line">                    <span class="keyword">if</span> (nums[i] + nums[j] + nums[k] == <span class="number">0</span>) {</span><br><span class="line">                        List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line">                        list.add(nums[i]);</span><br><span class="line">                        list.add(nums[j]);</span><br><span class="line">                        list.add(nums[k]);</span><br><span class="line">                        ret.add(list);</span><br><span class="line">                    }</span><br><span class="line">                    k--;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            i++;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><a href="https://leetcode.cn/problems/product-of-array-except-self/">238. 除自身以外数组的乘积</a> [✅]</p><p>前缀和思想： 额外空间 O(N) 做法：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] productExceptSelf(<span class="type">int</span>[] nums) {</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span>[] prefixMulti = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="type">int</span>[] suffixMulti = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) {</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">0</span>) {</span><br><span class="line">                prefixMulti[i] = <span class="number">1</span>;</span><br><span class="line">                suffixMulti[n - i - <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            }</span><br><span class="line">            prefixMulti[i] = nums[i - <span class="number">1</span>] * prefixMulti[i - <span class="number">1</span>];</span><br><span class="line">            suffixMulti[n - i - <span class="number">1</span>] = nums[n - i] * suffixMulti[n - i];</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// Arrays.stream(prefixMulti).forEach(a -&gt; System.out.print(a + " "));</span></span><br><span class="line">        <span class="comment">// System.out.println();</span></span><br><span class="line">        <span class="comment">// Arrays.stream(suffixMulti).forEach(a -&gt; System.out.print(a + " "));</span></span><br><span class="line">        <span class="comment">// System.out.println();</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">            res[i] = prefixMulti[i] * suffixMulti[i];</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>为了省去额外的空间，我们可以采取使用res数组作为中间的用于计算前缀积</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] productExceptSelf(<span class="type">int</span>[] nums) {</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        res[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) {</span><br><span class="line">            res[i] = res[i - <span class="number">1</span>] * nums[i - <span class="number">1</span>];</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">suffixCur</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) {</span><br><span class="line">            res[i] *= suffixCur;</span><br><span class="line">            suffixCur *= nums[i];</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><a href="https://leetcode.cn/problems/combination-sum/">39. 组合总和</a> [✅]</p><p>回溯题，这是一个<code>选或不选</code>的问题：</p><p><img src="/posts/Blind-Sheet/39_fig1.png" alt="39_fig1"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    LinkedList&lt;Integer&gt; selected = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span>[] candidates;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combinationSum</span><span class="params">(<span class="type">int</span>[] candidates, <span class="type">int</span> target)</span> {</span><br><span class="line">        <span class="comment">// 暴搜</span></span><br><span class="line">        <span class="built_in">this</span>.candidates = candidates;</span><br><span class="line">        n = candidates.length;</span><br><span class="line">        dfs(<span class="number">0</span>, target);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> curIdx, <span class="type">int</span> target)</span> {</span><br><span class="line">        <span class="keyword">if</span> (curIdx == n || target &lt; <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (target == <span class="number">0</span>) {</span><br><span class="line">            res.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(selected));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> curIdx; i &lt; n; i++) {</span><br><span class="line">            selected.addLast(candidates[i]);</span><br><span class="line">            dfs(i, target - candidates[i]);</span><br><span class="line">            selected.removeLast();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><a href="https://leetcode.cn/problems/merge-intervals/">56. 合并区间</a> [✅]</p><p>和插入区间异曲同工，需要注意边界的处理</p><p>自己的方法：</p><p>对左端点排序，「延迟」（即到下一个不可以合并的区间时候）加入</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[][] merge(<span class="type">int</span>[][] intervals) {</span><br><span class="line">        Arrays.sort(intervals, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;&gt;(){</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(<span class="type">int</span>[] a, <span class="type">int</span>[] b)</span> {</span><br><span class="line">                <span class="keyword">return</span> a[<span class="number">0</span>] - b[<span class="number">0</span>];</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line">        List&lt;<span class="type">int</span>[]&gt; ls = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> intervals.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">pStart</span> <span class="operator">=</span> intervals[<span class="number">0</span>][<span class="number">0</span>], pEnd = intervals[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[][]{{pStart, pEnd}};</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) {</span><br><span class="line">            <span class="type">int</span>[] interval = intervals[i];</span><br><span class="line">            <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> interval[<span class="number">0</span>], end = interval[<span class="number">1</span>];</span><br><span class="line">            <span class="comment">// System.out.println(pStart + " " + pEnd + "; " + start + " " + end);</span></span><br><span class="line">            <span class="keyword">if</span> (pEnd &gt;= start) {</span><br><span class="line">                pStart = Math.min(pStart, start);</span><br><span class="line">                pEnd = Math.max(pEnd, end);</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                ls.add(<span class="keyword">new</span> <span class="title class_">int</span>[]{pStart, pEnd});</span><br><span class="line">                pStart = start;</span><br><span class="line">                pEnd = end;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        ls.add(<span class="keyword">new</span> <span class="title class_">int</span>[]{pStart, pEnd});</span><br><span class="line">        <span class="type">int</span>[][] ret = <span class="keyword">new</span> <span class="title class_">int</span>[ls.size()][<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; ls.size(); i++) {</span><br><span class="line">            ret[i] = ls.get(i);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>方法2:</p><p>用一个list <code>merged</code> 来表示已经处理好的部分，如果碰到不重叠的区间或者merged为空时，直接加入merged即可，其他时候可以查看merged的右端点并且不断更新其右端点</p><p>这个方法更好地利用了排序的性质</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[][] merge(<span class="type">int</span>[][] intervals) {</span><br><span class="line">        Arrays.sort(intervals, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;&gt;(){</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(<span class="type">int</span>[] a, <span class="type">int</span>[] b)</span> {</span><br><span class="line">                <span class="keyword">return</span> a[<span class="number">0</span>] - b[<span class="number">0</span>];</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line">        List&lt;<span class="type">int</span>[]&gt; merged = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> intervals.length;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">            <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> merged.size();</span><br><span class="line">            <span class="keyword">if</span> (size == <span class="number">0</span> || merged.get(size - <span class="number">1</span>)[<span class="number">1</span>] &lt; intervals[i][<span class="number">0</span>]) {</span><br><span class="line">                merged.add(<span class="keyword">new</span> <span class="title class_">int</span>[]{intervals[i][<span class="number">0</span>], intervals[i][<span class="number">1</span>]});</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                merged.get(size - <span class="number">1</span>)[<span class="number">1</span>] = Math.max(merged.get(size - <span class="number">1</span>)[<span class="number">1</span>], intervals[i][<span class="number">1</span>]);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span>[][] ret = <span class="keyword">new</span> <span class="title class_">int</span>[merged.size()][<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; merged.size(); i++) {</span><br><span class="line">            ret[i] = merged.get(i);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><a href="https://leetcode.cn/problems/sort-colors/">75. 颜色分类</a>[❓]</p><p>这是一个考察循环不变量以及荷兰国旗的经典问题</p><ol><li>循环不变：</li></ol><p><a href="https://www.bilibili.com/video/BV1Jg411M7Lp/?spm_id_from=333.337.search-card.all.click&amp;vd_source=54f34024c3784d45de85a3f70808ab70">Bilibili - 循环不变量</a></p><p><img src="/posts/Blind-Sheet/loop_invariant.png" alt="loop_invariant"></p><p><img src="/posts/Blind-Sheet/loop_invariant1.png" alt="loop_invariant1"></p><p><img src="/posts/Blind-Sheet/loop_invariant2.png" alt="loop_invariant2"></p><ol start="2"><li>荷兰国旗</li></ol><p>荷兰国旗的本质是要我们将数分成三段。</p><p>因此除了使用一个变量 <code>cur</code> 代指处理到哪一个 <code>nums[cur]</code> 以外，至少还需要两个变量来代指三段的边界：</p><ul><li>变量 <code>l</code> 为下一个填入 0 的位置（因此范围 [0,l−1] 均为 0，初始化 <code>l=0</code>，代表空集） </li><li>变量 <code>r</code> 为下一个填入 2 的位置（因此范围 [r+1,n−1] 均为 2，初始化 r=n−1，代表空集)</li><li>由于 [0,cur−1] 均为处理过的数值（即 0 和 2 必然都被分到了两端），同时 l−1 又是 0 的右边界，因此 [l,cur−1] 为 1 的区间，而 [cur,r] 为未处理的数值。</li></ul><p>分情况讨论：</p><ol><li>nums[cur]=0：此时将其与位置 l 进行互换（ l 为下一个待填入 0 的位置，同时 [l,cur−1] 为 1 的区间），本质是将nums[cur] 的 0 和 nums[l] 的 1 进行互换，因此互换后将 l 和 cur 进行右移；</li><li>nums[cur]=1：由于[l,cur−1] 本身就是 1 的区间，直接将 cur 进行右移即可；</li><li>nums[cur]=2：此时将其与位置 r 进行互换（r 为下一个待填入 2 的位置，但 [cur,r] 为未处理区间），也就是我们互换后，只能明确换到位置 nums[r] 的位置为 2，可以对 r 进行左移，但不确定新 nums[cur] 为何值，因此保持 cur 不变再入循环判断。</li><li>最后当 cur&gt;r（含义为未处理区间为空集），整个分三段过程结束。</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sortColors</span><span class="params">(<span class="type">int</span>[] nums)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">0</span>, r = n - <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// [0, l - 1] 0</span></span><br><span class="line">        <span class="comment">// [0, cur - 1] 已经处理完</span></span><br><span class="line">        <span class="comment">// [l, cur - 1] 1</span></span><br><span class="line">        <span class="comment">// [cur, r] 待处理</span></span><br><span class="line">        <span class="comment">// [r + 1, n - 1] 2</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">cur</span> <span class="operator">=</span> <span class="number">0</span>; cur &lt;= r;) {</span><br><span class="line">            System.out.println(l + <span class="string">" "</span> + cur + <span class="string">" "</span> + r);</span><br><span class="line">            <span class="keyword">if</span> (nums[cur] == <span class="number">0</span>) {</span><br><span class="line">                swap(nums, l, cur);</span><br><span class="line">                l++;</span><br><span class="line">                cur++;</span><br><span class="line">            } <span class="keyword">else</span> <span class="keyword">if</span> (nums[cur] == <span class="number">1</span>) {</span><br><span class="line">                cur++;</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                swap(nums, cur, r);</span><br><span class="line">                r--;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> i, <span class="type">int</span> j)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> nums[i];</span><br><span class="line">        nums[i] = nums[j];</span><br><span class="line">        nums[j] = temp;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><a href="https://leetcode.cn/problems/container-with-most-water/">11. 盛最多水的容器</a></p><p>双指针应用题：</p><ul><li>主要证明一点，我们应该固定长板，<strong>每一次都移动短板</strong>，因为只有移动短板才有可能会有更大的面积，而这是因为每一次收紧左右端点时候其都会变小。</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxArea</span><span class="params">(<span class="type">int</span>[] height)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> height.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">0</span>, r = n - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> Integer.MIN_VALUE;</span><br><span class="line">        <span class="keyword">while</span> (l &lt; r) {</span><br><span class="line">            <span class="type">int</span> <span class="variable">curArea</span> <span class="operator">=</span> calculateArea(l, r, height[l], height[r]);</span><br><span class="line">            result = Math.max(curArea, result);</span><br><span class="line">            <span class="keyword">if</span> (height[l] &lt; height[r]) l++;</span><br><span class="line">            <span class="keyword">else</span> r--;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">calculateArea</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j, <span class="type">int</span> hi, <span class="type">int</span> hj)</span> {</span><br><span class="line">        <span class="keyword">return</span> Math.min(hi, hj) * (j - i);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a>Stack</h1><p><a href="https://leetcode.cn/problems/valid-parentheses/">20. 有效的括号</a>[✅]</p><p>栈就是括号问题的代名词</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(String s)</span> {</span><br><span class="line">        Deque&lt;Character&gt; dq = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        <span class="type">char</span>[] sChar = s.toCharArray();</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s.length();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">            <span class="keyword">if</span> (sChar[i] == <span class="string">'('</span> || sChar[i] == <span class="string">'{'</span> || sChar[i] == <span class="string">'['</span>) {</span><br><span class="line">                dq.addLast(sChar[i]);</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                <span class="keyword">if</span> (dq.isEmpty()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                <span class="type">char</span> <span class="variable">curLast</span> <span class="operator">=</span> dq.peekLast();</span><br><span class="line">                <span class="keyword">if</span> (sChar[i] == <span class="string">')'</span>) {</span><br><span class="line">                    <span class="keyword">if</span> (curLast != <span class="string">'('</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">else</span> dq.pollLast();</span><br><span class="line">                } <span class="keyword">else</span> <span class="keyword">if</span> (sChar[i] == <span class="string">']'</span>) {</span><br><span class="line">                    <span class="keyword">if</span> (curLast != <span class="string">'['</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">else</span> dq.pollLast();</span><br><span class="line">                } <span class="keyword">else</span> <span class="keyword">if</span> (sChar[i] == <span class="string">'}'</span>) {</span><br><span class="line">                    <span class="keyword">if</span> (curLast != <span class="string">'{'</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">else</span> dq.pollLast();</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> dq.isEmpty();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><a href="https://leetcode.cn/problems/trapping-rain-water/">42. 接雨水</a></p><p>三种解法：</p><p>第一类：纵向和</p><p>这种方法是在 i 上进行计算，即算当前的高，一列一列的加</p><p>前后缀分解 ：</p><p>前后缀分解比较好理解，有两个备忘录一个记录</p><p>height[0, i] 的最大值 lMax</p><p>height[i, n - 1] 的最大值 rMax</p><p>那么当前 i 的雨水就是 <code>min(lMax, rMax) - height[i]</code></p><p>优化后的相向双指针：</p><p>但是可以省略这两个备忘录即使用相向双指针</p><p>但是这里不同的是</p><p>height[0, left] 的最大值 lMax</p><p>height[right, n - 1] 的最大值 rMax</p><p>不再是当前i而是left 和 right， 那么为什么可以保证这样是对的呢，这是因为当前i能接的雨水只看两遍的短的一边然后减去高度，也就是说重要的是 <code>height[i]</code> 能够装的水只和**Math.min(lMax, rMax)**相关（差）</p><p>第二类：横向和</p><p>这种方法类似于横向填充水泥。一行一行的加</p><p>单调栈</p><p>单调栈已经尝试多次</p><p>总结一下：</p><p>在需要更新栈中内容时，我们pop掉所有不符合要求的直至新加入的元素符合要求从而满足栈内元素单调。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="type">int</span>[] height;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">trap</span><span class="params">(<span class="type">int</span>[] height)</span> {</span><br><span class="line">        <span class="built_in">this</span>.height = height;</span><br><span class="line">        <span class="keyword">return</span> twoPointers();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">twoPointers</span><span class="params">()</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> height.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = n - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">lMax</span> <span class="operator">=</span> <span class="number">0</span>, rMax = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">tot</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) {</span><br><span class="line">            lMax = Math.max(lMax, height[left]);</span><br><span class="line">            rMax = Math.max(rMax, height[right]);</span><br><span class="line">            <span class="keyword">if</span> (lMax &lt; rMax) {</span><br><span class="line">                tot += lMax - height[left];</span><br><span class="line">                left++;</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                tot += rMax - height[right];</span><br><span class="line">                right--;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> tot;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">monoStack</span><span class="params">()</span> {</span><br><span class="line">        Deque&lt;Integer&gt; stk = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> height.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">tot</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">            <span class="keyword">while</span> (!stk.isEmpty() &amp;&amp; height[stk.peek()] &lt;= height[i]) {</span><br><span class="line">                <span class="type">int</span> <span class="variable">bottomColIdx</span> <span class="operator">=</span> stk.pop();</span><br><span class="line">                <span class="keyword">if</span> (stk.isEmpty()) <span class="keyword">break</span>;</span><br><span class="line">                <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> stk.peek();</span><br><span class="line">                <span class="type">int</span> <span class="variable">width</span> <span class="operator">=</span> i - left - <span class="number">1</span>;</span><br><span class="line">                <span class="type">int</span> <span class="variable">minHeight</span> <span class="operator">=</span> Math.min(height[left], height[i]) - height[bottomColIdx];</span><br><span class="line">                tot += width * minHeight;</span><br><span class="line">            }</span><br><span class="line">            stk.push(i);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> tot;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">detachPrefixSuffix</span><span class="params">()</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> height.length;</span><br><span class="line">        <span class="type">int</span>[] prefix = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        prefix[<span class="number">0</span>] = height[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) {</span><br><span class="line">            prefix[i] = Math.max(prefix[i - <span class="number">1</span>], height[i]);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[] suffix = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        suffix[n - <span class="number">1</span>] = height[n - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) {</span><br><span class="line">            suffix[i] = Math.max(suffix[i + <span class="number">1</span>], height[i]);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">tot</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">            tot += calculateTrappedWater(prefix, suffix, i);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> tot;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">calculateTrappedWater</span><span class="params">(<span class="type">int</span>[] prefix, <span class="type">int</span>[] suffix, <span class="type">int</span> i)</span> {</span><br><span class="line">        <span class="keyword">return</span> Math.min(prefix[i], suffix[i]) - <span class="built_in">this</span>.height[i];</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="Binary-Tree"><a href="#Binary-Tree" class="headerlink" title="Binary Tree"></a>Binary Tree</h1><p><a href="https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-tree/">236. 二叉树的最近公共祖先</a></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode {</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) { val = x; }</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">lowestCommonAncestor</span><span class="params">(TreeNode root, TreeNode p, TreeNode q)</span> {</span><br><span class="line">        <span class="keyword">return</span> dfs(root, p, q);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TreeNode <span class="title function_">dfs</span><span class="params">(TreeNode cur, TreeNode p, TreeNode q)</span> {</span><br><span class="line">        <span class="keyword">if</span> (cur == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (cur == p || cur == q) <span class="keyword">return</span> cur;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">left</span> <span class="operator">=</span> dfs(cur.left, p, q);</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">right</span> <span class="operator">=</span> dfs(cur.right, p, q);</span><br><span class="line">        <span class="keyword">if</span> (left == <span class="literal">null</span> &amp;&amp; right == <span class="literal">null</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        } </span><br><span class="line">        <span class="keyword">if</span> (left != <span class="literal">null</span> &amp;&amp; right != <span class="literal">null</span>) <span class="keyword">return</span> cur; <span class="comment">// 在左右树上分别找到p和q，返回当前节点</span></span><br><span class="line">        <span class="keyword">if</span> (left == <span class="literal">null</span>) <span class="keyword">return</span> right; <span class="comment">// 左边没找到，说明全在右边，首先找到的p或q就是LCA</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> left; <span class="comment">// 右边没找到，说明全在左边，首先找到的p或q就是LCA</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><a href="https://leetcode.cn/problems/binary-tree-level-order-traversal/">102. 二叉树的层序遍历</a></p><p>简单的BFS</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode {</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() {}</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val) { this.val = val; }</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val, TreeNode left, TreeNode right) {</span></span><br><span class="line"><span class="comment"> *         this.val = val;</span></span><br><span class="line"><span class="comment"> *         this.left = left;</span></span><br><span class="line"><span class="comment"> *         this.right = right;</span></span><br><span class="line"><span class="comment"> *     }</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">levelOrder</span><span class="params">(TreeNode root)</span> {</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Deque&lt;TreeNode&gt; dq = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        dq.addLast(root);</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (!dq.isEmpty()) {</span><br><span class="line">            List&lt;Integer&gt; level = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> dq.size();</span><br><span class="line">            <span class="keyword">while</span> (size &gt; <span class="number">0</span>) {</span><br><span class="line">                <span class="type">TreeNode</span> <span class="variable">cur</span> <span class="operator">=</span> dq.pollFirst();</span><br><span class="line">                level.add(cur.val);</span><br><span class="line">                <span class="keyword">if</span> (cur.left != <span class="literal">null</span>) {</span><br><span class="line">                    dq.addLast(cur.left);</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">if</span> (cur.right != <span class="literal">null</span>) {</span><br><span class="line">                    dq.addLast(cur.right);</span><br><span class="line">                }</span><br><span class="line">                size--;</span><br><span class="line">            }</span><br><span class="line">            res.add(level);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><a href="https://leetcode.cn/problems/binary-tree-right-side-view/">199. 二叉树的右视图</a></p><p>BFS很简单每一层最右边的加入</p><p>DFS就是先右子树，后左子树。然后有一个track来看这一层最右边的被加进来过没有。如果有之后就都不加了。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode {</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() {}</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val) { this.val = val; }</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val, TreeNode left, TreeNode right) {</span></span><br><span class="line"><span class="comment"> *         this.val = val;</span></span><br><span class="line"><span class="comment"> *         this.left = left;</span></span><br><span class="line"><span class="comment"> *         this.right = right;</span></span><br><span class="line"><span class="comment"> *     }</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    LinkedList&lt;Integer&gt; res = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">rightSideView</span><span class="params">(TreeNode root)</span> {</span><br><span class="line">        dfs(root, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(TreeNode root, <span class="type">int</span> depthTrack)</span> {</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (depthTrack == res.size()) {</span><br><span class="line">            res.add(root.val);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        dfs(root.right, depthTrack + <span class="number">1</span>);</span><br><span class="line">        dfs(root.left, depthTrack + <span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><a href="https://leetcode.cn/problems/construct-binary-tree-from-preorder-and-inorder-traversal/">105. 从前序与中序遍历序列构造二叉树</a></p><p><a href="https://leetcode.cn/problems/construct-binary-tree-from-inorder-and-postorder-traversal/">106. 从中序与后序遍历序列构造二叉树</a></p><p>这两题均属于构造类题目，具体可以看：<br> <a href="/posts/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B9%8B%E6%9E%84%E9%80%A0%E7%B1%BB%E9%97%AE%E9%A2%98/" title="二叉树之构造类问题">二叉树之构造类问题</a> 中包含构造类问题的习题以及思路</p><p>核心思想都是通过构造左子树 + 右子树 连接根节点，只不过「细节和边界」略有不同，在尝试过后，使用左闭右开区间会<code>稍微</code>好处理一些</p><p>其实核心就是 <strong>子树 也是 树</strong>，所以递归的处理问题只要把大问题处理好小问题就可以很简单的处理了</p><p>105: 前序按照 中左右的顺序，所以可以先碰到的作为root节点然后递归的构造左右子树：</p><blockquote><p><a href="https://leetcode.cn/problems/construct-binary-tree-from-preorder-and-inorder-traversal/solutions/2646359/tu-jie-cong-on2-dao-onpythonjavacgojsrus-aob8/">灵神 - 105</a></p></blockquote><p><img src="/posts/Blind-Sheet/1707907886-ICkiSC-lc105-c.png" alt="1707907886-ICkiSC-lc105-c"></p><p>106: 后序按照 左右中的顺序，所以可以从右开始碰到的作为root节点然后递归的构造左右子树：</p><p>但是注意这里的区间略有不同</p><p><img src="/posts/Blind-Sheet/1708475214-fiBgmD-LC106-c.png" alt="1708475214-fiBgmD-LC106-c"></p><p>代码：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 105:</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode {</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() {}</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val) { this.val = val; }</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val, TreeNode left, TreeNode right) {</span></span><br><span class="line"><span class="comment"> *         this.val = val;</span></span><br><span class="line"><span class="comment"> *         this.left = left;</span></span><br><span class="line"><span class="comment"> *         this.right = right;</span></span><br><span class="line"><span class="comment"> *     }</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="type">int</span>[] preorder;</span><br><span class="line">    <span class="type">int</span>[] inorder;</span><br><span class="line">    Map&lt;Integer, Integer&gt; num2Idx = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">buildTree</span><span class="params">(<span class="type">int</span>[] preorder, <span class="type">int</span>[] inorder)</span> {</span><br><span class="line">        <span class="comment">// preorder 中左右 inorder 左中右</span></span><br><span class="line">        <span class="comment">// 恢复顺序 根，左右</span></span><br><span class="line">        <span class="built_in">this</span>.preorder = preorder;</span><br><span class="line">        <span class="built_in">this</span>.inorder = inorder;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; inorder.length; i++) {</span><br><span class="line">            num2Idx.put(inorder[i], i);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">root</span> <span class="operator">=</span> building(<span class="number">0</span>, preorder.length - <span class="number">1</span>, <span class="number">0</span>, inorder.length - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TreeNode <span class="title function_">building</span><span class="params">(<span class="type">int</span> preStart, <span class="type">int</span> preEnd, <span class="type">int</span> inStart, <span class="type">int</span> inEnd)</span> {</span><br><span class="line">        <span class="comment">// System.out.println(preStart + " " + preEnd + " " + inStart + " " + inEnd);</span></span><br><span class="line">        <span class="keyword">if</span> (preStart &gt; preEnd) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (inStart &gt; inEnd) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(preorder[preStart]);</span><br><span class="line">        <span class="type">int</span> <span class="variable">idxInorder</span> <span class="operator">=</span> findNodeThruInorder(preorder[preStart]);</span><br><span class="line">        <span class="type">int</span> <span class="variable">leftSize</span> <span class="operator">=</span> idxInorder - inStart;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 递归构造左子树</span></span><br><span class="line">        root.left = building(preStart + <span class="number">1</span>, preStart + leftSize, inStart, idxInorder);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 递归构造右子树</span></span><br><span class="line">        root.right = building(preStart + leftSize + <span class="number">1</span>, preEnd, idxInorder + <span class="number">1</span>, inEnd);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">findNodeThruInorder</span><span class="params">(<span class="type">int</span> val)</span> {</span><br><span class="line">        <span class="keyword">return</span> num2Idx.get(val);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 106:</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode {</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() {}</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val) { this.val = val; }</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val, TreeNode left, TreeNode right) {</span></span><br><span class="line"><span class="comment"> *         this.val = val;</span></span><br><span class="line"><span class="comment"> *         this.left = left;</span></span><br><span class="line"><span class="comment"> *         this.right = right;</span></span><br><span class="line"><span class="comment"> *     }</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="type">int</span>[] inorder, postorder;</span><br><span class="line">    Map&lt;Integer, Integer&gt; num2Idx = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">buildTree</span><span class="params">(<span class="type">int</span>[] inorder, <span class="type">int</span>[] postorder)</span> {</span><br><span class="line">        <span class="comment">// 继续根左子树，右子树来构造</span></span><br><span class="line">        <span class="comment">// inorder 是 左中右， postorder 左右中</span></span><br><span class="line">        <span class="comment">// 后序遍历就是从根节点右往左而已</span></span><br><span class="line">        <span class="built_in">this</span>.inorder = inorder;</span><br><span class="line">        <span class="built_in">this</span>.postorder = postorder;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; inorder.length; i++) {</span><br><span class="line">            num2Idx.put(inorder[i], i);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">root</span> <span class="operator">=</span> building(<span class="number">0</span>, inorder.length, <span class="number">0</span>, postorder.length);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TreeNode <span class="title function_">building</span><span class="params">(<span class="type">int</span> postStart, <span class="type">int</span> postEnd, <span class="type">int</span> inStart, <span class="type">int</span> inEnd)</span> {</span><br><span class="line">        <span class="comment">// System.out.println(postStart + " " + postEnd + " " + inStart + " " + inEnd);</span></span><br><span class="line">        <span class="keyword">if</span> (postStart &gt;= postEnd || inStart &gt;= inEnd) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">val</span> <span class="operator">=</span> postorder[postEnd - <span class="number">1</span>];</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(val);</span><br><span class="line">        <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> num2Idx.get(val);</span><br><span class="line">        <span class="type">int</span> <span class="variable">leftSize</span> <span class="operator">=</span> idx - inStart;</span><br><span class="line"></span><br><span class="line">        root.left = building(postStart, postStart + leftSize, inStart, idx);</span><br><span class="line"></span><br><span class="line">        root.right = building(postStart + leftSize, postEnd - <span class="number">1</span>, idx + <span class="number">1</span>, inEnd);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p><a href="https://leetcode.cn/problems/serialize-and-deserialize-binary-tree/">297. 二叉树的序列化与反序列化</a></p><blockquote><p><a href="https://leetcode.cn/problems/serialize-and-deserialize-binary-tree/solutions/290289/shou-hui-tu-jie-gei-chu-dfshe-bfsliang-chong-jie-f/">LC解法</a></p></blockquote><p>两种解法一个DFS，一个BFS</p><p>DFS中还是延续了构造类问题的解法，构造 根 + 左子树 + 右子树</p><p>序列化：这里选择使用前序遍历，因为方便找到根节点当节点 = null时加入string</p><p>反序列化：dfs遍历，每一次移动一个位置，碰到 “null” 时return null，要不就构造节点</p><p>BFS是层序遍历，另外我们需要一个deque来保存制作好的节点在反序列化时移动left， rightcursor</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DFS</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode {</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) { val = x; }</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Codec</span> {</span><br><span class="line">    StringBuilder sb;</span><br><span class="line">    String preOrder;</span><br><span class="line">    <span class="comment">// Encodes a tree to a single string.</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">serialize</span><span class="params">(TreeNode root)</span> {</span><br><span class="line">        sb = <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        buildWithPreOrder(root);</span><br><span class="line">        preOrder = sb.toString();</span><br><span class="line">        <span class="keyword">return</span> preOrder;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">buildWithPreOrder</span><span class="params">(TreeNode root)</span> {</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) {</span><br><span class="line">            sb.append(<span class="string">"null,"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        sb.append(root.val + <span class="string">","</span>);</span><br><span class="line">        buildWithPreOrder(root.left);</span><br><span class="line">        buildWithPreOrder(root.right);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Decodes your encoded data to tree.</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">deserialize</span><span class="params">(String data)</span> {</span><br><span class="line">        String[] dataLs = data.split(<span class="string">","</span>);</span><br><span class="line">        <span class="comment">// Arrays.stream(dataLs).forEach(a -&gt; System.out.print(a + " "));</span></span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">root</span> <span class="operator">=</span> building(dataLs);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TreeNode <span class="title function_">building</span><span class="params">(String[] dataLs)</span> {</span><br><span class="line">        idx++;</span><br><span class="line">        <span class="keyword">if</span> (idx &gt;= dataLs.length) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (dataLs[idx].equals(<span class="string">"null"</span>)) {</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">val</span> <span class="operator">=</span> Integer.valueOf(dataLs[idx]);</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(val);</span><br><span class="line">        root.left = building(dataLs);</span><br><span class="line">        root.right = building(dataLs);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// BFS</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Codec</span> {</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Encodes a tree to a single string.</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">serialize</span><span class="params">(TreeNode root)</span> {</span><br><span class="line">        <span class="keyword">return</span> bfsSerilize(root);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">bfsSerilize</span><span class="params">(TreeNode root)</span> {</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        Deque&lt;TreeNode&gt; dq = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        dq.add(root);</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">while</span> (!dq.isEmpty()) {</span><br><span class="line">            <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> dq.size();</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">cur</span> <span class="operator">=</span> dq.pollFirst();</span><br><span class="line">            <span class="keyword">if</span> (cur == <span class="literal">null</span>) {</span><br><span class="line">                sb.append(<span class="string">"null,"</span>);</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                sb.append(cur.val + <span class="string">","</span>);</span><br><span class="line">                dq.addLast(cur.left);</span><br><span class="line">                dq.addLast(cur.right);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// System.out.println(sb.toString());</span></span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Decodes your encoded data to tree.</span></span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">deserialize</span><span class="params">(String data)</span> {</span><br><span class="line">        <span class="keyword">if</span> (data.length() == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        String[] dataArr = data.split(<span class="string">","</span>);</span><br><span class="line">        Deque&lt;TreeNode&gt; dq = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(Integer.valueOf(dataArr[<span class="number">0</span>]));</span><br><span class="line">        dq.addLast(root);</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">1</span>, right = left + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; dataArr.length &amp;&amp; right &lt; dataArr.length) {</span><br><span class="line">            <span class="type">String</span> <span class="variable">curLeft</span> <span class="operator">=</span> dataArr[left], curRight = dataArr[right];</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">cur</span> <span class="operator">=</span> dq.pollFirst();</span><br><span class="line">            <span class="keyword">if</span> (!curLeft.equals(<span class="string">"null"</span>)) {</span><br><span class="line">                <span class="type">TreeNode</span> <span class="variable">leftChild</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(Integer.valueOf(curLeft));</span><br><span class="line">                cur.left = leftChild;</span><br><span class="line">                dq.addLast(leftChild);</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!curRight.equals(<span class="string">"null"</span>)) {</span><br><span class="line">                <span class="type">TreeNode</span> <span class="variable">rightChild</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(Integer.valueOf(curRight));</span><br><span class="line">                cur.right = rightChild;</span><br><span class="line">                dq.addLast(rightChild);</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            left += <span class="number">2</span>; </span><br><span class="line">            right = left + <span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// Your Codec object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment">// Codec ser = new Codec();</span></span><br><span class="line"><span class="comment">// Codec deser = new Codec();</span></span><br><span class="line"><span class="comment">// TreeNode ans = deser.deserialize(ser.serialize(root));</span></span><br></pre></td></tr></tbody></table></figure><h1 id="Graph"><a href="#Graph" class="headerlink" title="Graph"></a>Graph</h1><p><a href="https://leetcode.cn/problems/flood-fill/">733. 图像渲染</a></p><p>经典的BFS和DFS</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="type">boolean</span>[][] visited;</span><br><span class="line">    <span class="type">int</span>[] dx = <span class="keyword">new</span> <span class="title class_">int</span>[]{<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>};</span><br><span class="line">    <span class="type">int</span>[] dy = <span class="keyword">new</span> <span class="title class_">int</span>[]{<span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>, <span class="number">0</span>};</span><br><span class="line">    <span class="type">int</span>[][] image;</span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[][] floodFill(<span class="type">int</span>[][] image, <span class="type">int</span> sr, <span class="type">int</span> sc, <span class="type">int</span> color) {</span><br><span class="line">        n = image.length; </span><br><span class="line">        m = image[<span class="number">0</span>].length;</span><br><span class="line">        visited = <span class="keyword">new</span> <span class="title class_">boolean</span>[n][m];</span><br><span class="line">        <span class="built_in">this</span>.image = image;</span><br><span class="line">        <span class="type">int</span> <span class="variable">originalColor</span> <span class="operator">=</span> image[sr][sc];</span><br><span class="line">        <span class="comment">// dfs(sr, sc, color, originalColor);</span></span><br><span class="line">        bfs(sr, sc, color, originalColor);</span><br><span class="line">        <span class="keyword">return</span> image;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> sr, <span class="type">int</span> sc, <span class="type">int</span> color, <span class="type">int</span> originalColor)</span> {</span><br><span class="line">        <span class="keyword">if</span> (sr &lt; <span class="number">0</span> || sr &gt;= n || sc &lt; <span class="number">0</span> || sc &gt;= m) {</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (image[sr][sc] != originalColor) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (visited[sr][sc]) <span class="keyword">return</span>;</span><br><span class="line">        image[sr][sc] = color;</span><br><span class="line">        visited[sr][sc] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) {</span><br><span class="line">            dfs(sr + dx[i], sc + dy[i], color, originalColor);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">bfs</span><span class="params">(<span class="type">int</span> sr, <span class="type">int</span> sc, <span class="type">int</span> color, <span class="type">int</span> originalColor)</span> {</span><br><span class="line">        Deque&lt;<span class="type">int</span>[]&gt; dq = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        dq.addLast(<span class="keyword">new</span> <span class="title class_">int</span>[] {sr, sc});</span><br><span class="line">        <span class="keyword">while</span> (!dq.isEmpty()) {</span><br><span class="line">            <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> dq.size();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++) {</span><br><span class="line">                <span class="type">int</span>[] cur = dq.pollFirst();</span><br><span class="line">                <span class="type">int</span> <span class="variable">curX</span> <span class="operator">=</span> cur[<span class="number">0</span>], curY = cur[<span class="number">1</span>];</span><br><span class="line">                image[curX][curY] = color;</span><br><span class="line">                visited[curX][curY] = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">0</span>; d &lt; <span class="number">4</span>; d++) {</span><br><span class="line">                    <span class="type">int</span> <span class="variable">newX</span> <span class="operator">=</span> curX + dx[d], newY = curY + dy[d];</span><br><span class="line">                    <span class="keyword">if</span> (newX &lt; <span class="number">0</span> || newX &gt;= n || newY &lt; <span class="number">0</span> || newY &gt;= m || image[newX][newY] != originalColor || visited[newX][newY]) <span class="keyword">continue</span>;</span><br><span class="line">                    dq.addLast(<span class="keyword">new</span> <span class="title class_">int</span>[] {newX, newY});</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><a href="https://leetcode.cn/problems/01-matrix/">542. 01 矩阵</a></p><p>对于这种多源的问题我们可以反过来考虑，让终点入队，这里让终点入队的好处是我们就可以让每一个点都只被visited一次从而避免多次（至多4次）visit 节点</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    <span class="type">int</span>[][] mat;</span><br><span class="line">    <span class="type">int</span>[] dx = <span class="keyword">new</span> <span class="title class_">int</span>[] {<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>};</span><br><span class="line">    <span class="type">int</span>[] dy = <span class="keyword">new</span> <span class="title class_">int</span>[] {<span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>, <span class="number">0</span>};</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[][] updateMatrix(<span class="type">int</span>[][] mat) {</span><br><span class="line">        <span class="comment">// BFS 第一个碰见的一定是最近的</span></span><br><span class="line">        <span class="built_in">this</span>.n = mat.length; </span><br><span class="line">        <span class="built_in">this</span>.m = mat[<span class="number">0</span>].length;</span><br><span class="line">        <span class="built_in">this</span>.mat = mat;</span><br><span class="line">        Deque&lt;<span class="type">int</span>[]&gt; dq = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; m; j++) {</span><br><span class="line">                <span class="keyword">if</span> (mat[i][j] == <span class="number">1</span>) {</span><br><span class="line">                    mat[i][j] = -<span class="number">1</span>; <span class="comment">// 这样既有visited过的效果又可以记录最短距离</span></span><br><span class="line">                } <span class="keyword">else</span> <span class="keyword">if</span> (mat[i][j] == <span class="number">0</span>) {</span><br><span class="line">                    dq.addLast(<span class="keyword">new</span> <span class="title class_">int</span>[] {i, j});</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        bfs(dq);</span><br><span class="line">        <span class="keyword">return</span> mat;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">bfs</span><span class="params">(Deque&lt;<span class="type">int</span>[]&gt; dq)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">level</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (!dq.isEmpty()) {</span><br><span class="line">            <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> dq.size();</span><br><span class="line">            level++;</span><br><span class="line">            <span class="keyword">while</span> (size-- &gt; <span class="number">0</span>) {</span><br><span class="line">                <span class="type">int</span>[] cur = dq.pollFirst();</span><br><span class="line">                <span class="type">int</span> <span class="variable">curX</span> <span class="operator">=</span> cur[<span class="number">0</span>], curY = cur[<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) {</span><br><span class="line">                    <span class="type">int</span> <span class="variable">newX</span> <span class="operator">=</span> curX + dx[i], newY = curY + dy[i];</span><br><span class="line">                    <span class="keyword">if</span> (newX &lt; <span class="number">0</span> || newX &gt;= n || newY &lt; <span class="number">0</span> || newY &gt;= m || mat[newX][newY] != -<span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">                    mat[newX][newY] = level; <span class="comment">// 相当于更新了visited 以及 答案</span></span><br><span class="line">                    dq.addLast(<span class="keyword">new</span> <span class="title class_">int</span>[] {newX, newY});</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <summary type="html">总之先已刷完这个为目标</summary>
    
    
    
    <category term="Algorithms" scheme="http://ruobingw.com/categories/Algorithms/"/>
    
    
    <category term="Blind" scheme="http://ruobingw.com/tags/Blind/"/>
    
  </entry>
  
  <entry>
    <title>前置知识</title>
    <link href="http://ruobingw.com/posts/%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86/"/>
    <id>http://ruobingw.com/posts/%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86/</id>
    <published>2023-11-19T20:03:20.000Z</published>
    <updated>2024-05-15T04:17:52.573Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><p>目前经典的设计模式有22个</p><h1 id="关键术语"><a href="#关键术语" class="headerlink" title="关键术语"></a>关键术语</h1><h2 id="面向对象基础"><a href="#面向对象基础" class="headerlink" title="面向对象基础"></a>面向对象基础</h2><p>老四样：</p><ul><li>抽象</li><li>封装</li><li>多态</li><li>继承</li></ul><h3 id="抽象"><a href="#抽象" class="headerlink" title="抽象"></a>抽象</h3><p>根据真实世界对象来设计程序中的对象。程序中的对象并不需要能够百分之百准确地反映其原型 （极少情况下才需要做到这一点）。 实际上， 「对象只需模拟真实对象的特定属性和行为即可」</p><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><p>细节都被隐藏起来，能够交互的只有提供的「接口」</p><p>封装：一个对象对其他对象隐藏部分状态和行为，而仅向程序其他部分暴露有限的借口的能力</p><p>比如<code>private</code> <code>protected</code></p><p><img src="/posts/%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86/%E5%B0%81%E8%A3%85_1.png" alt="封装_1"></p><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>根据已有类创建新类的能力，具体作用在于代码复用</p><p>“使用继承后， 子类将拥有与其父类相同的接口。 如果父类中声明了某个方法， 那么你将无法在子类中隐藏该方法。 你还<strong>必须实现所有</strong>的抽象方法， 即使它们对于你的子类而言没有意义。 ”</p><p><img src="/posts/%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86/%E7%BB%A7%E6%89%BF_1.png" alt="继承_1"></p><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><p>声明为抽象。 这让我们得以忽略父类中该方法的所有默认实现， 从而强制要求所有子类自行提供该方法的实现。子类重写超类的方法</p><p><img src="/posts/%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86/%E5%A4%9A%E6%80%81_1.png" alt="多态_1"></p><p>多态的特殊机制使得程序可以追踪对象的子类并调用其方法， 从而执行恰当的行为。<br>多态是指程序能够检测对象所属的实际类， 并在当前上下文不知道其真实类型的情况下调用其实现的能力。<br>可将多态看作是一个对象 “假扮” 为其他东西 （通常是其扩展的类或实现的接口） 的能力。 在我们的示例中， 袋中的狗和猫就相当于是假扮成了一般的动物。”</p><h2 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h2><p>关系分为：</p><ul><li>依赖</li><li>关联</li><li>聚合</li><li>组合</li></ul><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><p>是「最基础，最微弱」的关系类型</p><p>如果修改一个类的定义可能会造成另一个类的变化。那么就说这两个类之间有依赖关系。</p><blockquote><p>通过让代码依赖「接口」或「抽象类」从而降低依赖程度</p></blockquote><blockquote><p> UML 不会展示所有依赖，仅展示对于沟通想法来说的重要的依赖关系</p></blockquote><p>用 <code>虚线箭头</code> 来表示</p><p><img src="/posts/%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86/%E5%85%B3%E7%B3%BB_%E4%BE%9D%E8%B5%961.png" alt="关系_依赖1"></p><h3 id="关联"><a href="#关联" class="headerlink" title="关联"></a>关联</h3><p>一个对象使用另一个对象 或 与另一个对象进行交互的关系</p><p>关联 是一种特殊的依赖，一个对象总有访问与其交互对象的权限</p><p>一般使用 关联 来表示类似于 <code>成员变量</code> 的东西，这个关系将一直存在。</p><p><img src="/posts/%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86/%E5%85%B3%E7%B3%BB_%E5%85%B3%E8%81%941.png" alt="关系_关联1"></p><h3 id="依赖-vs-关联"><a href="#依赖-vs-关联" class="headerlink" title="依赖 vs 关联"></a>依赖 vs 关联</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span>&nbsp;<span class="title class_">Professor</span>&nbsp;is</span><br><span class="line">&nbsp;&nbsp;field Student&nbsp;student</span><br><span class="line">&nbsp;&nbsp;<span class="comment">//&nbsp;...</span></span><br><span class="line">&nbsp;&nbsp;method&nbsp;<span class="title function_">teach</span><span class="params">(Course&nbsp;c)</span>&nbsp;is</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">//&nbsp;...</span></span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="built_in">this</span>.student.remember(c.getKnowledge())</span><br></pre></td></tr></tbody></table></figure><p>而Course 作为 一个参数，Course 是作为 依赖</p><p>Student 是 Professor 的一个成员变量，Student 类 是 Professor 的 不仅是 <code>依赖</code> 而上升为 <code>关联</code></p><h3 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h3><p>一般表示 一对多 多对多 整体对部分</p><p>一个对象拥有 一组其他对象，扮演容器和集合的角色。</p><p>组建可以独立于容器，也可以同时链接多个容器。</p><p>表示：</p><p><img src="/posts/%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86/%E5%85%B3%E7%B3%BB_%E8%81%9A%E5%90%881.png" alt="关系_聚合1"></p><h3 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h3><p>组合是一种特殊的聚合，对象由 一个或多个其他对象实例构成。组件仅能作为容器的一部分存在</p><p><img src="/posts/%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86/%E5%85%B3%E7%B3%BB_%E7%BB%84%E5%90%881.png" alt="关系_组合1"></p><h3 id="聚合-vs-组合"><a href="#聚合-vs-组合" class="headerlink" title="聚合 vs 组合"></a>聚合 vs 组合</h3><p>比如 大学 嘎 则 院系 消失 因为 大学管理院系的生命周期</p><p>但是 院系 嘎 教授 不一定会 嘎，因为 是聚合关系</p><p>组合使得两个 tight 的更紧了</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><img src="/posts/%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86/%E5%85%B3%E7%B3%BB%E6%80%BB%E7%BB%93.png" alt="关系总结"></p><ul><li>依赖： 对类 B 进行修改会影响到类 A 。 </li><li>关联： 对象 A 知道对象 B。 类 A 依赖于类 B。 </li><li>聚合： 对象 A 知道对象 B 且由 B 构成。 类 A 依赖于类 B。 </li><li>组合： 对象 A 知道对象 B、 <strong>由 B 构成而且管理着 B 的生命周期</strong>。 类 A 依赖于类 B。</li></ul><h1 id="设计模式-1"><a href="#设计模式-1" class="headerlink" title="设计模式"></a>设计模式</h1><h2 id="算法-vs-设计模式"><a href="#算法-vs-设计模式" class="headerlink" title="算法 vs 设计模式"></a>算法 vs 设计模式</h2><p>算法：明确定义达成特定目标的所需一系列步骤。像一道菜谱：提供达成目标的「明确」步骤</p><p>模式：解决方案的更高层次描述。像蓝图：知道最终结果和功能，自己确定如何实现的步骤</p><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><ul><li><p>创建型</p><ul><li>“提供创建对象的机制， 增加已有代码的灵活性和可复用性”</li></ul></li><li><p>结构型</p><ul><li>“对象和类组装成较大的结构， 并同时保持结构的灵活和高效。”</li></ul></li><li><p>行为</p><ul><li>“行为模式负责对象间的高效沟通和职责委派。”</li></ul></li></ul><h1 id="软件设计原则"><a href="#软件设计原则" class="headerlink" title="软件设计原则"></a>软件设计原则</h1><h2 id="代码复用"><a href="#代码复用" class="headerlink" title="代码复用"></a>代码复用</h2><p>从 类 转向 模式 再到 框架，复用程度不断增加</p><p>模式提供的复用方式比框架风险小。</p><h2 id="扩展性"><a href="#扩展性" class="headerlink" title="扩展性"></a>扩展性</h2><p>需要应对未来可能发生的变化来提供具有可扩展性的代码</p><h2 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h2><p>从而保证灵活的设计</p><h2 id="封装变化的内容"><a href="#封装变化的内容" class="headerlink" title="封装变化的内容"></a>封装变化的内容</h2><p>定位程序中的变化内容并与不变的内容分开从而使得将变更造成的影响最小化</p><p>封装掉变化的内容从而可以保护其他代码不受负面影响。</p><h3 id="封装方法"><a href="#封装方法" class="headerlink" title="封装方法"></a>封装方法</h3><p><img src="/posts/%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86/%E6%96%B9%E6%B3%95%E5%B0%81%E8%A3%85.png" alt="方法封装"></p><p>将计算税金的逻辑抽取到一个单独的方法中， 并对原始方法隐藏该逻辑</p><p><img src="/posts/%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86/%E6%96%B9%E6%B3%95%E5%B0%81%E8%A3%852.png" alt="方法封装2"></p><p>隔离后就可以只修改getTaxrate的逻辑，并且如果税率计算逻辑变得过于复杂， 也能更方便地将其移动到独立的类中。</p><h3 id="封装类"><a href="#封装类" class="headerlink" title="封装类"></a>封装类</h3><p>新增行为通常还会带来助手成员变量和方法，将这些内容抽出来到一个新类中</p><p><img src="/posts/%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86/%E7%B1%BB%E5%B0%81%E8%A3%85.png" alt="类封装"></p><p><img src="/posts/%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86/%E7%B1%BB%E5%B0%81%E8%A3%852.png" alt="类封装2"></p><h2 id="面向接口进行开发"><a href="#面向接口进行开发" class="headerlink" title="面向接口进行开发"></a>面向接口进行开发</h2><p>这样的好处是，我们依赖的是抽象类型而不是具体类</p><ul><li>确定一个对象对另一对象的确切需求： 它需执行哪些方法？ </li><li>在一个新的接口或抽象类中描述这些方法。 </li><li>让被依赖的类实现该接口。 </li><li>现在让有需求的类依赖于这个接口， 而不依赖于具体的类。 你仍可与原始类中的对象进行互动， 但现在其连接将会灵活得多。</li></ul><p><img src="/posts/%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86/%E9%9D%A2%E5%90%91%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91.png" alt="面向接口开发"></p><h2 id="组合优于继承"><a href="#组合优于继承" class="headerlink" title="组合优于继承"></a>组合优于继承</h2><p>继承有比较多的缺点：</p><ul><li><p>子类不能减少超类的接口。 你必须实现父类中所有的抽象方法， 即使它们没什么用。 </p></li><li><p>在重写方法时， 你需要确保新行为与其基类中的版本兼容。 这一点很重要， 因为子类的所有对象都可能被传递给以超类对象为参数的任何代码， 相信你不会希望这些代码崩溃的。 </p></li><li><p>继承打破了超类的封装， 因为子类拥有访问父类内部详细内容的权限。 此外还可能会有相反的情况出现， 那就是程序员为了进一步扩展的方便而让超类知晓子类的内部详细内容。 </p></li><li><p>子类与超类紧密耦合。 超类中的任何修改都可能会破坏子类的功能。 </p></li><li><p>通过继承复用代码可能导致平行继承体系的产生。 继承通常仅发生在一个维度中。 只要出现了两个以上的维度， 你就必须创建数量巨大的类组合， 从而使类层次结构膨胀到不可思议的程度</p></li></ul><p>总结：复写所有抽象方法 + 兼容性 + 打破封装 + 增加耦合 + 类层次膨胀</p><p><strong>组合是代替继承的一种方法</strong>。 继承代表类之间的 “是” 关系 （汽车是交通工具）， 而组合则代表 “有” 关系 （汽车有一个引擎）。</p><p>这个原则也能应用于<strong>聚合</strong> （一种更松弛的组合变体， 一个对象可引用另一个对象， 但并不管理其生命周期）。 例如： 一辆汽车上有司机， 但是司机也可能会使用另一辆汽车， 或者选择步行而不使用汽车。</p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p><img src="/posts/%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86/%E7%BB%84%E5%90%88%E4%BC%98%E4%BA%8E%E7%BB%A7%E6%89%BF1.png" alt="组合优于继承1"></p><p>类越来越多</p><p>可以通过进行 组/聚 合优化：</p><p><img src="/posts/%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86/%E7%BB%84%E5%90%88%E4%BC%98%E4%BA%8E%E7%BB%A7%E6%89%BF2.png" alt="组合优于继承2"></p><h2 id="SOLID"><a href="#SOLID" class="headerlink" title="SOLID"></a>SOLID</h2><p>SOLID 五原则 让软件设计更易于理解、 更加灵活和更易于维护的五个原则的简称。</p><h3 id="「S」ingle-Responsibility-Principle-单一职责原则"><a href="#「S」ingle-Responsibility-Principle-单一职责原则" class="headerlink" title="「S」ingle Responsibility Principle 单一职责原则"></a>「S」ingle Responsibility Principle 单一职责原则</h3><p>每一个类应当只负责软件中的一个功能，并将其完全封装在该类中。</p><p>使用场景：“开始感觉在同时关注程序特定方面的内容时有些困难的话， 请回忆单一职责原则并考虑现在是否应将某些类分割为几个部分。”</p><p>例子：</p><p><img src="/posts/%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86/%E5%8D%95%E4%B8%80%E8%81%8C%E8%B4%A3%E5%8E%9F%E5%88%991.png" alt="单一职责原则1"></p><p><img src="/posts/%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86/%E5%8D%95%E4%B8%80%E8%81%8C%E8%B4%A3%E5%8E%9F%E5%88%992.png" alt="单一职责原则2"></p><h3 id="「O」pen-x2F-closed-Principle-开闭原则"><a href="#「O」pen-x2F-closed-Principle-开闭原则" class="headerlink" title="「O」pen/closed Principle 开闭原则"></a>「O」pen/closed Principle 开闭原则</h3><p>对于扩展，类应当 「开放」，对于修改，类应该「封闭」</p><p>实现新功能时保持已有代码不变</p><p>开放：对一个类扩展时可以创建它的子类并对其做任何事情，比如新增方法，重写方法。</p><p>封闭：比如字段设置了 <code>final</code> 从而限制了扩展，那么就不是开放，并且如果一个类做好了充分的准备来使得其他类能够使用，即接口明确定义不会修改，那么该类就是封闭/完整</p><p><img src="/posts/%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86/%E5%BC%80%E9%97%AD%E5%8E%9F%E5%88%991.png" alt="开闭原则1"></p><p><img src="/posts/%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86/%E5%BC%80%E9%97%AD%E5%8E%9F%E5%88%992.png" alt="开闭原则2"></p><p>现在当需要实现新的运输方式那么<code>扩展</code> <code>Shipping</code>接口创建新类即可，订单在这里就不会被破坏，属于封闭。</p><h3 id="「L」iskov-Substitution-Principle-里氏替换原则"><a href="#「L」iskov-Substitution-Principle-里氏替换原则" class="headerlink" title="「L」iskov Substitution Principle 里氏替换原则"></a>「L」iskov Substitution Principle 里氏替换原则</h3><p>扩展类时，应该要能在<strong>不修改客户端代码的情况下</strong>将<strong>子类的对象作为父类对象</strong>进行传递。其意味着子类需要和父类行为兼容，重写方法时，对基类进行 <code>扩展</code> 而不是进行<code>替换</code></p><p>这个原则是用于<strong>预测子类是否与代码兼容</strong>。是否能与其超类对象协作的一组检查。主要服务于开发程序库和框架时。</p><p>举个例子，假设你有一个父类 <code>Bird</code> 和一个继承自 <code>Bird</code> 的子类 <code>Sparrow</code>。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Bird</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fly</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Bird is flying"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sparrow</span>(<span class="title class_ inherited__">Bird</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fly</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Sparrow is flying"</span>)</span><br></pre></td></tr></tbody></table></figure><p>在这个例子中，<code>Sparrow</code> 是 <code>Bird</code> 的子类，并且重写了 <code>fly</code> 方法。根据里氏替换原则，任何期望 <code>Bird</code> 类型对象的代码都应该能够接受 <code>Sparrow</code> 对象，而不需要做任何改变。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">let_it_fly</span>(<span class="params">bird: Bird</span>):</span><br><span class="line">    bird.fly()</span><br><span class="line"></span><br><span class="line">sparrow = Sparrow()</span><br><span class="line">let_it_fly(sparrow)  <span class="comment"># 这里传递了一个 Sparrow 对象</span></span><br></pre></td></tr></tbody></table></figure><p>在这段代码中，<code>let_it_fly</code> 函数接受一个 <code>Bird</code> 类型的对象，并调用它的 <code>fly</code> 方法。由于 <code>Sparrow</code> 是 <code>Bird</code> 的子类，我们可以创建一个 <code>Sparrow</code> 对象并将其传递给 <code>let_it_fly</code> 函数。根据里氏替换原则，这应该能够正常工作，因为 <code>Sparrow</code> 完全兼容 <code>Bird</code> 类的接口。</p><p>需要有一些对于子类的形式要求：</p><ul><li><p>“子类方法的参数类型必须与其超类的参数类型相匹配或更加抽象”</p><ul><li>“假设某个类有个方法用于给猫咪喂食：  <strong>feed­(Cat c)</strong> 。 客户端代码总是会将 “猫 （cat）” 对象传递给该方法。 </li><li>好的方式： 假如你创建了一个子类并重写了前面的方法， 使其能够给任何 “动物 （ani­mal， 即 ‘猫’ 的超类）” 喂食：  <strong>feed­(Animal c)</strong> 。 如果现在你将一个子类对象而非超类对象传递给客户端代码， 程序仍将正常工作。 该方法可用于给任何动物喂食， 因此它仍然可以用于给传递给客户端的任何 “猫” 喂食。 </li><li>不好的方式： 你创建了另一个子类且限制喂食方法仅接受 “孟加拉猫 （Ben­gal­Cat， 一个 ‘猫’ 的子类）”：  feed­(Bengal­Cat c) 。 如果你用它来替代链接在某个对象中的原始类，客户端中会发生什么呢？ 由于该方法只能对特殊种类的猫进行喂食， 因此无法为传递给客户端的普通猫提供服务， 从而将破坏所有相关的功能。</li></ul></li><li><p>“子类方法的返回值类型必须与超类方法的返回值类型或是其子类别相匹配。 正如你所看到的， 对于返回值类型的要求与对于参数类型的要求相反。”</p><blockquote><p>return 越具体越好<br>parameters 越抽象越好</p></blockquote><ul><li>假设buyCat() : Cat, 返回猫</li><li>好：重写为 buyCat(): BengalCat </li><li>不好：重写为 buyCat(): Animal</li></ul></li><li><p>异常类型必须与基础方法的异常或者子类相匹配</p></li><li><p>子类不应该加强前置条件，也不能削弱后置条件</p></li><li><p>超类的不变量需要保留</p></li><li><p>子类不能修改超类中私有变量的值</p></li></ul><h3 id="「I」terface-Segregation-Principle-接口隔离原则"><a href="#「I」terface-Segregation-Principle-接口隔离原则" class="headerlink" title="「I」terface Segregation Principle 接口隔离原则"></a>「I」terface Segregation Principle 接口隔离原则</h3><p>客户端不应该强迫依赖于其不使用的方法。</p><p>应该提升细粒度将导致臃肿的方法分割给其他接口：</p><p><img src="/posts/%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86/%E6%8E%A5%E5%8F%A3%E9%9A%94%E7%A6%BB%E5%8E%9F%E5%88%991.png" alt="接口隔离原则1"></p><h3 id="「D」ependency-Inversion-Principle-依赖倒置原则"><a href="#「D」ependency-Inversion-Principle-依赖倒置原则" class="headerlink" title="「D」ependency Inversion Principle 依赖倒置原则"></a>「D」ependency Inversion Principle 依赖倒置原则</h3><p>高层次的类不应该依赖于低层次的类。 两者都应该依赖于抽象接口。 抽象接口不应依赖于具体实现。 具体实现应该依赖于抽象接口。</p><ul><li>低层次的类实现基础操作 （例如磁盘操作、 传输网络数据和连接数据库等）。 </li><li>高层次类包含复杂业务逻辑以指导低层次类执行特定操作。</li></ul><p>依赖倒置原则建议改变这种依赖方式。 </p><p>作为初学者， 你最好使用业务术语来对高层次类依赖的低层次操作接口进行描述。 例如， 业务逻辑应该调用名为 open­Report­(file)的方法， 而不是 open­File­(x) 、  read­Bytes­(n)和 close­File­(x)等一系列方法。 这些接口被视为是高层次的。<br>现在你可基于这些接口创建高层次类， 而不是基于低层次的具体类。 这要比原始的依赖关系灵活很多。<br>一旦低层次的类实现了这些接口， 它们将依赖于业务逻辑层， 从而倒置了原始的依赖关系。 </p><p>依赖倒置原则通常和开闭原则共同发挥作用： 你无需修改已有类就能用不同的业务逻辑类扩展低层次的类。</p><p>修改前，高层次 <code>BudgetReport</code> 依赖于 低层次的 数据库操作方法，如果数据库的版本或者功能发生改变，那么<code>BudgeReport</code>就可能不能工作：</p><p><img src="/posts/%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86/%E4%BE%9D%E8%B5%96%E5%80%92%E7%BD%AE%E5%8E%9F%E5%88%99.png" alt="依赖倒置原则"></p>]]></content>
    
    
    <summary type="html">工程类基本知识查阅</summary>
    
    
    
    <category term="工程类" scheme="http://ruobingw.com/categories/%E5%B7%A5%E7%A8%8B%E7%B1%BB/"/>
    
    
    <category term="UML" scheme="http://ruobingw.com/tags/UML/"/>
    
    <category term="关系" scheme="http://ruobingw.com/tags/%E5%85%B3%E7%B3%BB/"/>
    
  </entry>
  
  <entry>
    <title>Code-Refactor</title>
    <link href="http://ruobingw.com/posts/Code-Refactor/"/>
    <id>http://ruobingw.com/posts/Code-Refactor/</id>
    <published>2023-11-17T22:32:40.000Z</published>
    <updated>2024-05-15T04:17:52.558Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Code-Smells"><a href="#Code-Smells" class="headerlink" title="Code Smells"></a>Code Smells</h1><p>需要避免这些</p><h2 id="Bloaters"><a href="#Bloaters" class="headerlink" title="Bloaters:"></a>Bloaters:</h2><p>Code, methods and classes that have invreased to such gargantuan proportions that are hard to work with. They accumulate over time as the program evolves</p><h3 id="Long-Method"><a href="#Long-Method" class="headerlink" title="Long Method"></a>Long Method</h3><p>A method contains too many lines of code</p><p>(Method that is longer than ten lines should take care about it)</p><h4 id="原因："><a href="#原因：" class="headerlink" title="原因："></a>原因：</h4><p>一般情况下加入原本方法比添加新方法看起来要简单一些并且方法的长度是逐渐增长的，因此是不容易被一次发现的。</p><h4 id="方案："><a href="#方案：" class="headerlink" title="方案："></a>方案：</h4><p>As a rule of thumb, <strong>if you feel the need to comment on something inside a method</strong>, you should <strong>take this code and put it in a new method.</strong></p><h5 id="Extract-Method"><a href="#Extract-Method" class="headerlink" title="Extract Method"></a>Extract Method</h5><p>合并逻辑相通的代码：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Bad:</span></span><br><span class="line"><span class="comment">// code fragment that can be grouped together</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">printOwing</span><span class="params">()</span> {</span><br><span class="line">  printBanner();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Print details.</span></span><br><span class="line">  System.out.println(<span class="string">"name: "</span> + name);</span><br><span class="line">  System.out.println(<span class="string">"amount: "</span> + getOutstanding());</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// Good:</span></span><br><span class="line"><span class="comment">// Move this code to a separate new method (or function) and replace the old code with a call to the method.</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">printOwing</span><span class="params">()</span> {</span><br><span class="line">  printBanner();</span><br><span class="line">  printDetails(getOutstanding());</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">printDetails</span><span class="params">(<span class="type">double</span> outstanding)</span> {</span><br><span class="line">  System.out.println(<span class="string">"name: "</span> + name);</span><br><span class="line">  System.out.println(<span class="string">"amount: "</span> + outstanding);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h5 id="Reduce-local-variables-and-parameters-before-extracting-a-method"><a href="#Reduce-local-variables-and-parameters-before-extracting-a-method" class="headerlink" title="Reduce local variables and parameters before extracting a method"></a>Reduce local variables and parameters before extracting a method</h5><p>If local variables and parameters interfere with extracting a method, use </p><ul><li><strong>Replace Temp with Query</strong></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Bad:</span></span><br><span class="line"><span class="comment">// place the result of an expression in a local variable for later use in your code.</span></span><br><span class="line"><span class="type">double</span> <span class="title function_">calculateTotal</span><span class="params">()</span> {</span><br><span class="line">  <span class="type">double</span> <span class="variable">basePrice</span> <span class="operator">=</span> quantity * itemPrice;</span><br><span class="line">  <span class="keyword">if</span> (basePrice &gt; <span class="number">1000</span>) {</span><br><span class="line">    <span class="keyword">return</span> basePrice * <span class="number">0.95</span>;</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">else</span> {</span><br><span class="line">    <span class="keyword">return</span> basePrice * <span class="number">0.98</span>;</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// Good:</span></span><br><span class="line"><span class="comment">// Move the entire expression to a separate method and return the result from it. Query the method instead of using a variable. Incorporate the new method in other methods, if necessary.</span></span><br><span class="line"><span class="type">double</span> <span class="title function_">calculateTotal</span><span class="params">()</span> {</span><br><span class="line">  <span class="keyword">if</span> (basePrice() &gt; <span class="number">1000</span>) {</span><br><span class="line">    <span class="keyword">return</span> basePrice() * <span class="number">0.95</span>;</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">else</span> {</span><br><span class="line">    <span class="keyword">return</span> basePrice() * <span class="number">0.98</span>;</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"><span class="type">double</span> <span class="title function_">basePrice</span><span class="params">()</span> {</span><br><span class="line">  <span class="keyword">return</span> quantity * itemPrice;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li><strong>Introduce Parameter Object</strong></li></ul><p>Methods contain a repeating group of parameters:</p><p>![Introduce Parameter Object - Before](/posts/Code-Refactor/Introduce Parameter Object - Before.png)</p><p>Replace these parameters with an object:</p><p>![Introduce Parameter Object - After](/posts/Code-Refactor/Introduce Parameter Object - After.png)</p><ul><li><strong>Preserve Whole Object</strong>.</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Bad: Several values are from an object and then pass them as parameters to a method:</span></span><br><span class="line"><span class="type">int</span> <span class="variable">low</span> <span class="operator">=</span> daysTempRange.getLow();</span><br><span class="line"><span class="type">int</span> <span class="variable">high</span> <span class="operator">=</span> daysTempRange.getHigh();</span><br><span class="line"><span class="type">boolean</span> <span class="variable">withinPlan</span> <span class="operator">=</span> plan.withinRange(low, high);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Good: Pass the whole object</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">withinPlan</span> <span class="operator">=</span> plan.withinRange(daysTempRange);</span><br></pre></td></tr></tbody></table></figure><h5 id="Replace-Method-with-Method-Object"><a href="#Replace-Method-with-Method-Object" class="headerlink" title="Replace Method with Method Object"></a>Replace Method with Method Object</h5><p>If none of the previous recipes help, try moving the entire method to a separate object via <strong>Replace Method with Method Object</strong>.</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Bad: A long method in which the local variables are so intertwined that you can't apply Extract Method.</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Order</span> {</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">price</span><span class="params">()</span> {</span><br><span class="line">    <span class="type">double</span> primaryBasePrice;</span><br><span class="line">    <span class="type">double</span> secondaryBasePrice;</span><br><span class="line">    <span class="type">double</span> tertiaryBasePrice;</span><br><span class="line">    <span class="comment">// Perform long computation.</span></span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"><span class="comment">// Good: Transform the method into a separate class so that the local variables become fields of the class. Then you can split the method into several methods within the same class.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Order</span> {</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">price</span><span class="params">()</span> {</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PriceCalculator</span>(<span class="built_in">this</span>).compute();</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PriceCalculator</span> {</span><br><span class="line">  <span class="keyword">private</span> <span class="type">double</span> primaryBasePrice;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">double</span> secondaryBasePrice;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">double</span> tertiaryBasePrice;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">PriceCalculator</span><span class="params">(Order order)</span> {</span><br><span class="line">    <span class="comment">// Copy relevant information from the</span></span><br><span class="line">    <span class="comment">// order object.</span></span><br><span class="line">  }</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">compute</span><span class="params">()</span> {</span><br><span class="line">    <span class="comment">// Perform long computation.</span></span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h5 id="Conditionals-and-Loops"><a href="#Conditionals-and-Loops" class="headerlink" title="Conditionals and Loops"></a>Conditionals and Loops</h5><p><code>if判断</code>和<code>loop</code>可以尝试放在一个单独的方法中</p><p>For conditionals, use <strong>Decompose Conditional</strong>. </p><p>If loops are in the way, try <strong>Extract Method</strong>.</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Bad: complex conditional (if-then/else or switch).</span></span><br><span class="line"><span class="keyword">if</span> (date.before(SUMMER_START) || date.after(SUMMER_END)) {</span><br><span class="line">  charge = quantity * winterRate + winterServiceCharge;</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">  charge = quantity * summerRate;</span><br><span class="line">}</span><br><span class="line"><span class="comment">// Good: Decompose the complicated parts of the conditional into separate methods: the condition, then and else.</span></span><br><span class="line"><span class="keyword">if</span> (isSummer(date)) {</span><br><span class="line">  charge = summerCharge(quantity);</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">  charge = winterCharge(quantity);</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad: Code fragment that can be grouped together.</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">printProperties</span><span class="params">(List users)</span> {</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; users.size(); i++) {</span><br><span class="line">    <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="string">""</span>;</span><br><span class="line">    result += users.get(i).getName();</span><br><span class="line">    result += <span class="string">" "</span>;</span><br><span class="line">    result += users.get(i).getAge();</span><br><span class="line">    System.out.println(result);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"><span class="comment">// Good: Move this code to a separate new method (or function) and replace the old code with a call to the method.</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">printProperties</span><span class="params">(List users)</span> {</span><br><span class="line">  <span class="keyword">for</span> (User user : users) {</span><br><span class="line">    System.out.println(getProperties(user));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">String <span class="title function_">getProperties</span><span class="params">(User user)</span>  {</span><br><span class="line">  <span class="keyword">return</span> user.getName() + <span class="string">" "</span> + user.getAge();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>更多的方法带来的性能差是可以忽略的且更易读的代码能够带来更好的结构化以及潜在优化</p><h3 id="Large-Class"><a href="#Large-Class" class="headerlink" title="Large Class"></a>Large Class</h3><p>Class that contains many fields/method/lines of code</p><h4 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h4><p>和 Long Method 类似，只管认为加field比加class要容易的多</p><h4 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h4><p>When a class is wearing too many (functional) hats, think about splitting it up.</p><h5 id="Extract-as-Class"><a href="#Extract-as-Class" class="headerlink" title="Extract (as) Class"></a>Extract (as) Class</h5><p><strong>Extract Class</strong> helps if part of the behavior of the large class can be spun off into a separate component. 分离部分行为到单独的组件中</p><p><img src="/posts/Code-Refactor/large_class_1.png" alt="large_class_1"></p><h5 id="Extract-as-Subclass"><a href="#Extract-as-Subclass" class="headerlink" title="Extract (as) Subclass"></a>Extract (as) Subclass</h5><p><strong>Extract Subclass</strong> helps if part of the behavior of the large class can be implemented in different ways or is used in rare cases. </p><p><img src="/posts/Code-Refactor/large_class_2.png" alt="large_class_2"></p><h5 id="Extract-as-Interface"><a href="#Extract-as-Interface" class="headerlink" title="Extract (as) Interface"></a>Extract (as) Interface</h5><p><strong>Extract Interface</strong> helps if it’s necessary to have a list of the operations and behaviors that the client can use.</p><p><img src="/posts/Code-Refactor/large_class_3.png" alt="large_class_3"></p><h5 id="Duplicate-Observed-Data"><a href="#Duplicate-Observed-Data" class="headerlink" title="Duplicate Observed Data"></a>Duplicate Observed Data</h5><p>If a large class is responsible for the graphical interface, you may try to move some of its data and behavior to a separate domain object. In doing so, it may be necessary to store copies of some data in two places and keep the data consistent. Duplicate Observed Data offers a way to do this.</p><p>当一个类负责图形界面(GUI)时，同时还包含域(domain)数据的问题。在这个问题中，图形界面和域数据的逻辑耦合在了一起，这可能导致类变得过于复杂，并且难以维护。</p><p><img src="/posts/Code-Refactor/large_class_4.png" alt="large_class_4"></p><p>这张图展示了代码重构的一个常见模式，即“Duplicate Observed Data”模式。这个模式解决了当一个类负责图形界面(GUI)时，同时还包含域(domain)数据的问题。在这个问题中，图形界面和域数据的逻辑耦合在了一起，这可能导致类变得过于复杂，并且难以维护。</p><p><strong>问题（左侧）:</strong> 在重构前的设计中，<code>IntervalWindow</code> 类同时负责显示信息（GUI）和存储数据（域数据）。这个类中有三个文本字段（<code>TextField</code>），每个字段都有对应的失去焦点（FocusLost）事件处理函数，还有计算长度和计算结束时间的函数。这样的设计让 <code>IntervalWindow</code> 类承担了过多的职责，违反了单一职责原则，也使得该类过于庞大且难以测试。</p><p><strong>解决方案（右侧）:</strong> 图展示了如何将域数据从 <code>IntervalWindow</code> 类中分离出来，创建了一个新的 <code>Interval</code> 类。<code>IntervalWindow</code> 依然保留有界面相关的文本字段和事件处理函数，但是域数据（起始时间、结束时间和长度）现在被移到了新的 <code>Interval</code> 类中，这个类有自己的起始时间、结束时间和长度属性，以及计算长度和计算结束时间的方法。</p><p><strong>这样做的好处包括:</strong></p><ol><li><strong>单一职责原则</strong>：每个类都只处理一个职责，<code>IntervalWindow</code> 负责界面的显示，而 <code>Interval</code> 负责数据的处理。</li><li><strong>更容易测试</strong>：因为 <code>Interval</code> 类只处理数据，所以比起含有GUI代码的类，它更容易进行单元测试。</li><li><strong>更低的耦合度</strong>：这种分离减少了类之间的依赖性，使得修改界面或数据模型时，可以减少对另一部分的影响。</li><li><strong>更容易维护和扩展</strong>：清晰的分离使得后续维护和添加新功能时更加简单。</li></ol><p>在这种模式下，<code>IntervalWindow</code> 类会观察（Observe） <code>Interval</code> 类的实例。当 <code>Interval</code> 的数据发生变化时，<code>IntervalWindow</code> 可以更新其显示的数据。这通常通过某种形式的观察者模式来实现，其中 <code>Interval</code> 类会通知所有注册的观察者数据的变化。这样，任何时候 <code>Interval</code> 的数据改变了，<code>IntervalWindow</code> 都可以得到通知，并更新用户界面。</p><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><ul><li>Refactoring of these classes spares developers from needing to remember a large number of attributes for a class. [重构这些类使开发人员无需记住类的大量属性。]</li><li>In many cases, splitting large classes into parts avoids duplication of code and functionality. [在许多情况下，将大类分成几个部分可以避免代码和功能的重复。]</li></ul><h3 id="Primitive-Obsession"><a href="#Primitive-Obsession" class="headerlink" title="Primitive Obsession"></a>Primitive Obsession</h3><ul><li>Use of primitives instead of small objects for simple tasks (such as currency, ranges, special strings for phone numbers, etc.)</li><li>Use of constants for coding information (such as a constant <code>USER_ADMIN_ROLE = 1</code> for referring to users with administrator rights.)</li><li>Use of string constants as field names for use in data arrays.</li></ul><p>“Primitive obsession”是一个常见的编码问题，指的是开发者过度使用原始数据类型（如int、float、boolean等）来表示应该由对象表示的概念。这个术语反映了一种倾向：即使在面向对象编程中，也倾向于使用基本数据类型而不是设计小型的类来表示具有业务逻辑的概念。</p><p>解决”primitive obsession”可以提高代码的可读性、可维护性和灵活性。</p><ol><li><p><strong>使用原始数据类型而不是小对象进行简单任务</strong>：</p><ul><li>这里的“primitive”是指原始数据类型。例如，使用<code>int</code>或<code>double</code>来表示货币值可能会导致精度问题和缺乏表达力。更好的做法是创建一个<code>Currency</code>类，它可以封装货币的值和货币类型（比如美元、欧元等），同时提供货币相关的操作和转换。</li></ul></li><li><p><strong>使用常量进行编码信息</strong>：</p><ul><li>在这个上下文中，使用类似<code>USER_ADMIN_ROLE = 1</code>的常量代表了一种“primitive”的使用方式，因为它使用数字（一个原始类型）来代表用户角色。这种做法的问题在于它通常不够表达，而且容易出错。替代的方法是使用枚举（Enum）或者小型类，这样可以提供更加类型安全和描述性更强的方法来代表用户角色。</li></ul></li><li><p><strong>使用字符串常量作为数据数组中的字段名称</strong>：</p><ul><li><p>在这种情况下，“primitive”通常是指字符串类型。例如，当使用字符串来访问数据结构中的值时，这可能会导致拼写错误和与数据结构的耦合。通过创建小型类或结构体，我们可以更安全地封装数据，同时还可以提供更清晰的API和错误检查。</p></li><li><p>当然可以。使用字符串常量作为数据数组中的字段名称通常发生在我们处理键值对集合，如JSON对象或者Java中的<code>Map</code>时。</p><p>假设我们有一个表示用户的<code>Map</code>，在没有使用小对象封装的情况下，它可能看起来是这样的：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Object&gt; user = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">user.put(<span class="string">"name"</span>, <span class="string">"John Doe"</span>);</span><br><span class="line">user.put(<span class="string">"email"</span>, <span class="string">"john.doe@example.com"</span>);</span><br><span class="line">user.put(<span class="string">"role"</span>, <span class="number">1</span>);</span><br></pre></td></tr></tbody></table></figure><p>在上述代码中，字段名称如<code>"name"</code>、<code>"email"</code>和<code>"role"</code>都是直接使用字符串常量。这种方式的问题在于，它容易出错（比如拼写错误）并且不利于重构（比如当字段名称变更时，所有的字符串都需要修改）。</p><p>一个更好的做法是使用常量来代替这些字符串字面量：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserConstants</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">NAME</span> <span class="operator">=</span> <span class="string">"name"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">EMAIL</span> <span class="operator">=</span> <span class="string">"email"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ROLE</span> <span class="operator">=</span> <span class="string">"role"</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">Map&lt;String, Object&gt; user = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">user.put(UserConstants.NAME, <span class="string">"John Doe"</span>);</span><br><span class="line">user.put(UserConstants.EMAIL, <span class="string">"john.doe@example.com"</span>);</span><br><span class="line">user.put(UserConstants.ROLE, <span class="number">1</span>);</span><br></pre></td></tr></tbody></table></figure><p>这样，如果字段名需要更改，我们只需要在<code>UserConstants</code>类中修改一次，而不需要在整个代码库中寻找和替换所有的硬编码字符串。</p><p>但是，要彻底解决”primitive obsession”的问题，我们应该创建一个用户类来封装这些属性：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> {</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> role;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String name, String email, <span class="type">int</span> role)</span> {</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.email = email;</span><br><span class="line">        <span class="built_in">this</span>.role = role;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里可以添加getter和setter方法</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">"John Doe"</span>, <span class="string">"john.doe@example.com"</span>, <span class="number">1</span>);</span><br></pre></td></tr></tbody></table></figure><p>现在，我们有了一个类型安全的对象，其中的字段名称是类的属性，而不是字符串字面量。这种方式不仅减少了错误的机会，而且使得代码更容易阅读和维护。此外，<code>User</code>类可以包含逻辑，比如验证电子邮件的格式或者确定用户角色的权限。</p></li></ul></li></ol><p>简而言之，在这些情况下，”primitive”通常指的是基本数据类型或者直接使用的常量。”Primitive obsession”可能会导致代码难以理解和维护，因为它缺乏抽象层，使得代码中的业务逻辑不够明确。通过引入小对象来封装复杂性，代码会变得更加清晰和健壮。</p><h4 id="原因-1"><a href="#原因-1" class="headerlink" title="原因"></a>原因</h4><p>Like most other smells, primitive obsessions are born in moments of weakness. “Just a field for storing some data!” the programmer said. Creating a primitive field is so much easier than making a whole new class, right? And so it was done. Then another field was needed and added in the same way. Lo and behold, the class became huge and unwieldy. - 简单就加了</p><p>Primitives are often used to “simulate” types. So instead of a separate data type, you have a set of numbers or strings that form the list of allowable values for some entity. Easy-to-understand names are then given to these specific numbers and strings via constants, which is why they’re spread wide and far. - 用于代表一些东西</p><p>Another example of poor primitive use is field simulation. The class contains a large array of diverse data and string constants (which are specified in the class) are used as array indices for getting this data.</p><h4 id="方案-1"><a href="#方案-1" class="headerlink" title="方案"></a>方案</h4><h5 id="Replace-Set-of-Fields-with-Object"><a href="#Replace-Set-of-Fields-with-Object" class="headerlink" title="Replace Set of Fields with Object"></a>Replace Set of Fields with Object</h5><p>If you have a large variety of primitive fields, it may be possible to logically group some of them into their own class. Even better, move the behavior associated with this data into the class too. For this task, try <strong>Replace Data Value with Object</strong>.</p><p><img src="/posts/Code-Refactor/primitive_obsession_1.png" alt="primitive_obsession_1"></p><p>将一部分原始变量打包进入一个class</p><h5 id="Primitive-Fields-in-Method-Parameters"><a href="#Primitive-Fields-in-Method-Parameters" class="headerlink" title="Primitive Fields in Method Parameters"></a>Primitive Fields in Method Parameters</h5><p>If the values of primitive fields are used in method parameters, go with <strong>Introduce Parameter Object</strong> or <strong>Preserve Whole Object</strong>.</p><p><img src="/posts/Code-Refactor/primitive_obsession_2.png" alt="primitive_obsession_2"></p><p>在这个示例中，“primitive fields”指的是原始数据类型的字段。在Java语言中，原始类型（primitive types）包括基础的数据类型，例如<code>int</code>、<code>double</code>、<code>float</code>、<code>boolean</code>等，它们不是对象，不属于任何类的实例，并且通常用于表示简单的数值或真/假值。</p><p>然而，在这个上下文中，术语“primitive fields”可能被用来泛指那些<strong>没有被封装在对象中的简单数据类型的字段</strong>。例如，在方法参数中直接使用两个<code>Date</code>类型的参数（<code>start</code>和<code>end</code>）而不是一个封装了这两个字段的对象。虽然<code>Date</code>类型在Java中不是原始类型（它实际上是一个对象），这里的“primitive”可能是用来指代那些还没有被进一步抽象或封装的字段。</p><p>“引入参数对象”（Introduce Parameter Object）。该策略的目的是简化方法签名并提高代码的可读性和可维护性。</p><ul><li><p><strong>问题</strong>：有多个方法（如<code>amountInvoicedIn</code>、<code>amountReceivedIn</code>和<code>amountOverdueIn</code>）接受相同的参数（<code>start</code>和<code>end</code>日期），这导致了重复的参数组，并且每次调用这些方法时都需要重复这些参数。</p></li><li><p><strong>解决方案</strong>：创建一个新的类或对象来封装这些参数，例如<code>DateRange</code>对象，它包含<code>start</code>和<code>end</code>日期。然后，可以将这个对象作为单个参数传递给方法，从而减少参数的数量并使方法调用更加清晰。</p></li></ul><p>重构后，方法调用变得更加简洁，因为只需要传递一个<code>DateRange</code>对象而不是两个分开的<code>Date</code>对象。这样做的好处包括减少重复代码，使方法调用更加直观，以及提供了进一步重构的可能性，例如，如果将来需要在日期范围中添加更多的信息或功能，只需要修改<code>DateRange</code>类即可。</p><p>让我们用Java代码举个例子：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 重构前的代码，方法参数中直接使用了Date类型</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Customer</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">amountInvoicedIn</span><span class="params">(Date start, Date end)</span> {</span><br><span class="line">        <span class="comment">// 计算逻辑...</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">amountReceivedIn</span><span class="params">(Date start, Date end)</span> {</span><br><span class="line">        <span class="comment">// 计算逻辑...</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">amountOverdueIn</span><span class="params">(Date start, Date end)</span> {</span><br><span class="line">        <span class="comment">// 计算逻辑...</span></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重构后的代码，引入了一个新的DateRange类来封装日期范围</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DateRange</span> {</span><br><span class="line">    <span class="keyword">private</span> Date start;</span><br><span class="line">    <span class="keyword">private</span> Date end;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DateRange</span><span class="params">(Date start, Date end)</span> {</span><br><span class="line">        <span class="built_in">this</span>.start = start;</span><br><span class="line">        <span class="built_in">this</span>.end = end;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// DateRange类的其他有用方法和逻辑...</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Customer</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">amountInvoicedIn</span><span class="params">(DateRange dateRange)</span> {</span><br><span class="line">        <span class="comment">// 使用dateRange.getStart()和dateRange.getEnd()进行计算...</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">amountReceivedIn</span><span class="params">(DateRange dateRange)</span> {</span><br><span class="line">        <span class="comment">// 使用dateRange.getStart()和dateRange.getEnd()进行计算...</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">amountOverdueIn</span><span class="params">(DateRange dateRange)</span> {</span><br><span class="line">        <span class="comment">// 使用dateRange.getStart()和dateRange.getEnd()进行计算...</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在这个重构的过程中，通过引入<code>DateRange</code>类，我们不仅简化了方法签名，而且提高了代码的可读性和可维护性。这也是设计模式中的封装原则的一个应用。</p><p>另一个方法是保留整个Object</p><p><img src="/posts/Code-Refactor/primitive_obsession_3.png" alt="primitive_obsession_3"></p><h5 id="Get-Rid-of-Type-codes"><a href="#Get-Rid-of-Type-codes" class="headerlink" title="Get Rid of Type codes"></a>Get Rid of Type codes</h5><p>When complicated data is coded in variables, use <strong>Replace Type Code with Class</strong>, <strong>Replace Type Code with Subclasses</strong> or <strong>Replace Type Code with State/Strategy</strong>.</p><p><img src="/posts/Code-Refactor/primitive_obsession_4.png" alt="primitive_obsession_4"></p><p><img src="/posts/Code-Refactor/primitive_obsession_5.png" alt="primitive_obsession_5"></p><p><img src="/posts/Code-Refactor/primitive_obsession_6.png" alt="primitive_obsession_6"></p><p>有时候，使用子类可能不是最佳选择，特别是当类型代码影响对象的状态，但又不能或不应该用子类来表示时。在这种情况下，可以使用状态或策略模式来替换类型代码。</p><p>状态/策略模式允许你将行为封装在不同的对象中，并在运行时切换对象的行为。你创建一个状态接口或策略接口，并为每种类型代码创建实现该接口的具体类。然后，你可以在运行时根据需要将这些对象替换为不同的状态或策略。</p><p>例如，如果<code>Employee</code>对象的类型会在其生命周期中改变，那么使用状态模式可以在不同的状态之间切换而不需要创建和销毁对象。</p><p><strong>不能使用子类的情况：</strong></p><ul><li><strong>类型动态变化</strong>：如果对象的类型在其生命周期中需要改变，使用子类就不太适合了。因为一旦创建了一个对象的实例，它的类就不能改变了。</li><li><strong>类爆炸</strong>：如果类型代码的组合非常多，创建对应的子类会导致类数量爆炸，增加系统复杂性。</li><li><strong>多维度变化</strong>：如果对象的行为由多个独立的维度影响，那么使用子类可能会导致重复代码。在这种情况下，策略模式可以让你独立地改变对象的各个方面。</li><li><strong>共享行为</strong>：如果不同的类型代码共享一些行为，使用子类可能会导致这些共享行为的重复实现。而状态/策略模式允许共享行为被多个状态/策略共用。</li></ul><h5 id="Replace-Array-with-Object"><a href="#Replace-Array-with-Object" class="headerlink" title="Replace Array with Object"></a>Replace Array with Object</h5><p>If there are arrays among the variables, use <strong>Replace Array with Object</strong>.</p><p><img src="/posts/Code-Refactor/primitive_obsession_7.png" alt="primitive_obsession_7"></p><h4 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h4><p>Code becomes more flexible thanks to use of objects instead of primitives.</p><p>Better understandability and organization of code. Operations on particular data are in the same place, instead of being scattered. No more guessing about the reason for all these strange constants and why they’re in an array.</p><p>Easier finding of duplicate code.</p><h3 id="Long-Parameter-List"><a href="#Long-Parameter-List" class="headerlink" title="Long Parameter List"></a>Long Parameter List</h3><blockquote><p>More than three or four parameters for a method</p></blockquote><h4 id="原因：-1"><a href="#原因：-1" class="headerlink" title="原因："></a>原因：</h4><p>在面向对象编程中，一个核心原则是降低类之间的耦合度，即使类之间的依赖关系最小化。这通常被视为一种良好的设计实践，因为它可以增加代码的模块性和可重用性，并简化系统的测试和维护。</p><p>考虑一个生成报告的方法，需要多种数据（如标题、页码、内容等）。最初，这些数据的获取可能直接在方法内部进行，使得方法与数据源高度耦合。为了降低耦合，决定在调用该生成报告方法之前先在外部准备好所有必要的数据，然后通过参数传递给方法：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReportGenerator</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">generateReport</span><span class="params">(String title, <span class="type">int</span> pageNumber, List&lt;String&gt; content)</span> {</span><br><span class="line">        <span class="comment">// 生成报告的逻辑</span></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReportService</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">prepareAndGenerateReport</span><span class="params">()</span> {</span><br><span class="line">        <span class="type">String</span> <span class="variable">title</span> <span class="operator">=</span> dataSource.getTitle(); <span class="comment">// 获取标题</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">pageNumber</span> <span class="operator">=</span> dataSource.getPageNumber(); <span class="comment">// 获取页码</span></span><br><span class="line">        List&lt;String&gt; content = dataSource.getContent(); <span class="comment">// 获取内容</span></span><br><span class="line">        <span class="type">ReportGenerator</span> <span class="variable">generator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReportGenerator</span>();</span><br><span class="line">        generator.generateReport(title, pageNumber, content); <span class="comment">// 传递参数</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>尽管这种设计减少了<code>ReportGenerator</code>对数据来源的直接依赖，提高了类之间的独立性，但它也引入了长参数列表的问题。当方法依赖于多个外部创建的对象时，这些对象必须通过方法的参数列表传递，导致参数数量急剧增加。</p><h4 id="方案-2"><a href="#方案-2" class="headerlink" title="方案"></a>方案</h4><h5 id="Replace-Parameter-with-Method-Call"><a href="#Replace-Parameter-with-Method-Call" class="headerlink" title="Replace Parameter with Method Call"></a>Replace Parameter with Method Call</h5><p>假如某些arguments是<code>另一个object</code>方法执行的结果，可以将这些arguments替换为<code>方法内部的</code>Method Call。</p><p><img src="/posts/Code-Refactor/long_parameter_list_1.png" alt="long_parameter_list_1"></p><h5 id="Preserve-Whole-Object"><a href="#Preserve-Whole-Object" class="headerlink" title="Preserve Whole Object"></a>Preserve Whole Object</h5><p>我们可以pass一个包含所有需要参数的object到方法里</p><p><img src="/posts/Code-Refactor/long_parameter_list_2.png" alt="long_parameter_list_2"></p><h5 id="Introduce-Parameter-Object"><a href="#Introduce-Parameter-Object" class="headerlink" title="Introduce Parameter Object"></a>Introduce Parameter Object</h5><p>和上面的方法其实有点类似上面的是将被调用本身的object存入，这个是创建一个新的object存入，这个方法适用于parameters 来自于不同的source。</p><p><img src="/posts/Code-Refactor/long_parameter_list_3.png" alt="long_parameter_list_3"></p><h4 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h4><p>比较简单，但是如果去掉某个参数会导致耦合度增加，那就不要删掉了</p><h3 id="Data-Clumps"><a href="#Data-Clumps" class="headerlink" title="Data Clumps"></a>Data Clumps</h3><blockquote><p>Different Parts of the code contain identical groups of variables. These Clumps should be turned into their own classes</p></blockquote><h4 id="原因-2"><a href="#原因-2" class="headerlink" title="原因"></a>原因</h4><p>封装失败导致的，相关连的变量应该被组合为一个对象。所以可以 尝试删除一个变量然后看看其他值是否仍然有意义。比如：如果删除了 <code>user</code> 后，剩余的 <code>startDate</code>, <code>endDate</code>, 和 <code>roomNumber</code> 仍描述了预订的时间和地点，但缺少了执行操作的用户信息，这是业务逻辑不完整的表现。这说明 <code>startDate</code>, <code>endDate</code>, <code>roomNumber</code>, 和 <code>user</code> 这组变量彼此之间存在强烈的逻辑关联，应该一起考虑，它们的组合描述了一个完整的业务操作 —— 预订或取消预订一个会议室。</p><h4 id="方案-3"><a href="#方案-3" class="headerlink" title="方案"></a>方案</h4><h5 id="Extract-Class"><a href="#Extract-Class" class="headerlink" title="Extract Class"></a>Extract Class</h5><p><img src="/posts/Code-Refactor/Data_Clumps_1.png" alt="Data_Clumps_1"></p><h5 id="Introduce-Parameter-Object-1"><a href="#Introduce-Parameter-Object-1" class="headerlink" title="Introduce Parameter Object"></a>Introduce Parameter Object</h5><p><img src="/posts/Code-Refactor/Data_Clumps_2.png" alt="Data_Clumps_2"></p><h5 id="Preserve-Whole-Object-1"><a href="#Preserve-Whole-Object-1" class="headerlink" title="Preserve Whole Object"></a>Preserve Whole Object</h5><p>传入参数所对应的对象，而不是单独的几个field</p><p><img src="/posts/Code-Refactor/Data_Clumps_3.png" alt="Data_Clumps_3"></p><h4 id="总结-4"><a href="#总结-4" class="headerlink" title="总结"></a>总结</h4><p>解决方案很多和长参数列表类似，其实就是通过抽出到某一个class或者直接使用从而避免长/重复Clumps</p><h2 id="Object-Orientation-Abusers"><a href="#Object-Orientation-Abusers" class="headerlink" title="Object-Orientation Abusers"></a>Object-Orientation Abusers</h2><blockquote><p>不规范的使用oop</p></blockquote><h3 id="Switch-Statements"><a href="#Switch-Statements" class="headerlink" title="Switch Statements"></a>Switch Statements</h3><h4 id="原因-3"><a href="#原因-3" class="headerlink" title="原因"></a>原因</h4><blockquote><p>非常复杂的<code>switch</code>或者<code>if</code></p></blockquote><p>一般原因可能是一开始很小但是随着不停的加入条件但是单块swtich不断变大。</p><p>在oop中，条件判断应该很少，这是因为OOP可以使用多态的特性</p><p>比如：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 switch 的传统方式</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">performOperation</span><span class="params">(String userType)</span> {</span><br><span class="line">    <span class="keyword">switch</span> (userType) {</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"Admin"</span>:</span><br><span class="line">            performAdminOperation();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"Moderator"</span>:</span><br><span class="line">            performModeratorOperation();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"User"</span>:</span><br><span class="line">            performUserOperation();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">"Invalid user type"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用多态的 OOP 方式</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">User</span> {</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">performOperation</span><span class="params">()</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Admin</span> <span class="keyword">implements</span> <span class="title class_">User</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">performOperation</span><span class="params">()</span> {</span><br><span class="line">        performAdminOperation();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Moderator</span> <span class="keyword">implements</span> <span class="title class_">User</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">performOperation</span><span class="params">()</span> {</span><br><span class="line">        performModeratorOperation();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegularUser</span> <span class="keyword">implements</span> <span class="title class_">User</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">performOperation</span><span class="params">()</span> {</span><br><span class="line">        performUserOperation();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>通过采用多态性，每个用户类负责定义其操作的具体实现，系统的其他部分则不需要知道用户的具体类型，也不需要 <code>switch</code> 语句。这样做提高了代码的模块化和可维护性，并使得添加新的用户类型变得非常容易。</p><h4 id="方案-4"><a href="#方案-4" class="headerlink" title="方案"></a>方案</h4><h5 id="Isolate-switch-Operator"><a href="#Isolate-switch-Operator" class="headerlink" title="Isolate switch Operator"></a>Isolate <code>switch</code> Operator</h5><p>To isolate switch and put it in the right class, need <code>Extract Method</code> and the <code>Move Method</code></p><p>Extract the swtich logic to a code block:</p><p><img src="/posts/Code-Refactor/switch_statements_1.png" alt="switch_statements_1"></p><p>Move the method:</p><p><img src="/posts/Code-Refactor/switch_statements_2.png" alt="switch_statements_2"></p><p>(PS: 感觉这种方法没有什么意义，本质上就是将在另一个class中被经常调用的方法给挪过去，然后调用reference，本质上像是一个Util class)</p><h5 id="Get-Rid-of-Type-Codes"><a href="#Get-Rid-of-Type-Codes" class="headerlink" title="Get Rid of Type Codes"></a>Get Rid of Type Codes</h5><p>这个其实在17514中提到过，少使用 instanceof，多使用多态性质</p><p>当被用于检查type时，use Replace Type Code with Subclasses or Replace Type Code with State/Strategy</p><p>Replace Type Code with Subclasses:<br><img src="/posts/Code-Refactor/switch_statements_3.png" alt="switch_statements_3"></p><p>Replace Type Code with State/Strategy Pattern:</p><p><img src="/posts/Code-Refactor/switch_statements_4.png" alt="switch_statements_4"></p><p>理解两者的不同确实需要更具体的代码示例来阐明。让我们通过具体示例更清晰地区分策略模式和状态模式，并强调在实际使用中它们的区别。</p><p>策略模式的示例：支付方式选择</p><p>假设我们有一个电子商务系统，用户可以选择不同的支付方式（例如信用卡支付、PayPal支付等）。这些支付方式可以被视为不同的策略，用户可以根据自己的需求选择使用哪种支付策略。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 支付策略接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PaymentStrategy</span> {</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">pay</span><span class="params">(<span class="type">int</span> amount)</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 信用卡支付策略</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CreditCardPayment</span> <span class="keyword">implements</span> <span class="title class_">PaymentStrategy</span> {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pay</span><span class="params">(<span class="type">int</span> amount)</span> {</span><br><span class="line">        System.out.println(<span class="string">"Paid "</span> + amount + <span class="string">" using Credit Card."</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// PayPal支付策略</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaypalPayment</span> <span class="keyword">implements</span> <span class="title class_">PaymentStrategy</span> {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pay</span><span class="params">(<span class="type">int</span> amount)</span> {</span><br><span class="line">        System.out.println(<span class="string">"Paid "</span> + amount + <span class="string">" using PayPal."</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端使用策略</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShoppingCart</span> {</span><br><span class="line">    <span class="keyword">private</span> PaymentStrategy paymentStrategy;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ShoppingCart</span><span class="params">(PaymentStrategy paymentStrategy)</span> {</span><br><span class="line">        <span class="built_in">this</span>.paymentStrategy = paymentStrategy;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPaymentStrategy</span><span class="params">(PaymentStrategy paymentStrategy)</span> {</span><br><span class="line">        <span class="built_in">this</span>.paymentStrategy = paymentStrategy;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkout</span><span class="params">(<span class="type">int</span> amount)</span> {</span><br><span class="line">        paymentStrategy.pay(amount);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">ShoppingCart</span> <span class="variable">cart</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ShoppingCart</span>(<span class="keyword">new</span> <span class="title class_">CreditCardPayment</span>());</span><br><span class="line">        cart.checkout(<span class="number">100</span>);  <span class="comment">// 使用信用卡支付</span></span><br><span class="line"></span><br><span class="line">        cart.setPaymentStrategy(<span class="keyword">new</span> <span class="title class_">PaypalPayment</span>());</span><br><span class="line">        cart.checkout(<span class="number">200</span>);  <span class="comment">// 更改为使用 PayPal 支付</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在这个例子中，<code>ShoppingCart</code> 对象可以在不同的支付策略之间灵活切换，但它自身的状态并没有改变，这反映了策略模式的典型用法。</p><p>状态模式的示例：电视状态控制</p><p>现在，让我们考虑一个电视机，它有多种状态（如开启、关闭、静音等）。这些状态决定了电视机的行为，状态改变意味着电视行为的改变。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 电视状态接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TVState</span> {</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">pressPowerButton</span><span class="params">()</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开启状态</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OnState</span> <span class="keyword">implements</span> <span class="title class_">TVState</span> {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pressPowerButton</span><span class="params">()</span> {</span><br><span class="line">        System.out.println(<span class="string">"Turning TV off."</span>);</span><br><span class="line">        <span class="comment">// 切换到关闭状态</span></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭状态</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OffState</span> <span class="keyword">implements</span> <span class="title class_">TVState</span> {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pressPowerButton</span><span class="params">()</span> {</span><br><span class="line">        System.out.println(<span class="string">"Turning TV on."</span>);</span><br><span class="line">        <span class="comment">// 切换到开启状态</span></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 电视类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TV</span> {</span><br><span class="line">    <span class="keyword">private</span> TVState state;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TV</span><span class="params">(TVState state)</span> {</span><br><span class="line">        <span class="built_in">this</span>.state = state;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setState</span><span class="params">(TVState state)</span> {</span><br><span class="line">        <span class="built_in">this</span>.state = state;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pressPowerButton</span><span class="params">()</span> {</span><br><span class="line">        state.pressPowerButton();</span><br><span class="line">        <span class="comment">// 根据当前状态改变行为</span></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">TV</span> <span class="variable">tv</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TV</span>(<span class="keyword">new</span> <span class="title class_">OffState</span>());</span><br><span class="line">        tv.pressPowerButton();  <span class="comment">// 开启电视</span></span><br><span class="line"></span><br><span class="line">        tv.setState(<span class="keyword">new</span> <span class="title class_">OnState</span>());</span><br><span class="line">        tv.pressPowerButton();  <span class="comment">// 关闭电视</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在这个例子中，<code>TV</code> 类的行为随着内部状态的改变而改变。状态的改变通常由状态自身来管理（虽然在这里是由外部控制以简化示例），这反映了状态模式的核心特性：对象通过改变状态改变其行为。</p><p>区别总结</p><p>在策略模式中，选择哪种策略通常是由客户端决定，策略之间相互独立，不知道彼此的存在。而在状态模式中，状态通常是有相互转换逻辑的，每个状态知道在某个动作下应该转换到哪个新状态，这是内部管理的。</p><p>这两个模式虽然结构相似，但它们在设计意图、管理责任和使用上下文中有明显区别。策略模式强调选择，状态模式强调变化。</p><h5 id="Replace-Conditional-With-Polymorphism"><a href="#Replace-Conditional-With-Polymorphism" class="headerlink" title="Replace Conditional With Polymorphism"></a>Replace Conditional With Polymorphism</h5><p><img src="/posts/Code-Refactor/switch_statements_5.png" alt="switch_statements_5"></p><h5 id="Replace-Parameters-switching-with-Explicit-Methods"><a href="#Replace-Parameters-switching-with-Explicit-Methods" class="headerlink" title="Replace Parameters switching with Explicit Methods"></a>Replace Parameters <code>switch</code>ing with Explicit Methods</h5><p><img src="/posts/Code-Refactor/switch_statements_6.png" alt="switch_statements_6"></p><h5 id="Introduce-Null-Object"><a href="#Introduce-Null-Object" class="headerlink" title="Introduce Null Object"></a>Introduce Null Object</h5><p>If one of the conditional option is <code>null</code>, use Null Object instead</p><p><img src="/posts/Code-Refactor/switch_statements_7.png" alt="switch_statements_7"></p><h3 id="Temporary-Field"><a href="#Temporary-Field" class="headerlink" title="Temporary Field"></a>Temporary Field</h3><blockquote><p>Temporary fields get their values (and thus are needed by objects) only under certain circumstances. Outside of these circumstances, they’re empty.</p></blockquote><p>这种一般是因为之后要生成数据现在搁置的情况或者是数据在固定某个if分支中才会被赋值</p><p>另一种情况是避免长参数列表而引入。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReportGenerator</span> {</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> specialCalculationValue;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">generateReport</span><span class="params">(Data data)</span> {</span><br><span class="line">        <span class="keyword">if</span> (data.isSpecialCase()) {</span><br><span class="line">            specialCalculationValue = complexCalculation(data);</span><br><span class="line">            <span class="comment">// 使用 specialCalculationValue 进行报告生成</span></span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 其他情况下，specialCalculationValue 不被使用，保持为空</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> <span class="title function_">complexCalculation</span><span class="params">(Data data)</span> {</span><br><span class="line">        <span class="comment">// 复杂计算</span></span><br><span class="line">        <span class="keyword">return</span> data.getValue() * <span class="number">42</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <summary type="html">代码重构</summary>
    
    
    
    <category term="工程类" scheme="http://ruobingw.com/categories/%E5%B7%A5%E7%A8%8B%E7%B1%BB/"/>
    
    
    <category term="代码重构" scheme="http://ruobingw.com/tags/%E4%BB%A3%E7%A0%81%E9%87%8D%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Trie树</title>
    <link href="http://ruobingw.com/posts/Trie%E6%A0%91/"/>
    <id>http://ruobingw.com/posts/Trie%E6%A0%91/</id>
    <published>2023-11-01T18:29:12.000Z</published>
    <updated>2024-05-15T04:17:52.564Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Trie树"><a href="#Trie树" class="headerlink" title="Trie树"></a>Trie树</h1><p>Trie 树（又叫「前缀树」或「字典树」）是一种用于快速查询「某个字符串/字符前缀」是否存在的数据结构。</p><p>其核心是使用<strong>「边」</strong>来代表有无字符，使用<strong>「点」</strong>来记录是否为<strong>「单词结尾」</strong>以及<strong>「其后续字符串的字符是什么」</strong></p><p><a href="https://leetcode.cn/problems/implement-trie-prefix-tree/solution/gong-shui-san-xie-yi-ti-shuang-jie-er-we-esm9/">https://leetcode.cn/problems/implement-trie-prefix-tree/solution/gong-shui-san-xie-yi-ti-shuang-jie-er-we-esm9/</a></p><p>解决的问题：</p><p>快速的查找字符串以及存储字符串：</p><p><img src="/posts/Trie%E6%A0%91/trie_eg_1.png" alt="trie_eg_1"></p><p>星号代表标记来作为这是一个单词的结尾，说明单词形成了</p><p>一般形式：都是小写字母，都是大写字母，都是数字；一般范围都会比较小</p><h1 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h1><p>假设 word</p><ol><li>从根结点开始，遍历单词 <code>word</code>，并看当前字母<code>word[i]</code>是否出现过<ol><li>没有 -&gt; 创建一个</li><li>有 -&gt; 遍历到点上</li></ol></li><li>在单词结尾打一个标记</li></ol><h1 id="208-实现-Trie-前缀树"><a href="#208-实现-Trie-前缀树" class="headerlink" title="208. 实现 Trie (前缀树)"></a><a href="https://leetcode.cn/problems/implement-trie-prefix-tree/">208. 实现 Trie (前缀树)</a></h1><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Trie</span> {</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Node</span> {</span><br><span class="line">        Node[] charactersArr;</span><br><span class="line">        <span class="type">boolean</span> isCompleteWord;</span><br><span class="line"></span><br><span class="line">        Node() {</span><br><span class="line">            charactersArr = <span class="keyword">new</span> <span class="title class_">Node</span>[<span class="number">26</span>];</span><br><span class="line">            <span class="built_in">this</span>.isCompleteWord = isCompleteWord;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    Node root;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Trie</span><span class="params">()</span> {</span><br><span class="line">        root = <span class="keyword">new</span> <span class="title class_">Node</span>();</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(String word)</span> {</span><br><span class="line">        <span class="type">Node</span> <span class="variable">p</span> <span class="operator">=</span> root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; word.length(); i++) {</span><br><span class="line">            <span class="type">char</span> <span class="variable">curr</span> <span class="operator">=</span> word.charAt(i);</span><br><span class="line">            <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> curr - <span class="string">'a'</span>;</span><br><span class="line">            <span class="keyword">if</span> (p.charactersArr[idx] == <span class="literal">null</span>) p.charactersArr[idx] = <span class="keyword">new</span> <span class="title class_">Node</span>();</span><br><span class="line">            p = p.charactersArr[idx];</span><br><span class="line">        }</span><br><span class="line">        p.isCompleteWord = <span class="literal">true</span>;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">search</span><span class="params">(String word)</span> {</span><br><span class="line">        <span class="type">Node</span> <span class="variable">p</span> <span class="operator">=</span> root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; word.length(); i++) {</span><br><span class="line">            <span class="type">char</span> <span class="variable">curr</span> <span class="operator">=</span> word.charAt(i);</span><br><span class="line">            <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> curr - <span class="string">'a'</span>;</span><br><span class="line">            <span class="keyword">if</span> (p.charactersArr[idx] == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            p = p.charactersArr[idx];</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> p.isCompleteWord;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">startsWith</span><span class="params">(String prefix)</span> {</span><br><span class="line">        <span class="type">Node</span> <span class="variable">p</span> <span class="operator">=</span> root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; prefix.length(); i++) {</span><br><span class="line">            <span class="type">char</span> <span class="variable">curr</span> <span class="operator">=</span> prefix.charAt(i);</span><br><span class="line">            <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> curr - <span class="string">'a'</span>;</span><br><span class="line">            <span class="keyword">if</span> (p.charactersArr[idx] == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            p = p.charactersArr[idx];</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your Trie object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * Trie obj = new Trie();</span></span><br><span class="line"><span class="comment"> * obj.insert(word);</span></span><br><span class="line"><span class="comment"> * boolean param_2 = obj.search(word);</span></span><br><span class="line"><span class="comment"> * boolean param_3 = obj.startsWith(prefix);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></tbody></table></figure><h1 id="1268-搜索推荐系统"><a href="#1268-搜索推荐系统" class="headerlink" title="1268. 搜索推荐系统"></a><a href="https://leetcode.cn/problems/search-suggestions-system/">1268. 搜索推荐系统</a></h1><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="title function_">suggestedProducts</span><span class="params">(String[] products, String searchWord)</span> {</span><br><span class="line">        Arrays.sort(products);</span><br><span class="line">        List&lt;List&lt;String&gt;&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">Trie</span> <span class="variable">tr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Trie</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; products.length; i++) {</span><br><span class="line">            tr.insert(products[i], i);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; searchWord.length(); i++) {</span><br><span class="line">            List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            <span class="type">int</span>[] idxes = tr.search(searchWord.substring(<span class="number">0</span>, i + <span class="number">1</span>));</span><br><span class="line">            <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> idxes[<span class="number">0</span>], r = idxes[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> l; j &lt;= Math.min(l + <span class="number">2</span>, r) &amp;&amp; l != -<span class="number">1</span>; j++) list.add(products[j]);</span><br><span class="line">            ans.add(list);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Trie</span> {</span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">Node</span> {</span><br><span class="line">            Node[] charArr = <span class="keyword">new</span> <span class="title class_">Node</span>[<span class="number">26</span>];</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">isCompleted</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        Node root;</span><br><span class="line">        Map&lt;Node, Integer&gt; char2MinIdx = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        Map&lt;Node, Integer&gt; char2MaxIdx = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        Trie() {</span><br><span class="line">            root = <span class="keyword">new</span> <span class="title class_">Node</span>();</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(String product, <span class="type">int</span> wordIdx)</span> {</span><br><span class="line">            <span class="type">Node</span> <span class="variable">rootP</span> <span class="operator">=</span> root;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; product.length(); i++) {</span><br><span class="line">                <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> product.charAt(i) - <span class="string">'a'</span>;</span><br><span class="line">                <span class="keyword">if</span> (rootP.charArr[idx] == <span class="literal">null</span>) {</span><br><span class="line">                    rootP.charArr[idx] = <span class="keyword">new</span> <span class="title class_">Node</span>();</span><br><span class="line">                    char2MinIdx.put(rootP.charArr[idx], wordIdx);</span><br><span class="line">                }</span><br><span class="line">                char2MaxIdx.put(rootP.charArr[idx], wordIdx);</span><br><span class="line">                rootP = rootP.charArr[idx];</span><br><span class="line">            }</span><br><span class="line">            rootP.isCompleted = <span class="literal">true</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span>[] search(String target) {</span><br><span class="line">            <span class="type">Node</span> <span class="variable">rootP</span> <span class="operator">=</span> root;</span><br><span class="line">            <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> -<span class="number">1</span>, r = -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; target.length(); i++) {</span><br><span class="line">                <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> target.charAt(i) - <span class="string">'a'</span>;</span><br><span class="line">                <span class="keyword">if</span> (rootP.charArr[idx] == <span class="literal">null</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]{-<span class="number">1</span>, -<span class="number">1</span>};</span><br><span class="line">                l = char2MinIdx.get(rootP.charArr[idx]);</span><br><span class="line">                r = char2MaxIdx.get(rootP.charArr[idx]);</span><br><span class="line">                rootP = rootP.charArr[idx];</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[] {l, r};</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <summary type="html">字典树的定义以及运用</summary>
    
    
    
    <category term="Algorithms" scheme="http://ruobingw.com/categories/Algorithms/"/>
    
    
    <category term="数据结构" scheme="http://ruobingw.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="字典树" scheme="http://ruobingw.com/tags/%E5%AD%97%E5%85%B8%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>Design-Pattern</title>
    <link href="http://ruobingw.com/posts/Design-Pattern/"/>
    <id>http://ruobingw.com/posts/Design-Pattern/</id>
    <published>2023-10-24T18:39:54.000Z</published>
    <updated>2024-05-15T04:17:52.560Z</updated>
    
    <content type="html"><![CDATA[<blockquote><div class="note blue icon-padding flat"><i class="note-icon fas fa-tree"></i><blockquote><p>见 <a href="/posts/%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86/" title="前置知识">前置知识</a> 来复习 </p></blockquote></div></blockquote><blockquote><p>根据：</p><p><a href="https://refactoring.guru/design-patterns">深入设计模式</a><br>亚历山大 · 什韦茨</p><p>进行的个人总结，感谢支持</p></blockquote><h1 id="设计模式分类"><a href="#设计模式分类" class="headerlink" title="设计模式分类"></a>设计模式分类</h1><ul><li>Creational Pattern<ul><li>创建型模式提供了创建对象的机制， 能够提升已有代码的灵活性和可复用性<ul><li>Factory Method - 工厂方法<ul><li>父类中提供一个创建对象的接口以允许<strong>子类</strong>决定<strong>实例化对象的类型</strong></li></ul></li><li>Abstract Factory - 抽象工厂<ul><li>允许创建一系列相关的对象而 「不用」指定其具体类</li></ul></li><li>Builder - 生成器<ul><li>分步骤创建复杂对象，允许使用相同的创建代码生成不同类型和形式的对象</li></ul></li><li>Prototype - 原型<ul><li>让人能复制已有对象，而又无须使代码依赖他们所属的类</li></ul></li><li>Singleton - 单例<ul><li>让你能够保证一个类只有一个实例，并提供一个访问该实例的全局节点</li></ul></li></ul></li></ul></li><li>Structural Pattern<ul><li>结构型模式介绍如何将对象和类组装成较大的结构，并保持结构的灵活和高效<ul><li>Adapter - 适配器<ul><li>让接口不兼容的对象能够相互工作</li></ul></li><li>Bridge - 桥接<ul><li>可将一个大类或一系列紧密相关的类拆分为「抽象」和「实现」两个独立的层次结构，从而能在开发时分别使用</li></ul></li><li>Composite - 组合<ul><li>使用它将对象组合成树状结构，并且像独立对象一样使用它们</li></ul></li><li>Decorator - 装饰<ul><li>通过将对象放入包含行为的特殊封装对象中来为原对象绑定新的行为</li></ul></li><li>Facade - 外观<ul><li>为程序库，框架或其他复杂类提供一个简单的接口</li></ul></li><li>Flyweight - 享元<ul><li>摒弃了在每个对象中保存所有数据的方式，通过共享多个对象所共有的相同状态，让你能在有限的内存容量中载入更多对象</li></ul></li><li>Proxy - 代理<ul><li>让你能够提供对象的替代品或其占位符。代理控制着对于原对象的访问，并允许在将请求提交给对象前后进行一些处理</li></ul></li></ul></li></ul></li><li>Behavioral Pattern<ul><li>行为模式负责对象间的高效沟通和职责委派</li></ul></li></ul><h1 id="Creational-Pattern"><a href="#Creational-Pattern" class="headerlink" title="Creational Pattern"></a>Creational Pattern</h1><h2 id="工厂方法-Factory-Method"><a href="#工厂方法-Factory-Method" class="headerlink" title="工厂方法 - Factory Method"></a>工厂方法 - Factory Method</h2><p><img src="/posts/Design-Pattern/Factory_Method_1.png" alt="Factory_Method_1"></p><blockquote><p>工厂方法是一种创建型设计模式，其在父类中提供一个创建对象的方法，允许子类决定实例化对象的类型。</p></blockquote><h3 id="现实问题"><a href="#现实问题" class="headerlink" title="现实问题"></a>现实问题</h3><p>一开始写的代码只支持卡车运输，大部分代码都在卡车类下。一段时间以后，需要支持其他的运输方式，比如海运，那么由于现在的代码几乎都在卡车下，想要实现新的方式就会比较困难。因此不得不大幅度，频繁修改代码，并根据不同的运输对象类在应用中进行不同的处理</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>工厂方法建议使用特殊的<strong>工厂方法代替对于对象构造函数的直接调用</strong></p><p><img src="/posts/Design-Pattern/Factory_Method_2.png" alt="Factory_Method_2"></p><p>在 子类的createTransport中调用 new 从而返回产品</p><p>这样的好处是我们现在可以在子类中重写工厂方法，从而改变其创建产品的类型。</p><p>但是，仅当这些产品具有共同的基类或者接口时，子类才可以返回不同类型的产品。同时，基类中的工厂方法还应将返回类型声明为这一公共接口：</p><p><img src="/posts/Design-Pattern/Factory_Method_3.png" alt="Factory_Method_3"></p><p>总结：<code>卡车Truck</code> 和 <code>轮船Ship</code> 类都必须实现 <code>运输Trans­port</code> 接口， 该接口声明了一个名为 <code>deliver交付</code> 的方法。 每个类都将以不同的方式实现该方法： 卡车走陆路交付货物， 轮船走海路交付货物。  <code>陆路运输Road­Logis­tics</code>类中的工厂方法返回卡车对象， 而 <code>海路运输Sea­Logis­tics</code>类则返回轮船对象。</p><p>这样就可以使得调用工厂部分的代码，即客户端代码 不需要知道不同子类和返回实际对象之间的区别。客户端将所有产品都认为是 抽象的 <code>运输</code> 客户端知道所有运输对象都提供 交付 的方法，但是不需要知道具体是怎么实现的。</p><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><p><img src="/posts/Design-Pattern/Factory_Method_4.png" alt="Factory_Method_4"></p><p><code>产品 （Prod­uct）</code> 将会对接口进行声明。 对于所有由创建者及其子类构建的对象， 这些接口都是通用的。 </p><p><code>具体产品 （Con­crete Prod­ucts</code>） 是产品接口的不同实现。 </p><p><code>创建者 （Cre­ator）</code> 类声明返回产品对象的工厂方法。 该方法的返回对象类型必须与产品接口相匹配。<br>你可以将工厂方法声明为抽象方法， 强制要求每个子类以不同方式实现该方法。 或者， 你也可以在基础工厂方法中返回默认产品类型。<br>注意， 尽管它的名字是创建者， 但它最主要的职责并不是创建产品。 一般来说， 创建者类包含一些与产品相关的核心业务逻辑。 工厂方法将这些逻辑处理从具体产品类中分离出来。 打个比方， 大型软件开发公司拥有程序员培训部门。 但是， 这些公司的主要工作还是编写代码， 而非生产程序员。 </p><p><code>具体创建者  （Con­crete Cre­ators</code>） 将会重写基础工厂方法， 使其返回不同类型的产品。<br>注意， 并不一定每次调用工厂方法都会创建新的实例。 工厂方法也可以返回缓存、 对象池或其他来源的已有对象。</p><h3 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h3><p><img src="/posts/Design-Pattern/Factory_Method_5.png" alt="Factory_Method_5"></p><p>如果使用工厂方法， 就不需要为每种操作系统重写对话框逻辑。 如果我们声明了一个在基本对话框类中生成按钮的工厂方法， 那么我们就可以创建一个对话框子类， 并使其通过工厂方法返回 Win­dows 样式按钮。 子类将继承对话框基础类的大部分代码， 同时在屏幕上根据 Win­dows 样式渲染按钮。 </p><p>如需该模式正常工作， 基础对话框类必须使用<strong>抽象</strong>按钮 （例如基类或接口）， <strong>以便将其扩展为具体按钮</strong>。 这样一来， 无论对话框中使用何种类型的按钮， 其代码都可以正常工作。</p><p>每向对话框中添加一个新的工厂方法， 你就离<strong>抽象工厂模式</strong>更近一步。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>产品接口 + 产品类：</p><p>需要 一个 interface / 基类 product 抽象化从而可以扩展为具体的product</p><p>需要 concrete products 来实现具体的功能</p><p>工厂接口 + 工厂类：</p><p>需要一个Creator 从而让客户端能够调用</p><p>需要 concrete creator来返回具体的实例类型</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//&nbsp;创建者类声明的工厂方法必须返回一个产品类的对象。创建者的子类通常会提供</span></span><br><span class="line"><span class="comment">//&nbsp;该方法的实现。</span></span><br><span class="line"><span class="keyword">class</span>&nbsp;<span class="title class_">Dialog</span>&nbsp;is</span><br><span class="line">&nbsp;&nbsp;<span class="comment">//&nbsp;创建者还可提供一些工厂方法的默认实现。</span></span><br><span class="line">&nbsp;&nbsp;<span class="keyword">abstract</span>&nbsp;method&nbsp;<span class="title function_">createButton</span><span class="params">()</span>:Button</span><br><span class="line"></span><br><span class="line">&nbsp;&nbsp;<span class="comment">//&nbsp;请注意，创建者的主要职责并非是创建产品。其中通常会包含一些核心业务</span></span><br><span class="line">&nbsp;&nbsp;<span class="comment">//&nbsp;逻辑，这些逻辑依赖于由工厂方法返回的产品对象。子类可通过重写工厂方</span></span><br><span class="line">&nbsp;&nbsp;<span class="comment">//&nbsp;法并使其返回不同类型的产品来间接修改业务逻辑。</span></span><br><span class="line">&nbsp;&nbsp;method&nbsp;<span class="title function_">render</span><span class="params">()</span>&nbsp;is</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">//&nbsp;调用工厂方法创建一个产品对象。</span></span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="type">Button</span>&nbsp;<span class="variable">okButton</span>&nbsp;<span class="operator">=</span>&nbsp;createButton()</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">//&nbsp;现在使用产品。</span></span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;okButton.onClick(closeDialog)</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;okButton.render()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//&nbsp;具体创建者将重写工厂方法以改变其所返回的产品类型。</span></span><br><span class="line"><span class="keyword">class</span>&nbsp;<span class="title class_">WindowsDialog</span>&nbsp;<span class="keyword">extends</span>&nbsp;<span class="title class_">Dialog</span> “is</span><br><span class="line">&nbsp;&nbsp;method&nbsp;<span class="title function_">createButton</span><span class="params">()</span>:Button&nbsp;is</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">return</span>&nbsp;<span class="keyword">new</span>&nbsp;<span class="title class_">WindowsButton</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span>&nbsp;<span class="title class_">WebDialog</span>&nbsp;<span class="keyword">extends</span>&nbsp;<span class="title class_">Dialog</span>&nbsp;is</span><br><span class="line">&nbsp;&nbsp;method&nbsp;<span class="title function_">createButton</span><span class="params">()</span>:Button&nbsp;is</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">return</span>&nbsp;<span class="keyword">new</span>&nbsp;<span class="title class_">HTMLButton</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//&nbsp;产品接口中将声明所有具体产品都必须实现的操作。</span></span><br><span class="line"><span class="keyword">interface</span>&nbsp;<span class="title class_">Button</span>&nbsp;is</span><br><span class="line">&nbsp;&nbsp;method&nbsp;<span class="title function_">render</span><span class="params">()</span></span><br><span class="line">&nbsp;&nbsp;method&nbsp;<span class="title function_">onClick</span><span class="params">(f)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//&nbsp;具体产品需提供产品接口的各种实现。</span></span><br><span class="line"><span class="keyword">class</span>&nbsp;<span class="title class_">WindowsButton</span>&nbsp;<span class="keyword">implements</span>&nbsp;<span class="title class_">Button</span>&nbsp;is</span><br><span class="line">&nbsp;&nbsp;method&nbsp;<span class="title function_">render</span><span class="params">(a,&nbsp;b)</span>&nbsp;is</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">//&nbsp;根据&nbsp;Windows&nbsp;样式渲染按钮。</span></span><br><span class="line">&nbsp;&nbsp;method&nbsp;<span class="title function_">onClick</span><span class="params">(f)</span>&nbsp;is</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">//&nbsp;绑定本地操作系统点击事件。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span>&nbsp;<span class="title class_">HTMLButton</span>&nbsp;<span class="keyword">implements</span>&nbsp;<span class="title class_">Button</span>&nbsp;is</span><br><span class="line">&nbsp;&nbsp;method&nbsp;<span class="title function_">render</span><span class="params">(a,&nbsp;b)</span>&nbsp;is</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">//&nbsp;返回一个按钮的&nbsp;HTML&nbsp;表述。</span></span><br><span class="line">&nbsp;&nbsp;method&nbsp;<span class="title function_">onClick</span><span class="params">(f)</span>&nbsp;is</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">//&nbsp;绑定网络浏览器的点击事件。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span>&nbsp;<span class="title class_">Application</span>&nbsp;is</span><br><span class="line">&nbsp;&nbsp;field dialog:&nbsp;Dialog</span><br><span class="line"></span><br><span class="line">&nbsp;&nbsp;<span class="comment">//&nbsp;程序根据当前配置或环境设定选择创建者的类型。</span></span><br><span class="line">&nbsp;&nbsp;method&nbsp;<span class="title function_">initialize</span><span class="params">()</span>&nbsp;<span class="type">is</span></span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="variable">config</span>&nbsp;<span class="operator">=</span>&nbsp;readApplicationConfigFile()</span><br><span class="line"></span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">if</span>&nbsp;(config.OS&nbsp;==&nbsp;<span class="string">"Windows"</span>)&nbsp;<span class="type">then</span></span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="variable">dialog</span>&nbsp;<span class="operator">=</span>&nbsp;<span class="keyword">new</span>&nbsp;<span class="title class_">WindowsDialog</span>()</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">else</span>&nbsp;<span class="keyword">if</span>&nbsp;(config.OS&nbsp;==&nbsp;<span class="string">"Web"</span>)&nbsp;<span class="type">then</span></span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="variable">dialog</span>&nbsp;<span class="operator">=</span>&nbsp;<span class="keyword">new</span>&nbsp;<span class="title class_">WebDialog</span>()</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">throw</span>&nbsp;<span class="keyword">new</span>&nbsp;<span class="title class_">Exception</span>(<span class="string">"错误！未知的操作系统。"</span>)</span><br><span class="line"></span><br><span class="line">&nbsp;&nbsp;<span class="comment">//&nbsp;当前客户端代码会与具体创建者的实例进行交互，但是必须通过其基本接口</span></span><br><span class="line">&nbsp;&nbsp;<span class="comment">//&nbsp;进行。只要客户端通过基本接口与创建者进行交互，你就可将任何创建者子</span></span><br><span class="line">&nbsp;&nbsp;<span class="comment">//&nbsp;类传递给客户端。</span></span><br><span class="line">&nbsp;&nbsp;method&nbsp;<span class="title function_">main</span><span class="params">()</span>&nbsp;is</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="built_in">this</span>.initialize()</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;dialog.render()</span><br></pre></td></tr></tbody></table></figure><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><ol><li><p>无法预知对象确切类别以及依赖关系</p><ol><li>工厂方法将创建产品的代码和实际的使用逻辑分离，从而能在不影响其他代码的情况下扩展产品创建部分的代码</li><li>例如，如果需要向应用中添加一种新产品，我们现在只需要开发新的创建者子类，然后重写其工厂方法即可</li></ol></li><li><p>需要用户扩展应用库或框架的内部组件</p><ol><li>将各框架中构造组件的代码集中到单个工厂方法中， 并在继承该组件之外允许任何人对该方法进行重写。 </li><li>假设你使用开源 UI 框架编写自己的应用。 你希望在应用中使用圆形按钮， 但是原框架仅支持矩形按钮。 你可以使用 <code>圆形按钮Round­But­ton子类</code>来继承标准的 <code>按钮But­ton</code>类。 但是， 你需要告诉<code> UI框架UIFrame­work类</code>使用新的子类按钮代替默认按钮。<br>为了实现这个功能， 你可以根据基础框架类开发子类 <code>圆形按钮UI UIWith­Round­But­tons</code> ， 并且重写其 <code>create­Button</code>创建按钮方法。 基类中的该方法返回 <code>按钮对象</code>， 而你开发的子类返回 <code>圆形按钮对象</code>。 现在， 你就可以使用 圆形按钮 UI类代替 UI框架类。</li></ol></li><li><p>复用对象，而不是每一次都创建新对象</p><ol><li><p>比如数据库连接</p></li><li><p>复用现有对象的方法： </p><p>首先， 你需要创建存储空间来存放所有已经创建的对象。<br>当他人请求一个对象时， 程序将在对象池中搜索可用对象。<br>…然后将其返回给客户端代码。<br>如果没有可用对象， 程序则创建一个新对象 （并将其添加到对象池中）</p></li><li><p>我们需要 一个既能够创建新对象， 又可以重用现有对象的普通方法 – 工厂方法：</p><ol><li>让所有产品都遵循同一接口。 该接口必须声明对所有产品都有意义的方法。 </li><li>在创建类中添加一个空的工厂方法。 该方法的返回类型必须遵循通用的产品接口。 </li><li>在创建者代码中找到对于产品构造函数的所有引用。 将它们依次替换为对于工厂方法的调用， 同时将创建产品的代码移入工厂方法。 你可能需要在工厂方法中添加临时参数来控制返回的产品类型。<br>工厂方法的代码看上去可能非常糟糕。 其中可能会有复杂的 switch分支运算符， 用于选择各种需要实例化的产品类。 但是不要担心， 我们很快就会修复这个问题。 </li><li>现在， 为工厂方法中的每种产品编写一个创建者子类， 然后在子类中重写工厂方法， 并将基本方法中的相关创建代码移动到工厂方法中。 </li><li>如果应用中的产品类型太多， 那么为每个产品创建子类并无太大必要， 这时你也可以在子类中复用基类中的控制参数。<br>例如， 设想你有以下一些层次结构的类。 基类 邮件及其子类 航空邮件和 陆路邮件 ；  运输及其子类 飞机, 卡车和 火车 。  航空邮件仅使用 飞机对象， 而 陆路邮件则会同时使用 卡车和 火车对象。 你可以编写一个新的子类 （例如 火车邮件 ） 来处理这两种情况， 但是还有其他可选的方案。 客户端代码可以给 陆路邮件类传递一个参数， 用于控制其希望获得的产品。 </li><li>如果代码经过上述移动后， 基础工厂方法中已经没有任何代码， 你可以将其转变为抽象类。 如果基础工厂方法中还有其他语句， 你可以将其设置为该方法的默认行为</li></ol></li></ol></li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 产品接口以及具体的产品类：</span></span><br><span class="line"><span class="comment">// 产品接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Product</span> {</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">useProduct</span><span class="params">()</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体产品类：AirMail</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AirMail</span> <span class="keyword">implements</span> <span class="title class_">Product</span> {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">useProduct</span><span class="params">()</span> {</span><br><span class="line">        System.out.println(<span class="string">"Using AirMail"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体产品类：LandMail</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LandMail</span> <span class="keyword">implements</span> <span class="title class_">Product</span> {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">useProduct</span><span class="params">()</span> {</span><br><span class="line">        System.out.println(<span class="string">"Using LandMail"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="comment">// 工厂类</span></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductFactory</span> {</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Product&gt; pool = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 工厂方法</span></span><br><span class="line">    <span class="keyword">public</span> Product <span class="title function_">getProduct</span><span class="params">(String type)</span> {</span><br><span class="line">        <span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> pool.get(type);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (product == <span class="literal">null</span>) {</span><br><span class="line">            <span class="comment">// 根据类型创建新产品</span></span><br><span class="line">            <span class="keyword">switch</span> (type) {</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"AirMail"</span>:</span><br><span class="line">                    product = <span class="keyword">new</span> <span class="title class_">AirMail</span>();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"LandMail"</span>:</span><br><span class="line">                    product = <span class="keyword">new</span> <span class="title class_">LandMail</span>();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (product != <span class="literal">null</span>) {</span><br><span class="line">                pool.put(type, product); <span class="comment">// 将新创建的产品添加到池中</span></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> product;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 释放产品实例</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">releaseProduct</span><span class="params">(String type, Product product)</span> {</span><br><span class="line">        pool.put(type, product);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="comment">// 客户端代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">ProductFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProductFactory</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取AirMail产品实例</span></span><br><span class="line">        <span class="type">Product</span> <span class="variable">airMail</span> <span class="operator">=</span> factory.getProduct(<span class="string">"AirMail"</span>);</span><br><span class="line">        airMail.useProduct();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取LandMail产品实例</span></span><br><span class="line">        <span class="type">Product</span> <span class="variable">landMail</span> <span class="operator">=</span> factory.getProduct(<span class="string">"LandMail"</span>);</span><br><span class="line">        landMail.useProduct();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p><code>ProductFactory</code> 类管理着一个对象池，当请求一个特定类型的产品时，它首先尝试从池中获取。如果池中没有可用的产品实例，则创建一个新的实例并将其添加到池中。这样，当同一类型的产品再次被请求时，可以重用之前创建的实例，而不是每次都创建新的实例。</p><p>额外的：工厂方法 后 演变为 抽象工厂，原型，生成器 方法</p><h2 id="抽象工厂方法-Abstract-Factory"><a href="#抽象工厂方法-Abstract-Factory" class="headerlink" title="抽象工厂方法 - Abstract Factory"></a>抽象工厂方法 - Abstract Factory</h2><p>其是一种创建型设计模式，它能 <strong>创建一系列相关的对象</strong> 而无需指定具体类</p><p><img src="/posts/Design-Pattern/abstract_factory_1.png" alt="abstract_factory_1"></p><h3 id="现实问题-1"><a href="#现实问题-1" class="headerlink" title="现实问题"></a>现实问题</h3><p>假设正在开发一款家具商店模拟器</p><p>代码中有一些类：</p><ol><li>来表示相关产品：椅子，沙发，咖啡桌</li><li>系列产品的不同变体。比如 有 现代风格的椅子，或者XX风格的椅子</li></ol><p><img src="/posts/Design-Pattern/abstract_factory_2.png" alt="abstract_factory_2"></p><p>也就是说对于每一种商品。我们有多种变体。</p><p>因此我们需要对于每一种艺术风格，我们都需要设计一种家具对象。并且我们当然<strong>不希望</strong>在添加新产品/风格的时候修改已有的代码。</p><h3 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h3><ol><li>抽象工厂模式建议为 <strong>系列中的每一件产品</strong> 明确声明接口。然后确保<strong>所有变体</strong>都<strong>继承/实现</strong>这些接口</li></ol><p>e.g: 所有风格的椅子都实现椅子接口。</p><p><img src="/posts/Design-Pattern/abstract_factory_3.png" alt="abstract_factory_3"></p><ol start="2"><li>然后我们需要一个抽象工厂其包含系列中所有产品构造方法的接口。<code>createChair</code> <code>createSofa</code> <code>createXXX</code>,这些接口都必须返回抽象产品类型也就是 <code>createChair:Chair</code> <code>createSofa:Sofa``createCoffeeTable:CoffeTable</code></li></ol><p><img src="/posts/Design-Pattern/abstract_factory_4.png" alt="abstract_factory_4"></p><ol start="3"><li>对于每一个变体，使用<strong>「抽象工厂接口」来创建不同的「工厂类」</strong> 每一个工厂类都只能返回特定类别的产品，比如VictorianFurnitureFactory 返回 Victorian，Modern 返回 Modern</li></ol><p>这样，客户端就可以通过相应的抽象接口调用工厂和产品类而无需修改客户端代码</p><h3 id="结构-1"><a href="#结构-1" class="headerlink" title="结构"></a>结构</h3><p><img src="/posts/Design-Pattern/abstract_factory_5.png" alt="abstract_factory_5"></p><ol><li><em>ProductA, ProductB:</em> （Abstract Product 抽象产品） 构成系列产品的一组不同但相关的产品声明接口</li><li>Concrete ProductX: (Concrete Product 具体产品) 抽象产品的多种不同类型实现。所有变体（风格，比如维多利亚/现代）都必须实现相应的抽象产品（椅子/沙发）</li><li>Abstract Factory 抽象工厂: 接口声明一组创建 <strong>抽象产品</strong>的方法</li><li>ConcreteFactoryX 具体工厂：实现抽象工厂的构建方法，每一个具体工厂都生产且仅创建对应产品变体</li><li>客户端对于具体产品的初始化，其构建方法签名必须返回相应的 <strong>抽象</strong> 产品。这样，使用工厂类的客户端代码就不会与工厂创建的特定产品变体耦合。客户端只需要通过抽象接口嗲用工厂和产品对象，就能与任何具体工厂/产品变体交互。</li></ol><h3 id="样例-1"><a href="#样例-1" class="headerlink" title="样例"></a>样例</h3><p><img src="/posts/Design-Pattern/abstract_factory_6.png" alt="abstract_factory_6"></p><p>这个例子通过使用 <strong>抽象工厂</strong> 模式从而使得客户端代码与具体UI类耦合从而创建跨平台的UI元素，同时确保所创建的元素与制定的操作系统匹配。</p><p>跨平台应用中的相同 UI 元素功能类似， 但是在不同操作系统下的外观有一定差异。 此外， 你需要确保 UI 元素与当前操作系统风格一致。 你一定不希望在 Win­dows 系统下运行的应用程序中显示 macOS 的控件。 </p><p>抽象工厂接口声明一系列构建方法， 客户端代码可调用它们生成不同风格的 UI 元素。 每个具体工厂对应特定操作系统， 并负责生成符合该操作系统风格的 UI 元素。 </p><p>其运作方式如下： 应用程序启动后检测当前操作系统。 根据该信息， 应用程序通过与该操作系统对应的类创建工厂对象。 其余代码使用该工厂对象创建 UI 元素。 这样可以避免生成错误类型的元素。 </p><p>使用这种方法， 客户端代码只需调用抽象接口， 而无需了解具体工厂类和 UI 元素。 此外， 客户端代码还支持未来添加新的工厂或 UI 元素。 </p><p>这样一来， 每次在应用程序中添加新的 UI 元素变体时， 你都无需修改客户端代码。 你只需创建一个能够生成这些 UI 元素的工厂类， 然后稍微修改应用程序的初始代码， 使其能够选择合适的工厂类即可。</p><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>伪代码</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//&nbsp;抽象工厂接口声明了一组能返回不同抽象产品的方法。这些产品属于同一个系列</span></span><br><span class="line"><span class="comment">//&nbsp;且在高层主题或概念上具有相关性。同系列的产品通常能相互搭配使用。系列产</span></span><br><span class="line"><span class="comment">//&nbsp;品可有多个变体，但不同变体的产品不能搭配使用。</span></span><br><span class="line"><span class="keyword">interface</span>&nbsp;<span class="title class_">GUIFactory</span>&nbsp;is</span><br><span class="line">&nbsp;&nbsp;method&nbsp;<span class="title function_">createButton</span><span class="params">()</span>:Button</span><br><span class="line">&nbsp;&nbsp;method&nbsp;<span class="title function_">createCheckbox</span><span class="params">()</span>:Checkbox</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//&nbsp;具体工厂可生成属于同一变体的系列产品。工厂会确保其创建的产品能相互搭配</span></span><br><span class="line"><span class="comment">//&nbsp;使用。具体工厂方法签名会返回一个抽象产品，但在方法内部则会对具体产品进</span></span><br><span class="line"><span class="comment">//&nbsp;行实例化。</span></span><br><span class="line"><span class="keyword">class</span>&nbsp;<span class="title class_">WinFactory</span>&nbsp;<span class="keyword">implements</span>&nbsp;<span class="title class_">GUIFactory</span>&nbsp;is</span><br><span class="line">&nbsp;&nbsp;method&nbsp;<span class="title function_">createButton</span><span class="params">()</span>:Button&nbsp;is</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">return</span>&nbsp;<span class="keyword">new</span>&nbsp;<span class="title class_">WinButton</span>()</span><br><span class="line">&nbsp;&nbsp;method&nbsp;<span class="title function_">createCheckbox</span><span class="params">()</span>:Checkbox&nbsp;is</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">return</span>&nbsp;<span class="keyword">new</span>&nbsp;<span class="title class_">WinCheckbox</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">//&nbsp;每个具体工厂中都会包含一个相应的产品变体。</span></span><br><span class="line"><span class="keyword">class</span>&nbsp;<span class="title class_">MacFactory</span>&nbsp;<span class="keyword">implements</span>&nbsp;<span class="title class_">GUIFactory</span>&nbsp;is</span><br><span class="line">&nbsp;&nbsp;method&nbsp;<span class="title function_">createButton</span><span class="params">()</span>:Button&nbsp;is</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">return</span>&nbsp;<span class="keyword">new</span>&nbsp;<span class="title class_">MacButton</span>()</span><br><span class="line">&nbsp;&nbsp;method&nbsp;<span class="title function_">createCheckbox</span><span class="params">()</span>:Checkbox&nbsp;is</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">return</span>&nbsp;<span class="keyword">new</span>&nbsp;<span class="title class_">MacCheckbox</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//&nbsp;系列产品中的特定产品必须有一个基础接口。所有产品变体都必须实现这个接口。</span></span><br><span class="line"><span class="keyword">interface</span>&nbsp;<span class="title class_">Button</span>&nbsp;is</span><br><span class="line">&nbsp;&nbsp;method&nbsp;<span class="title function_">paint</span><span class="params">()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//&nbsp;具体产品由相应的具体工厂创建。</span></span><br><span class="line"><span class="keyword">class</span>&nbsp;<span class="title class_">WinButton</span>&nbsp;<span class="keyword">implements</span>&nbsp;<span class="title class_">Button</span>&nbsp;is</span><br><span class="line">&nbsp;&nbsp;method&nbsp;<span class="title function_">paint</span><span class="params">()</span>&nbsp;is</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">//&nbsp;根据&nbsp;Windows&nbsp;样式渲染按钮。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span>&nbsp;<span class="title class_">MacButton</span>&nbsp;<span class="keyword">implements</span>&nbsp;<span class="title class_">Button</span>&nbsp;is</span><br><span class="line">&nbsp;&nbsp;method&nbsp;<span class="title function_">paint</span><span class="params">()</span>&nbsp;is</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">//&nbsp;根据&nbsp;macOS&nbsp;样式渲染按钮</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//&nbsp;这是另一个产品的基础接口。所有产品都可以互动，但是只有相同具体变体的产</span></span><br><span class="line"><span class="comment">//&nbsp;品之间才能够正确地进行交互。</span></span><br><span class="line"><span class="keyword">interface</span>&nbsp;<span class="title class_">Checkbox</span>&nbsp;is</span><br><span class="line">&nbsp;&nbsp;method&nbsp;<span class="title function_">paint</span><span class="params">()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span>&nbsp;<span class="title class_">WinCheckbox</span>&nbsp;<span class="keyword">implements</span>&nbsp;<span class="title class_">Checkbox</span>&nbsp;is</span><br><span class="line">&nbsp;&nbsp;method&nbsp;<span class="title function_">paint</span><span class="params">()</span>&nbsp;is</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">//&nbsp;根据&nbsp;Windows&nbsp;样式渲染复选框。</span></span><br><span class="line"><span class="keyword">class</span>&nbsp;<span class="title class_">MacCheckbox</span>&nbsp;<span class="keyword">implements</span>&nbsp;<span class="title class_">Checkbox</span>&nbsp;is</span><br><span class="line">&nbsp;&nbsp;method&nbsp;<span class="title function_">paint</span><span class="params">()</span>&nbsp;is</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">//&nbsp;根据&nbsp;macOS&nbsp;样式渲染复选框。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//&nbsp;客户端代码仅通过抽象类型（GUIFactory、Button&nbsp;和&nbsp;Checkbox）使用工厂</span></span><br><span class="line"><span class="comment">//&nbsp;和产品。这让你无需修改任何工厂或产品子类就能将其传递给客户端代码。</span></span><br><span class="line"><span class="keyword">class</span>&nbsp;<span class="title class_">Application</span>&nbsp;is</span><br><span class="line">&nbsp;&nbsp;<span class="keyword">private</span>&nbsp;field factory:&nbsp;GUIFactory</span><br><span class="line">&nbsp;&nbsp;<span class="keyword">private</span>&nbsp;field button:&nbsp;Button</span><br><span class="line">&nbsp;&nbsp;constructor&nbsp;<span class="title function_">Application</span><span class="params">(factory:&nbsp;GUIFactory)</span>&nbsp;is</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="built_in">this</span>.factory&nbsp;=&nbsp;factory</span><br><span class="line">&nbsp;&nbsp;method&nbsp;<span class="title function_">createUI</span><span class="params">()</span>&nbsp;is</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="built_in">this</span>.button&nbsp;=&nbsp;factory.createButton()</span><br><span class="line">&nbsp;&nbsp;method&nbsp;<span class="title function_">paint</span><span class="params">()</span>&nbsp;is</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;button.paint()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//&nbsp;程序会根据当前配置或环境设定选择工厂类型，并在运行时创建工厂（通常在初</span></span><br><span class="line"><span class="comment">//&nbsp;始化阶段）。</span></span><br><span class="line"><span class="keyword">class</span>&nbsp;<span class="title class_">ApplicationConfigurator</span>&nbsp;is</span><br><span class="line">&nbsp;&nbsp;method&nbsp;<span class="title function_">main</span><span class="params">()</span>&nbsp;<span class="type">is</span></span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="variable">config</span>&nbsp;<span class="operator">=</span>&nbsp;readApplicationConfigFile()</span><br><span class="line"></span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">if</span>&nbsp;(config.OS&nbsp;==&nbsp;<span class="string">"Windows"</span>)&nbsp;<span class="type">then</span></span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="variable">factory</span>&nbsp;<span class="operator">=</span>&nbsp;<span class="keyword">new</span>&nbsp;<span class="title class_">WinFactory</span>()</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">else</span>&nbsp;<span class="keyword">if</span>&nbsp;(config.OS&nbsp;==&nbsp;<span class="string">"Mac"</span>)&nbsp;<span class="type">then</span></span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="variable">factory</span>&nbsp;<span class="operator">=</span>&nbsp;<span class="keyword">new</span>&nbsp;<span class="title class_">MacFactory</span>()</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">else</span></span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">throw</span>&nbsp;<span class="keyword">new</span>&nbsp;<span class="title class_">Exception</span>(<span class="string">"错误！未知的操作系统。"</span>)</span><br><span class="line"></span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="type">Application</span>&nbsp;<span class="variable">app</span>&nbsp;<span class="operator">=</span>&nbsp;<span class="keyword">new</span>&nbsp;<span class="title class_">Application</span>(factory)</span><br></pre></td></tr></tbody></table></figure><p>实际的java code例子：</p><p>在这个例子中，我们创建一个关于电子产品的简单场景。</p><p>假设有两类产品：手机和平板电脑，分别有不同的品牌（例如：苹果和三星）。我们将实现抽象工厂和具体工厂来创建这些产品。</p><p>在这个例子中，<code>ElectronicsFactory</code> 是一个抽象工厂接口，定义了创建智能手机和平板电脑的方法。<code>AppleFactory</code> 和 <code>SamsungFactory</code> 是具体的工厂实现，分别创建苹果和三星品牌的产品。客户端代码依赖于抽象工厂和产品接口，而不是具体的实现类，这使得增加新的产品品牌（例如添加一个华为工厂）时，无需修改客户端代码。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 抽象产品</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Smartphone</span> {</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Tablet</span> {</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体产品</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppleSmartphone</span> <span class="keyword">implements</span> <span class="title class_">Smartphone</span> {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> {</span><br><span class="line">        System.out.println(<span class="string">"Apple Smartphone"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SamsungSmartphone</span> <span class="keyword">implements</span> <span class="title class_">Smartphone</span> {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> {</span><br><span class="line">        System.out.println(<span class="string">"Samsung Smartphone"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppleTablet</span> <span class="keyword">implements</span> <span class="title class_">Tablet</span> {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> {</span><br><span class="line">        System.out.println(<span class="string">"Apple Tablet"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SamsungTablet</span> <span class="keyword">implements</span> <span class="title class_">Tablet</span> {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> {</span><br><span class="line">        System.out.println(<span class="string">"Samsung Tablet"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象工厂</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ElectronicsFactory</span> {</span><br><span class="line">    Smartphone <span class="title function_">createSmartphone</span><span class="params">()</span>;</span><br><span class="line">    Tablet <span class="title function_">createTablet</span><span class="params">()</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体工厂</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppleFactory</span> <span class="keyword">implements</span> <span class="title class_">ElectronicsFactory</span> {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Smartphone <span class="title function_">createSmartphone</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AppleSmartphone</span>();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Tablet <span class="title function_">createTablet</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AppleTablet</span>();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SamsungFactory</span> <span class="keyword">implements</span> <span class="title class_">ElectronicsFactory</span> {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Smartphone <span class="title function_">createSmartphone</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SamsungSmartphone</span>();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Tablet <span class="title function_">createTablet</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SamsungTablet</span>();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">ElectronicsFactory</span> <span class="variable">appleFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AppleFactory</span>();</span><br><span class="line">        <span class="type">Smartphone</span> <span class="variable">appleSmartphone</span> <span class="operator">=</span> appleFactory.createSmartphone();</span><br><span class="line">        <span class="type">Tablet</span> <span class="variable">appleTablet</span> <span class="operator">=</span> appleFactory.createTablet();</span><br><span class="line"></span><br><span class="line">        appleSmartphone.display();</span><br><span class="line">        appleTablet.display();</span><br><span class="line"></span><br><span class="line">        <span class="type">ElectronicsFactory</span> <span class="variable">samsungFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SamsungFactory</span>();</span><br><span class="line">        <span class="type">Smartphone</span> <span class="variable">samsungSmartphone</span> <span class="operator">=</span> samsungFactory.createSmartphone();</span><br><span class="line">        <span class="type">Tablet</span> <span class="variable">samsungTablet</span> <span class="operator">=</span> samsungFactory.createTablet();</span><br><span class="line"></span><br><span class="line">        samsungSmartphone.display();</span><br><span class="line">        samsungTablet.display();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="使用场景-1"><a href="#使用场景-1" class="headerlink" title="使用场景"></a>使用场景</h3><ol><li>代码需要与多个不同系列的相关产品交互，但是我们无法预先获取相关信息，不希望代码对于产品具体类进行构建<ol><li>抽象工厂的接口可以用于创建么个系列产品的对象，只要代码通过该接口创建对象。</li></ol></li><li>有一个基于一组抽象方法的类，且其主要功能因此变得不明确<ol><li>好的代码需要：每个类仅负责一件事，如果一个类与多个类型产品交互，那么我们可以考虑将工厂方法抽取到独立的工厂类或具备完整功能的抽象公差那个类</li></ol></li></ol><h3 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h3><ol><li><strong>以不同的产品类型与产品变体为维度绘制矩阵</strong>：<ul><li>在示例中，我们有两种产品类型：<code>Smartphone</code> 和 <code>Tablet</code>（抽象产品接口），这构成了矩阵的一维。</li><li>另一维是产品变体，即不同品牌：<code>Apple</code> 和 <code>Samsung</code>。每个品牌都有其对应的智能手机和平板电脑产品。</li></ul></li><li><strong>为所有产品声明抽象产品接口，并且让所有具体产品类实现这些接口</strong>：<ul><li>抽象产品接口为 <code>Smartphone</code> 和 <code>Tablet</code>。具体产品类如 <code>AppleSmartphone</code>, <code>SamsungSmartphone</code>, <code>AppleTablet</code>, <code>SamsungTablet</code> 实现了这些接口。</li></ul></li><li><strong>声明抽象工厂接口，并且在接口中为所有抽象产品提供一组构建方法</strong>：<ul><li>抽象工厂接口是 <code>ElectronicsFactory</code>，它定义了创建智能手机和平板电脑的方法（<code>createSmartphone()</code> 和 <code>createTablet()</code>）。</li></ul></li><li><strong>为每种产品变体实现一个具体工厂类</strong>：<ul><li>具体工厂类为 <code>AppleFactory</code> 和 <code>SamsungFactory</code>，每个工厂类都实现了 <code>ElectronicsFactory</code> 接口，并能创建特定品牌的智能手机和平板电脑。</li></ul></li><li><strong>在应用程序中开发初始化代码，根据应用程序配置或当前环境对特定具体工厂类进行初始化，并将该工厂对象传递给所有需要创建产品的类</strong>：<ul><li>客户端代码 (<code>Client</code> 类) 演示了如何根据需要选择并初始化具体工厂（例如 <code>AppleFactory</code> 或 <code>SamsungFactory</code>），并使用这些工厂来创建产品。</li></ul></li><li><strong>找出代码中所有对产品构造函数的直接调用，将其替换为对工厂对象中相应构建方法的调用</strong>：<ul><li>在客户端代码中，不直接使用产品的构造函数来创建产品实例。相反，它调用工厂对象的 <code>createSmartphone()</code> 和 <code>createTablet()</code> 方法来获取产品实例。</li></ul></li></ol><p>抽象工厂和桥接（bridge） 可以搭配使用，如果由桥接定义的抽象只能与特定实现合作， 这一模式搭配就非常有用。 在这种情况下， 抽象工厂可以对这些关系进行封装， 并且对客户端代码隐藏其复杂性。</p><h2 id="生成器-Builder"><a href="#生成器-Builder" class="headerlink" title="生成器 - Builder"></a>生成器 - Builder</h2><p>生成器模式允许我们能够分步骤创建复杂对象。该模式允许使用相同的创建代码生成不同类型和形式的对象</p><h3 id="现实问题-2"><a href="#现实问题-2" class="headerlink" title="现实问题"></a>现实问题</h3><p>有个对象比较复杂，在构造的时候需要对诸多成员变量和嵌套对象进行复杂的初始化工作。这些用于初始化的代码可能深藏于一个包含众多参数且让人基本看不懂的构造函数中；也可能会散落在客户端代码的多个位置</p><p>假如我们需要创建一个 house，house可能有 garage，可能有swimmingpool，garden etc；如果为每种可能的对象都创建一个子类，那么可能会导致程序变得过于复杂。</p><p>一种可行的方法为：我们有一个House的基类，然后创建一系列涵盖所有参数组合的子类。但是这会使得我们在新增了任何参数比如门框大小，雕塑等等都会使得这个房屋的层次结构变得非常复杂。</p><p><img src="/posts/Design-Pattern/builder_1.png" alt="builder_1"></p><p>另一种方法则是实用一个超级构造函数：</p><p><img src="/posts/Design-Pattern/builder_2.png" alt="builder_2"></p><p>但是这样的话就会使得构造函数非常的臃肿，并且我们有很多参数是不会使用的。</p><h3 id="解决方案-2"><a href="#解决方案-2" class="headerlink" title="解决方案"></a>解决方案</h3><p>生成器模式则建议将对象构造代码从产品类中抽出，并且方位一个<code>生成器</code> 的类中：</p><p><img src="/posts/Design-Pattern/builder_3.png" alt="builder_3"></p><p>这个模式会让构造对象划分为一组步骤：<code>buildWalls()</code> <code>buildDoors()</code>。在创建对象的时候，都需要通过生成器对象来执行一系列步骤。不同的是，我们只需要选择需要的步骤即可。</p><p>当我们需要创建不同形式的产品时，其中的一些构造步骤需要不同的实现，比如木屋需要木制门，铁屋需要铁门等等。</p><p>如果是这种情况，那我们可以创建多个不同的Builder，用不同的方式实现一组相同的创建步骤，然后在创建过程中使用这些生成器来实现不同的对象</p><p><img src="/posts/Design-Pattern/builder_4.png" alt="builder_4"></p><h4 id="主管"><a href="#主管" class="headerlink" title="主管"></a>主管</h4><p>额外的，我们可以进一步将用于创建产品的一系列生成器步骤调用抽取成为单独的主管类。主管类可定义创建步骤的执行顺序，而生成器提供步骤的具体实现</p><p><img src="/posts/Design-Pattern/builder_5.png" alt="builder_5"></p><p>主管类不是必须的，他比较适用于在流水线工程中以便能够重复使用。在一般情况下，客户端代码直接以特定顺序调用创建步骤即可。</p><p>对于客户端代码来说，主管类隐藏了产品构造细节。</p><h3 id="结构-2"><a href="#结构-2" class="headerlink" title="结构"></a>结构</h3><p><img src="/posts/Design-Pattern/builder_6.png" alt="builder_6"></p><ol><li>生成器 （Builder） 接口声明在所有类型生成器中通用的产品构造步骤。 </li><li>具体生成器 （Con­crete Builders） 提供构造过程的不同实现。 具体生成器也可以构造不遵循通用接口的产品。 </li><li>产品 （Prod­ucts） 是最终生成的对象。 由不同生成器构造的产品无需属于同一类层次结构或接口。 </li><li>主管 （Direc­tor） 类定义调用构造步骤的顺序， 这样你就可以创建和复用特定的产品配置。 </li><li>客户端 （Client） 必须将某个生成器对象与主管类关联。 一般情况下， 你只需通过主管类构造函数的参数进行一次性关联即可。 此后主管类就能使用生成器对象完成后续所有的构造任务。 但在客户端将生成器对象传递给主管类制造方法时还有另一种方式。 在这种情况下， 你在使用主管类生产产品时每次都可以使用不同的生成器。</li></ol><h3 id="样例-2"><a href="#样例-2" class="headerlink" title="样例"></a>样例</h3><p>使用builder pattern来生成Car以及CarManual</p><p><img src="/posts/Design-Pattern/builder_7.png" alt="builder_7"></p><p>汽车是一个复杂对象， 有数百种不同的制造方法。 我们没有在 汽车类中塞入一个巨型构造函数， 而是将汽车组装代码抽取到单独的汽车生成器类中。 该类中有一组方法可用来配置汽车的各种部件。 </p><p>如果客户端代码需要组装一辆与众不同、 精心调教的汽车， 它可以直接调用生成器。 或者， 客户端可以将组装工作委托给主管类， 因为主管类知道如何使用生成器制造最受欢迎的几种型号汽车。</p><p>每辆汽车都需要一本使用手册 （说真的， 谁会去读它们呢？）。 使用手册会介绍汽车的每一项功能， 因此不同型号的汽车， 其使用手册内容也不一样。 因此， 你可以复用现有流程来制造实际的汽车及其对应的手册。 当然， 编写手册和制造汽车不是一回事， 所以我们需要另外一个生成器对象来专门编写使用手册。 该类与其制造汽车的兄弟类都实现了相同的制造方法， 但是其功能不是制造汽车部件， 而是描述每个部件。 将这些生成器传递给相同的主管对象， 我们就能够生成一辆汽车或是一本使用手册了。 </p><p>最后一个部分是获取结果对象。 尽管金属汽车和纸质手册存在关联， 但它们却是完全不同的东西。 我们无法在主管类和具体产品类不发生耦合的情况下， 在主管类中提供获取结果对象的方法。因此， 我们只能通过负责制造过程的生成器来获取结果对象。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//&nbsp;只有当产品较为复杂且需要详细配置时，使用生成器模式才有意义。下面的两个</span></span><br><span class="line"><span class="comment">//&nbsp;产品尽管没有同样的接口，但却相互关联。</span></span><br><span class="line"><span class="keyword">class</span>&nbsp;<span class="title class_">Car</span>&nbsp;is</span><br><span class="line">&nbsp;&nbsp;<span class="comment">//&nbsp;一辆汽车可能配备有&nbsp;GPS&nbsp;设备、行车电脑和几个座位。不同型号的汽车（</span></span><br><span class="line">&nbsp;&nbsp;<span class="comment">//&nbsp;运动型轿车、SUV&nbsp;和敞篷车）可能会安装或启用不同的功能。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span>&nbsp;<span class="title class_">Manual</span>&nbsp;is</span><br><span class="line">&nbsp;&nbsp;<span class="comment">//&nbsp;用户使用手册应该根据汽车配置进行编制，并介绍汽车的所有功能。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//&nbsp;生成器接口声明了创建产品对象不同部件的方法。</span></span><br><span class="line"><span class="keyword">interface</span>&nbsp;<span class="title class_">Builder</span>&nbsp;is</span><br><span class="line">&nbsp;&nbsp;method&nbsp;<span class="title function_">reset</span><span class="params">()</span></span><br><span class="line">&nbsp;&nbsp;method&nbsp;<span class="title function_">setSeats</span><span class="params">(...)</span></span><br><span class="line">&nbsp;&nbsp;method&nbsp;<span class="title function_">setEngine</span><span class="params">(...)</span></span><br><span class="line">&nbsp;&nbsp;method&nbsp;<span class="title function_">setTripComputer</span><span class="params">(...)</span></span><br><span class="line">&nbsp;&nbsp;method&nbsp;<span class="title function_">setGPS</span><span class="params">(...)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//&nbsp;具体生成器类将遵循生成器接口并提供生成步骤的具体实现。你的程序中可能会</span></span><br><span class="line"><span class="comment">//&nbsp;有多个以不同方式实现的生成器变体。</span></span><br><span class="line"><span class="keyword">class</span>&nbsp;<span class="title class_">CarBuilder</span>&nbsp;<span class="keyword">implements</span>&nbsp;<span class="title class_">Builder</span>&nbsp;is</span><br><span class="line">&nbsp;&nbsp;<span class="keyword">private</span>&nbsp;field car:Car</span><br><span class="line"></span><br><span class="line">&nbsp;&nbsp;<span class="comment">//&nbsp;一个新的生成器实例必须包含一个在后续组装过程中使用的空产品对象。</span></span><br><span class="line">&nbsp;&nbsp;constructor&nbsp;<span class="title function_">CarBuilder</span><span class="params">()</span>&nbsp;is</span><br><span class="line">  <span class="built_in">this</span>.reset()</span><br><span class="line"></span><br><span class="line">&nbsp;&nbsp;<span class="comment">//&nbsp;reset（重置）方法可清除正在生成的对象。</span></span><br><span class="line">&nbsp;&nbsp;method&nbsp;<span class="title function_">reset</span><span class="params">()</span>&nbsp;is</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="built_in">this</span>.car&nbsp;=&nbsp;<span class="keyword">new</span>&nbsp;<span class="title class_">Car</span>()</span><br><span class="line"></span><br><span class="line">&nbsp;&nbsp;<span class="comment">//&nbsp;所有生成步骤都会与同一个产品实例进行交互。</span></span><br><span class="line">&nbsp;&nbsp;method&nbsp;<span class="title function_">setSeats</span><span class="params">(...)</span>&nbsp;is</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">//&nbsp;设置汽车座位的数量。</span></span><br><span class="line"></span><br><span class="line">&nbsp;&nbsp;method&nbsp;<span class="title function_">setEngine</span><span class="params">(...)</span>&nbsp;is</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">//&nbsp;安装指定的引擎。</span></span><br><span class="line"></span><br><span class="line">&nbsp;&nbsp;method&nbsp;<span class="title function_">setTripComputer</span><span class="params">(...)</span>&nbsp;is</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">//&nbsp;安装行车电脑。</span></span><br><span class="line"></span><br><span class="line">&nbsp;&nbsp;method&nbsp;<span class="title function_">setGPS</span><span class="params">(...)</span>&nbsp;is</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">//&nbsp;安装全球定位系统。</span></span><br><span class="line"></span><br><span class="line">&nbsp;&nbsp;<span class="comment">//&nbsp;具体生成器需要自行提供获取结果的方法。这是因为不同类型的生成器可能</span></span><br><span class="line">&nbsp;&nbsp;<span class="comment">//&nbsp;会创建不遵循相同接口的、完全不同的产品。所以也就无法在生成器接口中</span></span><br><span class="line">&nbsp;&nbsp;<span class="comment">//&nbsp;声明这些方法（至少在静态类型的编程语言中是这样的）。</span></span><br><span class="line">&nbsp;&nbsp;<span class="comment">//</span></span><br><span class="line">&nbsp;&nbsp;<span class="comment">//&nbsp;通常在生成器实例将结果返回给客户端后，它们应该做好生成另一个产品的</span></span><br><span class="line">&nbsp;&nbsp;<span class="comment">//&nbsp;准备。因此生成器实例通常会在&nbsp;`getProduct（获取产品）`方法主体末尾</span></span><br><span class="line">&nbsp;&nbsp;<span class="comment">//&nbsp;调用重置方法。但是该行为并不是必需的，你也可让生成器等待客户端明确</span></span><br><span class="line">&nbsp;&nbsp;<span class="comment">//&nbsp;调用重置方法后再去处理之前的结果。</span></span><br><span class="line">&nbsp;&nbsp;method&nbsp;<span class="title function_">getProduct</span><span class="params">()</span>:Car&nbsp;<span class="type">is</span></span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="variable">product</span>&nbsp;<span class="operator">=</span>&nbsp;<span class="built_in">this</span>.car</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="built_in">this</span>.reset()</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">return</span>&nbsp;product</span><br><span class="line"></span><br><span class="line"><span class="comment">//&nbsp;生成器与其他创建型“模式的不同之处在于：它让你能创建不遵循相同接口的产品。</span></span><br><span class="line"><span class="keyword">class</span>&nbsp;<span class="title class_">CarManualBuilder</span>&nbsp;<span class="keyword">implements</span>&nbsp;<span class="title class_">Builder</span>&nbsp;is</span><br><span class="line">&nbsp;&nbsp;<span class="keyword">private</span>&nbsp;field manual:Manual</span><br><span class="line"></span><br><span class="line">&nbsp;&nbsp;constructor&nbsp;<span class="title function_">CarManualBuilder</span><span class="params">()</span>&nbsp;is</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="built_in">this</span>.reset()</span><br><span class="line"></span><br><span class="line">&nbsp;&nbsp;method&nbsp;<span class="title function_">reset</span><span class="params">()</span>&nbsp;is</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="built_in">this</span>.manual&nbsp;=&nbsp;<span class="keyword">new</span>&nbsp;<span class="title class_">Manual</span>()</span><br><span class="line"></span><br><span class="line">&nbsp;&nbsp;method&nbsp;<span class="title function_">setSeats</span><span class="params">(...)</span>&nbsp;is</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">//&nbsp;添加关于汽车座椅功能的文档。</span></span><br><span class="line"></span><br><span class="line">&nbsp;&nbsp;method&nbsp;<span class="title function_">setEngine</span><span class="params">(...)</span>&nbsp;is</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">//&nbsp;添加关于引擎的介绍。</span></span><br><span class="line"></span><br><span class="line">&nbsp;&nbsp;method&nbsp;<span class="title function_">setTripComputer</span><span class="params">(...)</span>&nbsp;is</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">//&nbsp;添加关于行车电脑的介绍。</span></span><br><span class="line"></span><br><span class="line">&nbsp;&nbsp;method&nbsp;<span class="title function_">setGPS</span><span class="params">(...)</span>&nbsp;is</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">//&nbsp;添加关于&nbsp;GPS&nbsp;的介绍。</span></span><br><span class="line"></span><br><span class="line">&nbsp;&nbsp;method&nbsp;<span class="title function_">getProduct</span><span class="params">()</span>:Manual&nbsp;is</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">//&nbsp;返回使用手册并重置生成器。</span></span><br><span class="line"><span class="comment">//&nbsp;主管只负责按照特定顺序执行生成步骤。其在根据特定步骤或配置来生成产品时</span></span><br><span class="line"><span class="comment">//&nbsp;会很有帮助。由于客户端可以直接控制生成器，所以严格意义上来说，主管类并</span></span><br><span class="line"><span class="comment">//&nbsp;不是必需的。</span></span><br><span class="line"><span class="keyword">class</span>&nbsp;<span class="title class_">Director</span>&nbsp;is</span><br><span class="line">&nbsp;&nbsp;<span class="keyword">private</span>&nbsp;field builder:Builder</span><br><span class="line"></span><br><span class="line">&nbsp;&nbsp;<span class="comment">//&nbsp;主管可同由客户端代码传递给自身的任何生成器实例进行交互。客户端可通</span></span><br><span class="line">&nbsp;&nbsp;<span class="comment">//&nbsp;过这种方式改变最新组装完毕的产品的最终类型。</span></span><br><span class="line">&nbsp;&nbsp;method&nbsp;<span class="title function_">setBuilder</span><span class="params">(builder:Builder)</span></span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="built_in">this</span>.builder&nbsp;=&nbsp;builder</span><br><span class="line"></span><br><span class="line">&nbsp;&nbsp;<span class="comment">//&nbsp;主管可使用同样的生成步骤创建多个产品变体。</span></span><br><span class="line">&nbsp;&nbsp;method&nbsp;<span class="title function_">constructSportsCar</span><span class="params">(builder:&nbsp;Builder)</span>&nbsp;is</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;builder.reset()</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;builder.setSeats(<span class="number">2</span>)</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;builder.setEngine(<span class="keyword">new</span>&nbsp;<span class="title class_">SportEngine</span>())</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;builder.setTripComputer(<span class="literal">true</span>)</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;builder.setGPS(<span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">&nbsp;&nbsp;method&nbsp;<span class="title function_">constructSUV</span><span class="params">(builder:&nbsp;“Builder)</span>&nbsp;is</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">//&nbsp;...</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//&nbsp;客户端代码会创建生成器对象并将其传递给主管，然后执行构造过程。最终结果</span></span><br><span class="line"><span class="comment">//&nbsp;将需要从生成器对象中获取。</span></span><br><span class="line"><span class="keyword">class</span>&nbsp;<span class="title class_">Application</span>&nbsp;is</span><br><span class="line"></span><br><span class="line">&nbsp;&nbsp;method&nbsp;<span class="title function_">makeCar</span><span class="params">()</span>&nbsp;<span class="type">is</span></span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="variable">director</span>&nbsp;<span class="operator">=</span>&nbsp;<span class="keyword">new</span>&nbsp;<span class="title class_">Director</span>()</span><br><span class="line"></span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="type">CarBuilder</span>&nbsp;<span class="variable">builder</span>&nbsp;<span class="operator">=</span>&nbsp;<span class="keyword">new</span>&nbsp;<span class="title class_">CarBuilder</span>()</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;director.constructSportsCar(builder)</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="type">Car</span>&nbsp;<span class="variable">car</span>&nbsp;<span class="operator">=</span>&nbsp;builder.getProduct()</span><br><span class="line"></span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="type">CarManualBuilder</span>&nbsp;<span class="variable">builder</span>&nbsp;<span class="operator">=</span>&nbsp;<span class="keyword">new</span>&nbsp;<span class="title class_">CarManualBuilder</span>()</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;director.constructSportsCar(builder)</span><br><span class="line"></span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">//&nbsp;最终产品通常需要从生成器对象中获取，因为主管不知晓具体生成器和</span></span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">//&nbsp;产品的存在，也不会对其产生依赖。</span></span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="type">Manual</span>&nbsp;<span class="variable">manual</span>&nbsp;<span class="operator">=</span>&nbsp;builder.getProduct()</span><br></pre></td></tr></tbody></table></figure><h3 id="使用场景-2"><a href="#使用场景-2" class="headerlink" title="使用场景"></a>使用场景</h3><ul><li><p>避免重叠构造函数的出现</p><ul><li>一个构造函数中有十几个可选参数，或者复写这个函数来包含一些较少参数的简化版方法：</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span>&nbsp;<span class="title class_">Pizza</span>&nbsp;{</span><br><span class="line">&nbsp;&nbsp;Pizza(<span class="type">int</span>&nbsp;size)&nbsp;{&nbsp;...&nbsp;}</span><br><span class="line">&nbsp;&nbsp;Pizza(<span class="type">int</span>&nbsp;size,&nbsp;<span class="type">boolean</span>&nbsp;cheese)&nbsp;{&nbsp;...&nbsp;}</span><br><span class="line">&nbsp;&nbsp;Pizza(<span class="type">int</span>&nbsp;size,&nbsp;<span class="type">boolean</span>&nbsp;cheese,&nbsp;<span class="type">boolean</span>&nbsp;pepperoni)&nbsp;{&nbsp;...&nbsp;}</span><br></pre></td></tr></tbody></table></figure><ul><li>生成器模式让你可以分<strong>步骤生成对象</strong>， 而且允许你<strong>仅使用必须的步骤</strong>。 应用该模式后， 你再也不需要将几十个参数塞进构造函数里了。</li></ul></li><li><p>使用代码创建不同形式的产品 （例如石头或木头房屋） 时， 可使用生成器模式。</p><ul><li>如果你需要创建的各种形式的产品， 它们的制造过程相似且仅有细节上的差异， 此时可使用生成器模式。 </li><li>基本生成器接口中定义了所有可能的制造步骤， 具体生成器将实现这些步骤来制造特定形式的产品。 同时， 主管类将负责管理制造步骤的顺序</li></ul></li><li><p>使用生成器构造组合树或其他复杂对象。</p><ul><li>生成器模式让你能分步骤构造产品。 你可以延迟执行某些步骤而不会影响最终产品。 你甚至可以递归调用这些步骤， 这在创建对象树时非常方便。 生成器在执行制造步骤时， 不能对外发布未完成的产品。 这可以避免客户端代码获取到不完整结果对象的情况。</li></ul></li></ul><h3 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h3><ol><li>定义通用步骤，确保可以制造所有形式的产品</li><li>在基本生成器接口中生命这些步骤</li><li>为每个形式的产品创建具体生成器类并实现具体的步骤，还要实现获取构造结果对象的方法。不能在生成器接口中声明该方法， 因为不同生成器构造的产品可能没有公共接口， 因此你就不知道该方法返回的对象类型。 但是， 如果所有产品都位于单一类层次中， 你就可以安全地在基本接口中添加获取生成对象的方法。</li><li><strong>考虑</strong>创建主管类。 它可以使用同一生成器对象来封装多种构造产品的方式.</li><li>客户端代码会同时创建生成器和主管对象。 构造开始前， 客户端必须将生成器对象传递给主管对象。 通常情况下， 客户端只需调用主管类构造函数一次即可。 主管类使用生成器对象完成后续所有制造任务。 还有另一种方式， 那就是客户端可以将生成器对象直接传递给主管类的制造方法。</li><li>只有在所有产品都遵循相同接口的情况下， 构造结果可以直接通过主管类获取。 否则， 客户端应当通过生成器获取构造结果。</li></ol><h2 id="原型-Clone-Prototype"><a href="#原型-Clone-Prototype" class="headerlink" title="原型 - Clone, Prototype"></a>原型 - Clone, Prototype</h2><p>原型模式使得能够复制已有对象而又无需使代码依赖他们所属的类</p><h3 id="现实问题-3"><a href="#现实问题-3" class="headerlink" title="现实问题"></a>现实问题</h3><p>我们有一个对象并且希望生成一个完全相同的复制品。一个可行的办法是创建个属于相同类的对象然后循环复制所有的原始对象的成员变量。</p><p>但是这个的问题在于，我们会有一些<strong>私有成员变量</strong>而这些在对象本身以外是不可见的</p><p>还有另外一个问题。 因为你必须知道对象所属的类才能创建复制品， 所以代码必须依赖该类。 即使你可以接受额外的依赖性， 那还有另外一个问题： 有时你只知道对象所实现的接口， 而不知道其所属的具体类， 比如可向方法的某个参数传入实现了某个接口的任何对象。</p><h3 id="解决方案-3"><a href="#解决方案-3" class="headerlink" title="解决方案"></a>解决方案</h3><p>通过原型模式我们可以将克隆过程委派给被克隆的实际对象。模式为所有支持克隆的对象声明了一个<strong>通用接口</strong>这个接口使得我们能够克隆对象同时又无需将代码和对象所属类耦合。通常情况下，这样的接口中仅包含一个<strong>克隆</strong>方法,</p><p>所有的类对 克隆 这个方法的实现都非常类似。这个方法会：创建一个当前类的对象，然后将原始对象所有的成员变量值复制到新建的类中。这样我们就可以复制私有成员变量。</p><p>支持克隆的对象被称为<strong>原型</strong></p><p>当对象有十几个成员变量和几百种类型时，我们可以创建一系列不同的类型的对象并用不同的方式对其进行配置。如果所需对象与预先配置的对象相同。直接克隆原型即可。</p><h3 id="结构-3"><a href="#结构-3" class="headerlink" title="结构"></a>结构</h3><h4 id="基本实现"><a href="#基本实现" class="headerlink" title="基本实现"></a>基本实现</h4><p><img src="/posts/Design-Pattern/prototype_1.png" alt="prototype_1"></p><ol><li>原型 （Pro­to­type） 接口将对克隆方法进行声明。 在绝大多数情况下， 其中只会有一个名为 clone克隆的方法。 </li><li>具体原型 （Con­crete Pro­to­type） 类将实现克隆方法。 除了将原始对象的数据复制到克隆体中之外， 该方法有时还需处理克隆过程中的极端情况， 例如克隆关联对象和梳理递归依赖等等。 </li><li>客户端 （Client） 可以复制实现了原型接口的任何对象。</li></ol><h4 id="原型注册表实现"><a href="#原型注册表实现" class="headerlink" title="原型注册表实现"></a>原型注册表实现</h4><p><img src="/posts/Design-Pattern/prototype_2.png" alt="prototype_2"></p><p>原型注册表 （Pro­to­type Reg­istry） 提供了一种访问常用原型的简单方法， 其中存储了一系列可供随时复制的预生成对象。 最简单的注册表原型是一个 名称 → 原型的哈希表。 但如果需要使用名称以外的条件进行搜索， 你可以创建更加完善的注册表版本。</p><h3 id="样例-3"><a href="#样例-3" class="headerlink" title="样例"></a>样例</h3><p>原型模式可以生成完全相同的几何对象副本，无需代码与对象所属类耦合</p><p><img src="/posts/Design-Pattern/prototype_3.png" alt="prototype_3"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//&nbsp;基础原型。</span></span><br><span class="line"><span class="keyword">abstract</span>&nbsp;<span class="keyword">class</span>&nbsp;<span class="title class_">Shape</span>&nbsp;is</span><br><span class="line">&nbsp;&nbsp;field X:&nbsp;<span class="type">int</span></span><br><span class="line">&nbsp;&nbsp;field Y:&nbsp;<span class="type">int</span></span><br><span class="line">&nbsp;&nbsp;field color:&nbsp;string</span><br><span class="line"></span><br><span class="line">&nbsp;&nbsp;<span class="comment">//&nbsp;常规构造函数。</span></span><br><span class="line">&nbsp;&nbsp;constructor&nbsp;<span class="title function_">Shape</span><span class="params">()</span>&nbsp;is</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">//&nbsp;...</span></span><br><span class="line"></span><br><span class="line">&nbsp;&nbsp;<span class="comment">//&nbsp;原型构造函数。使用已有对象的数值来初始化一个新对象。</span></span><br><span class="line">&nbsp;&nbsp;constructor&nbsp;<span class="title function_">Shape</span><span class="params">(source:&nbsp;Shape)</span>&nbsp;is</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="title function_">this</span><span class="params">()</span></span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="built_in">this</span>.X&nbsp;=&nbsp;source.X</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="built_in">this</span>.Y&nbsp;=&nbsp;source.Y</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="built_in">this</span>.color&nbsp;=&nbsp;source.color</span><br><span class="line"></span><br><span class="line">&nbsp;&nbsp;<span class="comment">//&nbsp;clone（克隆）操作会返回一个形状子类。</span></span><br><span class="line">&nbsp;&nbsp;<span class="keyword">abstract</span>&nbsp;method&nbsp;<span class="title function_">clone</span><span class="params">()</span>:Shape</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//&nbsp;具体原型。克隆方法会创建一个新对象并将其传递给构造函数。直到构造函数运</span></span><br><span class="line"><span class="comment">//&nbsp;行完成前，它都拥有指向新克隆对象的引用。因此，任何人都无法访问未完全生</span></span><br><span class="line"><span class="comment">//&nbsp;成的克隆对象。这可以保持克隆结果的一致。</span></span><br><span class="line"><span class="keyword">class</span>&nbsp;<span class="title class_">Rectangle</span>&nbsp;<span class="keyword">extends</span>&nbsp;<span class="title class_">Shape</span>&nbsp;is</span><br><span class="line">&nbsp;&nbsp;field width:&nbsp;<span class="type">int</span></span><br><span class="line">&nbsp;&nbsp;field height:&nbsp;<span class="type">int</span></span><br><span class="line">  constructor&nbsp;<span class="title function_">Rectangle</span><span class="params">(source:&nbsp;Rectangle)</span>&nbsp;is</span><br><span class="line">    <span class="comment">//&nbsp;需要调用父构造函数来复制父类中定义的私有成员变量。</span></span><br><span class="line">    <span class="built_in">super</span>(source)</span><br><span class="line">    <span class="built_in">this</span>.width&nbsp;=&nbsp;source.width</span><br><span class="line">    <span class="built_in">this</span>.height&nbsp;=&nbsp;source.height</span><br><span class="line"></span><br><span class="line">&nbsp;&nbsp;method&nbsp;<span class="title function_">clone</span><span class="params">()</span>:Shape&nbsp;is</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">return</span>&nbsp;<span class="keyword">new</span>&nbsp;<span class="title class_">Rectangle</span>(<span class="built_in">this</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span>&nbsp;<span class="title class_">Circle</span>&nbsp;<span class="keyword">extends</span>&nbsp;<span class="title class_">Shape</span>&nbsp;is</span><br><span class="line">&nbsp;&nbsp;field radius:&nbsp;<span class="type">int</span></span><br><span class="line"></span><br><span class="line">&nbsp;&nbsp;constructor&nbsp;<span class="title function_">Circle</span><span class="params">(source:&nbsp;Circle)</span>&nbsp;is</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="title function_">super</span><span class="params">(source)</span></span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="built_in">this</span>.radius&nbsp;=&nbsp;source.radius</span><br><span class="line"></span><br><span class="line">&nbsp;&nbsp;method&nbsp;<span class="title function_">clone</span><span class="params">()</span>:Shape&nbsp;is</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">return</span>&nbsp;<span class="keyword">new</span>&nbsp;<span class="title class_">Circle</span>(<span class="built_in">this</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//&nbsp;客户端代码中的某个位置。</span></span><br><span class="line"><span class="keyword">class</span>&nbsp;<span class="title class_">Application</span>&nbsp;is</span><br><span class="line">&nbsp;&nbsp;field shapes:&nbsp;array&nbsp;of&nbsp;Shape</span><br><span class="line"></span><br><span class="line">&nbsp;&nbsp;constructor&nbsp;<span class="title function_">Application</span><span class="params">()</span>&nbsp;is</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="type">Circle</span>&nbsp;<span class="variable">circle</span>&nbsp;<span class="operator">=</span>&nbsp;<span class="keyword">new</span>&nbsp;<span class="title class_">Circle</span>()</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;circle.X&nbsp;=&nbsp;<span class="number">10</span></span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;circle.Y&nbsp;=&nbsp;<span class="number">10</span></span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;circle.radius&nbsp;=&nbsp;<span class="number">20</span></span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;shapes.add(circle)</span><br><span class="line"></span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="type">Circle</span>&nbsp;<span class="variable">anotherCircle</span>&nbsp;<span class="operator">=</span>&nbsp;circle.clone()</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;shapes.add(anotherCircle)</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">//&nbsp;变量&nbsp;`anotherCircle（另一个圆）`与&nbsp;`circle（圆）`对象的内</span></span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">//&nbsp;容完全一样。</span></span><br><span class="line"></span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="type">Rectangle</span>&nbsp;<span class="variable">rectangle</span>&nbsp;<span class="operator">=</span>&nbsp;<span class="keyword">new</span>&nbsp;<span class="title class_">Rectangle</span>()</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;rectangle.width&nbsp;=&nbsp;<span class="number">10</span></span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;rectangle.height&nbsp;=&nbsp;<span class="number">20</span></span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;shapes.add(rectangle)</span><br><span class="line"></span><br><span class="line">&nbsp;&nbsp;method&nbsp;<span class="title function_">businessLogic</span><span class="params">()</span>&nbsp;is</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">//&nbsp;原型是很强大的东西，因为它能在不知晓对象类型的情况下生成一个与</span></span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">//&nbsp;其完全相同的复制品。</span></span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="type">Array</span>&nbsp;<span class="variable">shapesCopy</span>&nbsp;<span class="operator">=</span>&nbsp;<span class="keyword">new</span>&nbsp;<span class="title class_">Array</span>&nbsp;of&nbsp;Shapes.</span><br><span class="line"></span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">//&nbsp;例如，我们不知晓形状数组中元素的具体类型，只知道它们都是形状。</span></span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">//&nbsp;但在多态机制的帮助下，当我们在某个形状上调用&nbsp;`clone（克隆）`</span></span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">//&nbsp;方法时，程序会检查其所属的类并调用其中所定义的克隆方法。这样，</span></span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">//&nbsp;我们将获得一个正确的复制品，而不是一组简单的形状对象。</span></span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;foreach&nbsp;(s&nbsp;in&nbsp;shapes)&nbsp;<span class="keyword">do</span></span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;shapesCopy.add(s.clone())</span><br><span class="line"></span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">//&nbsp;`shapesCopy（形状副本）`数组中包含&nbsp;`shape（形状）`数组所有</span></span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">//&nbsp;子元素的复制品.</span></span><br></pre></td></tr></tbody></table></figure><h3 id="使用场景-3"><a href="#使用场景-3" class="headerlink" title="使用场景"></a>使用场景</h3><ul><li>需要复制一些对象，同时希望代码独立于这些对象所属的具体类<ul><li>这一点考量通常出现在代码需要处理第三方代码通过接口传递过来的对象时。 即使不考虑代码耦合的情况， 你的代码也不能依赖这些对象所属的具体类， 因为你不知道它们的具体信息。<br>原型模式为客户端代码提供一个通用接口， 客户端代码可通过这一接口与所有实现了克隆的对象进行交互， 它也使得客户端代码与其所克隆的对象具体类独立开来。实现方法</li></ul></li><li>如果子类的区别仅在于其对象的初始化方式， 那么你可以使用该模式来减少子类的数量<ul><li>在原型模式中， 你可以使用一系列预生成的、 各种类型的对象作为原型。</li><li>客户端不必根据需求对子类进行实例化， 只需找到合适的原型并对其进行克隆即可。</li></ul></li></ul><h3 id="实现方法-1"><a href="#实现方法-1" class="headerlink" title="实现方法"></a>实现方法</h3><ol><li>创建 <code>Prototype</code>接口，并在其中加入<code>clone</code>方法。</li><li>原型类必须另行定义一个以<strong>该类对象为参数的构造函数</strong>。<strong>构造函数必须复制参数对象中的所有成员变量值到新建实体中</strong>。 如果你需要修改子类， 则必须调用父类构造函数， 让父类复制其私有成员变量值。<br>如果编程语言不支持方法重载， 那么你可能需要定义一个特殊方法来复制对象数据。 在构造函数中进行此类处理比较方便， 因为它在调用 new运算符后会马上返回结果对象。</li><li>克隆方法通常只有一行代码： 使用 new运算符调用原型版本的构造函数。 注意， 每个类都必须显式重写克隆方法并使用自身类名调用 new运算符。 否则， 克隆方法可能会生成父类的对象。</li><li>可以创建一个中心化原型注册表， 用于存储常用原型。<br>可以新建一个工厂类来实现注册表， 或者在原型基类中添加一个获取原型的静态方法。 该方法必须能够根据客户端代码设定的条件进行搜索。 搜索条件可以是简单的字符串， 或者是一组复杂的搜索参数。 找到合适的原型后， 注册表应对原型进行克隆， 并将复制生成的对象返回给客户端。<br>最后还要将对子类构造函数的直接调用替换为对原型注册表工厂方法的调用。</li></ol><h2 id="单例模式-Singleton"><a href="#单例模式-Singleton" class="headerlink" title="单例模式 - Singleton"></a>单例模式 - Singleton</h2><p>单例是一种能够保证一个类只有一个实例并且提供一个方位该实例的全局节点</p><h3 id="现实问题-4"><a href="#现实问题-4" class="headerlink" title="现实问题"></a>现实问题</h3><p>由于单例模式<strong>同时</strong>解决了两个问题，所以他其实「违反了」「单一指责原则」</p><ol><li><p>保证一个类只有一个实例。为什么？一个可能的原因是想要控制某些共享资源的访问权限：</p><ol><li><p>如果创建了一个对象，如果过一会决定再创建一个新对象，那么其实获得的是之前已经创建的对象，而不是一个新对象。</p></li><li><p><img src="/posts/Design-Pattern/singleton_1.png" alt="singleton_1"></p></li><li><p>假设有一个应用，需要频繁地访问数据库。如果每次访问数据库时都创建一个新的数据库连接，将会非常耗时且低效，因为建立数据库连接是一个资源密集型和时间密集型的操作。此外，同时打开过多的连接可能会超过数据库的连接限制，导致新的连接失败。</p><p>使用单例模式，你可以创建一个<code>DatabaseConnection</code>类，它负责与数据库建立连接。这个类将被设计为单例，确保应用中的任何组件都使用相同的数据库连接实例，从而有效管理对数据库的访问。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DatabaseConnection</span> {</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DatabaseConnection instance;</span><br><span class="line">    <span class="keyword">private</span> Connection connection;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">DatabaseConnection</span><span class="params">()</span> {</span><br><span class="line">        <span class="comment">// 初始化数据库连接</span></span><br><span class="line">        <span class="built_in">this</span>.connection = <span class="comment">// 创建数据库连接</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> DatabaseConnection <span class="title function_">getInstance</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) {</span><br><span class="line">            <span class="keyword">synchronized</span> (DatabaseConnection.class) {</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="literal">null</span>) {</span><br><span class="line">                    instance = <span class="keyword">new</span> <span class="title class_">DatabaseConnection</span>();</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Connection <span class="title function_">getConnection</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.connection;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ol></li><li><p>为该实例提供一个全局访问的节点</p><ol><li><p>单例模式允许程序的任何地方访问特定的对象但是它可以「保护该实例<strong>不</strong>被其他代码覆盖」</p></li><li><p>考虑一个应用需要读取一些全局配置信息，如配置文件中的设置。使用单例模式，可以创建一个<code>Configuration</code>类，它加载并存储配置信息，应用中的任何部分都可以访问这些信息，而不需要重复加载。并且无法修改内部的内容，因此是安全的。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Configuration</span> {</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Configuration instance;</span><br><span class="line">    <span class="keyword">private</span> Properties properties;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Configuration</span><span class="params">()</span> {</span><br><span class="line">        <span class="built_in">this</span>.properties = <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        <span class="comment">// 加载配置文件</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Configuration <span class="title function_">getInstance</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) {</span><br><span class="line">            <span class="keyword">synchronized</span> (Configuration.class) {</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="literal">null</span>) {</span><br><span class="line">                    instance = <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getProperty</span><span class="params">(String key)</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.properties.getProperty(key);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ol></li></ol><h3 id="解决方案-4"><a href="#解决方案-4" class="headerlink" title="解决方案"></a>解决方案</h3><p>所有的单例的实现都包含下面两个相同的步骤：</p><ul><li><p>设置默认的构造函数为「私有」，防止其他对象使用单例类的<code>new</code>运算符</p></li><li><p>新建一个静态构建方法作为构造函数。该函数会调用私有的构造函数来创建对象并将其保存在一个静态成员变量中。此后所有对于该函数的调用都将返回这个缓存对象。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> {</span><br><span class="line">    <span class="comment">// 静态成员变量，存储单例实例</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 私有构造函数，防止外部通过new直接实例化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> {} <span class="comment">// &lt;- 注意他是private的</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 公开的静态方法，用于获取单例实例</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> {</span><br><span class="line">        <span class="comment">// 如果实例不存在，则创建实例</span></span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) {</span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 返回实例</span></span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>根据代码不难看出，只要调用了这个类里面的getInstance，它总是返回已经创建的相同的对象</p></li></ul><h3 id="真实世界类比"><a href="#真实世界类比" class="headerlink" title="真实世界类比"></a>真实世界类比</h3><p>比如政府，一个国家只有一个官方政府。不论组成政府的每个人的身份是什么，这个XX政府这个称谓总是鉴别那些掌权者的全局访问节点</p><h3 id="结构-4"><a href="#结构-4" class="headerlink" title="结构"></a>结构</h3><p><img src="/posts/Design-Pattern/singleton_2.png" alt="singleton_2"></p><p>getInstance 来返回其所属类的一个相同实例。单例的构造函数必须对客户端代码隐藏。客户端只通过getInstance的方法来获取对象</p><h3 id="代码样例"><a href="#代码样例" class="headerlink" title="代码样例"></a>代码样例</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//&nbsp;数据库类会对`getInstance（获取实例）`方法进行定义以让客户端在程序各处</span></span><br><span class="line"><span class="comment">//&nbsp;都能访问相同的数据库连接实例。</span></span><br><span class="line"><span class="keyword">class</span>&nbsp;<span class="title class_">Database</span>&nbsp;is</span><br><span class="line">&nbsp;&nbsp;<span class="comment">//&nbsp;保存单例实例的成员变量必须被声明为静态类型。</span></span><br><span class="line">&nbsp;&nbsp;<span class="keyword">private</span>&nbsp;<span class="keyword">static</span>&nbsp;field instance:&nbsp;Database</span><br><span class="line"></span><br><span class="line">&nbsp;&nbsp;<span class="comment">//&nbsp;单例的构造函数必须永远是私有类型，以防止使用`new`运算符直接调用构造方法。</span></span><br><span class="line">  <span class="keyword">private</span>&nbsp;constructor&nbsp;<span class="title function_">Database</span><span class="params">()</span>&nbsp;is</span><br><span class="line">&nbsp;&nbsp;<span class="comment">//&nbsp;部分初始化代码（例如到数据库服务器的实际连接）。</span></span><br><span class="line">&nbsp;&nbsp;<span class="comment">//&nbsp;...</span></span><br><span class="line"></span><br><span class="line">&nbsp;&nbsp;<span class="comment">//&nbsp;用于控制对单例实例的访问权限的静态方法。</span></span><br><span class="line">&nbsp;&nbsp;<span class="keyword">public</span>&nbsp;<span class="keyword">static</span>&nbsp;method&nbsp;<span class="title function_">getInstance</span><span class="params">()</span>&nbsp;is</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="title function_">if</span>&nbsp;<span class="params">(Database.instance&nbsp;==&nbsp;<span class="literal">null</span>)</span>&nbsp;then</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="title function_">acquireThreadLock</span><span class="params">()</span>&nbsp;and&nbsp;then</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">//&nbsp;确保在该线程等待解锁时，其他线程没有初始化该实例。</span></span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">if</span>&nbsp;(Database.instance&nbsp;==&nbsp;<span class="literal">null</span>)&nbsp;then</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Database.instance&nbsp;=&nbsp;<span class="keyword">new</span>&nbsp;<span class="title class_">Database</span>()</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">return</span>&nbsp;Database.instance</span><br><span class="line"></span><br><span class="line">&nbsp;&nbsp;<span class="comment">//&nbsp;最后，任何单例都必须定义一些可在其实例上执行的业务逻辑。</span></span><br><span class="line">&nbsp;&nbsp;<span class="keyword">public</span>&nbsp;method&nbsp;<span class="title function_">query</span><span class="params">(sql)</span>&nbsp;is</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">//&nbsp;比如应用的所有数据库查询请求都需要通过该方法进行。因此，你可以</span></span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">//&nbsp;在这里添加限流或缓冲逻辑。</span></span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">//&nbsp;...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span>&nbsp;<span class="title class_">Application</span>&nbsp;is</span><br><span class="line">&nbsp;&nbsp;method&nbsp;<span class="title function_">main</span><span class="params">()</span>&nbsp;is</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="type">Database</span>&nbsp;<span class="variable">foo</span>&nbsp;<span class="operator">=</span>&nbsp;Database.getInstance()</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;foo.query(<span class="string">"SELECT&nbsp;..."</span>)</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">//&nbsp;...</span></span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="type">Database</span>&nbsp;<span class="variable">bar</span>&nbsp;<span class="operator">=</span>&nbsp;Database.getInstance()</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;bar.query(<span class="string">"SELECT&nbsp;..."</span>)</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">//&nbsp;变量&nbsp;`bar`&nbsp;和&nbsp;`foo`&nbsp;中将包含同一个对象。</span></span><br></pre></td></tr></tbody></table></figure><h3 id="使用场景-4"><a href="#使用场景-4" class="headerlink" title="使用场景"></a>使用场景</h3><ul><li>如果程序中的某个类对于所有客户端只有一个可用的实例， 可以使用单例模式。 <ul><li>单例模式禁止通过除特殊构建方法以外的任何方式来创建自身类的对象。 该方法可以创建一个新对象， 但如果该对象已经被创建， 则返回已有的对象。</li></ul></li><li>如果你需要更加严格地控制全局变量， 可以使用单例模式。<ul><li>单例模式与全局变量不同， 它保证类只存在一个实例。 除了单例类自己以外， 无法通过任何方式替换缓存的实例。</li></ul></li><li>我们可以随时调整限制并设定生成单例实例的数量， 只需修改 getInstance 方法， 即 getInstance 中的代码即可实现。</li></ul><h3 id="实现方式-1"><a href="#实现方式-1" class="headerlink" title="实现方式"></a>实现方式</h3><ol><li>在类中添加一个私有静态成员变量用于保存单例实例。 </li><li>声明一个公有静态构建方法用于获取单例实例。 </li><li>在静态方法中实现”延迟初始化”。 该方法会在首次被调用时创建一个新对象， 并将其存储在静态成员变量中。 此后该方法每次被调用时都返回该实例。 </li><li>将类的构造函数设为私有。 类的静态方法仍能调用构造函数， 但是其他对象不能调用。 </li><li>检查客户端代码， 将对单例的构造函数的调用替换为对其静态构建方法的调用。</li></ol><h3 id="与其他模式的关系"><a href="#与其他模式的关系" class="headerlink" title="与其他模式的关系"></a>与其他模式的关系</h3><ul><li>外观 (Facade) 类通常可以转换为单例类， 因为在大部分情况下一个外观对象就足够了。 </li><li>如果你能将对象的所有共享状态简化为一个享元（cache，缓存）对象， 那么享元就和单例类似了。 但这两个模式有两个根本性的不同。 <ul><li>只会有一个单例实体， 但是享元类可以有多个实体， 各实体的内在状态也可以不同。</li><li>单例对象可以是可变的。 享元对象是不可变的。 </li><li>抽象工厂、 生成器和原型都可以用单例来实现。</li></ul></li></ul><h2 id="创建型设计模式总结"><a href="#创建型设计模式总结" class="headerlink" title="创建型设计模式总结"></a>创建型设计模式总结</h2><p>创建型模式主要处理对象创建机制，帮助创建对象时保持系统的灵活性和可维护性。</p><ul><li><p><strong>单例模式</strong>：当需要确保全局只有一个实例存在，并且提供一个访问它的全局访问点时使用。</p><p>例子：数据库连接池的唯一性</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DatabaseConnectionPool</span> {</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">DatabaseConnectionPool</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatabaseConnectionPool</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">DatabaseConnectionPool</span><span class="params">()</span> {</span><br><span class="line">        <span class="comment">// 私有构造器，防止外部直接创建实例</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> DatabaseConnectionPool <span class="title function_">getInstance</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Connection <span class="title function_">getConnection</span><span class="params">()</span> {</span><br><span class="line">        <span class="comment">// 返回数据库连接</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>工厂方法</strong>和<strong>抽象工厂</strong>：当创建对象时需要考虑系统的灵活性和可扩展性，而不是直接实例化类时使用。工厂方法用于创建一个产品，抽象工厂提供一个接口来创建一系列相关或相互依赖的对象。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 按钮接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Button</span> {</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">render</span><span class="params">()</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// Windows按钮实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WindowsButton</span> <span class="keyword">implements</span> <span class="title class_">Button</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">render</span><span class="params">()</span> {</span><br><span class="line">        System.out.println(<span class="string">"Rendering Windows button"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// MacOS按钮实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MacOSButton</span> <span class="keyword">implements</span> <span class="title class_">Button</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">render</span><span class="params">()</span> {</span><br><span class="line">        System.out.println(<span class="string">"Rendering MacOS button"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按钮工厂接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">ButtonFactory</span> {</span><br><span class="line">    <span class="keyword">abstract</span> Button <span class="title function_">createButton</span><span class="params">()</span>; <span class="comment">// 工厂方法</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">renderButton</span><span class="params">()</span> {</span><br><span class="line">        <span class="type">Button</span> <span class="variable">button</span> <span class="operator">=</span> createButton();</span><br><span class="line">        button.render();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// Windows按钮工厂</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WindowsButtonFactory</span> <span class="keyword">extends</span> <span class="title class_">ButtonFactory</span> {</span><br><span class="line">    Button <span class="title function_">createButton</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">WindowsButton</span>();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// MacOS按钮工厂</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MacOSButtonFactory</span> <span class="keyword">extends</span> <span class="title class_">ButtonFactory</span> {</span><br><span class="line">    Button <span class="title function_">createButton</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MacOSButton</span>();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 按钮和文本框的接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Button</span> {</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">render</span><span class="params">()</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TextField</span> {</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">render</span><span class="params">()</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// Windows和MacOS的按钮实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WindowsButton</span> <span class="keyword">implements</span> <span class="title class_">Button</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">render</span><span class="params">()</span> {</span><br><span class="line">        System.out.println(<span class="string">"Rendering Windows button"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MacOSButton</span> <span class="keyword">implements</span> <span class="title class_">Button</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">render</span><span class="params">()</span> {</span><br><span class="line">        System.out.println(<span class="string">"Rendering MacOS button"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// Windows和MacOS的文本框实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WindowsTextField</span> <span class="keyword">implements</span> <span class="title class_">TextField</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">render</span><span class="params">()</span> {</span><br><span class="line">        System.out.println(<span class="string">"Rendering Windows text field"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MacOSTextField</span> <span class="keyword">implements</span> <span class="title class_">TextField</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">render</span><span class="params">()</span> {</span><br><span class="line">        System.out.println(<span class="string">"Rendering MacOS text field"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象工厂接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">GUIFactory</span> {</span><br><span class="line">    Button <span class="title function_">createButton</span><span class="params">()</span>;</span><br><span class="line">    TextField <span class="title function_">createTextField</span><span class="params">()</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体工厂实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WindowsFactory</span> <span class="keyword">implements</span> <span class="title class_">GUIFactory</span> {</span><br><span class="line">    <span class="keyword">public</span> Button <span class="title function_">createButton</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">WindowsButton</span>();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> TextField <span class="title function_">createTextField</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">WindowsTextField</span>();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MacOSFactory</span> <span class="keyword">implements</span> <span class="title class_">GUIFactory</span> {</span><br><span class="line">    <span class="keyword">public</span> Button <span class="title function_">createButton</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MacOSButton</span>();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> TextField <span class="title function_">createTextField</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MacOSTextField</span>();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li><strong>工厂方法模式</strong>着重于创建单一产品（在这个例子中是按钮）。每个具体的工厂类负责创建单一产品的一个具体实现。</li><li><strong>抽象工厂模式</strong>提供一个创建一系列相关或相互依赖产品的接口（在这个例子中是按钮和文本框）。每个具体的工厂类负责创建一系列产品的一组具体实现。</li></ul><h5 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h5><ul><li><strong>设计目的</strong>：让子类决定实例化哪一个类。工厂方法模式让类的实例化推迟到子类中进行。</li><li><strong>应用场景</strong>：当一个类不知道它所必须创建的对象的类的时候；当一个类希望由其子类来指定它创建的对象时；当类将创建对象的职责委托给多个帮助子类中的某一个，并且你想将哪一个帮助子类是代理者这一信息局部化时。</li><li><strong>关键实现</strong>：通过继承来改变实例化的类。子类实现抽象工厂方法以创建具体产品。</li></ul><h5 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h5><ul><li><strong>设计目的</strong>：提供一个接口，用于创建相关或相互依赖对象的家族，而不需要明确指定具体类。</li><li><strong>应用场景</strong>：当需要创建的对象是一系列相关或相互依赖的对象时；当一个系统要独立于它的产品的创建、组合和表示时；当强调一系列相关的产品对象的设计以便进行联合使用时；当提供一个产品类库，只想显示它们的接口而不是实现时。</li><li><strong>关键实现</strong>：通过对象组合来创建抽象产品的家族。一个工厂实例创建一系列相互依赖的产品。</li></ul><h5 id="核心区别"><a href="#核心区别" class="headerlink" title="核心区别"></a>核心区别</h5><ul><li><strong>产品范围</strong>：工厂方法模式通常用于一个产品等级结构，而抽象工厂模式用于多个产品等级结构。</li><li><strong>控制范围</strong>：工厂方法通过继承来改变实例化哪个类，控制的是生产单一产品的逻辑；抽象工厂通过对象组合来创建一系列产品，控制的是生产多个相互依赖的一系列产品的逻辑。</li><li><strong>实现方式</strong>：工厂方法模式依赖于继承，具体产品由子类创建；抽象工厂模式依赖于接口的实现，具体产品的创建委托给了具体工厂的实例。</li></ul></li><li><p><strong>建造者模式</strong>：当需要创建一个包含多个组成部分的复杂对象时，尤其是当对象的创建过程需要多个步骤，且构造过程需要被细化时使用。</p><p>构建复杂的HTML文档或SQL查询</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HtmlDocument</span> {</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; paragraphs = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTitle</span><span class="params">(String title)</span> {</span><br><span class="line">        <span class="built_in">this</span>.title = title;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addParagraph</span><span class="params">(String paragraph)</span> {</span><br><span class="line">        paragraphs.add(paragraph);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">build</span><span class="params">()</span> {</span><br><span class="line">        <span class="comment">// 将标题和段落组合成HTML文档</span></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HtmlDocumentBuilder</span> {</span><br><span class="line">    <span class="keyword">private</span> HtmlDocument document;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HtmlDocumentBuilder</span><span class="params">()</span> {</span><br><span class="line">        document = <span class="keyword">new</span> <span class="title class_">HtmlDocument</span>();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> HtmlDocumentBuilder <span class="title function_">withTitle</span><span class="params">(String title)</span> {</span><br><span class="line">        document.setTitle(title);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> HtmlDocumentBuilder <span class="title function_">addParagraph</span><span class="params">(String paragraph)</span> {</span><br><span class="line">        document.addParagraph(paragraph);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> HtmlDocument <span class="title function_">build</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> document;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>原型模式</strong>：当创建一个对象的成本较高，且与其类型相似的对象可能会经常使用时，可以通过复制一个已存在对象来减少创建对象的开销。</p><ul><li><strong>原型模式</strong>的目的是通过<strong>复制现有的实例来创建新的实例</strong>，避免了新实例创建的成本和复杂性。原型模式允许对象在不指定具体类的情况下创建副本。这在需要创建对象的状态与现有对象相似时非常有用。</li><li><strong>单例模式</strong>的目的是确保一个类只有一个实例，并提供一个全局访问点。单例模式主要用于全局状态或共享资源的情况，如配置管理器或数据库连接池。在单例模式中，实例是唯一的，且全局可访问。</li></ul><p>考虑一个后端开发中的场景，如在一个Web应用中管理配置信息的示例。假设你有一个配置对象，它在应用启动时从外部服务加载配置数据，这个过程可能包括网络请求获取数据库连接字符串、API密钥、日志设置等。这个配置对象在应用的不同部分被频繁访问，但是其初始化非常昂贵，因为它涉及到网络请求和数据解析。</p><h5 id="不使用原型模式的情况"><a href="#不使用原型模式的情况" class="headerlink" title="不使用原型模式的情况"></a>不使用原型模式的情况</h5><p>每次你需要配置信息时，都去创建一个新的配置对象并从外部服务加载数据。这不仅增加了网络负载，还可能因为外部服务的响应延迟而显著增加了应用的启动时间。</p><h5 id="使用原型模式的情况"><a href="#使用原型模式的情况" class="headerlink" title="使用原型模式的情况"></a>使用原型模式的情况</h5><p>在应用启动时创建一次配置对象，并通过原型模式在需要时克隆它。由于配置数据通常在应用运行期间不会改变，所以这个方法可以避免重复的初始化成本。</p><p>在这个例子中，使用原型模式可以显著减少从外部服务加载配置信息的次数，因为：</p><ul><li><p><strong>初始化成本</strong>：原始配置对象的加载包括网络请求和数据解析，这是一次性的，并在首次创建对象时完成。</p></li><li><p><strong>克隆成本</strong>：通过克隆原始对象来创建新的配置对象实例，避免了重复的网络请求和数据解析。克隆操作主要是内存中的数据复制，其成本远低于外部服务的调用。</p></li><li><p><strong>运行效率</strong>：应用启动和运行过程中对配置数据的访问变得更快，因为避免了重复的耗时操作。</p></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Configuration</span> <span class="keyword">implements</span> <span class="title class_">Cloneable</span> {</span><br><span class="line">      <span class="keyword">private</span> Map&lt;String, String&gt; settings;</span><br><span class="line">  </span><br><span class="line">      <span class="keyword">public</span> <span class="title function_">Configuration</span><span class="params">()</span> {</span><br><span class="line">          <span class="built_in">this</span>.settings = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">          <span class="comment">// 假设这里包含从外部服务加载配置的耗时操作</span></span><br><span class="line">          loadConfigurationFromExternalService();</span><br><span class="line">      }</span><br><span class="line">  </span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">loadConfigurationFromExternalService</span><span class="params">()</span> {</span><br><span class="line">          <span class="comment">// 模拟网络请求和设置加载</span></span><br><span class="line">          settings.put(<span class="string">"dbConnectionString"</span>, <span class="string">"someConnectionString"</span>);</span><br><span class="line">          settings.put(<span class="string">"apiKey"</span>, <span class="string">"someAPIKey"</span>);</span><br><span class="line">          <span class="comment">// 更多配置...</span></span><br><span class="line">      }</span><br><span class="line">  </span><br><span class="line">      <span class="keyword">public</span> String <span class="title function_">getSetting</span><span class="params">(String key)</span> {</span><br><span class="line">          <span class="keyword">return</span> settings.get(key);</span><br><span class="line">      }</span><br><span class="line">  </span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">public</span> Configuration <span class="title function_">clone</span><span class="params">()</span> {</span><br><span class="line">          <span class="keyword">try</span> {</span><br><span class="line">              <span class="comment">// 浅克隆足够了，因为我们不修改settings内部的数据</span></span><br><span class="line">              <span class="keyword">return</span> (Configuration) <span class="built_in">super</span>.clone();</span><br><span class="line">          } <span class="keyword">catch</span> (CloneNotSupportedException e) {</span><br><span class="line">              <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AssertionError</span>(); <span class="comment">// 不应该发生</span></span><br><span class="line">          }</span><br><span class="line">      }</span><br><span class="line">  }</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 调用</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> {</span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">          <span class="type">Configuration</span> <span class="variable">originalConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line">          <span class="type">Configuration</span> <span class="variable">clonedConfig</span> <span class="operator">=</span> originalConfig.clone();</span><br><span class="line">  </span><br><span class="line">          System.out.println(clonedConfig.getSetting(<span class="string">"dbConnectionString"</span>));</span><br><span class="line">          System.out.println(clonedConfig.getSetting(<span class="string">"apiKey"</span>));</span><br><span class="line">          <span class="comment">// 输出与originalConfig加载的相同的配置项，但没有重新从外部服务加载</span></span><br><span class="line">      }</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line"># Structural Pattern</span><br><span class="line"></span><br><span class="line">## 适配器 - Adapter Pattern</span><br><span class="line"></span><br><span class="line">&gt; 适配器是一种结构性设计模式，它能使接口不兼容的对象相互合作</span><br><span class="line"></span><br><span class="line">使一个老的方案通过`adapter`来实现新的方案</span><br><span class="line"></span><br><span class="line">![adapter_guru_1](/posts/Design-Pattern/adapter_guru_1.png)</span><br><span class="line"></span><br><span class="line">### 现实问题</span><br><span class="line"></span><br><span class="line">当想要整合老旧方案到一个新的方案时，在不修改老方案的内容的情况下，使用adapter：</span><br><span class="line"></span><br><span class="line">A special object that converts the <span class="keyword">interface</span> <span class="title class_">of</span> one object so that another object can understand it.</span><br><span class="line"></span><br><span class="line">假如正在开发一款股票市场监测程序，它会从不同来源下载XML格式的股票数据，然后像用户呈现图表。我们现在需要整合一个第三方的分析函数库。但是这个库只兼容JSON格式的数据。</span><br><span class="line"></span><br><span class="line">一个可能的解决方案有：修改程序库使其支持XML。但是这样就需要修改依赖这个程序库的现有代码。或者我们压根可能对这个程序库没有access。</span><br><span class="line"></span><br><span class="line">![adapater_1](/posts/Design-Pattern/adapater_1.png)</span><br><span class="line"></span><br><span class="line">### 解决方案</span><br><span class="line"></span><br><span class="line">此时就需要一个适配器，它是一个特殊的对象，主要目的是转换对象借口，使其能够与其他对象进行交互。</span><br><span class="line"></span><br><span class="line">适配器模式通过封装对象从而将一个复杂的转换过程隐藏起来。被封装的对象甚至不知道有适配器这个东西。</span><br><span class="line"></span><br><span class="line">适配器不仅可以转化不同格式的数据，还有助于采用不同接口的对象之间合作：</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> 适配器实现与其中一个现有对象兼容的接口。 </span><br><span class="line"><span class="number">2.</span> 现有对象可以使用该接口安全地调用适配器方法。 </span><br><span class="line"><span class="number">3.</span> 适配器方法被调用后将以另一个对象兼容的格式和顺序将请求传递给该对象。</span><br><span class="line"></span><br><span class="line">甚至双向适配器也是可以的这样就可以双向转换调用</span><br><span class="line"></span><br><span class="line">![adapter_2](/posts/Design-Pattern/adapter_2.png)</span><br><span class="line"></span><br><span class="line">对于先前的股票市场问题，为分析函数库中的每个类创建将 XML 转换为 JSON 格式的适配器， 然后让客户端仅通过这些适配器来与函数库进行交流。 当某个适配器被调用时， 它会将传入的 XML 数据转换为 JSON 结构， 并将其传递给被封装分析对象的相应方法。</span><br><span class="line"></span><br><span class="line">### 结构</span><br><span class="line"></span><br><span class="line">#### 对象适配器：</span><br><span class="line"></span><br><span class="line">适配器实现其冲一个对象的借口，并对另一个对象进行封装。</span><br><span class="line"></span><br><span class="line">![adapter_3](/posts/Design-Pattern/adapter_3.png)</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> 客户端 （Client） 是包含当前程序业务逻辑的类。 </span><br><span class="line"><span class="number">2.</span> 客户端接口 （Client Inter­face） 描述了其他类与客户端代码合作时必须遵循的协议。 </span><br><span class="line"><span class="number">3.</span> 服务 （Ser­vice） 中有一些功能类 （通常来自第三方或遗留系统）。 客户端与其接口不兼容， 因此无法直接调用其功能。 </span><br><span class="line"><span class="number">4.</span> 适配器 （Adapter） 是一个可以同时与客户端和服务交互的类： 它在实现客户端接口的同时**封装了服务对象**。 适配器接受客户端通过适配器接口发起的调用， 并将其转换为适用于被封装服务对象的调用。 </span><br><span class="line"><span class="number">5.</span> 客户端代码只需通过接口与适配器交互即可， 无需与具体的适配器类耦合。 因此， 你可以向程序中添加新类型的适配器而无需修改已有代码。 这在服务类的接口被更改或替换时很有用： 你无需修改客户端代码就可以创建新的适配器类。</span><br><span class="line"></span><br><span class="line">#### 类适配器</span><br><span class="line"></span><br><span class="line">主要运用了继承机制，适配器同时继承了两个对象的接口（所以需要支持多重继承的语言 比如，C++）</span><br><span class="line"></span><br><span class="line">![adapter_4](/posts/Design-Pattern/adapter_4.png)</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> 类适配器不需要封装任何对象， 因为它同时继承了客户端和服务的行为。 适配功能在重写的方法中完成。 最后生成的适配器可替代已有的客户端类进行使用。 </span><br><span class="line"></span><br><span class="line">### 代码样例</span><br><span class="line"></span><br><span class="line">![adapter_5](/posts/Design-Pattern/adapter_5.png)</span><br><span class="line"></span><br><span class="line">适配器假扮成一个圆钉 （Round­Peg）， 其半径等于方钉 （Square­Peg） 横截面对角线的一半 （即能够容纳方钉的最小外接圆的半径）。</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line"><span class="comment">//&nbsp;假设你有两个接口相互兼容的类：圆孔（Round­Hole）和圆钉（Round­Peg）。</span></span><br><span class="line"><span class="keyword">class</span>&nbsp;<span class="title class_">RoundHole</span>&nbsp;is</span><br><span class="line">&nbsp;&nbsp;constructor&nbsp;<span class="title function_">RoundHole</span><span class="params">(radius)</span>&nbsp;{&nbsp;...&nbsp;}</span><br><span class="line"></span><br><span class="line">&nbsp;&nbsp;method&nbsp;<span class="title function_">getRadius</span><span class="params">()</span>&nbsp;is</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">//&nbsp;返回孔的半径。</span></span><br><span class="line"></span><br><span class="line">&nbsp;&nbsp;method&nbsp;<span class="title function_">fits</span><span class="params">(peg:&nbsp;RoundPeg)</span>&nbsp;is</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">return</span>&nbsp;<span class="built_in">this</span>.getRadius()&nbsp;&gt;=&nbsp;peg.getRadius()</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span>&nbsp;<span class="title class_">RoundPeg</span>&nbsp;is</span><br><span class="line">&nbsp;&nbsp;constructor&nbsp;<span class="title function_">RoundPeg</span><span class="params">(radius)</span>&nbsp;{&nbsp;...&nbsp;}</span><br><span class="line"></span><br><span class="line">&nbsp;&nbsp;method&nbsp;<span class="title function_">getRadius</span><span class="params">()</span>&nbsp;is</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">//&nbsp;返回钉子的半径。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//&nbsp;但还有一个不兼容的类：方钉（Square­Peg）。</span></span><br><span class="line"><span class="keyword">class</span>&nbsp;<span class="title class_">SquarePeg</span>&nbsp;is</span><br><span class="line">&nbsp;&nbsp;constructor&nbsp;<span class="title function_">SquarePeg</span><span class="params">(width)</span>&nbsp;{&nbsp;...&nbsp;}</span><br><span class="line"></span><br><span class="line">&nbsp;&nbsp;method&nbsp;<span class="title function_">getWidth</span><span class="params">()</span>&nbsp;is</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">//&nbsp;返回方钉的宽度。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//&nbsp;适配器类让你能够将方钉放入圆孔中。它会对&nbsp;RoundPeg&nbsp;类进行扩展，以接收适</span></span><br><span class="line"><span class="comment">//&nbsp;配器对象作为圆钉。</span></span><br><span class="line"><span class="keyword">class</span>&nbsp;<span class="title class_">SquarePegAdapter</span>&nbsp;<span class="keyword">extends</span>&nbsp;<span class="title class_">RoundPeg</span>&nbsp;is</span><br><span class="line">&nbsp;&nbsp;<span class="comment">//&nbsp;在实际情况中，适配器中会包含一个&nbsp;SquarePeg&nbsp;类的实例。</span></span><br><span class="line">&nbsp;&nbsp;<span class="keyword">private</span>&nbsp;field peg:&nbsp;SquarePeg</span><br><span class="line"></span><br><span class="line">&nbsp;&nbsp;constructor&nbsp;<span class="title function_">SquarePegAdapter</span><span class="params">(peg:&nbsp;SquarePeg)</span>&nbsp;is</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="built_in">this</span>.peg&nbsp;=&nbsp;peg</span><br><span class="line"></span><br><span class="line">&nbsp;&nbsp;method&nbsp;<span class="title function_">getRadius</span><span class="params">()</span>&nbsp;is</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">//&nbsp;适配器会假扮为一个圆钉，</span></span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">//&nbsp;其半径刚好能与适配器实际封装的方钉搭配起来。</span></span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">return</span>&nbsp;peg.getWidth()&nbsp;*&nbsp;Math.sqrt(<span class="number">2</span>)&nbsp;/&nbsp;<span class="number">2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//&nbsp;客户端代码中的某个位置。</span></span><br><span class="line">hole&nbsp;=&nbsp;<span class="keyword">new</span>&nbsp;<span class="title class_">RoundHole</span>(<span class="number">5</span>)</span><br><span class="line">rpeg&nbsp;=&nbsp;<span class="keyword">new</span>&nbsp;<span class="title class_">RoundPeg</span>(<span class="number">5</span>)</span><br><span class="line">hole.fits(rpeg)&nbsp;<span class="comment">//&nbsp;true</span></span><br><span class="line"></span><br><span class="line">small_sqpeg&nbsp;=&nbsp;<span class="keyword">new</span>&nbsp;<span class="title class_">SquarePeg</span>(<span class="number">5</span>)</span><br><span class="line">large_sqpeg&nbsp;=&nbsp;<span class="keyword">new</span>&nbsp;<span class="title class_">SquarePeg</span>(<span class="number">10</span>)</span><br><span class="line">hole.fits(small_sqpeg)&nbsp;<span class="comment">//&nbsp;此处无法编译（类型不一致）。</span></span><br><span class="line">    </span><br><span class="line">small_sqpeg_adapter&nbsp;=&nbsp;<span class="keyword">new</span>&nbsp;<span class="title class_">SquarePegAdapter</span>(small_sqpeg)</span><br><span class="line">large_sqpeg_adapter = <span class="keyword">new</span> <span class="title class_">SquarePegAdapter</span>(large_sqpeg)</span><br><span class="line">hole.fits(small_sqpeg_adapter)&nbsp;<span class="comment">//&nbsp;true</span></span><br><span class="line">hole.fits(large_sqpeg_adapter)&nbsp;<span class="comment">//&nbsp;false</span></span><br></pre></td></tr></tbody></table></figure></li></ul><h3 id="使用场景-5"><a href="#使用场景-5" class="headerlink" title="使用场景"></a>使用场景</h3><p>当你希望使用某个类， 但是其接口与其他代码不兼容时， 可以使用适配器类。 </p><p>适配器模式允许你创建一个中间层类， 其可作为代码与遗留类、 第三方类或提供怪异接口的类之间的转换器。 </p><h3 id="实现方式-2"><a href="#实现方式-2" class="headerlink" title="实现方式"></a>实现方式</h3><ol><li>确保至少有两个类的接口不兼容： <ul><li>一个无法修改 （通常是第三方、 遗留系统或者存在众多已有依赖的类） 的功能性服务类。 </li><li>一个或多个将受益于使用服务类的客户端类。</li></ul></li><li>声明客户端接口， 描述客户端如何与服务交互。 </li><li>创建遵循客户端接口的适配器类。 所有方法暂时都为空。 </li><li>在适配器类中添加一个成员变量用于保存对于服务对象的引用。 通常情况下会通过构造函数对该成员变量进行初始化， 但有时在调用其方法时将该变量传递给适配器会更方便。 </li><li>依次实现适配器类客户端接口的所有方法。 适配器会将实际工作委派给服务对象， 自身只负责接口或数据格式的转换。 </li><li>客户端必须通过客户端接口使用适配器。 这样一来， 你就可以在不影响客户端代码的情况下修改或扩展适配器。</li></ol><h3 id="与其他模式的关系-1"><a href="#与其他模式的关系-1" class="headerlink" title="与其他模式的关系"></a>与其他模式的关系</h3><p><strong>桥接通常会于开发前期进行设计</strong>， 使你能够将程序的各个部分独立开来以便开发。 另一方面， <strong>适配器通常在已有程序中使用</strong>， 让相互不兼容的类能很好地合作。</p><p>适配器可以对已有对象的接口进行修改， <strong>装饰</strong>则能在<strong>不改变对象接口的前提下强化对象功能</strong>。 此外， <strong>装饰还支持递归组合</strong>， 适配器则无法实现。</p><p>适配器能为被封装对象提供不同的接口， 代理能为对象提供相同的接口， 装饰则能为对象提供加强的接口。 </p><p>外观为现有对象定义了一个新接口， 适配器则会试图运用已有的接口。 适配器通常只封装一个对象， 外观通常会作用于整个对象子系统上。 </p><p>桥接、 状态和策略 （在某种程度上包括适配器） 模式的接口非常相似。 实际上， 它们都基于组合模式——即将工作委派给其他对象， 不过也各自解决了不同的问题。 模式并不只是以特定方式组织代码的配方， 你还可以使用它们来和其他开发者讨论模式所解决的问题。</p><h2 id="桥接-Bridge"><a href="#桥接-Bridge" class="headerlink" title="桥接 - Bridge"></a>桥接 - Bridge</h2><blockquote><p>桥接是一种结构型设计模式，可将一个「大类」或「一系列紧密相关的类」「拆分」为「抽象」和「实现」两个独立的层次结构，从而能在开发时分别使用。</p></blockquote><h3 id="现实问题-5"><a href="#现实问题-5" class="headerlink" title="现实问题"></a>现实问题</h3><p>假如你有一个几何 「形状Shape类」， 从它能扩展出两个子类：  「圆形Cir­cle」 和 「方形Square」。 你希望对这样的类层次结构进行扩展以使其包含颜色， 所以你打算创建名为「红色Red」和「蓝色Blue」的形状子类。 但是， 由于你已有两个子类， 所以总共需要创建四个类才能覆盖所有组合， 例如「蓝色圆形Blue­Cir­cle」和「红色方形Red­Square」</p><p><img src="/posts/Design-Pattern/bridge_1.png" alt="bridge_1"></p><p>在层次结构中新增形状和颜色将导致代码复杂程度指数增长。 例如添加三角形状， 你需要新增两个子类， 也就是每种颜色一个； 此后新增一种新颜色需要新增三个子类， 即每种形状一个。</p><h3 id="解决方案-5"><a href="#解决方案-5" class="headerlink" title="解决方案"></a>解决方案</h3><p>这个问题主要是由于「形状」以及「颜色」其实是两个维度的问题。但是放在一个形状类中来进行扩展。而这是继承时容易导致的问题。</p><p><strong>桥接模式通过将「继承」改为「组合」的方式来解决问题</strong></p><p>即抽取其中一个维度并使之成为独立的类层次，这样就可以在初始类中引用这个新层次的对象从而使得一个类中不必有所有的状态和行为。</p><p><img src="/posts/Design-Pattern/bridge_2.png" alt="bridge_2"></p><p>图示中，我们把颜色相关的代码抽取到红色和蓝色的两个子类的颜色中。然后形状类中添加一个只想某一颜色对象的引用成员变量。那么现在形状类可以将所有与颜色有关的行为交给颜色对象，这种引用就是「形状」和「颜色」之间的桥梁。</p><h4 id="抽象-和-实现"><a href="#抽象-和-实现" class="headerlink" title="抽象 和 实现"></a>抽象 和 实现</h4><p>抽象部分 - 一般指接口，是一些实体的高阶控制层。该层本身不完成任何「具体」的工作，它需要将工作委派给「实现部分」层</p><blockquote><p>这里的和语言里面的interface 或者 abstract class 没有关系</p></blockquote><p>实际程序中抽象部分是图像用户界面（GUI），而实现部分则是底层操作系统代码（API），GUI层调用API层来对用户的各种操作做出回应。</p><p>一般来说， 你可以在两个独立方向上扩展这种应用： </p><ul><li>开发多个不同的 GUI （例如面向普通用户和管理员进行分别配置） </li><li>支持多个不同的 API （例如， 能够在 Win­dows、 Linux 和 macOS 上运行该程序）。</li></ul><p>在最糟糕的情况下， 程序可能会是一团乱麻， 其中包含数百种条件语句， 连接着代码各处不同种类的 GUI 和各种 API。</p><p><img src="/posts/Design-Pattern/bridge_3.png" alt="bridge_3"></p><p>你可以将特定接口-平台的组合代码抽取到独立的类中， 以在混乱中建立一些秩序。 但是， 你很快会发现这种类的数量很多。 类层次将以指数形式增长， 因为每次添加一个新的 GUI 或支持一种新的 API 都需要创建更多的类。<br>让我们试着用桥接模式来解决这个问题。 该模式建议将类拆分为两个类层次结构： </p><p>抽象部分： 程序的 GUI 层。<br>实现部分： 操作系统的 API。 </p><p><img src="/posts/Design-Pattern/bridge_4.png" alt="bridge_4"></p><p>抽象对象控制程序的外观， 并将真实工作委派给连入的实现对象。 不同的实现只要遵循相同的接口就可以互换， 使同一GUI 可在 Win­dows 和 Linux 下运行。 </p><p>最后的结果是： 你无需改动与 API 相关的类就可以修改 GUI 类。 此外如果想支持一个新的操作系统， 只需在实现部分层次中创建一个子类即可。</p><p>例如，在一个软件系统中，如果你有一个功能是需要在不同的操作系统（如Windows和Linux）上运行，并且每个操作系统都有自己的GUI接口。如果你直接在应用程序的主体中写入所有的GUI代码，那么这会导致代码与平台强绑定，难以维护。</p><p>为了解决这个问题，你可以将与操作系统相关的GUI部分抽象出来，创建独立的类或者接口来管理这些与平台相关的代码。这样，你的主应用程序就不需要直接处理不同操作系统的GUI细节，而是通过这些抽象的接口来与它们通信。当需要支持新的操作系统时，你只需要添加或修改这些独立的类即可。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个GUI接口，描述所有操作系统都会实现的GUI操作</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">GUI</span> {</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">drawButton</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">drawWindow</span><span class="params">()</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为Windows实现GUI接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WindowsGUI</span> <span class="keyword">implements</span> <span class="title class_">GUI</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">drawButton</span><span class="params">()</span> {</span><br><span class="line">        System.out.println(<span class="string">"绘制Windows风格的按钮"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">drawWindow</span><span class="params">()</span> {</span><br><span class="line">        System.out.println(<span class="string">"绘制Windows风格的窗口"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为Linux实现GUI接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LinuxGUI</span> <span class="keyword">implements</span> <span class="title class_">GUI</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">drawButton</span><span class="params">()</span> {</span><br><span class="line">        System.out.println(<span class="string">"绘制Linux风格的按钮"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">drawWindow</span><span class="params">()</span> {</span><br><span class="line">        System.out.println(<span class="string">"绘制Linux风格的窗口"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主应用程序，不直接依赖于任何特定的操作系统GUI实现</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Application</span> {</span><br><span class="line">    <span class="keyword">private</span> GUI gui;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Application</span><span class="params">(GUI gui)</span> {</span><br><span class="line">        <span class="built_in">this</span>.gui = gui;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> {</span><br><span class="line">        gui.drawButton();</span><br><span class="line">        gui.drawWindow();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端代码，选择适当的GUI实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">GUI</span> <span class="variable">windowsGUI</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WindowsGUI</span>();</span><br><span class="line">        <span class="type">Application</span> <span class="variable">app</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Application</span>(windowsGUI);</span><br><span class="line">        app.draw();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果需要更换到Linux GUI，只需要更换GUI实现</span></span><br><span class="line">        <span class="type">GUI</span> <span class="variable">linuxGUI</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LinuxGUI</span>();</span><br><span class="line">        app = <span class="keyword">new</span> <span class="title class_">Application</span>(linuxGUI);</span><br><span class="line">        app.draw();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="结构-5"><a href="#结构-5" class="headerlink" title="结构"></a>结构</h3><p><img src="/posts/Design-Pattern/bridge_5.png" alt="bridge_5"></p><ol><li>抽象部分 （Abstrac­tion） 提供高层控制逻辑， 依赖于完成底层实际工作的实现对象。 </li><li>实现部分 （Imple­men­ta­tion） 为所有具体实现声明通用接口。 抽象部分仅能通过在这里声明的方法与实现对象交互。<br>抽象部分可以列出和实现部分一样的方法， 但是抽象部分通常声明一些复杂行为， 这些行为依赖于多种由实现部分声明的原语操作。 </li><li>具体实现 （Con­crete Imple­men­ta­tions） 中包括特定于平台的代码。 </li><li>精确抽象 （Refined Abstrac­tion） 提供控制逻辑的变体。 与其父类一样， 它们通过通用实现接口与不同的实现进行交互。 </li><li>通常情况下， 客户端 （Client） 仅关心如何与抽象部分合作。 但是， 客户端需要将抽象对象与一个实现对象连接起来。</li></ol><p>从您提供的图片中，我们可以看到桥接模式的结构，它包含以下部分：</p><ol><li><strong>抽象化 (Abstraction)</strong>: 定义高层的接口，它依赖于实现化角色提供的接口进行工作。这是一个核心的角色，它包含对实现化角色的引用。</li><li><strong>实现化 (Implementation)</strong>: 是接口或抽象类，定义了实现化角色必须实现的接口，但不负责具体的实现。</li><li><strong>具体实现化 (Concrete Implementations)</strong>: 实现化角色的具体实现，根据实现化接口来提供具体的操作方法。</li><li><strong>改进抽象化 (Refined Abstraction)</strong>: 是抽象化的子类，扩展或完善了父类定义的方法和属性。</li><li><strong>客户端 (Client)</strong>: 使用抽象化角色定义的接口操作。</li></ol><p>我们可以将 <code>Application</code> 类看作是<strong>抽象化</strong>角色，<code>GUI</code> 接口是<strong>实现化</strong>角色，而 <code>WindowsGUI</code> 和 <code>LinuxGUI</code> 类是<strong>具体实现化</strong>角色。要更明确地映射到桥接模式，具体来说，我们可以创建一个 <code>RefinedGUI</code> 类，它继承自 <code>GUI</code> 接口并添加一些特定的功能。同时，我们可以创建一个客户端类来直接与 <code>Application</code> 类交互。以下是调整后的代码示例：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 抽象化角色</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">ApplicationGUI</span> {</span><br><span class="line">    <span class="keyword">protected</span> GUI gui;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">ApplicationGUI</span><span class="params">(GUI gui)</span> {</span><br><span class="line">        <span class="built_in">this</span>.gui = gui;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 改进抽象化角色</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RefinedApplicationGUI</span> <span class="keyword">extends</span> <span class="title class_">ApplicationGUI</span> {</span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">RefinedApplicationGUI</span><span class="params">(GUI gui)</span> {</span><br><span class="line">        <span class="built_in">super</span>(gui);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> {</span><br><span class="line">        <span class="comment">// 使用GUI接口提供的方法</span></span><br><span class="line">        gui.drawButton();</span><br><span class="line">        gui.drawWindow();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 可以添加一些改进的操作方法</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">drawMenu</span><span class="params">()</span> {</span><br><span class="line">        System.out.println(<span class="string">"使用 "</span> + gui.getClass().getSimpleName() + <span class="string">" 绘制菜单"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现化角色</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">GUI</span> {</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">drawButton</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">drawWindow</span><span class="params">()</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体实现化角色</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WindowsGUI</span> <span class="keyword">implements</span> <span class="title class_">GUI</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">drawButton</span><span class="params">()</span> {</span><br><span class="line">        System.out.println(<span class="string">"绘制Windows风格的按钮"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">drawWindow</span><span class="params">()</span> {</span><br><span class="line">        System.out.println(<span class="string">"绘制Windows风格的窗口"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LinuxGUI</span> <span class="keyword">implements</span> <span class="title class_">GUI</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">drawButton</span><span class="params">()</span> {</span><br><span class="line">        System.out.println(<span class="string">"绘制Linux风格的按钮"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">drawWindow</span><span class="params">()</span> {</span><br><span class="line">        System.out.println(<span class="string">"绘制Linux风格的窗口"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端角色</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="comment">// 客户端决定使用的具体实现化角色</span></span><br><span class="line">        <span class="type">GUI</span> <span class="variable">windowsGUI</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WindowsGUI</span>();</span><br><span class="line">        <span class="type">ApplicationGUI</span> <span class="variable">appGUI</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RefinedApplicationGUI</span>(windowsGUI);</span><br><span class="line">        appGUI.draw();</span><br><span class="line">        appGUI.drawMenu();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 可以轻松切换到Linux GUI</span></span><br><span class="line">        <span class="type">GUI</span> <span class="variable">linuxGUI</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LinuxGUI</span>();</span><br><span class="line">        appGUI = <span class="keyword">new</span> <span class="title class_">RefinedApplicationGUI</span>(linuxGUI);</span><br><span class="line">        appGUI.draw();</span><br><span class="line">        appGUI.drawMenu();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在这个调整后的示例中，<code>RefinedApplicationGUI</code> 是一个改进的抽象化角色，它扩展了 <code>ApplicationGUI</code> 抽象化角色的功能。<code>Client</code> 类则充当了客户端角色，它决定使用哪个具体实现化角色，并通过改进的抽象化角色来使用这些功能。这样的结构更清晰地展现了桥接模式的所有组成部分。</p><h3 id="代码样例-1"><a href="#代码样例-1" class="headerlink" title="代码样例"></a>代码样例</h3><p><img src="/posts/Design-Pattern/bridge_6.png" alt="bridge_6"></p><p>「设备Device类」作为实现部分， 而「遥控器Remote类」则作为抽象部分。</p><p>遥控器基类声明了一个指向设备对象的引用成员变量。 所有遥控器通过通用设备接口与设备进行交互， 使得同一个遥控器可以支持不同类型的设备。<br>我们可以开发独立于设备类的遥控器类， 只需新建一个遥控器子类即可。 例如， 基础遥控器可能只有两个按钮， 但你可在其基础上扩展新功能， 比如额外的一节电池或一块触摸屏。<br>客户端代码通过遥控器构造函数将特定种类的遥控器与设备对象连接起来。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">//&nbsp;“抽象部分”定义了两个类层次结构中“控制”部分的接口。它管理着一个指向“实</span><br><span class="line">//&nbsp;现部分”层次结构中对象的引用，并会将所有真实工作委派给该对象。</span><br><span class="line">class&nbsp;RemoteControl&nbsp;is</span><br><span class="line">&nbsp;&nbsp;protected&nbsp;field device:&nbsp;Device</span><br><span class="line">&nbsp;&nbsp;constructor&nbsp;RemoteControl(device:&nbsp;Device)&nbsp;is</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;this.device&nbsp;=&nbsp;device</span><br><span class="line">&nbsp;&nbsp;method&nbsp;togglePower()&nbsp;is</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(device.isEnabled())&nbsp;then</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;device.disable()</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;else</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;device.enable()</span><br><span class="line">&nbsp;&nbsp;method&nbsp;volumeDown()&nbsp;is</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;device.setVolume(device.getVolume()&nbsp;-&nbsp;10)</span><br><span class="line">&nbsp;&nbsp;method&nbsp;volumeUp()&nbsp;is</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;device.setVolume(device.getVolume()&nbsp;+&nbsp;10)</span><br><span class="line">&nbsp;&nbsp;method&nbsp;channelDown()&nbsp;is</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;device.setChannel(device.getChannel()&nbsp;-&nbsp;1)</span><br><span class="line">&nbsp;&nbsp;method&nbsp;channelUp()&nbsp;is</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;device.setChannel(device.getChannel()&nbsp;+&nbsp;1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//&nbsp;你可以独立于设备类的方式从抽象层中扩展类。</span><br><span class="line">class&nbsp;AdvancedRemoteControl&nbsp;extends&nbsp;RemoteControl&nbsp;is</span><br><span class="line">&nbsp;&nbsp;method&nbsp;mute()&nbsp;is</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;device.setVolume(0)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//&nbsp;“实现部分”接口声明了在所有具体实现类中通用的方法。它不需要与抽象接口相</span><br><span class="line">//&nbsp;匹配。实际上，这两个接口可以完全不一样。通常实现接口只提供原语操作，而</span><br><span class="line">//&nbsp;抽象接口则会基于这些操作定义较高层次的操作。</span><br><span class="line">interface&nbsp;Device&nbsp;is</span><br><span class="line">&nbsp;&nbsp;method&nbsp;isEnabled()</span><br><span class="line">&nbsp;&nbsp;method&nbsp;enable()</span><br><span class="line">&nbsp;&nbsp;method&nbsp;disable()</span><br><span class="line">&nbsp;&nbsp;method&nbsp;getVolume()</span><br><span class="line">&nbsp;&nbsp;method&nbsp;setVolume(percent)</span><br><span class="line">&nbsp;&nbsp;method&nbsp;getChannel()</span><br><span class="line">&nbsp;&nbsp;method&nbsp;setChannel(channel)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//&nbsp;所有设备都遵循相同的接口。</span><br><span class="line">class&nbsp;Tv&nbsp;implements&nbsp;Device&nbsp;is</span><br><span class="line">&nbsp;&nbsp;//&nbsp;...</span><br><span class="line"></span><br><span class="line">class&nbsp;Radio&nbsp;implements&nbsp;Device&nbsp;is</span><br><span class="line">// ...</span><br><span class="line">//&nbsp;客户端代码中的某个位置。</span><br><span class="line">tv&nbsp;=&nbsp;new&nbsp;Tv()</span><br><span class="line">remote&nbsp;=&nbsp;new&nbsp;RemoteControl(tv)</span><br><span class="line">remote.togglePower()</span><br><span class="line"></span><br><span class="line">radio&nbsp;=&nbsp;new&nbsp;Radio()</span><br><span class="line">remote&nbsp;=&nbsp;new&nbsp;AdvancedRemoteControl(radio)</span><br></pre></td></tr></tbody></table></figure><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ul><li><p>如果你想要拆分或重组一个具有多重功能的庞杂类 （例如能与多个数据库服务器进行交互的类）， 可以使用桥接模式。</p><ul><li>类的代码行数越多， 弄清其运作方式就越困难， 对其进行修改所花费的时间就越长。 一个功能上的变化可能需要在整个类范围内进行修改， 而且常常会产生错误， 甚至还会有一些严重的副作用。</li><li>桥接模式可以将庞杂类拆分为几个类层次结构。 此后， 你可以修改任意一个类层次结构而不会影响到其他类层次结构。 这种方法可以简化代码的维护工作， 并将修改已有代码的风险降到最低。</li></ul></li><li><p>如果你希望在几个独立维度上扩展一个类， 可使用该模式。</p><ul><li>桥接建议将每个维度抽取为独立的类层次。 初始类将相关工作委派给属于对应类层次的对象， 无需自己完成所有工作。</li></ul></li><li><p>如果你需要在运行时切换不同实现方法， 可使用桥接模式。 </p><ul><li>当然并不是说一定要实现这一点， 桥接模式可替换抽象部分中的实现对象， 具体操作就和给成员变量赋新值一样简单。</li></ul></li></ul><h3 id="实现方式-3"><a href="#实现方式-3" class="headerlink" title="实现方式"></a>实现方式</h3><ol><li>明确类中独立的维度。 独立的概念可能是： 抽象/平台， 域/基础设施， 前端/后端或接口/实现。 </li><li>了解客户端的业务需求， 并在抽象基类中定义它们。 </li><li>确定在所有平台上都可执行的业务。 并在通用实现接口中声明抽象部分所需的业务。 </li><li>为你域内的所有平台创建实现类， 但需确保它们遵循实现部分的接口。 </li><li>在抽象类中添加指向实现类型的引用成员变量。 抽象部分会将大部分工作委派给该成员变量所指向的实现对象。 </li><li>如果你的高层逻辑有多个变体， 则可通过扩展抽象基类为每个变体创建一个精确抽象。 </li><li>客户端代码必须将实现对象传递给抽象部分的构造函数才能使其能够相互关联。 此后， 客户端只需与抽象对象进行交互， 无需和实现对象打交道。</li></ol><h3 id="与其他模式的关系-2"><a href="#与其他模式的关系-2" class="headerlink" title="与其他模式的关系"></a>与其他模式的关系</h3><ul><li>桥接通常会于开发前期进行设计， 使你能够将程序的各个部分独立开来以便开发。 另一方面， 适配器通常在已有程序中使用， 让相互不兼容的类能很好地合作。 </li><li>桥接、 状态和策略 （在某种程度上包括适配器） 模式的接口非常相似。 实际上， 它们都基于组合模式——即将工作委派给其他对象， 不过也各自解决了不同的问题。 模式并不只是以特定方式组织代码的配方， 你还可以使用它们来和其他开发者讨论模式所解决的问题。 </li><li>将抽象工厂和桥接搭配使用。 如果由桥接定义的抽象只能与特定实现合作， 这一模式搭配就非常有用。 在这种情况下， 抽象工厂可以对这些关系进行封装， 并且对客户端代码隐藏其复杂性。</li></ul><p>假设我们有一个应用程序，它可以在不同的数据库上运行。我们的抽象部分是数据库的使用，而具体实现是对各种数据库的操作。</p><p>首先，我们定义一个数据库操作的桥接接口（<code>Database</code>）和它的一些实现（<code>MySQLDatabase</code>, <code>PostgreSQLDatabase</code>）：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 桥接接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Database</span> {</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">connect</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(String query)</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体实现MySQL</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MySQLDatabase</span> <span class="keyword">implements</span> <span class="title class_">Database</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">connect</span><span class="params">()</span> {</span><br><span class="line">        System.out.println(<span class="string">"连接到MySQL数据库"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(String query)</span> {</span><br><span class="line">        System.out.println(<span class="string">"在MySQL执行: "</span> + query);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体实现PostgreSQL</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PostgreSQLDatabase</span> <span class="keyword">implements</span> <span class="title class_">Database</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">connect</span><span class="params">()</span> {</span><br><span class="line">        System.out.println(<span class="string">"连接到PostgreSQL数据库"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(String query)</span> {</span><br><span class="line">        System.out.println(<span class="string">"在PostgreSQL执行: "</span> + query);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>现在我们使用抽象工厂模式来封装数据库的创建过程，以便为客户端代码隐藏复杂性：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 抽象工厂</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">DatabaseFactory</span> {</span><br><span class="line">    <span class="keyword">abstract</span> Database <span class="title function_">createDatabase</span><span class="params">()</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体工厂MySQL</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MySQLDatabaseFactory</span> <span class="keyword">extends</span> <span class="title class_">DatabaseFactory</span> {</span><br><span class="line">    Database <span class="title function_">createDatabase</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MySQLDatabase</span>();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体工厂PostgreSQL</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PostgreSQLDatabaseFactory</span> <span class="keyword">extends</span> <span class="title class_">DatabaseFactory</span> {</span><br><span class="line">    Database <span class="title function_">createDatabase</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PostgreSQLDatabase</span>();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> {</span><br><span class="line">    <span class="keyword">private</span> Database database;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Client</span><span class="params">(DatabaseFactory factory)</span> {</span><br><span class="line">        database = factory.createDatabase();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> {</span><br><span class="line">        database.connect();</span><br><span class="line">        database.execute(<span class="string">"SELECT * FROM table"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在客户端代码中，我们不直接与具体的数据库实现打交道，而是通过抽象工厂提供的接口来创建和使用数据库。</p><ul><li>你可以结合使用生成器和桥接模式： 主管类负责抽象工作， 各种不同的生成器负责实现工作。</li></ul><p>假设我们正在构建一个报告生成系统，其中报告的内容（抽象部分）可以独立于报告的格式（具体实现部分）。</p><p>首先，我们定义一个报告的桥接接口（<code>Report</code>）和它的一些实现（<code>PDFReport</code>, <code>HTMLReport</code>）：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 桥接接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Report</span> {</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">generate</span><span class="params">()</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体实现PDF</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PDFReport</span> <span class="keyword">implements</span> <span class="title class_">Report</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">generate</span><span class="params">()</span> {</span><br><span class="line">        System.out.println(<span class="string">"生成PDF报告"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体实现HTML</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HTMLReport</span> <span class="keyword">implements</span> <span class="title class_">Report</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">generate</span><span class="params">()</span> {</span><br><span class="line">        System.out.println(<span class="string">"生成HTML报告"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>接下来，我们使用生成器模式来封装报告的构建过程：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 报告生成器</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">ReportBuilder</span> {</span><br><span class="line">    <span class="keyword">protected</span> Report report;</span><br><span class="line"></span><br><span class="line">    ReportBuilder <span class="title function_">buildPartA</span><span class="params">()</span> {</span><br><span class="line">        <span class="comment">// 构建报告的一部分</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    ReportBuilder <span class="title function_">buildPartB</span><span class="params">()</span> {</span><br><span class="line">        <span class="comment">// 构建报告的另一部分</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">abstract</span> Report <span class="title function_">build</span><span class="params">()</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体生成器PDF</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PDFReportBuilder</span> <span class="keyword">extends</span> <span class="title class_">ReportBuilder</span> {</span><br><span class="line">    PDFReportBuilder() {</span><br><span class="line">        report = <span class="keyword">new</span> <span class="title class_">PDFReport</span>();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    Report <span class="title function_">build</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> report;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体生成器HTML</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HTMLReportBuilder</span> <span class="keyword">extends</span> <span class="title class_">ReportBuilder</span> {</span><br><span class="line">    HTMLReportBuilder() {</span><br><span class="line">        report = <span class="keyword">new</span> <span class="title class_">HTMLReport</span>();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    Report <span class="title function_">build</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> report;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主管类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ReportDirector</span> {</span><br><span class="line">    <span class="keyword">private</span> ReportBuilder builder;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ReportDirector</span><span class="params">(ReportBuilder builder)</span> {</span><br><span class="line">        <span class="built_in">this</span>.builder = builder;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Report <span class="title function_">construct</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> builder.buildPartA().buildPartB().build();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">ReportBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PDFReportBuilder</span>();</span><br><span class="line">        <span class="type">ReportDirector</span> <span class="variable">director</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReportDirector</span>(builder);</span><br><span class="line">        <span class="type">Report</span> <span class="variable">report</span> <span class="operator">=</span> director.construct();</span><br><span class="line">        report.generate();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在这个例子中，<code>ReportBuilder</code> 是桥接模式的一个组成部分，它将报告的创建过程从具体的报告格式中抽象出来。<code>ReportDirector</code> 作为主管类，负责根据客户端的需求使用不同的生成器构建报告。这种方式允许我们独立于报告的具体实现来构建报告的内容。</p><h2 id="组合-对象树-Object-Tree-Composite"><a href="#组合-对象树-Object-Tree-Composite" class="headerlink" title="组合 - 对象树, Object Tree, Composite"></a>组合 - 对象树, Object Tree, Composite</h2><blockquote><p>将对象组合成树状结构，并且像独立使用对立对象一样使用</p></blockquote><h3 id="现实问题-6"><a href="#现实问题-6" class="headerlink" title="现实问题"></a>现实问题</h3><p>如果应用的核心模型可以用树状结构表示，在应用中使用组合模式才有价值</p><p>主要是一些层级结构：产品和盒子，比如一个盒子可以包含多个产品或者几个较小的盒子。小盒子里又有一些其他的产品或者更小的盒子</p><p>我们现在开发一个订购系统。订单中可以包含无包装的简单产品，也可以包含装满产品的盒子。那么此时应该如何计算总价格就成了问题，一个简单的方法就是一直递归到最底层然后计算总价。</p><h3 id="解决方案-6"><a href="#解决方案-6" class="headerlink" title="解决方案"></a>解决方案</h3><p>组合模式建议使用一个通用接口来 「产品」 和「盒子」进行交互，并且在该接口中declare一个计算总价的方法</p><p>具体的，设计方法时候，对于产品，我们直接返回价格。对于盒子方法就会看盒子中间的所有内容，询问每个项目的价格， 然后返回该盒子的总价格。 如果其中某个项目是小一号的盒子， 那么当前盒子也会遍历其中的所有项目， 以此类推， 直到计算出所有内部组成部分的价格。 甚至可以在盒子的最终价格中增加额外费用， 作为该盒子的包装费用。</p><p><img src="/posts/Design-Pattern/composite_1.png" alt="composite_1"></p><p>通过使用这种方式，我们不需要知道树里面对象的具体类。只需要使用通用接口来进行相同的处理，化繁为简。</p><p>一个其他的例子包含：</p><p>大部分国家的军队都采用层次管理，军师旅团营连排</p><h3 id="结构-6"><a href="#结构-6" class="headerlink" title="结构"></a>结构</h3><p><img src="/posts/Design-Pattern/composite_2.png" alt="composite_2"></p><ol><li><p>组件 （Com­po­nent） 接口描述了树中简单项目和复杂项目所共有的操作。 </p></li><li><p>叶节点 （Leaf） 是树的基本结构， 它不包含子项目。<br>一般情况下， 叶节点最终会完成大部分的实际工作， 因为它们无法将工作指派给其他部分。 </p></li><li><p>容器 （Con­tain­er）——又名 “组合 （Com­pos­ite）”——是包含叶节点或其他容器等子项目的单位。 容器不知道其子项目所属的具体类， 它只通过通用的组件接口与其子项目交互。 </p><p>容器接收到请求后会将工作分配给自己的子项目， 处理中间结果， 然后将最终结果返回给客户端。 </p></li><li><p>客户端 （Client） 通过组件接口与所有项目交互。 因此， 客户端能以相同方式与树状结构中的简单或复杂项目交互。</p></li></ol><p>这里的 <code>add</code> <code>remove</code> <code>getChildren</code>就是comosite作用于自身field的方法，即比如加入/去掉元素到<code>Component[]</code>或者 返回 整个<code>Component[]</code></p><h3 id="代码样例-2"><a href="#代码样例-2" class="headerlink" title="代码样例"></a>代码样例</h3><p><img src="/posts/Design-Pattern/composite_3.png" alt="composite_3"></p><p>组合图形 == 容器（组合）它由多个包含容器在内的字图形构成。它们有相同的方比如「move」「draw」但是组合图形本身不完成具体工作。而是一直将请求递归传递给子项目，汇总结果</p><p>通过所有图形类所共有的接口， 客户端代码可以与所有图形互动。 因此， 客户端不知道与其交互的是简单图形还是组合图形。 客户端可以与非常复杂的对象结构进行交互， 而无需与组成该结构的实体类紧密耦合。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//&nbsp;组件接口会声明组合中简单和复杂对象的通用操作。</span></span><br><span class="line"><span class="keyword">interface</span>&nbsp;<span class="title class_">Graphic</span>&nbsp;is</span><br><span class="line">&nbsp;&nbsp;method&nbsp;<span class="title function_">move</span><span class="params">(x,&nbsp;y)</span></span><br><span class="line">&nbsp;&nbsp;method&nbsp;<span class="title function_">draw</span><span class="params">()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//&nbsp;叶节点类代表组合的终端对象。叶节点对象中不能包含任何子对象。叶节点对象</span></span><br><span class="line"><span class="comment">//&nbsp;通常会完成实际的工作，组合对象则仅会将工作委派给自己的子部件。</span></span><br><span class="line"><span class="keyword">class</span>&nbsp;<span class="title class_">Dot</span>&nbsp;<span class="keyword">implements</span>&nbsp;<span class="title class_">Graphic</span>&nbsp;is</span><br><span class="line">&nbsp;&nbsp;field x,&nbsp;y</span><br><span class="line"></span><br><span class="line">&nbsp;&nbsp;constructor&nbsp;<span class="title function_">Dot</span><span class="params">(x,&nbsp;y)</span>&nbsp;{&nbsp;...&nbsp;}</span><br><span class="line"></span><br><span class="line">&nbsp;&nbsp;method&nbsp;<span class="title function_">move</span><span class="params">(x,&nbsp;y)</span>&nbsp;is</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="built_in">this</span>.x&nbsp;+=&nbsp;x,&nbsp;<span class="built_in">this</span>.y&nbsp;+=&nbsp;y</span><br><span class="line"></span><br><span class="line">&nbsp;&nbsp;method&nbsp;<span class="title function_">draw</span><span class="params">()</span>&nbsp;is</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">//&nbsp;在坐标位置(X,Y)处绘制一个点。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//&nbsp;所有组件类都可以扩展其他组件。</span></span><br><span class="line"><span class="keyword">class</span>&nbsp;<span class="title class_">Circle</span>&nbsp;<span class="keyword">extends</span>&nbsp;<span class="title class_">Dot</span>&nbsp;is</span><br><span class="line">&nbsp;&nbsp;field radius</span><br><span class="line"></span><br><span class="line">&nbsp;&nbsp;constructor&nbsp;<span class="title function_">Circle</span><span class="params">(x,&nbsp;y,&nbsp;radius)</span>&nbsp;{&nbsp;...&nbsp;}</span><br><span class="line"></span><br><span class="line">&nbsp;&nbsp;method&nbsp;<span class="title function_">draw</span><span class="params">()</span>&nbsp;is</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">//&nbsp;在坐标位置(X,Y)处绘制一个半径为&nbsp;R&nbsp;的圆。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//&nbsp;组合类表示可能包含子项目的复杂组件。组合对象通常会将实际工作委派给子项</span></span><br><span class="line"><span class="comment">//&nbsp;目，然后“汇总”结果。</span></span><br><span class="line"><span class="keyword">class</span>&nbsp;<span class="title class_">CompoundGraphic</span>&nbsp;<span class="keyword">implements</span>&nbsp;<span class="title class_">Graphic</span>&nbsp;is</span><br><span class="line">&nbsp;&nbsp;field children:&nbsp;array&nbsp;of&nbsp;Graphic</span><br><span class="line"></span><br><span class="line">&nbsp;&nbsp;<span class="comment">//&nbsp;组合对象可在其项目列表中添加或移除其他组件（简单的或复杂的皆可）。</span></span><br><span class="line">&nbsp;&nbsp;method&nbsp;<span class="title function_">add</span><span class="params">(child:&nbsp;Graphic)</span>&nbsp;is</span><br><span class="line">    <span class="comment">//&nbsp;在子项目数组中添加一个子项目。</span></span><br><span class="line"></span><br><span class="line">&nbsp;&nbsp;method&nbsp;<span class="title function_">remove</span><span class="params">(child:&nbsp;Graphic)</span>&nbsp;is</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">//&nbsp;从子项目数组中移除一个子项目。</span></span><br><span class="line"></span><br><span class="line">&nbsp;&nbsp;method&nbsp;<span class="title function_">move</span><span class="params">(x,&nbsp;y)</span>&nbsp;is</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="title function_">foreach</span>&nbsp;<span class="params">(child&nbsp;in&nbsp;children)</span>&nbsp;<span class="keyword">do</span></span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;child.move(x,&nbsp;y)</span><br><span class="line">  <span class="comment">//&nbsp;组合会以特定的方式执行其主要逻辑。它会递归遍历所有子项目，并收集和</span></span><br><span class="line">&nbsp;&nbsp;<span class="comment">//&nbsp;汇总其结果。由于组合的子项目也会将调用传递给自己的子项目，以此类推，</span></span><br><span class="line">&nbsp;&nbsp;<span class="comment">//&nbsp;最后组合将会完成整个对象树的遍历工作。</span></span><br><span class="line">&nbsp;&nbsp;method&nbsp;<span class="title function_">draw</span><span class="params">()</span>&nbsp;is</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">//&nbsp;1.&nbsp;对于每个子部件：</span></span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;绘制该部件。</span></span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;更新边框坐标。</span></span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">//&nbsp;2.&nbsp;根据边框坐标绘制一个虚线长方形。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//&nbsp;客户端代码会通过基础接口与所有组件进行交互。这样一来，客户端代码便可同</span></span><br><span class="line"><span class="comment">//&nbsp;时支持简单叶节点组件和复杂组件。</span></span><br><span class="line"><span class="keyword">class</span>&nbsp;<span class="title class_">ImageEditor</span>&nbsp;is</span><br><span class="line">&nbsp;&nbsp;field all:&nbsp;CompoundGraphic</span><br><span class="line"></span><br><span class="line">&nbsp;&nbsp;method&nbsp;<span class="title function_">load</span><span class="params">()</span>&nbsp;<span class="type">is</span></span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="variable">all</span>&nbsp;<span class="operator">=</span>&nbsp;<span class="keyword">new</span>&nbsp;<span class="title class_">CompoundGraphic</span>()</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;all.add(<span class="keyword">new</span>&nbsp;“<span class="keyword">new</span>&nbsp;<span class="title class_">Dot</span>(<span class="number">1</span>,&nbsp;<span class="number">2</span>))</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;all.add(<span class="keyword">new</span>&nbsp;<span class="title class_">Circle</span>(<span class="number">5</span>,&nbsp;<span class="number">3</span>,&nbsp;<span class="number">10</span>))</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">//&nbsp;...</span></span><br><span class="line"></span><br><span class="line">&nbsp;&nbsp;<span class="comment">//&nbsp;将所需组件组合为复杂的组合组件。</span></span><br><span class="line">&nbsp;&nbsp;method&nbsp;<span class="title function_">groupSelected</span><span class="params">(components:&nbsp;array&nbsp;of&nbsp;Graphic)</span>&nbsp;<span class="type">is</span></span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="variable">group</span>&nbsp;<span class="operator">=</span>&nbsp;<span class="keyword">new</span>&nbsp;<span class="title class_">CompoundGraphic</span>()</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;foreach&nbsp;(component&nbsp;in&nbsp;components)&nbsp;<span class="keyword">do</span></span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;group.add(component)</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;all.remove(component)</span><br><span class="line">    all.add(group)</span><br><span class="line">    <span class="comment">//&nbsp;所有组件都将被绘制。</span></span><br><span class="line">    all.draw()</span><br></pre></td></tr></tbody></table></figure><h3 id="应用场景-1"><a href="#应用场景-1" class="headerlink" title="应用场景"></a>应用场景</h3><ul><li>树状对象结构，考虑使用组合模式<ul><li>组合模式有两种共享公共接口的基本元素类型：简单叶子结点和复杂组合容器。容器可以包含其他叶子结点或容器。从而组成树状嵌套递归对象结构</li></ul></li><li>客户端代码想要用相同方式处理简单和复杂元素，考虑使用组合模式<ul><li>所有元素公用同一个接口。在这个借口的帮助下客户端不需要在意所用的对象的具体类</li></ul></li></ul><h3 id="实现方式-4"><a href="#实现方式-4" class="headerlink" title="实现方式"></a>实现方式</h3><ol><li>确保应用的核心模型能够以树状结构表示。 尝试将其分解为简单元素和容器。 记住， 容器必须能够同时包含简单元素和其他容器。 </li><li>声明组件接口及其一系列方法， 这些方法对简单和复杂元素都有意义。 </li><li>创建一个叶节点类表示简单元素。 程序中可以有多个不同的叶节点类。 </li><li>创建一个容器类表示复杂元素。 在该类中， 创建一个数组成员变量来存储对于其子元素的引用。 该数组必须能够同时保存叶节点和容器， 因此请确保将其声明为<strong>组合接口类型</strong>。<br>实现组件接口方法时， 记住容器应该将<strong>大部分工作交给其子元素来完成。</strong> </li><li>最后， 在容器中定义添加和删除子元素的方法。<br>记住， 这些操作可在组件接口中声明。 这将会违反_接口隔离原则_， 因为叶节点类中的这些方法为空。 但是， 这可以让客户端无差别地访问所有元素， 即使是组成树状结构的元素。</li></ol><h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><ul><li>充分利用多态和递归</li><li>开闭原则，无需更改已有代码，在应用中添加新元素，使其成为对象树的一部分</li><li>缺点：对于功能差异比较的，找公共接口会很复杂</li></ul><h3 id="和其他模式的关系"><a href="#和其他模式的关系" class="headerlink" title="和其他模式的关系"></a>和其他模式的关系</h3><p>桥接、 状态和策略 （在某种程度上包括适配器） 模式的接口非常相似。 实际上， 它们都基于组合模式——即将工作委派给其他对象， 不过也各自解决了不同的问题。 模式并不只是以特定方式组织代码的配方， 你还可以使用它们来和其他开发者讨论模式所解决的问题。 </p><h4 id="Builder-Composite"><a href="#Builder-Composite" class="headerlink" title="Builder + Composite"></a>Builder + Composite</h4><p>你可以在创建复杂组合树时使用生成器， 因为这可使其构造步骤以递归的方式运行。 </p><p>为了更好地体现“在创建复杂组合树时使用生成器，因为这可使其构造步骤以递归的方式运行”的思想，我们可以构建一个更为复杂的例子，比如一个公司组织结构的树形表示，其中包含多个层级的部门和员工。我们将使用组合模式来表示组织结构的层次，同时使用生成器模式来递归地构建这个结构。这个例子中，我们将特别注意在代码中添加注释，以解释关键步骤和设计选择。</p><p>组合模式部分</p><p>首先，我们定义组合模式相关的类：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 组织结构的组件接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">OrganizationComponent</span> {</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">printStructure</span><span class="params">()</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 叶节点：表示一个员工</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span> <span class="keyword">implements</span> <span class="title class_">OrganizationComponent</span> {</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String position;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">(String name, String position)</span> {</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.position = position;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printStructure</span><span class="params">()</span> {</span><br><span class="line">        System.out.println(position + <span class="string">": "</span> + name);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 组合节点：表示一个部门，可以包含其他部门或员工</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Department</span> <span class="keyword">implements</span> <span class="title class_">OrganizationComponent</span> {</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> List&lt;OrganizationComponent&gt; members = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Department</span><span class="params">(String name)</span> {</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加成员，可以是部门或员工</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addMember</span><span class="params">(OrganizationComponent member)</span> {</span><br><span class="line">        members.add(member);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printStructure</span><span class="params">()</span> {</span><br><span class="line">        System.out.println(<span class="string">"Department: "</span> + name);</span><br><span class="line">        <span class="keyword">for</span> (OrganizationComponent member : members) {</span><br><span class="line">            member.printStructure();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>生成器模式部分</p><p>接下来，我们定义生成器模式相关的类，以支持递归地构建组织结构：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 组织结构的生成器</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OrganizationBuilder</span> {</span><br><span class="line">    <span class="keyword">private</span> Department root;</span><br><span class="line">    <span class="keyword">private</span> Deque&lt;Department&gt; departmentStack = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">OrganizationBuilder</span><span class="params">(String rootName)</span> {</span><br><span class="line">        <span class="built_in">this</span>.root = <span class="keyword">new</span> <span class="title class_">Department</span>(rootName);</span><br><span class="line">        departmentStack.push(root); <span class="comment">// 将根部门压栈作为当前操作的部门</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加一个部门，新部门自动成为当前操作的部门</span></span><br><span class="line">    <span class="keyword">public</span> OrganizationBuilder <span class="title function_">addDepartment</span><span class="params">(String name)</span> {</span><br><span class="line">        <span class="type">Department</span> <span class="variable">newDepartment</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Department</span>(name);</span><br><span class="line">        <span class="type">Department</span> <span class="variable">current</span> <span class="operator">=</span> departmentStack.peek();</span><br><span class="line">        <span class="keyword">if</span> (current != <span class="literal">null</span>) {</span><br><span class="line">            current.addMember(newDepartment);</span><br><span class="line">            departmentStack.push(newDepartment); <span class="comment">// 将新部门压栈</span></span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加一个员工到当前操作的部门</span></span><br><span class="line">    <span class="keyword">public</span> OrganizationBuilder <span class="title function_">addEmployee</span><span class="params">(String name, String position)</span> {</span><br><span class="line">        <span class="type">Department</span> <span class="variable">current</span> <span class="operator">=</span> departmentStack.peek();</span><br><span class="line">        <span class="keyword">if</span> (current != <span class="literal">null</span>) {</span><br><span class="line">            current.addMember(<span class="keyword">new</span> <span class="title class_">Employee</span>(name, position));</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 结束当前部门的构建，返回上一级部门</span></span><br><span class="line">    <span class="keyword">public</span> OrganizationBuilder <span class="title function_">endDepartment</span><span class="params">()</span> {</span><br><span class="line">        departmentStack.pop(); <span class="comment">// 结束当前部门的构建，弹出栈顶部门</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构建最终的组织结构，返回根部门</span></span><br><span class="line">    <span class="keyword">public</span> Department <span class="title function_">build</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>示例使用</p><p>最后，我们使用这些类来构建一个示例公司的组织结构：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CompositeBuilderDemo</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="comment">// 使用生成器递归构建组织结构</span></span><br><span class="line">        <span class="type">OrganizationBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OrganizationBuilder</span>(<span class="string">"Head Office"</span>)</span><br><span class="line">                .addDepartment(<span class="string">"R&amp;D"</span>)</span><br><span class="line">                    .addEmployee(<span class="string">"Alice"</span>, <span class="string">"Engineer"</span>)</span><br><span class="line">                    .addEmployee(<span class="string">"Bob"</span>, <span class="string">"Engineer"</span>)</span><br><span class="line">                    .endDepartment()</span><br><span class="line">                .addDepartment(<span class="string">"HR"</span>)</span><br><span class="line">                    .addEmployee(<span class="string">"Charlie"</span>, <span class="string">"Recruiter"</span>)</span><br><span class="line">                    .addEmployee(<span class="string">"Dana"</span>, <span class="string">"Coordinator"</span>)</span><br><span class="line">                    .endDepartment();</span><br><span class="line"></span><br><span class="line">        <span class="type">Department</span> <span class="variable">company</span> <span class="operator">=</span> builder.build();</span><br><span class="line">        company.printStructure(); <span class="comment">// 打印整个组织结构</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在这个例子中，我们首先创建了一个<code>OrganizationBuilder</code>实例，指定了公司的根部门名为”Head Office”。然后，我们递归地添加了两个部门”R&amp;D”和”HR”，以及它们各自的员工。<code>addDepartment</code>方法让我们可以添加一个新的部门，并自动将其设置为当前操作的部门，这支持了递归地构建部门结构。通过调用<code>endDepartment</code>方法，我们结束当前部门的构建，并回到上一级部门。最后，我们通过调用<code>build</code>方法完成整个组织结构的构建，并打印出来。</p><p>这个例子展示了如何结合使用组合模式和生成器模式来递归地构建和管理一个复杂的树形结构，同时保持代码的清晰和可维护性。</p><p>责任链通常和组合模式结合使用。 在这种情况下， 叶组件接收到请求后， 可以将请求沿包含全体父组件的链一直传递至对象树的底部。 </p><p>你可以使用迭代器来遍历组合树。 </p><p>你可以使用访问者对整个组合树执行操作。 </p><p>你可以使用享元实现组合树的共享叶节点以节省内存。 </p><p>组合和装饰的结构图很相似， 因为两者都依赖递归组合来组织无限数量的对象。<br>装饰类似于组合， 但其只有一个子组件。 此外还有一个明显不同： 装饰为被封装对象添加了额外的职责， 组合仅对其子节点的结果进行了 “求和”。<br>但是， 模式也可以相互合作： 你可以使用装饰来扩展组合树中特定对象的行为。 </p><p>大量使用组合和装饰的设计通常可从对于原型的使用中获益。 你可以通过该模式来复制复杂结构， 而非从零开始重新构造。</p><h2 id="装饰-装饰者，装饰器，Decorator-Wrapper"><a href="#装饰-装饰者，装饰器，Decorator-Wrapper" class="headerlink" title="装饰 - 装饰者，装饰器，Decorator, Wrapper"></a>装饰 - 装饰者，装饰器，Decorator, Wrapper</h2><blockquote><p>装饰模式允许我们通过将对象放入包含行为的特殊服装对象中来为原对象绑定新行为</p></blockquote><p><img src="/posts/Design-Pattern/decorator-2x.png" alt="decorator-2x"></p><h3 id="现实问题-7"><a href="#现实问题-7" class="headerlink" title="现实问题"></a>现实问题</h3><p>假设正在开发一个提供通知功能的库，其他程序使用它向用户发送关于重要事件的通知</p><p>库最初版本基于「通知器 Notifier」类，此时只有很少几个成员变量，一个构造函数以及一个「send」方法。这个方法可以接受来自客户端的消息作为参数。并将信息发送一个订阅邮箱。邮箱列表通过构造函数传递给通知器。创建和配置通知器仅被调用一次，然后发送给对应的邮箱当重要事情发生时</p><p>为了构建一个提供通知功能的库的最初版本，我们首先定义一个简单的<code>Notifier</code>类。这个类将包含一个用于存储订阅邮箱列表的成员变量，一个构造函数来初始化这个列表，以及一个<code>send</code>方法用于将消息发送给所有订阅的邮箱。这里是一个简单的Java实现示例：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通知器类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Notifier</span> {</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; emailList; <span class="comment">// 存储订阅邮箱列表</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造函数，通过它传递邮箱列表</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Notifier</span><span class="params">(List&lt;String&gt; emailList)</span> {</span><br><span class="line">        <span class="built_in">this</span>.emailList = emailList;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发送消息到所有订阅的邮箱</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">(String message)</span> {</span><br><span class="line">        <span class="keyword">for</span> (String email : emailList) {</span><br><span class="line">            <span class="comment">// 模拟发送消息过程</span></span><br><span class="line">            System.out.println(<span class="string">"Sending message to "</span> + email + <span class="string">": "</span> + message);</span><br><span class="line">            <span class="comment">// 实际应用中，这里会有发送邮件的逻辑</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在这个例子中，<code>Notifier</code>类定义了基础的通知功能。构造函数<code>Notifier(List&lt;String&gt; emailList)</code>接受一个包含邮箱地址的列表，这些邮箱是消息的目标接收者。<code>send(String message)</code>方法遍历这个列表，并为每个邮箱打印一条消息，代表发送过程。在实际应用中，这里会包含实际发送邮件的代码逻辑。</p><p>使用这个类的示例代码如下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NotificationService</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="comment">// 初始化订阅邮箱列表</span></span><br><span class="line">        List&lt;String&gt; emails = Arrays.asList(<span class="string">"user1@example.com"</span>, <span class="string">"user2@example.com"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建通知器实例</span></span><br><span class="line">        <span class="type">Notifier</span> <span class="variable">notifier</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Notifier</span>(emails);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 发送通知消息</span></span><br><span class="line">        notifier.send(<span class="string">"Hello, this is an important notification message!"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在这个示例中，我们首先创建了一个包含两个邮箱地址的列表。然后，我们使用这个列表创建了一个<code>Notifier</code>实例。通过调用<code>send</code>方法，我们向所有订阅的邮箱发送了一个消息。</p><p>这个简单的实现展示了通知库最初版本的核心功能。在这个阶段，我们没有考虑使用装饰器模式来扩展功能，而是专注于实现基本的通知发送功能。之后，可以通过装饰器模式添加额外的功能，如日志记录、消息加密、错误处理等，而不影响现有的<code>Notifier</code>类。</p><p>然后未来我们发现我们不单单需要邮箱通知，我们还希望有手机短信通知，微信通知，QQ通知等等</p><p><img src="/posts/Design-Pattern/decorator_1.png" alt="decorator_1"></p><p>这里的挑战是，客户端需要传入类型，通过类型来调用对应的发送方法。</p><p>而且如果我们需要组合一起的时候，比如腾讯用户，那么我们需要wechat 和 QQ，比如信息用户，SMS + Wechat 等等，此时就会发生子类梯度爆炸</p><p><img src="/posts/Design-Pattern/decorator_2.png" alt="decorator_2"></p><h3 id="解决方案-7"><a href="#解决方案-7" class="headerlink" title="解决方案"></a>解决方案</h3><p>如果对每一个需要扩展的功能都是使用继承然后扩展一个子类那么很容易就会出现由于继承导致的子类数量爆炸的问题</p><p>我们可以使用组合：</p><p>两者的工作方式几乎一模一样： 一个对象包含指向另一个对象的引用， 并将部分工作委派给引用对象； 继承中的对象则继承了父类的行为， 它们自己能够完成这些工作。</p><p>组合是许多设计模式背后的关键原则</p><p><img src="/posts/Design-Pattern/decorator_3.png" alt="decorator_3"></p><p>对于装饰模式，又称其为封装器模式。封装器是一个能与其他目标对象链接的对象。封装器包含与目标对象相同的一系列方法，他会<strong>把所有接收到的请求委派给目标对象</strong>。但是封装器也可以再把请求交给目标对象前后进行处理。</p><p>封装器需要实现和其封装对象相同的接口，我们可以将一个对象放入多个封装器中，并在对象中添加封装器的组合行为</p><p>在之前的例子中，我们可以将邮件通知这个default行为放在基类<code>Notifier</code>中然后把其他通知方法放在装饰器中</p><p><img src="/posts/Design-Pattern/decorator_4.png" alt="decorator_4"></p><p>对于上述问题的客户端代码来说把</p>]]></content>
    
    
    <summary type="html">记录各种 Design Pattern</summary>
    
    
    
    <category term="工程类" scheme="http://ruobingw.com/categories/%E5%B7%A5%E7%A8%8B%E7%B1%BB/"/>
    
    
    <category term="设计模式" scheme="http://ruobingw.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="Design Pattern" scheme="http://ruobingw.com/tags/Design-Pattern/"/>
    
  </entry>
  
  <entry>
    <title>八股文</title>
    <link href="http://ruobingw.com/posts/%E5%85%AB%E8%82%A1%E6%96%87/"/>
    <id>http://ruobingw.com/posts/%E5%85%AB%E8%82%A1%E6%96%87/</id>
    <published>2023-10-24T18:15:59.000Z</published>
    <updated>2024-05-15T04:17:52.571Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spark-vs-MapReduce"><a href="#Spark-vs-MapReduce" class="headerlink" title="Spark vs MapReduce:"></a>Spark vs MapReduce:</h1><p>All are used in big data processing, but Spark uses in-memory while map reduce uses disk-based processing.</p><p>For spark, it has other features including lazy evaluation, computations are not executed until like saving or counting is performed. And the data structure in Spark is RDD. Resilient Distributed datasets. These are immutable and can be processed in parallel acroos a cluster. Unlike MapReduce’s linear data flow model. Spark uses DAGs.</p><p>For MapReduce, it is a two phase processing; First map and then reduce. At the map phase, proces and transforms the input data into k-v pairs and in the reduce phase, aggregate and combiens output of the map phase to produce results.</p><p>So, Spark is faster and ease to use. And mapreduce is reliable for a linear and large-scale data processing tasks.</p><h1 id="Mutex-vs-Semaphore"><a href="#Mutex-vs-Semaphore" class="headerlink" title="Mutex vs Semaphore"></a>Mutex vs Semaphore</h1><p>Mutex is used to provide mutual exclusion, i.e., to ensure that only one thread can access a resource (like a variable or section of code) at a time. Locking Mechanism: When a thread locks a mutex, other threads attempting to lock it are blocked until the mutex is unlocked. Ownership: A mutex has the concept of ownership. Only the thread that has acquired a mutex can release it. Use Case: Ideal for protecting shared data/resources in a scenario where only one thread should access the data at a time.</p><p>Semaphores are used to control access to a resource that has a limited number of instances. Counting Mechanism: A semaphore maintains a count, which is decremented by a thread that acquires the semaphore and incremented when a thread releases it.</p><p>No Ownership: Unlike mutexes, semaphores don’t have a specific ownership. Any thread can release a semaphore, not necessarily the one that acquired it.</p><p>Types: There are binary semaphores (which are similar to mutexes) and counting semaphores (which allow multiple accesses up to a set limit).</p><p>Use Case: Useful for limiting access to a resource pool, like database connections.</p><h1 id="SQL-vs-NoSQL"><a href="#SQL-vs-NoSQL" class="headerlink" title="SQL vs NoSQL"></a>SQL vs NoSQL</h1><p>SQL: structured schema with tables, rows and columns. Data is orgranized into well-defined structures. SQL database provide strong consistency, ensuring the data remains in a valid state at all times. ACID transcations are used to maintain data integrity.</p><p>NoSQL are non-relational and handle various data formats, like semi-structured and unstructured data. About consistency, it offers various consistency models, including eventual consistency. It use BASE (Basically Available, Soft state, Eventually consistent) semantics instead of ACID.</p><h1 id="Cache"><a href="#Cache" class="headerlink" title="Cache:"></a>Cache:</h1><p>LRU Least Recently Used</p><p>FIFO </p><p>LFU Least Frequently Used</p><h1 id="Malloc-Free-Realloc-Calloc"><a href="#Malloc-Free-Realloc-Calloc" class="headerlink" title="Malloc Free Realloc Calloc"></a>Malloc Free Realloc Calloc</h1><p>When call <strong>malloc</strong>, it requests a block of memory of the specified size from the heap. In a segregated free list with a better-fit algorithm, malloc will search the segregated free lists to find a block that closely matches the requested size (but is slightly larger to avoid fragmentation).</p><p><strong>free</strong> is used to deallocate memory previously allocated by malloc, realloc, or calloc. When you call free, it marks the corresponding block of memory as free in the segregated free list.</p><p>In a better-fit algorithm, free may involve coalescing (merging) adjacent free blocks to prevent memory fragmentation and to maintain the list of free blocks efficiently</p><p><strong>realloc</strong> is used to resize a previously allocated block of memory. It can be used to make a block of memory larger or smaller. When you call realloc, it may perform one of the following actions:</p><p>If the requested size is smaller than the current block’s size, it may split the block, marking part of it as free and returning a pointer to the remaining portion. If the requested size is larger than the current block’s size, it may search for a larger free block in the segregated free list. If found, it may move the data to the new block and return a pointer to it. In a better-fit algorithm, realloc will try to find the best-fit block that minimizes waste and fragmentation.</p><p><strong>calloc</strong> stands for “contiguous allocation.” It is used to allocate and initialize multiple blocks of memory, typically for arrays or data structures. When call calloc, it allocates a block of memory that can hold a specified number of elements, with each element of a specified size.</p><p><strong>First fit / next fit:</strong> search linearly starting from some location, and pick the first block that fits.</p><p>Next Fit is similar to First Fit but starts searching for free memory from the location where the previous allocation ended. This can help reduce fragmentation compared to First Fit. <strong>Best Fit</strong> searches for the smallest available block of memory that can accommodate a request. This minimizes waste but can lead to fragmentation and is less efficient than other algorithms.</p><p><strong>Segregated free list</strong> is to maintain separate lists of free memory blocks, each list containing blocks of a specific size range. This allows the allocator to quickly locate a suitable free block for a requested memory allocation size without searching through all free blocks</p><h1 id="Virtual-Memory"><a href="#Virtual-Memory" class="headerlink" title="Virtual Memory"></a>Virtual Memory</h1><p>It extends the available physical RAM (Random Access Memory) by temporarily transferring data from RAM to disk storage.</p><p>each process running on a computer system believes it has a complete and dedicated address space that spans from 0 to the maximum address supported by the architecture (e.g., 2^32 addresses in a 32-bit system or 2^64 addresses in a 64-bit system). This illusion is created by the memory management unit (MMU) and the page table. In detail, when a program running on the CPU accesses memory, it uses virtual memory addresses rather than physical addresses. These virtual addresses are translated into physical addresses by the memory management unit (MMU) hardware. For page table, it is is a data structure used by the operating system to map virtual addresses to physical addresses. It keeps track of which pages are currently in RAM and which are stored on disk. It is like as a form of a cache. Page table entries (PTEs) typically store information about the mapping, including whether the page is in RAM (a cache hit in a sense) or needs to be fetched from secondary storage (similar to a cache miss).</p><h1 id="Stack-vs-Heap"><a href="#Stack-vs-Heap" class="headerlink" title="Stack vs Heap"></a>Stack vs Heap</h1><p>The stack is used for static memory allocation, which includes local variables and function calls.</p><p>Size and Allocation: The stack has a limited size, and memory is allocated in a last-in, first-out (LIFO) manner.</p><p>Speed: Allocation and deallocation on the stack are fast since it involves only moving the stack pointer.</p><p>Lifespan: Variables on the stack exist only within the scope of the function that created them.</p><p>Automatic Management: The compiler automatically manages the stack.</p><p>The heap is used for dynamic memory allocation, where the size and lifetime of variables or objects are not known at compile time.</p><p>Size and Allocation: The heap can typically grow dynamically, limited only by the system’s available memory.</p><p>Speed: Allocation and deallocation on the heap are slower as they require more complex bookkeeping.</p><p>Lifespan: Memory on the heap remains allocated until it’s explicitly freed, often by the programmer.</p><p>Manual Management: In languages like C and C++, programmers must manually manage heap memory, leading to complexities like memory leaks and dangling pointers.</p><h1 id="Microservices-why-not-and-why"><a href="#Microservices-why-not-and-why" class="headerlink" title="Microservices - why not and why"></a>Microservices - why not and why</h1><p>Modularity: Microservices allow for breaking down complex applications into smaller, manageable, and independent units. This modular structure makes it easier to understand, develop, and test the application.</p><p>Scalability: Different microservices can be scaled independently, allowing for more efficient resource use. For instance, a component with high demand can be scaled separately without having to scale the entire application.</p><p>Flexibility in Technology: Each microservice can potentially be written in a different programming language or use different data storage technologies, depending on what is best suited for its purpose.</p><p>Faster Deployment and Time to Market: Since microservices can be deployed independently, new features can be brought to market more quickly and with less risk.</p><p>Resilience: A failure in one microservice does not necessarily bring down the whole application, making the application more robust and resilient.</p><p>But:</p><p>Complexity in Coordination: Microservices introduce challenges in communication and coordination between various services. Managing multiple interdependent services can be more complex than managing a monolithic architecture.</p><p>Network Latency: Inter-service communication over the network can introduce latency, which might impact performance.</p><p>Data Management Complexity: Maintaining data consistency and integrity across services can be challenging, especially with each microservice managing its own database.</p><p>Difficulty in Testing: Testing a microservices-based application can be more complex compared to a monolithic application due to the number of services and their interactions.</p><h1 id="Container-vs-Virtual-Machine"><a href="#Container-vs-Virtual-Machine" class="headerlink" title="Container vs Virtual Machine"></a>Container vs Virtual Machine</h1><p>They used to create isolated environments for running applications, but they operate differently and serve different purposes in the world of computing. </p><p>VM: run on top of physical server and a hypervisor, like VMware. Each VM includes all necessary bunaries and libraries and entire guest OS. So VM is larger.</p><p>Container:share the host system’s kernel but package the application and its dependencies (libraries, binaries, etc.) into a container image. Lightweight</p><p>They coexist and leveraging the strengths of each technology</p><h1 id="RestAPI"><a href="#RestAPI" class="headerlink" title="RestAPI"></a>RestAPI</h1><p>RestAPI is a web service implementation that adheres to the REST architectural constraints. And REST is a set of principles that define how Web standards.</p><p>RestAPI include: Stateless Communication: Each request from client to server must contain all the information needed to understand and process the request. And it has to have a client-server architecture, it needs to use HTTP methods like GET POST PUT DELETE. It should be defined as cacheable or not, and it uses a layered system. Other alternatives are liek GraphQL which uses multiple endpoints to retrieve different data to perform operations. And gRPC which is especially useful for microservice architecture</p><h1 id="Website-DNS"><a href="#Website-DNS" class="headerlink" title="Website DNS:"></a>Website DNS:</h1><p>First check the cache in the browser to see if it has a record of the IP address;</p><p>If not, it will do a DNS Query, it wil first go to a local DNS cache, and then reach to internet service providers DNS server, if still not get the IP address, the request will be forwarded to higher-level DNS until the IP is found.</p><p>Once got the IP, our hardware will use ARP to find the MAC address of the gateway router, And then the browser will start like TCP with, of course, handshaking. SYN, SYN-ACK, ACK; And then sending HTTP, if it is HTTPS, it will do some verification and server gives the response after processing the request with some status code as well as contents like HTML, and then the Browser render the page</p><h1 id="Network-Layer"><a href="#Network-Layer" class="headerlink" title="Network Layer:"></a>Network Layer:</h1><p>OSI Model: 7 layers: Physical, Data link, network, transport, session, presentation, application;</p><p>Physical: transmission and reception of unstructured raw data between a device and a physical transmission medium</p><p>DataLink: node-to-node data transfer</p><p>Network: Device addressing, routers operate at this layer</p><p>Transport: transfer data between hosts</p><p>Session: Manage sessions between end-user apps</p><p>Presentation: Data encryption</p><p>Application: interacts with the software application</p><p>TCP/IP:</p><p>Link layer, internet layer, transport layer, application layer</p><p>Link (physical and data link)</p><p>Internet: network</p><p>Transport: transport</p><p>Application: Session, presentation, application</p><h1 id="gRPC"><a href="#gRPC" class="headerlink" title="gRPC"></a>gRPC</h1><p>HTTP/2 so, it uses TCP for the transport layer, with protocol buffers at the presentation layer.</p><h1 id="Cloud-v-s-Cloud-Native"><a href="#Cloud-v-s-Cloud-Native" class="headerlink" title="Cloud v.s. Cloud Native"></a>Cloud v.s. Cloud Native</h1><p>“cloud” refers to the computational infrastructure and services available over the internet, “cloud native” refers to a methodology and design philosophy to build and run applications that harness the full potential of cloud computing.</p><p>I usually heard SAAS, PAAS, iaaS</p><p>FaaS</p><p>FaaS, or Function as a Service, is a category of cloud computing services that allows developers to execute and manage individual functions in response to events without the need to manage the infrastructure. This is a subset of serverless computing. It is event driven, like I need to have SQS + SNS + Lamba function to make the SNS trigger the function. It is stateless, short-lived and able to auto scale.</p><h1 id="Docker-vs-K8s"><a href="#Docker-vs-K8s" class="headerlink" title="Docker vs K8s"></a>Docker vs K8s</h1><p>Docker is a platform that allows us to build, ship, and run applications inside containers. Containers encapsulate an application and its dependencies into a single, consistent unit, making it easy to move across different environments.</p><p>Kubernetes is a container orchestration platform designed to automate the deployment, scaling, and management of containerized applications.</p><p>Docker is about creating and running individual containers.</p><p>Kubernetes is about coordinating clusters of containers, ensuring they work in harmony with one another.</p><h1 id="Container-v-s-Virtual-Machine"><a href="#Container-v-s-Virtual-Machine" class="headerlink" title="Container v.s. Virtual Machine"></a>Container v.s. Virtual Machine</h1><p>Containers:</p><p>OS-level virtualization.</p><p>Lightweight and fast.</p><p>Share the host’s OS kernel.</p><p>Best for microservices and cloud-native applications.</p><p>Virtual Machines:</p><p>Hardware-level virtualization.</p><p>Heavier, with their own full OS stacks.</p><p>Stronger isolation due to separate kernels.</p><p>Best for strong isolation needs and varied OS requirements on the same host.</p><p> containers can run inside VMs, leveraging the strengths of both technologies.</p><h1 id="进程-vs-线程-vs-协程"><a href="#进程-vs-线程-vs-协程" class="headerlink" title="进程 vs 线程 vs 协程"></a>进程 vs 线程 vs 协程</h1><blockquote><p><a href="https://www.cnblogs.com/Survivalist/p/11527949.html">进程 vs 线程 vs 协程</a></p></blockquote><p>Process contains Thread contains Coroutines</p><p>Process between each other are independent, while thread in a process share the memory space, like code, data, stack, and space resources like signals</p><p>Thread and Coroutine: Thread needs locks to make the data consistent while coroutine does not, we can simply check the state in the coroutine;</p><p>包含关系如下：</p><p><img src="/posts/%E5%85%AB%E8%82%A1%E6%96%87/Thread-Process-Coroutine.png" alt="Thread-Process-Coroutine"></p>]]></content>
    
    
    <summary type="html">记录准备过的八股文</summary>
    
    
    
    <category term="八股" scheme="http://ruobingw.com/categories/%E5%85%AB%E8%82%A1/"/>
    
    
    <category term="面经" scheme="http://ruobingw.com/tags/%E9%9D%A2%E7%BB%8F/"/>
    
    <category term="八股文" scheme="http://ruobingw.com/tags/%E5%85%AB%E8%82%A1%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>前后缀分解</title>
    <link href="http://ruobingw.com/posts/%E5%89%8D%E5%90%8E%E7%BC%80%E5%88%86%E8%A7%A3/"/>
    <id>http://ruobingw.com/posts/%E5%89%8D%E5%90%8E%E7%BC%80%E5%88%86%E8%A7%A3/</id>
    <published>2023-10-22T04:44:33.000Z</published>
    <updated>2024-05-15T04:17:52.572Z</updated>
    
    <content type="html"><![CDATA[<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>一个prefix数组 一个 suffix 数组</p><p>在<code>idx = i</code>处可以使用<code>prefix</code> 和 <code>suffix</code>的一些性质，比如乘积，或者在<code>i</code>上左边的最小值，右边的最小值</p><p>本质是为了快速的在当前<code>i</code>上能够利用信息避免重复计算 </p><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>初见使用在了<a href="https://leetcode.cn/contest/weekly-contest-368/">leetcode 368 周赛</a> Q2:</p><h1 id="元素和最小的山形三元组-II"><a href="#元素和最小的山形三元组-II" class="headerlink" title="元素和最小的山形三元组 II"></a><a href="https://leetcode.cn/problems/minimum-sum-of-mountain-triplets-ii/">元素和最小的山形三元组 II</a></h1><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minimumSum</span><span class="params">(<span class="type">int</span>[] nums)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span>[] leftMin = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="type">int</span>[] rightMin = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        leftMin[<span class="number">0</span>] = Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) {</span><br><span class="line">            leftMin[i] = Math.min(leftMin[i - <span class="number">1</span>], nums[i - <span class="number">1</span>]);</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">        rightMin[n - <span class="number">1</span>] = Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) {</span><br><span class="line">            rightMin[i] = Math.min(rightMin[i + <span class="number">1</span>], nums[i + <span class="number">1</span>]);</span><br><span class="line">        }</span><br><span class="line">        <span class="type">int</span> <span class="variable">minSum</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n - <span class="number">1</span>; i++) {</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &gt; leftMin[i] &amp;&amp; nums[i] &gt; rightMin[i]) {</span><br><span class="line">                minSum = Math.min(minSum, nums[i] + leftMin[i] + rightMin[i]);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> minSum == Integer.MAX_VALUE ? -<span class="number">1</span> : minSum;</span><br><span class="line">   }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="238-除自身以外数组的乘积"><a href="#238-除自身以外数组的乘积" class="headerlink" title="238. 除自身以外数组的乘积"></a><a href="https://leetcode.cn/problems/product-of-array-except-self/">238. 除自身以外数组的乘积</a></h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h1&gt;&lt;p&gt;一个prefix数组 一个 suffix 数组&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;idx = i&lt;/code&gt;处可以使用&lt;code&gt;prefix&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>摩尔投票</title>
    <link href="http://ruobingw.com/posts/%E6%91%A9%E5%B0%94%E6%8A%95%E7%A5%A8/"/>
    <id>http://ruobingw.com/posts/%E6%91%A9%E5%B0%94%E6%8A%95%E7%A5%A8/</id>
    <published>2023-10-21T02:44:03.000Z</published>
    <updated>2024-05-15T04:17:52.584Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://mp.weixin.qq.com/s?__biz=MzU4NDE3MTEyMA==&amp;mid=2247488987&amp;idx=1&amp;sn=6087b1909fea1d24f15353515eee8d93&amp;chksm=fd9cbec4caeb37d235ccad8d59724177784036a60525fa5e7b738267e9a84a572b1545528391&amp;token=1288276346&amp;lang=zh_CN#rd">三叶</a></p></blockquote><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">数组中占比超过一半的元素称之为主要元素。给你一个 整数 数组，找出其中的主要元素。</span><br><span class="line"></span><br><span class="line">输入：[1,2,5,9,5,9,5,5,5]</span><br><span class="line">输出：5</span><br></pre></td></tr></tbody></table></figure><p><strong>摩尔投票 ：在集合中寻找可能存在的多数元素，这一元素在输入的序列重复出现并占到了序列元素的一半以上；在第一遍遍历之后应该再进行一个遍历以统计第一次算法遍历的结果出现次数，确定其是否为众数；如果一个序列中没有占到多数的元素，那么第一次的结果就可能是无效的随机元素。</strong></p><p><strong>换句话说，每次将两个不同的元素进行「抵消」，如果最后有元素剩余，则「可能」为元素个数大于总数一半的那个。</strong></p><p>具体的，我们定义一个变量 来保存那个可能为主要元素的值， 用来记录该值的出现次数。然后在遍历数组 过程中执行如下逻辑：</p><ul><li>如果 为 ：说明之前出现过的 已经被抵消完了，更新一下 为当前值，出现次数为 ：<code>x = nums[i], cnt = 1</code>；</li><li>如果 不为 ：说明之前统计的 还没被抵消完，这是根据 与 是否相等进行计算即可：<code>cnt += nums[i] == x ? 1 : -1</code>。</li></ul><p>当处理完 之后，我们得到了一个<strong>「可能」</strong>的主要元素。注意只是可能，因为我们在处理过程中只使用了 <code>x</code> 和 <code>cnt</code> 来记录，我们是无法确定最后剩下的 是经过多次抵消后剩余的主要元素，还是只是不存在主要元素的数组中的无效随机元素。</p><p>因此我们需要再进行一次遍历，检查这个<strong>「可能」</strong>的主要元素 的出现次数是否超过总数一半。</p><p>O(1) 找众数</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">majorityElement</span><span class="params">(<span class="type">int</span>[] nums)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> -<span class="number">1</span>, cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : nums) {</span><br><span class="line">            <span class="keyword">if</span> (cnt == <span class="number">0</span>) {</span><br><span class="line">                x = i;</span><br><span class="line">                cnt = <span class="number">1</span>;</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                cnt += x == i ? <span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : nums) <span class="keyword">if</span> (x == i) cnt++;</span><br><span class="line">        <span class="keyword">return</span> cnt &gt; n / <span class="number">2</span> ? x : -<span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <summary type="html">摩尔投票！</summary>
    
    
    
    <category term="Algorithms" scheme="http://ruobingw.com/categories/Algorithms/"/>
    
    
    <category term="数组" scheme="http://ruobingw.com/tags/%E6%95%B0%E7%BB%84/"/>
    
    <category term="Array" scheme="http://ruobingw.com/tags/Array/"/>
    
    <category term="摩尔投票" scheme="http://ruobingw.com/tags/%E6%91%A9%E5%B0%94%E6%8A%95%E7%A5%A8/"/>
    
  </entry>
  
  <entry>
    <title>Re:从1500分开始的竞赛生活</title>
    <link href="http://ruobingw.com/posts/Re-%E4%BB%8E1500%E5%88%86%E5%BC%80%E5%A7%8B%E7%9A%84%E7%AB%9E%E8%B5%9B%E7%94%9F%E6%B4%BB/"/>
    <id>http://ruobingw.com/posts/Re-%E4%BB%8E1500%E5%88%86%E5%BC%80%E5%A7%8B%E7%9A%84%E7%AB%9E%E8%B5%9B%E7%94%9F%E6%B4%BB/</id>
    <published>2023-10-11T16:49:38.000Z</published>
    <updated>2024-05-15T04:17:52.563Z</updated>
    
    <content type="html"><![CDATA[<h1 id="序"><a href="#序" class="headerlink" title="序"></a>序</h1><div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>主要在这里练习</p><p><a href="https://huxulm.github.io/lc-rating/#/zen">https://huxulm.github.io/lc-rating/#/zen</a></p></div><h1 id="1500-1600"><a href="#1500-1600" class="headerlink" title="1500 - 1600"></a>1500 - 1600</h1><blockquote><p>学会从题干假设结论，然后尝试验证结论（写一个）或者数学证明</p></blockquote><h2 id="2507-使用质因数之和替换后可以取到的最小值-1500"><a href="#2507-使用质因数之和替换后可以取到的最小值-1500" class="headerlink" title="2507. 使用质因数之和替换后可以取到的最小值 - 1500"></a><a href="https://leetcode.cn/problems/smallest-value-after-replacing-with-sum-of-prime-factors/">2507. 使用质因数之和替换后可以取到的最小值</a> - 1500</h2><p>这道题主要是怎么分解质因数，属于数学题。</p><p>用一个外置的while 循环来判断是否结束，然后从 cur 开始分解，分解从2作为因数开始分解，然后更新 min</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">smallestValue</span><span class="params">(<span class="type">int</span> n)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">nChange</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">cur</span> <span class="operator">=</span> n;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> n;</span><br><span class="line">        <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">while</span> (nChange != count) {</span><br><span class="line">            nChange = count;</span><br><span class="line">            cur = count;</span><br><span class="line">            count = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (cur &gt; <span class="number">1</span>) {</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt;= cur; i++) {</span><br><span class="line">                    <span class="keyword">if</span> (cur % i == <span class="number">0</span>) {</span><br><span class="line">                        cur /= i;</span><br><span class="line">                        count += i;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            min = Math.min(min, count);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> min;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="1525-字符串的好分割数目-1500"><a href="#1525-字符串的好分割数目-1500" class="headerlink" title="1525. 字符串的好分割数目 - 1500"></a><a href="https://leetcode.cn/problems/number-of-good-ways-to-split-a-string/">1525. 字符串的好分割数目</a> - 1500</h2><p>前后缀分解：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numSplits</span><span class="params">(String s)</span> {</span><br><span class="line">        <span class="type">char</span>[] sChar = s.toCharArray();</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> sChar.length;</span><br><span class="line">        <span class="type">int</span>[] leftCount = <span class="keyword">new</span> <span class="title class_">int</span>[n - <span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span>[] rightCount = <span class="keyword">new</span> <span class="title class_">int</span>[n - <span class="number">1</span>];</span><br><span class="line">        Set&lt;Character&gt; left = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        Set&lt;Character&gt; right = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">idxLeft</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">idxRight</span> <span class="operator">=</span> n - <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) {</span><br><span class="line">            left.add(sChar[i]);</span><br><span class="line">            leftCount[idxLeft] = left.size();</span><br><span class="line">            idxLeft++;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n - <span class="number">1</span>; i &gt;= <span class="number">1</span>; i--) {</span><br><span class="line">            right.add(sChar[i]);</span><br><span class="line">            rightCount[idxRight] = right.size();</span><br><span class="line">            idxRight--;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// Arrays.stream(leftCount).forEach(a -&gt; System.out.print(a + " "));</span></span><br><span class="line">        <span class="comment">// System.out.println();</span></span><br><span class="line">        <span class="comment">// Arrays.stream(rightCount).forEach(a -&gt; System.out.print(a + " "));</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) {</span><br><span class="line">            <span class="keyword">if</span> (leftCount[i] == rightCount[i]) count++;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="915-分割数组-1501"><a href="#915-分割数组-1501" class="headerlink" title="915. 分割数组 - 1501"></a><a href="https://leetcode.cn/problems/partition-array-into-disjoint-intervals/">915. 分割数组</a> - 1501</h2><p>利用题中性质：<code>left</code> 中的每个元素都小于或等于 <code>right</code> 中的每个元素。 &lt;-&gt;  等价于找 left 最大 &lt;= right 最小</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">partitionDisjoint</span><span class="params">(<span class="type">int</span>[] nums)</span> {</span><br><span class="line">        <span class="comment">// left 每个元素都小于或等于 right 中的每个元素</span></span><br><span class="line">        <span class="comment">// 等价于找 left 最大 &lt;= right 最小</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span>[] leftMax = <span class="keyword">new</span> <span class="title class_">int</span>[n - <span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span>[] rightMin = <span class="keyword">new</span> <span class="title class_">int</span>[n - <span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> Integer.MIN_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) {</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &gt; max) {</span><br><span class="line">                max = nums[i];</span><br><span class="line">            }</span><br><span class="line">            leftMax[i] = max;</span><br><span class="line">        }</span><br><span class="line">        <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n - <span class="number">1</span>; i &gt;= <span class="number">1</span>; i--) {</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &lt; min) {</span><br><span class="line">                min = nums[i];</span><br><span class="line">            }</span><br><span class="line">            rightMin[i - <span class="number">1</span>] = min;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// Arrays.stream(leftMax).forEach(a -&gt; System.out.print(a + " "));</span></span><br><span class="line">        <span class="comment">// System.out.println();</span></span><br><span class="line">        <span class="comment">// Arrays.stream(rightMin).forEach(a -&gt; System.out.print(a + " "));</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">            <span class="keyword">if</span> (leftMax[i] &lt;= rightMin[i]) {</span><br><span class="line">                <span class="keyword">return</span> i + <span class="number">1</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="1090-受标签影响的最大值-1501"><a href="#1090-受标签影响的最大值-1501" class="headerlink" title="1090. 受标签影响的最大值 - 1501"></a><a href="https://leetcode.cn/problems/largest-values-from-labels/">1090. 受标签影响的最大值</a> - 1501</h2><p>dp做法：（超时）这里忽略了memo的声明需要三重循环，即使是ptthon的@cache也会超时，记忆化在这里并不适用</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="type">int</span>[] values;</span><br><span class="line">    <span class="type">int</span>[] labels;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="type">int</span> numWanted;</span><br><span class="line">    <span class="type">int</span> useLimit;</span><br><span class="line">    Map&lt;Integer, Integer&gt; selectedNumsCount = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">largestValsFromLabels</span><span class="params">(<span class="type">int</span>[] values, <span class="type">int</span>[] labels, <span class="type">int</span> numWanted, <span class="type">int</span> useLimit)</span> {</span><br><span class="line">        <span class="built_in">this</span>.values = values;</span><br><span class="line">        <span class="built_in">this</span>.labels = labels;</span><br><span class="line">        <span class="built_in">this</span>.n = values.length;</span><br><span class="line">        <span class="built_in">this</span>.numWanted = numWanted;</span><br><span class="line">        <span class="built_in">this</span>.useLimit = useLimit;</span><br><span class="line">        <span class="keyword">return</span> dp(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">dp</span><span class="params">(<span class="type">int</span> idx, <span class="type">int</span> sum)</span> {</span><br><span class="line">        <span class="comment">// System.out.println("ini: " + idx + " " + sum + " " + numWanted + " " + useLimit);</span></span><br><span class="line">        <span class="keyword">if</span> (idx &gt;= n) {</span><br><span class="line">            <span class="keyword">return</span> sum;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// if (memo[idx] != -666) return memo[idx];</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 不选当前数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">resNot</span> <span class="operator">=</span> dp(idx + <span class="number">1</span>, sum);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// System.out.println("not select: " + idx + " " + resNot);</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> values[idx];</span><br><span class="line">        <span class="type">int</span> <span class="variable">label</span> <span class="operator">=</span> labels[idx];</span><br><span class="line">        <span class="keyword">if</span> (numWanted == <span class="number">0</span>) <span class="keyword">return</span> resNot;</span><br><span class="line">        <span class="keyword">if</span> (selectedNumsCount.getOrDefault(label, -<span class="number">1</span>) == useLimit) <span class="keyword">return</span> resNot; </span><br><span class="line">        <span class="comment">// 选择当前数</span></span><br><span class="line">        <span class="keyword">if</span> (selectedNumsCount.containsKey(label)){</span><br><span class="line">            selectedNumsCount.put(label, selectedNumsCount.get(label) + <span class="number">1</span>);</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            selectedNumsCount.put(label, <span class="number">1</span>);</span><br><span class="line">        }</span><br><span class="line">        numWanted--;</span><br><span class="line">        sum = sum + value;</span><br><span class="line">        <span class="comment">// System.out.println("pre: " + sum + " " + resNot);</span></span><br><span class="line">        <span class="comment">// System.out.println(selectedNumsCount);</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">resSelected</span> <span class="operator">=</span> dp(idx + <span class="number">1</span>, sum);</span><br><span class="line">        <span class="comment">// System.out.println("after: " + sum + " " + resSelected);</span></span><br><span class="line">        sum = sum - value;</span><br><span class="line">        numWanted++;</span><br><span class="line">        <span class="keyword">if</span> (selectedNumsCount.get(label) &gt; <span class="number">1</span>) {</span><br><span class="line">            selectedNumsCount.put(label, selectedNumsCount.get(label) - <span class="number">1</span>);</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            selectedNumsCount.remove(label);</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// System.out.println(idx + " " + resNot + " " + resSelected);</span></span><br><span class="line">        <span class="comment">// memo[idx] = Math.max(resNot, resSelected);</span></span><br><span class="line">        <span class="keyword">return</span> Math.max(resNot, resSelected);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>正确做法：排序 + 计数</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">largestValsFromLabels</span><span class="params">(<span class="type">int</span>[] values, <span class="type">int</span>[] labels, <span class="type">int</span> numWanted, <span class="type">int</span> useLimit)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> values.length;</span><br><span class="line">        <span class="type">int</span>[][] pairs = <span class="keyword">new</span> <span class="title class_">int</span>[n][<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; ++i) {</span><br><span class="line">            pairs[i] = <span class="keyword">new</span> <span class="title class_">int</span>[]{values[i], labels[i]};</span><br><span class="line">        }</span><br><span class="line">        Arrays.sort(pairs, (a, b) -&gt; b[<span class="number">0</span>] - a[<span class="number">0</span>]);</span><br><span class="line">        Map&lt;Integer, Integer&gt; cnt = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">            <span class="keyword">if</span> (numWanted &lt;= <span class="number">0</span>) {</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="type">int</span> <span class="variable">v</span> <span class="operator">=</span> pairs[i][<span class="number">0</span>], l = pairs[i][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (cnt.getOrDefault(l, <span class="number">0</span>) &lt; useLimit) {</span><br><span class="line">                cnt.merge(l, <span class="number">1</span>, Integer::sum);</span><br><span class="line">                numWanted--;</span><br><span class="line">                ans += v;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="1750-删除字符串两端相同字符后的最短长度-1502"><a href="#1750-删除字符串两端相同字符后的最短长度-1502" class="headerlink" title="1750. 删除字符串两端相同字符后的最短长度 - 1502"></a><a href="https://leetcode.cn/problems/minimum-length-of-string-after-deleting-similar-ends/">1750. 删除字符串两端相同字符后的最短长度</a> - 1502</h2><p>双指针直接模拟：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minimumLength</span><span class="params">(String s)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = n - <span class="number">1</span>;</span><br><span class="line">        <span class="type">char</span>[] cArr = s.toCharArray();</span><br><span class="line">        <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> n;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) {</span><br><span class="line">            <span class="keyword">if</span> (cArr[left] == cArr[right]) {</span><br><span class="line">                <span class="type">char</span> <span class="variable">curDup</span> <span class="operator">=</span> cArr[left];</span><br><span class="line">                <span class="keyword">while</span> (left &lt;= right &amp;&amp; cArr[left] == curDup) {</span><br><span class="line">                    left++;</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">while</span> (right &gt;= <span class="number">0</span> &amp;&amp; left &lt;= right &amp;&amp; cArr[right] == curDup) {</span><br><span class="line">                    right--;</span><br><span class="line">                }</span><br><span class="line">                <span class="comment">// System.out.println(left + " " + right);</span></span><br><span class="line">                min = Math.min(min, right - left + <span class="number">1</span>);</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> min;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="2730-找到最长的半重复子字符串-1502"><a href="#2730-找到最长的半重复子字符串-1502" class="headerlink" title="2730. 找到最长的半重复子字符串 - 1502"></a><a href="https://leetcode.cn/problems/find-the-longest-semi-repetitive-substring/">2730. 找到最长的半重复子字符串</a> - 1502</h2><p>滑动窗口:</p><p>当出现重复次数 &gt; 1时，缩短窗口</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">longestSemiRepetitiveSubstring</span><span class="params">(String s)</span> {</span><br><span class="line">        <span class="type">char</span>[] cArr = s.toCharArray();</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">sameCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> <span class="number">1</span>; right &lt; n; right++) {</span><br><span class="line">            <span class="keyword">if</span> (cArr[right] == cArr[right - <span class="number">1</span>]) {</span><br><span class="line">                sameCount++;</span><br><span class="line">                <span class="keyword">if</span> (sameCount &gt; <span class="number">1</span>) {</span><br><span class="line">                    left += <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">while</span> (left &lt; right &amp;&amp; cArr[left] != cArr[left - <span class="number">1</span>]) {</span><br><span class="line">                        left++;</span><br><span class="line">                    }</span><br><span class="line">                    sameCount--;</span><br><span class="line">                }</span><br><span class="line">            } </span><br><span class="line">            max = Math.max(max, right - left + <span class="number">1</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="2708-一个小组的最大实力值-1502"><a href="#2708-一个小组的最大实力值-1502" class="headerlink" title="2708. 一个小组的最大实力值 - 1502"></a><a href="https://leetcode.cn/problems/maximum-strength-of-a-group/">2708. 一个小组的最大实力值</a> - 1502</h2><p>由于数据规模比较小，可以直接爆搜：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="type">int</span>[] nums;</span><br><span class="line">    <span class="type">long</span> <span class="variable">max</span> <span class="operator">=</span> -<span class="number">10</span>;</span><br><span class="line">    LinkedList&lt;Integer&gt; ls = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">maxStrength</span><span class="params">(<span class="type">int</span>[] nums)</span> {</span><br><span class="line">        n = nums.length;</span><br><span class="line">        <span class="built_in">this</span>.nums = nums;</span><br><span class="line">        dfs(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 选或不选</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> idx)</span> {</span><br><span class="line">        <span class="keyword">if</span> (idx == n) {</span><br><span class="line">            <span class="keyword">if</span> (ls.size() == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">            <span class="type">long</span> <span class="variable">curMax</span> <span class="operator">=</span> ls.get(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; ls.size(); i++) {</span><br><span class="line">                curMax *= ls.get(i);</span><br><span class="line">            }</span><br><span class="line">            max = Math.max(max, curMax);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 不选当前数</span></span><br><span class="line">        dfs(idx + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 选择当前数</span></span><br><span class="line">        ls.add(nums[idx]);</span><br><span class="line">        dfs(idx + <span class="number">1</span>);</span><br><span class="line">        ls.removeLast();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><em>O(n)</em>: 每一次都取当前的最大和最小，最小的可能是负数，负数和负数相乘能得到一个正数</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">maxStrength</span><span class="params">(<span class="type">int</span>[] nums)</span> {</span><br><span class="line">        <span class="type">long</span> <span class="variable">max</span> <span class="operator">=</span> nums[<span class="number">0</span>];</span><br><span class="line">        <span class="type">long</span> <span class="variable">min</span> <span class="operator">=</span> nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; nums.length; i++) {</span><br><span class="line">            <span class="type">long</span> <span class="variable">temp</span> <span class="operator">=</span> max;</span><br><span class="line">            max = Math.max(max, Math.max(nums[i], Math.max(min * nums[i], max * nums[i])));</span><br><span class="line">            min = Math.min(min, Math.min(nums[i], Math.min(min * nums[i], temp * nums[i])));</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="2358-分组的最大数量-1503"><a href="#2358-分组的最大数量-1503" class="headerlink" title="2358. 分组的最大数量 - 1503"></a><a href="https://leetcode.cn/problems/maximum-number-of-groups-entering-a-competition/">2358. 分组的最大数量</a> - 1503</h2><p>这是一道数学题：</p><p>排序之后分组</p><p>第一组一个数，第二组两个数，第三组三个数… </p><p>那么一定满足要求：</p><ul><li>第 <code>i</code> 个分组中的学生总成绩 <strong>小于</strong> 第 <code>(i + 1)</code> 个分组中的学生总成绩，对所有组均成立（除了最后一组）。</li><li>第 <code>i</code> 个分组中的学生总数 <strong>小于</strong> 第 <code>(i + 1)</code> 个分组中的学生总数，对所有组均成立（除了最后一组）</li></ul><p>这是因为 </p><p>假设 <code>排序后</code>分组：</p><p>a | b, c | d, e, f | …</p><p>a &lt; b &lt; c &lt; d &lt; e &lt; f</p><p>则有</p><p>b + c &lt;= d + e</p><p>因此两个条件都可以满足</p><p>是用数学公式：</p><p>1 + 2 + 3 + … + x &lt;= n</p><p>(1 + x) * x / 2 &lt;= n</p><p>x + x^2 - 2n &lt;= 0</p><p>解一元二次方程</p><p>x^2 + x - 2n &lt;= 0</p><p>(-b + sqrt(b^2 - 4ac)) / 2</p><p>向下取整 因此 x 为：</p><p><code>(-1 + (int) Math.sqrt((double) (1 + 8 * grades.length))) / 2</code></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maximumGroups</span><span class="params">(<span class="type">int</span>[] grades)</span> {</span><br><span class="line">        <span class="comment">// 数学证明 + 贪心</span></span><br><span class="line">        <span class="keyword">return</span> (-<span class="number">1</span> + (<span class="type">int</span>) Math.sqrt((<span class="type">double</span>) (<span class="number">1</span> + <span class="number">8</span> * grades.length))) / <span class="number">2</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="2661-找出叠涂元素-1503"><a href="#2661-找出叠涂元素-1503" class="headerlink" title="2661. 找出叠涂元素 - 1503"></a><a href="https://leetcode.cn/problems/first-completely-painted-row-or-column/">2661. 找出叠涂元素</a> - 1503</h2><p>预处理行列，将每一个数代表的位置存储在哈希表中，在遍历<code>arr</code>的过程中快速找到对应行列从而使用<code>行列计算数组</code>「rowCnt」「Colnt」更新来快速找到重叠的元素，第一次碰到的元素一定是下标最小的， 注意m和n <code>rowCnt[x] &gt;= n || colCnt[y] &gt;= m</code></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">firstCompleteIndex</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span>[][] mat)</span> {</span><br><span class="line">        Map&lt;Integer, <span class="type">int</span>[]&gt; hm = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> mat.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> mat[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) {</span><br><span class="line">                hm.put(mat[i][j], <span class="keyword">new</span> <span class="title class_">int</span>[]{i, j});</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[] rowCnt = <span class="keyword">new</span> <span class="title class_">int</span>[m];</span><br><span class="line">        <span class="type">int</span>[] colCnt = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) {</span><br><span class="line">            <span class="type">int</span>[] xy = hm.get(arr[i]);</span><br><span class="line">            <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> xy[<span class="number">0</span>], y = xy[<span class="number">1</span>];</span><br><span class="line">            rowCnt[x]++;</span><br><span class="line">            colCnt[y]++;</span><br><span class="line">            <span class="comment">// System.out.println(x + " " + y + " " + rowCnt[x] + " " + colCnt[y]);</span></span><br><span class="line">            <span class="keyword">if</span> (rowCnt[x] &gt;= n || colCnt[y] &gt;= m) {</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="1461-检查一个字符串是否包含所有长度为-K-的二进制子串-1504"><a href="#1461-检查一个字符串是否包含所有长度为-K-的二进制子串-1504" class="headerlink" title="1461. 检查一个字符串是否包含所有长度为 K 的二进制子串 - 1504"></a><a href="https://leetcode.cn/problems/check-if-a-string-contains-all-binary-codes-of-size-k/">1461. 检查一个字符串是否包含所有长度为 K 的二进制子串</a> - 1504</h2><ul><li><p>核心在于：</p><ul><li>如何快速查找子串<ul><li>哈希表</li></ul></li><li>以及长度为k可以形成的二进制字符串<ul><li>出现在哈希表中的个数 == (1 &lt;&lt; k) aka 2^k</li></ul></li></ul></li><li><p>滑动窗口优化：</p></li></ul><p><img src="/posts/Re-%E4%BB%8E1500%E5%88%86%E5%BC%80%E5%A7%8B%E7%9A%84%E7%AB%9E%E8%B5%9B%E7%94%9F%E6%B4%BB/1461%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E4%BC%98%E5%8C%96.png" alt="1461滑动窗口优化"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasAllCodes</span><span class="params">(String s, <span class="type">int</span> k)</span> {</span><br><span class="line">        <span class="keyword">if</span> (s.length() &lt; (<span class="number">1</span> &lt;&lt; k) + k - <span class="number">1</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        }</span><br><span class="line">        Set&lt;Integer&gt; appeared = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> Integer.parseInt(s.substring(<span class="number">0</span>, k), <span class="number">2</span>);</span><br><span class="line">        appeared.add(num);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i + k &lt;= s.length(); i++) {</span><br><span class="line">            num = (num - ((s.charAt(i - <span class="number">1</span>) - <span class="string">'0'</span>) &lt;&lt; (k - <span class="number">1</span>))) * <span class="number">2</span> + s.charAt(i + k - <span class="number">1</span>) - <span class="string">'0'</span>;</span><br><span class="line">            appeared.add(num);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> appeared.size() == (<span class="number">1</span> &lt;&lt; k);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="2104-子数组范围和-1504"><a href="#2104-子数组范围和-1504" class="headerlink" title="2104. 子数组范围和 - 1504"></a><a href="https://leetcode.cn/problems/sum-of-subarray-ranges/">2104. 子数组范围和</a> - 1504</h2><p>暴力做法为 枚举左右端点，扫描区间，拿出来最大值最小值，计算，O(n^3) TLE 所以需要预处理：</p><h3 id="区间DP："><a href="#区间DP：" class="headerlink" title="区间DP："></a>区间DP：</h3><p>使用 <code>dp[l][r][1]</code>表示区间 [l, r] 的最大值，<code>dp[l][r][0]</code>表示区间[l,r]的最小值</p><p>初始化，<code>dp[i][i][0] </code>= <code>dp[i][i][1]</code> = <code>nums[i]</code>;</p><p>那么 <code>dp[l][r][1]</code> 为 <code>dp[l][r-1][1]</code> 和 当前 <code>nums[r]</code> 比较得到<code>较大值</code></p><p>那么 <code>dp[l][r][0]</code> 为 <code>dp[l][r-1][0]</code> 和 当前 <code>nums[r]</code> 比较得到<code>较小值</code></p><p>计算汇总答案：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">subArrayRanges</span><span class="params">(<span class="type">int</span>[] nums)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span>[][][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n][n][<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">            dp[i][i][<span class="number">0</span>] = dp[i][i][<span class="number">1</span>] = nums[i];</span><br><span class="line">        }</span><br><span class="line">        <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (l &lt; n) {</span><br><span class="line">            <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (l + len &lt; n) {</span><br><span class="line">                <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> l + len;</span><br><span class="line">                dp[l][r][<span class="number">0</span>] = Math.min(dp[l][r - <span class="number">1</span>][<span class="number">0</span>], nums[r]);</span><br><span class="line">                dp[l][r][<span class="number">1</span>] = Math.max(dp[l][r - <span class="number">1</span>][<span class="number">1</span>], nums[r]);</span><br><span class="line">                len++;</span><br><span class="line">            }</span><br><span class="line">            l++;</span><br><span class="line">        }</span><br><span class="line">        <span class="type">long</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; n; j++) {</span><br><span class="line">                ans += dp[i][j][<span class="number">1</span>] - dp[i][j][<span class="number">0</span>];</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="空间优化："><a href="#空间优化：" class="headerlink" title="空间优化："></a>空间优化：</h3><h3 id="单调栈："><a href="#单调栈：" class="headerlink" title="单调栈："></a>单调栈：</h3><h2 id="2527-查询数组-Xor-美丽值-1550"><a href="#2527-查询数组-Xor-美丽值-1550" class="headerlink" title="2527. 查询数组 Xor 美丽值 - 1550"></a><a href="https://leetcode.cn/problems/find-xor-beauty-of-array/">2527. 查询数组 Xor 美丽值</a> - 1550</h2><p>位运算题目，涉及到详细的数学证明：</p><blockquote><p>参考<br>作者：我爱志方小姐<br>链接：<a href="https://leetcode.cn/problems/find-xor-beauty-of-array/">https://leetcode.cn/problems/find-xor-beauty-of-array/</a></p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(a | a) &amp; a     (b | a) &amp; a     (c | a) &amp; a</span><br><span class="line">(a | a) &amp; b     (b | a) &amp; b     (c | a) &amp; b</span><br><span class="line">(a | a) &amp; c     (b | a) &amp; c     (c | a) &amp; c</span><br><span class="line"></span><br><span class="line">(a | b) &amp; a     (b | b) &amp; a     (c | b) &amp; a</span><br><span class="line">(a | b) &amp; b     (b | b) &amp; b     (c | b) &amp; b</span><br><span class="line">(a | b) &amp; c     (b | b) &amp; c     (c | b) &amp; c</span><br><span class="line"></span><br><span class="line">(a | c) &amp; a     (b | c) &amp; a     (c | c) &amp; a</span><br><span class="line">(a | c) &amp; b     (b | c) &amp; b     (c | c) &amp; b</span><br><span class="line">(a | c) &amp; c     (b | c) &amp; c     (c | c) &amp; c</span><br></pre></td></tr></tbody></table></figure><p>根据 按位或 的 对称性，即 x | y = y | x，我们不难发现上面的分块矩阵是一个 对称矩阵，也就是说所有元素的 异或 等于对角线元素的 异或，我们保留 对角线元素(块)，得到如下 3 x 3 矩阵：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(a | a) &amp; a     (b | b) &amp; a     (c | c) &amp; a</span><br><span class="line">(a | a) &amp; b     (b | b) &amp; b     (c | c) &amp; b</span><br><span class="line">(a | a) &amp; c     (b | b) &amp; c     (c | c) &amp; c</span><br></pre></td></tr></tbody></table></figure><p>由于 <code>a | a = a</code>, <code>a &amp; a = a</code>，我们将上面的矩阵再化简一下，有：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">  a       b &amp; a     c &amp; a</span><br><span class="line">a &amp; b       b       c &amp; b</span><br><span class="line">a &amp; c     b &amp; c       c</span><br></pre></td></tr></tbody></table></figure><p>再根据 <code>按位与</code> 运算的 <code>对称性</code>，即 <code>x &amp; y = y &amp; x</code>，我们不难发现，这又是一个 <code>对称矩阵</code>，所有元素的 <code>异或</code> 等于对角线元素的 <code>异或</code>，即：</p><p><code>a ^ b ^ c</code></p><p>因此，我们有如下结论：</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nums 的 <span class="keyword">xor</span> 美丽值即为 nums 所有元素的异或值。</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">xorBeauty</span><span class="params">(<span class="type">int</span>[] nums)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> Arrays.stream(nums).reduce(<span class="number">0</span>, (sub, cur) -&gt; sub ^ cur);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="2780-合法分割的最小下标-1550"><a href="#2780-合法分割的最小下标-1550" class="headerlink" title="2780. 合法分割的最小下标 - 1550"></a><a href="https://leetcode.cn/problems/minimum-index-of-a-valid-split/">2780. 合法分割的最小下标</a> - 1550</h2><p>方法1：两个哈希表</p><p>一个哈希表记录每一个元素的总数，一个哈希表记录当前遍历过程中出现的元素次数</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minimumIndex</span><span class="params">(List&lt;Integer&gt; nums)</span> {</span><br><span class="line">        Map&lt;Integer, Integer&gt; hmAll = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) {</span><br><span class="line">            hmAll.put(num, hmAll.getOrDefault(num, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">        }</span><br><span class="line">        Map&lt;Integer, Integer&gt; hmCur = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.size(); i++) {</span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> nums.get(i);</span><br><span class="line">            hmCur.put(num, hmCur.getOrDefault(num, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (hmCur.get(num) * <span class="number">2</span> &gt; i + <span class="number">1</span> &amp;&amp; (hmAll.get(num) - hmCur.get(num)) * <span class="number">2</span> &gt; nums.size() - i - <span class="number">1</span>) {</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>方法2：数学推理 + 摩尔投票 </p><p><strong>证明</strong>：分割出的两个数组的支配元素就是原数组的支配元素。</p><p>分割出的两个数组的支配元素就是原数组的支配元素。</p><p>设这两个数组的支配元素为 y（题目要求支配元素相同），那么对于第一个数组有</p><p><code>freq_1(y) * 2 &gt; i+1</code></p><p>对于第二个数组有</p><p><code>freq_2(y) * 2 &gt; n - i - 1</code></p><p>由于这两个数组合并之后就是原数组，所以</p><p><code>freq(y) * 2 = freq_1(y) * 2 + freq_2(y) * 2 &gt; (i+1) + (n-i-1) = n</code></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minimumIndex</span><span class="params">(List&lt;Integer&gt; nums)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">mode</span> <span class="operator">=</span> mooreVote(nums);</span><br><span class="line">        <span class="type">int</span> <span class="variable">modeTot</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) {</span><br><span class="line">            <span class="keyword">if</span> (num == mode) modeTot++; </span><br><span class="line">        }</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.size();</span><br><span class="line">        <span class="type">int</span> <span class="variable">modeCnt</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> nums.get(i);</span><br><span class="line">            <span class="keyword">if</span> (num == mode) modeCnt++;</span><br><span class="line">            <span class="keyword">if</span> (modeCnt * <span class="number">2</span> &gt; i + <span class="number">1</span> &amp;&amp; (modeTot - modeCnt) * <span class="number">2</span> &gt; n - <span class="number">1</span> - i) {</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">mooreVote</span><span class="params">(List&lt;Integer&gt; nums)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> nums.get(<span class="number">0</span>), cnt = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; nums.size(); i++) {</span><br><span class="line">            <span class="keyword">if</span> (x != nums.get(i)) {</span><br><span class="line">                cnt -= <span class="number">1</span>;</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                cnt++;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (cnt == <span class="number">0</span>) {</span><br><span class="line">                x = nums.get(i);</span><br><span class="line">                cnt = <span class="number">1</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="type">int</span> <span class="variable">countX</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) {</span><br><span class="line">            <span class="keyword">if</span> (num == x) {</span><br><span class="line">                countX++;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (countX &gt; nums.size() / <span class="number">2</span>) <span class="keyword">return</span> x;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="1600-1900"><a href="#1600-1900" class="headerlink" title="1600 - 1900"></a>1600 - 1900</h1><h2 id="2316-统计无向图中无法互相到达点对数-1604"><a href="#2316-统计无向图中无法互相到达点对数-1604" class="headerlink" title="2316. 统计无向图中无法互相到达点对数 - 1604"></a><a href="https://leetcode.cn/problems/count-unreachable-pairs-of-nodes-in-an-undirected-graph/">2316. 统计无向图中无法互相到达点对数</a> - 1604</h2><p>自我认为一道非常好的题，可以使用DFS，并查集来解题：</p><p>一开始尝试使用了DFS枚举然后去除，暴力超时</p><p>后采用并查集，通过计算乘法原理 O(N^2)</p><p>进行数学优化，直接相乘除二即可，O(N + M)</p><blockquote><a href="/posts/%E5%B9%B6%E6%9F%A5%E9%9B%86/" title="并查集">并查集</a></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    LinkedList&lt;LinkedList&lt;Integer&gt;&gt; go = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">UF</span> {</span><br><span class="line">        <span class="type">int</span> count;</span><br><span class="line">        <span class="type">int</span>[] parent;</span><br><span class="line">        <span class="type">int</span>[] size;</span><br><span class="line">        UF(<span class="type">int</span> n) {</span><br><span class="line">            <span class="built_in">this</span>.count = n;</span><br><span class="line">            <span class="built_in">this</span>.parent = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">            <span class="built_in">this</span>.size = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">                parent[i] = i;</span><br><span class="line">                <span class="built_in">this</span>.size[i] = <span class="number">1</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">union</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> q)</span> {</span><br><span class="line">            <span class="type">int</span> <span class="variable">rootP</span> <span class="operator">=</span> find(p);</span><br><span class="line">            <span class="type">int</span> <span class="variable">rootQ</span> <span class="operator">=</span> find(q);</span><br><span class="line">            <span class="keyword">if</span> (rootP == rootQ) <span class="keyword">return</span>;</span><br><span class="line">            parent[rootQ] = rootP;</span><br><span class="line">            size[rootP] += size[rootQ]; <span class="comment">// 相当于把 rooQ 的parent指定为rootP, 所以rootP的size需要加上rootQ的size</span></span><br><span class="line">            count--;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span> cur)</span> {</span><br><span class="line">            <span class="keyword">if</span> (parent[cur] != cur) {</span><br><span class="line">                parent[cur] = find(parent[cur]);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">return</span> parent[cur];</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">countPairs</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span>[][] edges)</span> {</span><br><span class="line">        <span class="type">UF</span> <span class="variable">uf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UF</span>(n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">            go.addLast(<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;());</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; edges.length; i++) {</span><br><span class="line">            <span class="type">int</span> <span class="variable">from</span> <span class="operator">=</span> edges[i][<span class="number">0</span>], to = edges[i][<span class="number">1</span>];</span><br><span class="line">            uf.union(from, to);</span><br><span class="line">        }</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Set&lt;Integer&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">            <span class="type">int</span> <span class="variable">p</span> <span class="operator">=</span> uf.find(i);</span><br><span class="line">            <span class="keyword">if</span> (!set.contains(p)) list.add(uf.size[p]);</span><br><span class="line">            set.add(p);</span><br><span class="line">        }</span><br><span class="line">        <span class="type">long</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> ele : list) {</span><br><span class="line">            res += (<span class="type">long</span>) ele * (n - ele);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> res / <span class="number">2</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="1900-2100"><a href="#1900-2100" class="headerlink" title="1900 - 2100"></a>1900 - 2100</h1><h2 id="2919-使数组变美的最小增量运算数-2031"><a href="#2919-使数组变美的最小增量运算数-2031" class="headerlink" title="2919. 使数组变美的最小增量运算数 - 2031"></a><a href="https://leetcode.cn/problems/minimum-increment-operations-to-make-array-beautiful/">2919. 使数组变美的最小增量运算数</a> - 2031</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="type">long</span>[][] memo;</span><br><span class="line">    <span class="type">int</span>[] nums;</span><br><span class="line">    <span class="type">int</span> k;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">minIncrementOperations</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> {</span><br><span class="line">        <span class="comment">// int n = nums.length;</span></span><br><span class="line">        <span class="comment">// this.k = k;</span></span><br><span class="line">        <span class="comment">// memo = new long[n][3];</span></span><br><span class="line">        <span class="comment">// this.nums = nums;</span></span><br><span class="line">        <span class="comment">// for (long[] m : memo) {</span></span><br><span class="line">        <span class="comment">//     Arrays.fill(m, -1);</span></span><br><span class="line">        <span class="comment">// }</span></span><br><span class="line">        <span class="comment">// return dp(n - 1, 0);</span></span><br><span class="line">        <span class="comment">// 1:1 翻译成 递推</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">long</span>[][] dp = <span class="keyword">new</span> <span class="title class_">long</span>[n + <span class="number">1</span>][<span class="number">3</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) {</span><br><span class="line">                <span class="type">long</span> <span class="variable">select</span> <span class="operator">=</span> dp[i][<span class="number">0</span>] + Math.max(k - nums[i], <span class="number">0</span>);</span><br><span class="line">                <span class="type">long</span> <span class="variable">notSelect</span> <span class="operator">=</span> Long.MAX_VALUE;</span><br><span class="line">                <span class="keyword">if</span> (j &lt; <span class="number">2</span>) {</span><br><span class="line">                    notSelect = dp[i][j + <span class="number">1</span>];</span><br><span class="line">                }</span><br><span class="line">                dp[i + <span class="number">1</span>][j] = Math.min(select, notSelect);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> dp[n][<span class="number">0</span>];</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> <span class="title function_">dp</span><span class="params">(<span class="type">int</span> idx, <span class="type">int</span> left)</span> {</span><br><span class="line">        <span class="keyword">if</span> (idx &lt; <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (memo[idx][left] != -<span class="number">1</span>) <span class="keyword">return</span> memo[idx][left];</span><br><span class="line">        <span class="comment">// 选</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">res</span> <span class="operator">=</span> dp(idx - <span class="number">1</span>, <span class="number">0</span>) + Math.max(k - nums[idx], <span class="number">0</span>);</span><br><span class="line">        <span class="comment">// 不选</span></span><br><span class="line">        <span class="keyword">if</span> (left &lt; <span class="number">2</span>) {</span><br><span class="line">            res = Math.min(res, dp(idx - <span class="number">1</span>, left + <span class="number">1</span>));</span><br><span class="line">        }</span><br><span class="line">        memo[idx][left] = res;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <summary type="html">记录下为了周赛的难度练习</summary>
    
    
    
    <category term="Algorithms" scheme="http://ruobingw.com/categories/Algorithms/"/>
    
    
    <category term="周赛" scheme="http://ruobingw.com/tags/%E5%91%A8%E8%B5%9B/"/>
    
    <category term="难度练习" scheme="http://ruobingw.com/tags/%E9%9A%BE%E5%BA%A6%E7%BB%83%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>最长公共子序列</title>
    <link href="http://ruobingw.com/posts/%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E5%BA%8F%E5%88%97/"/>
    <id>http://ruobingw.com/posts/%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E5%BA%8F%E5%88%97/</id>
    <published>2023-10-05T22:43:02.000Z</published>
    <updated>2024-05-15T04:17:52.586Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>对于两个字符串求子序列的问题，都是用两个指针 <code>i</code> 和 <code>j</code> 分别在两个字符串上移动，大概率是动态规划思路</strong>。</p><p><a href="https://labuladong.github.io/algo/di-er-zhan-a01c6/zi-xu-lie--6bc09/jing-dian--93b6b/">labuladong-最长公共子序列</a></p></blockquote><h1 id="相关题目"><a href="#相关题目" class="headerlink" title="相关题目"></a>相关题目</h1><p><a href="https://leetcode.cn/problems/longest-common-subsequence/">1143. 最长公共子序列</a></p><p><a href="https://leetcode.cn/problems/delete-operation-for-two-strings/">583. 两个字符串的删除操作</a></p><p><a href="https://leetcode.cn/problems/minimum-ascii-delete-sum-for-two-strings/">712. 两个字符串的最小ASCII删除和</a></p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>定义<code>dp(s1, i, s2, j)</code>为<code>s1[i...]</code> 和 <code>s2[j...]</code>的最长公共子序列长度</p><p>goal: <code>dp(s1, 0, s2, 0)</code> 从零开始的最长公共子序列长度</p><p>base case: <code>i == len(s1)</code> 或 <code>j == len(s2)</code> 由于相当于没有string，所以最长公共子序列长度为0</p><p>状态转移：</p><p>在选的情况下，即charAt[i] == charAt[j]时，状态转移：</p><p><img src="/posts/%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E5%BA%8F%E5%88%97/%E7%8A%B6%E6%80%81%E8%BD%AC%E7%A7%BB_%E9%80%89.jpeg" alt="状态转移_选"></p><p>在不选的情况下可以从三种情况转移：</p><p><img src="/posts/%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E5%BA%8F%E5%88%97/%E7%8A%B6%E6%80%81%E8%BD%AC%E7%A7%BB_%E4%B8%8D%E9%80%89.jpeg" alt="状态转移"></p><p><strong>但是其实只有情况一和情况二，因为情况三被情况一cover了</strong></p><h1 id="1143-最长公共子序列"><a href="#1143-最长公共子序列" class="headerlink" title="1143. 最长公共子序列"></a><a href="https://leetcode.cn/problems/longest-common-subsequence/">1143. 最长公共子序列</a></h1><p>模板题</p><p>代码：</p><p>自顶向下的递归解法：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    String text1, text2;</span><br><span class="line">    <span class="type">int</span> m, n;</span><br><span class="line">    <span class="type">int</span>[][] memo;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">longestCommonSubsequence</span><span class="params">(String text1, String text2)</span> {</span><br><span class="line">        m = text1.length();</span><br><span class="line">        n = text2.length();</span><br><span class="line">        <span class="comment">// 初始化 memo 为了消除重复子问题</span></span><br><span class="line">        memo = <span class="keyword">new</span> <span class="title class_">int</span>[m][n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) {</span><br><span class="line">            Arrays.fill(memo[i], -<span class="number">1</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">this</span>.text1 = text1;</span><br><span class="line">        <span class="built_in">this</span>.text2 = text2;</span><br><span class="line">        <span class="keyword">return</span> dp(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">dp</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> {</span><br><span class="line">        <span class="keyword">if</span> (i == m || j == n) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (memo[i][j] != -<span class="number">1</span>) <span class="keyword">return</span> memo[i][j];</span><br><span class="line">        <span class="keyword">if</span> (text1.charAt(i) == text2.charAt(j)) {</span><br><span class="line">            memo[i][j] = dp(i + <span class="number">1</span>, j + <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            memo[i][j] = Math.max(</span><br><span class="line">                dp(i + <span class="number">1</span>, j),</span><br><span class="line">                dp(i, j + <span class="number">1</span>)</span><br><span class="line">            );</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> memo[i][j];</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>自底向上的迭代解法：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">longestCommonSubsequence</span><span class="params">(String s1, String s2)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> s1.length(), n = s2.length();</span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[m + <span class="number">1</span>][n + <span class="number">1</span>];</span><br><span class="line">        <span class="comment">// 定义：s1[0..i-1] 和 s2[0..j-1] 的 lcs 长度为 dp[i][j]</span></span><br><span class="line">        <span class="comment">// 目标：s1[0..m-1] 和 s2[0..n-1] 的 lcs 长度，即 dp[m][n]</span></span><br><span class="line">        <span class="comment">// base case: dp[0][..] = dp[..][0] = 0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= m; i++) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= n; j++) {</span><br><span class="line">                <span class="comment">// 现在 i 和 j 从 1 开始，所以要减一</span></span><br><span class="line">                <span class="keyword">if</span> (s1.charAt(i - <span class="number">1</span>) == s2.charAt(j - <span class="number">1</span>)) {</span><br><span class="line">                    <span class="comment">// s1[i-1] 和 s2[j-1] 必然在 lcs 中</span></span><br><span class="line">                    dp[i][j] = <span class="number">1</span> + dp[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    <span class="comment">// s1[i-1] 和 s2[j-1] 至少有一个不在 lcs 中</span></span><br><span class="line">                    dp[i][j] = Math.max(dp[i][j - <span class="number">1</span>], dp[i - <span class="number">1</span>][j]);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dp[m][n];</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="583-两个字符串的删除操作"><a href="#583-两个字符串的删除操作" class="headerlink" title="583. 两个字符串的删除操作"></a><a href="https://leetcode.cn/problems/delete-operation-for-two-strings/">583. 两个字符串的删除操作</a></h1><p>变换一下思路，我们要的就是让他们成为他们的公共子序列，问的是需要到达公共子序列所需要的步数:</p><p>即 <code>word1.length - LCS.length + word2.length - LCS.length</code></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    String word1, word2;</span><br><span class="line">    <span class="type">int</span> m, n;</span><br><span class="line">    <span class="type">int</span>[][] memo;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minDistance</span><span class="params">(String word1, String word2)</span> {</span><br><span class="line">        m = word1.length();</span><br><span class="line">        n = word2.length();</span><br><span class="line">        <span class="comment">// 初始化 memo 为了消除重复子问题</span></span><br><span class="line">        memo = <span class="keyword">new</span> <span class="title class_">int</span>[m][n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) {</span><br><span class="line">            Arrays.fill(memo[i], -<span class="number">1</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">this</span>.word1 = word1;</span><br><span class="line">        <span class="built_in">this</span>.word2 = word2;</span><br><span class="line">        <span class="type">int</span> <span class="variable">lcsLength</span> <span class="operator">=</span> dp(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> (m - lcsLength) + (n - lcsLength);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">dp</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> {</span><br><span class="line">        <span class="keyword">if</span> (i == m || j == n) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (memo[i][j] != -<span class="number">1</span>) <span class="keyword">return</span> memo[i][j];</span><br><span class="line">        <span class="keyword">if</span> (word1.charAt(i) == word2.charAt(j)) {</span><br><span class="line">            memo[i][j] = dp(i + <span class="number">1</span>, j + <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            memo[i][j] = Math.max(</span><br><span class="line">                dp(i + <span class="number">1</span>, j),</span><br><span class="line">                dp(i, j + <span class="number">1</span>)</span><br><span class="line">            );</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> memo[i][j];</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;对于两个字符串求子序列的问题，都是用两个指针 &lt;code&gt;i&lt;/code&gt; 和 &lt;code&gt;j&lt;/code&gt; 分别在两个字符串上移动，大概率是动态规划思路&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://labu</summary>
      
    
    
    
    <category term="Algorithms" scheme="http://ruobingw.com/categories/Algorithms/"/>
    
    
    <category term="动态规划" scheme="http://ruobingw.com/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    <category term="dp" scheme="http://ruobingw.com/tags/dp/"/>
    
    <category term="LCS" scheme="http://ruobingw.com/tags/LCS/"/>
    
  </entry>
  
  <entry>
    <title>排序</title>
    <link href="http://ruobingw.com/posts/%E6%8E%92%E5%BA%8F/"/>
    <id>http://ruobingw.com/posts/%E6%8E%92%E5%BA%8F/</id>
    <published>2023-10-04T16:24:09.000Z</published>
    <updated>2024-05-15T04:17:52.587Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1029-两地调度"><a href="#1029-两地调度" class="headerlink" title="1029. 两地调度"></a><a href="https://leetcode.cn/problems/two-city-scheduling/">1029. 两地调度</a></h1><p>解题思路：贪心 + 排序</p><p>怎么贪：</p><p>培养一个思维：我们不是单独拿一个城市，而是假设所有面试者都去B，那么挑出来去A的应该是代价最小的即按照 <code>cost[i][0] - cost[i][1]</code> 排升序</p><p>也就是 <code>cost[a][0] - cost[a][1] - (cost[b][0] - cost[b][1]) </code> </p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">twoCitySchedCost</span><span class="params">(<span class="type">int</span>[][] costs)</span> {</span><br><span class="line">        Arrays.sort(costs, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;<span class="type">int</span>[]&gt;(){</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(<span class="type">int</span>[] o1, <span class="type">int</span>[] o2)</span> {</span><br><span class="line">                <span class="keyword">return</span> o1[<span class="number">0</span>] - o1[<span class="number">1</span>] - (o2[<span class="number">0</span>] - o2[<span class="number">1</span>]);</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> costs.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">splitN</span> <span class="operator">=</span> n / <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">aSum</span> <span class="operator">=</span> <span class="number">0</span>, bSum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (; i &lt; splitN; i++) {</span><br><span class="line">            aSum += costs[i][<span class="number">0</span>];</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">for</span> (; i &lt; n; i++) {</span><br><span class="line">            bSum += costs[i][<span class="number">1</span>];</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> aSum + bSum;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <summary type="html">涉及排序解法的题目集合</summary>
    
    
    
    <category term="Algorithms" scheme="http://ruobingw.com/categories/Algorithms/"/>
    
    
    <category term="数组" scheme="http://ruobingw.com/tags/%E6%95%B0%E7%BB%84/"/>
    
    <category term="Array" scheme="http://ruobingw.com/tags/Array/"/>
    
    <category term="Sort" scheme="http://ruobingw.com/tags/Sort/"/>
    
    <category term="排序" scheme="http://ruobingw.com/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>Basic-Calculator-Topics</title>
    <link href="http://ruobingw.com/posts/Basic-Calculator-Topics/"/>
    <id>http://ruobingw.com/posts/Basic-Calculator-Topics/</id>
    <published>2023-10-03T23:51:58.000Z</published>
    <updated>2024-05-15T04:17:52.545Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://labuladong.github.io/algo/di-san-zha-24031/jing-dian--a94a0/ru-he-shi--24fe4/">Labuladong-实现基础计算器</a></p></blockquote><table><thead><tr><th><a href="https://leetcode.cn/problems/basic-calculator/">224. 基本计算器</a></th></tr></thead><tbody><tr><td><a href="https://leetcode.cn/problems/basic-calculator-ii/">227. 基本计算器 II</a></td></tr><tr><td><a href="https://leetcode.cn/problems/basic-calculator-iii/">772. 基本计算器 III</a></td></tr></tbody></table><p>主要借助栈（加减乘除） + 递归（括号）</p><p>加一个<code>preSign '+'</code></p><p>即：</p><p><code>+</code> <code>-</code> 数 直接入栈</p><p><code>* /</code> 借用栈的性质，将计算结果入栈</p><p><code>(</code> <code>)</code> 使用递归先计算括号内的数，将结果入栈</p><p><img src="/posts/Basic-Calculator-Topics/Basic-Calculator-push-stack-1.jpeg" alt="Basic-Calculator-push-stack-1"></p><h1 id="227-基本计算器-II"><a href="#227-基本计算器-II" class="headerlink" title="227. 基本计算器 II"></a><a href="https://leetcode.cn/problems/basic-calculator-ii/">227. 基本计算器 II</a></h1><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">calculate</span><span class="params">(String s)</span> {</span><br><span class="line">        Stack&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;Integer&gt;();</span><br><span class="line">        <span class="type">char</span>[] cArr = s.toCharArray();</span><br><span class="line">        <span class="keyword">if</span> (cArr.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">char</span> <span class="variable">sign</span> <span class="operator">=</span> <span class="string">'+'</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; cArr.length;) {</span><br><span class="line">            <span class="keyword">if</span> (Character.isDigit(cArr[i])) {</span><br><span class="line">                num = num * <span class="number">10</span> + (cArr[i] - <span class="string">'0'</span>);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> ((!Character.isDigit(cArr[i]) &amp;&amp; cArr[i] != <span class="string">' '</span>) || i == cArr.length - <span class="number">1</span>) {</span><br><span class="line">                <span class="keyword">if</span> (sign == <span class="string">'+'</span>) {</span><br><span class="line">                    stack.push(num);</span><br><span class="line">                } <span class="keyword">else</span> <span class="keyword">if</span> (sign == <span class="string">'-'</span>) {</span><br><span class="line">                    stack.push(-<span class="number">1</span> * num);</span><br><span class="line">                } <span class="keyword">else</span> <span class="keyword">if</span> (sign == <span class="string">'*'</span>) {</span><br><span class="line">                    <span class="type">int</span> <span class="variable">peek</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">                    stack.push(peek * num);</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    <span class="type">int</span> <span class="variable">peek</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">                    stack.push(peek / num);</span><br><span class="line">                }</span><br><span class="line">                sign = cArr[i];</span><br><span class="line">                num = <span class="number">0</span>;</span><br><span class="line">            }</span><br><span class="line">            i++;</span><br><span class="line">        }</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (!stack.isEmpty()) {</span><br><span class="line">            sum += stack.pop();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <summary type="html">基础计算器专题类问题</summary>
    
    
    
    <category term="Algorithms" scheme="http://ruobingw.com/categories/Algorithms/"/>
    
    
    <category term="计算器" scheme="http://ruobingw.com/tags/%E8%AE%A1%E7%AE%97%E5%99%A8/"/>
    
    <category term="Basic-Calculator" scheme="http://ruobingw.com/tags/Basic-Calculator/"/>
    
    <category term="Stack" scheme="http://ruobingw.com/tags/Stack/"/>
    
    <category term="数据结构" scheme="http://ruobingw.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>数组</title>
    <link href="http://ruobingw.com/posts/%E6%95%B0%E7%BB%84/"/>
    <id>http://ruobingw.com/posts/%E6%95%B0%E7%BB%84/</id>
    <published>2023-10-02T03:44:58.000Z</published>
    <updated>2024-05-15T04:17:52.587Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数组-Array"><a href="#数组-Array" class="headerlink" title="数组 - Array"></a>数组 - Array</h1><blockquote><ul><li><a href="/posts/%E5%8F%8C%E6%8C%87%E9%92%88/" title="双指针">双指针</a></li><li><a href="/posts/%E6%8E%92%E5%BA%8F/" title="排序">排序</a></li><li><a href="/posts/%E6%91%A9%E5%B0%94%E6%8A%95%E7%A5%A8/" title="摩尔投票">摩尔投票</a></li><li><a href="/posts/%E5%89%8D%E5%90%8E%E7%BC%80%E5%88%86%E8%A7%A3/" title="前后缀分解">前后缀分解</a></li></ul></blockquote><h1 id="57-插入区间"><a href="#57-插入区间" class="headerlink" title="57. 插入区间"></a><a href="https://leetcode.cn/problems/insert-interval/">57. 插入区间</a></h1><p>非常有意思的情况划分题：</p><blockquote><p>参考：<br><a href="https://leetcode.cn/problems/insert-interval/solutions/472435/shou-hua-tu-jie-57-cha-ru-qu-jian-fen-cheng-3ge-ji/">笨猪爆破组</a></p></blockquote><p>核心在于：</p><ol><li>推入前段不重叠部分</li><li>更新重叠部分再推入</li><li>推入后段不重叠部分</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[][] insert(<span class="type">int</span>[][] intervals, <span class="type">int</span>[] newInterval) {</span><br><span class="line">        List&lt;<span class="type">int</span>[]&gt; retList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> intervals.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">newLeft</span> <span class="operator">=</span> newInterval[<span class="number">0</span>], newRight = newInterval[<span class="number">1</span>];</span><br><span class="line">        <span class="comment">// 加入左边不重叠的</span></span><br><span class="line">        <span class="keyword">for</span> (; idx &lt; n; idx++) {</span><br><span class="line">            <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> intervals[idx][<span class="number">0</span>], right = intervals[idx][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (right &lt; newLeft) {</span><br><span class="line">                retList.add(<span class="keyword">new</span> <span class="title class_">int</span>[]{left, right});</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 更新重叠范围</span></span><br><span class="line">        <span class="keyword">for</span> (; idx &lt; n; idx++) {</span><br><span class="line">            <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> intervals[idx][<span class="number">0</span>], right = intervals[idx][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (left &gt; newRight) <span class="keyword">break</span>;</span><br><span class="line">            newLeft = Math.min(left, newLeft);</span><br><span class="line">            newRight = Math.max(right, newRight);</span><br><span class="line">        }</span><br><span class="line">        retList.add(<span class="keyword">new</span> <span class="title class_">int</span>[]{newLeft, newRight});</span><br><span class="line">        <span class="comment">// 加入右边不重叠部分</span></span><br><span class="line">        <span class="keyword">for</span> (; idx &lt; n; idx++) {</span><br><span class="line">            <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> intervals[idx][<span class="number">0</span>], right = intervals[idx][<span class="number">1</span>];</span><br><span class="line">            retList.add(<span class="keyword">new</span> <span class="title class_">int</span>[] {left, right});</span><br><span class="line">        }</span><br><span class="line">        <span class="type">int</span>[][] ret = <span class="keyword">new</span> <span class="title class_">int</span>[retList.size()][<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; ret.length; i++) {</span><br><span class="line">            ret[i] = retList.get(i);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="1366-通过投票对团队排名"><a href="#1366-通过投票对团队排名" class="headerlink" title="1366. 通过投票对团队排名"></a><a href="https://leetcode.cn/problems/rank-teams-by-votes/">1366. 通过投票对团队排名</a></h1><p>直接排序即可，主要检查对于Comparator的应用：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">rankTeams</span><span class="params">(String[] votes)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> votes.length, m = votes[<span class="number">0</span>].length();</span><br><span class="line">        Map&lt;Character, <span class="type">int</span>[]&gt; hm = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String vote : votes) {</span><br><span class="line">            <span class="type">char</span>[] cArr = vote.toCharArray();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) {</span><br><span class="line">                <span class="type">int</span>[] cur = hm.getOrDefault(cArr[i], <span class="keyword">new</span> <span class="title class_">int</span>[cArr.length]);</span><br><span class="line">                cur[i]++;</span><br><span class="line">                hm.put(cArr[i], cur);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        List&lt;Map.Entry&lt;Character, <span class="type">int</span>[]&gt;&gt; ls = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(hm.entrySet());</span><br><span class="line">        Collections.sort(ls, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Map.Entry&lt;Character, <span class="type">int</span>[]&gt;&gt;(){</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Map.Entry&lt;Character, <span class="type">int</span>[]&gt; e1, Map.Entry&lt;Character, <span class="type">int</span>[]&gt; e2)</span> {</span><br><span class="line">                <span class="type">Character</span> <span class="variable">e1Key</span> <span class="operator">=</span> e1.getKey();</span><br><span class="line">                <span class="type">Character</span> <span class="variable">e2Key</span> <span class="operator">=</span> e2.getKey();</span><br><span class="line">                <span class="type">int</span>[] e1Value = e1.getValue();</span><br><span class="line">                <span class="type">int</span>[] e2Value = e2.getValue();</span><br><span class="line">                <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> e1Value.length;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">                    <span class="type">int</span> <span class="variable">first</span> <span class="operator">=</span> e1Value[i], second = e2Value[i];</span><br><span class="line">                    <span class="keyword">if</span> (first == second) {</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    } <span class="keyword">else</span> {</span><br><span class="line">                        <span class="keyword">return</span> second - first;</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">return</span> e1Key - e2Key;</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Character, <span class="type">int</span>[]&gt; ele : ls) {</span><br><span class="line">            sb.append(ele.getKey());</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
    <summary type="html">涉及数组的题目集合</summary>
    
    
    
    <category term="Algorithms" scheme="http://ruobingw.com/categories/Algorithms/"/>
    
    
    <category term="数组" scheme="http://ruobingw.com/tags/%E6%95%B0%E7%BB%84/"/>
    
    <category term="Array" scheme="http://ruobingw.com/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>DataBricks</title>
    <link href="http://ruobingw.com/posts/DataBricks-%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/"/>
    <id>http://ruobingw.com/posts/DataBricks-%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/</id>
    <published>2023-09-19T17:27:48.000Z</published>
    <updated>2024-05-15T04:17:52.555Z</updated>
    
    <content type="html"><![CDATA[<div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>本篇文章援引：</p><blockquote><p>一亩三分地 - <a href="https://www.1point3acres.com/bbs/space-uid-764814.html">newgpu</a></p><p><a href="https://www.1point3acres.com/bbs/thread-851795-1-1.html"> 谈谈Databricks和云计算</a></p><p><a href="https://www.1point3acres.com/bbs/thread-855806-1-1.html"> 谈谈Databricks和云计算（二）</a></p><p><a href="https://cloud.tencent.com/developer/article/2191426">腾讯数据湖与湖仓一体架构实践</a></p></blockquote></div><h1 id="Data-Warehouse"><a href="#Data-Warehouse" class="headerlink" title="Data Warehouse"></a>Data Warehouse</h1><p>Running on cluster. </p><p>A place to store structured data.</p><p>Source: offline ETL pipline to insert by batch</p><p>goal is to make data scientist to run SQL query</p><p>特点：</p><ol><li>It is a distributed database hence it has a lot features that database own</li><li>Structured data</li></ol><h2 id="snowflake"><a href="#snowflake" class="headerlink" title="snowflake"></a>snowflake</h2><p>managed cloud data warehouse</p><p>data warehouse on cloud</p><h1 id="databricks-and-data-lakehouse"><a href="#databricks-and-data-lakehouse" class="headerlink" title="databricks and data lakehouse"></a>databricks and data lakehouse</h1><p>datalake -&gt; data lakehouse</p><p>No need for schema: friendly to semi-structured and non structured data</p><h1 id="产品"><a href="#产品" class="headerlink" title="产品"></a>产品</h1><h2 id="delta-lake"><a href="#delta-lake" class="headerlink" title="delta lake"></a>delta lake</h2><p>stores data itself and its metadata. </p><p>metadata is for ACID transactions and support for a schema with a supporting write-ahead log for data rolling back when necessary </p><p>Data can be stored on the top of S3, like object storage. Delta Lake imports metadata for ACID transactions and schema. These ACID transactions and schema are necessary for SQL workload</p><h2 id="Databricks-SQL"><a href="#Databricks-SQL" class="headerlink" title="Databricks SQL"></a>Databricks SQL</h2><p>Photon execution engine.</p><h2 id="Databricks-Runtime"><a href="#Databricks-Runtime" class="headerlink" title="Databricks Runtime"></a>Databricks Runtime</h2><p>Create machine -&gt; a tuned spark cluster, and spark is ready to go</p><h2 id="Notebook"><a href="#Notebook" class="headerlink" title="Notebook"></a>Notebook</h2><p>Connect to a cluster that the user have access to. Use scala, python, sql or R to run the spark command and do the manipulation with the data on top of S3</p>]]></content>
    
    
    <summary type="html">记录下databricks的面试</summary>
    
    
    
    <category term="八股" scheme="http://ruobingw.com/categories/%E5%85%AB%E8%82%A1/"/>
    
    
    <category term="面经" scheme="http://ruobingw.com/tags/%E9%9D%A2%E7%BB%8F/"/>
    
  </entry>
  
  <entry>
    <title>最小生成树 - Minimum Spanning Tree - MST</title>
    <link href="http://ruobingw.com/posts/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"/>
    <id>http://ruobingw.com/posts/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/</id>
    <published>2023-09-13T02:06:41.000Z</published>
    <updated>2024-05-15T04:17:52.585Z</updated>
    
    <content type="html"><![CDATA[<p>最小生成树算法主要有： </p><ul><li>Kruskal 算法</li><li>Prim 算法</li></ul><h1 id="什么是最小生成树-MST"><a href="#什么是最小生成树-MST" class="headerlink" title="什么是最小生成树 MST"></a>什么是最小生成树 MST</h1><p><strong>先说「树」和「图」的根本区别：树不会包含环，图可以包含环</strong>。</p><p>什么是图的「生成树」呢，就是在图中找一棵包含图中的所有节点的树。专业点说，生成树是含有图中所有顶点的「无环连通子图」。</p><p><img src="/posts/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/MST_0.png" alt="MST_0"></p><p>对于加权图，每条边都有权重，所以每棵生成树都有一个权重和。比如上图，右侧生成树的权重和显然比左侧生成树的权重和要小。</p><p><strong>最小生成树: 所有可能的生成树中，权重和最小的那棵生成树就叫「最小生成树」</strong>。</p><h1 id="Kruskal"><a href="#Kruskal" class="headerlink" title="Kruskal"></a>Kruskal</h1><p>MST 要保证边：</p><p>1、包含图中的所有节点。</p><p>2、形成的结构是树结构（即不存在环）。</p><p>3、权重和最小。</p><p>其中 1， 2可以用并查集来做：</p><blockquote><p><strong>对于添加的这条边，如果该边的两个节点本来就在同一连通分量里，那么添加这条边会产生环；反之，如果该边的两个节点不在同一连通分量里，则添加这条边不会产生环</strong>。</p></blockquote><blockquote><p> 详见：<a href="/posts/%E5%B9%B6%E6%9F%A5%E9%9B%86/" title="并查集">并查集</a> 习题261</p></blockquote><p>对于3:</p><p>用到了贪心思路：</p><p>将所有边按照权重从小到大排序，从权重最小的边开始遍历，如果这条边和 <code>mst</code> 中的其它边不会形成环，则这条边是最小生成树的一部分，将它加入 <code>mst</code> 集合；否则，这条边不是最小生成树的一部分，不要把它加入 <code>mst</code> 集合。</p><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><p>To be write…</p><p>1135</p><p>1584</p>]]></content>
    
    
    <summary type="html">了解一下最小生成树</summary>
    
    
    
    <category term="Algorithms" scheme="http://ruobingw.com/categories/Algorithms/"/>
    
    
    <category term="数据结构" scheme="http://ruobingw.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="图论" scheme="http://ruobingw.com/tags/%E5%9B%BE%E8%AE%BA/"/>
    
    <category term="并查集" scheme="http://ruobingw.com/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
    <category term="UnionFind" scheme="http://ruobingw.com/tags/UnionFind/"/>
    
    <category term="最小生成树" scheme="http://ruobingw.com/tags/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"/>
    
    <category term="minimum spanning tree" scheme="http://ruobingw.com/tags/minimum-spanning-tree/"/>
    
    <category term="Kruscal" scheme="http://ruobingw.com/tags/Kruscal/"/>
    
    <category term="Prim" scheme="http://ruobingw.com/tags/Prim/"/>
    
  </entry>
  
</feed>
