<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Trie树</title>
      <link href="/2023/11/01/Trie%E6%A0%91/"/>
      <url>/2023/11/01/Trie%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h1 id="Trie树"><a href="#Trie树" class="headerlink" title="Trie树"></a>Trie树</h1><p>Trie 树（又叫「前缀树」或「字典树」）是一种用于快速查询「某个字符串/字符前缀」是否存在的数据结构。</p><p>其核心是使用<strong>「边」</strong>来代表有无字符，使用<strong>「点」</strong>来记录是否为<strong>「单词结尾」</strong>以及<strong>「其后续字符串的字符是什么」</strong></p><p><a href="https://leetcode.cn/problems/implement-trie-prefix-tree/solution/gong-shui-san-xie-yi-ti-shuang-jie-er-we-esm9/">https://leetcode.cn/problems/implement-trie-prefix-tree/solution/gong-shui-san-xie-yi-ti-shuang-jie-er-we-esm9/</a></p><p>解决的问题：</p><p>快速的查找字符串以及存储字符串：</p><p><img src="/2023/11/01/Trie%E6%A0%91/trie_eg_1.png" alt="trie_eg_1"></p><p>星号代表标记来作为这是一个单词的结尾，说明单词形成了</p><p>一般形式：都是小写字母，都是大写字母，都是数字；一般范围都会比较小</p><h1 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h1><p>假设 word</p><ol><li>从根结点开始，遍历单词 <code>word</code>，并看当前字母<code>word[i]</code>是否出现过<ol><li>没有 -&gt; 创建一个</li><li>有 -&gt; 遍历到点上</li></ol></li><li>在单词结尾打一个标记</li></ol><h1 id="208-实现-Trie-前缀树"><a href="#208-实现-Trie-前缀树" class="headerlink" title="208. 实现 Trie (前缀树)"></a><a href="https://leetcode.cn/problems/implement-trie-prefix-tree/">208. 实现 Trie (前缀树)</a></h1><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Trie</span> {</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Node</span> {</span><br><span class="line">        Node[] charactersArr;</span><br><span class="line">        <span class="type">boolean</span> isCompleteWord;</span><br><span class="line"></span><br><span class="line">        Node() {</span><br><span class="line">            charactersArr = <span class="keyword">new</span> <span class="title class_">Node</span>[<span class="number">26</span>];</span><br><span class="line">            <span class="built_in">this</span>.isCompleteWord = isCompleteWord;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    Node root;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Trie</span><span class="params">()</span> {</span><br><span class="line">        root = <span class="keyword">new</span> <span class="title class_">Node</span>();</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(String word)</span> {</span><br><span class="line">        <span class="type">Node</span> <span class="variable">p</span> <span class="operator">=</span> root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; word.length(); i++) {</span><br><span class="line">            <span class="type">char</span> <span class="variable">curr</span> <span class="operator">=</span> word.charAt(i);</span><br><span class="line">            <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> curr - <span class="string">'a'</span>;</span><br><span class="line">            <span class="keyword">if</span> (p.charactersArr[idx] == <span class="literal">null</span>) p.charactersArr[idx] = <span class="keyword">new</span> <span class="title class_">Node</span>();</span><br><span class="line">            p = p.charactersArr[idx];</span><br><span class="line">        }</span><br><span class="line">        p.isCompleteWord = <span class="literal">true</span>;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">search</span><span class="params">(String word)</span> {</span><br><span class="line">        <span class="type">Node</span> <span class="variable">p</span> <span class="operator">=</span> root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; word.length(); i++) {</span><br><span class="line">            <span class="type">char</span> <span class="variable">curr</span> <span class="operator">=</span> word.charAt(i);</span><br><span class="line">            <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> curr - <span class="string">'a'</span>;</span><br><span class="line">            <span class="keyword">if</span> (p.charactersArr[idx] == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            p = p.charactersArr[idx];</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> p.isCompleteWord;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">startsWith</span><span class="params">(String prefix)</span> {</span><br><span class="line">        <span class="type">Node</span> <span class="variable">p</span> <span class="operator">=</span> root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; prefix.length(); i++) {</span><br><span class="line">            <span class="type">char</span> <span class="variable">curr</span> <span class="operator">=</span> prefix.charAt(i);</span><br><span class="line">            <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> curr - <span class="string">'a'</span>;</span><br><span class="line">            <span class="keyword">if</span> (p.charactersArr[idx] == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            p = p.charactersArr[idx];</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your Trie object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * Trie obj = new Trie();</span></span><br><span class="line"><span class="comment"> * obj.insert(word);</span></span><br><span class="line"><span class="comment"> * boolean param_2 = obj.search(word);</span></span><br><span class="line"><span class="comment"> * boolean param_3 = obj.startsWith(prefix);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></tbody></table></figure><h1 id="1268-搜索推荐系统"><a href="#1268-搜索推荐系统" class="headerlink" title="1268. 搜索推荐系统"></a><a href="https://leetcode.cn/problems/search-suggestions-system/">1268. 搜索推荐系统</a></h1><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="title function_">suggestedProducts</span><span class="params">(String[] products, String searchWord)</span> {</span><br><span class="line">        Arrays.sort(products);</span><br><span class="line">        List&lt;List&lt;String&gt;&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">Trie</span> <span class="variable">tr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Trie</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; products.length; i++) {</span><br><span class="line">            tr.insert(products[i], i);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; searchWord.length(); i++) {</span><br><span class="line">            List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            <span class="type">int</span>[] idxes = tr.search(searchWord.substring(<span class="number">0</span>, i + <span class="number">1</span>));</span><br><span class="line">            <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> idxes[<span class="number">0</span>], r = idxes[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> l; j &lt;= Math.min(l + <span class="number">2</span>, r) &amp;&amp; l != -<span class="number">1</span>; j++) list.add(products[j]);</span><br><span class="line">            ans.add(list);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Trie</span> {</span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">Node</span> {</span><br><span class="line">            Node[] charArr = <span class="keyword">new</span> <span class="title class_">Node</span>[<span class="number">26</span>];</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">isCompleted</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        Node root;</span><br><span class="line">        Map&lt;Node, Integer&gt; char2MinIdx = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        Map&lt;Node, Integer&gt; char2MaxIdx = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        Trie() {</span><br><span class="line">            root = <span class="keyword">new</span> <span class="title class_">Node</span>();</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(String product, <span class="type">int</span> wordIdx)</span> {</span><br><span class="line">            <span class="type">Node</span> <span class="variable">rootP</span> <span class="operator">=</span> root;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; product.length(); i++) {</span><br><span class="line">                <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> product.charAt(i) - <span class="string">'a'</span>;</span><br><span class="line">                <span class="keyword">if</span> (rootP.charArr[idx] == <span class="literal">null</span>) {</span><br><span class="line">                    rootP.charArr[idx] = <span class="keyword">new</span> <span class="title class_">Node</span>();</span><br><span class="line">                    char2MinIdx.put(rootP.charArr[idx], wordIdx);</span><br><span class="line">                }</span><br><span class="line">                char2MaxIdx.put(rootP.charArr[idx], wordIdx);</span><br><span class="line">                rootP = rootP.charArr[idx];</span><br><span class="line">            }</span><br><span class="line">            rootP.isCompleted = <span class="literal">true</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span>[] search(String target) {</span><br><span class="line">            <span class="type">Node</span> <span class="variable">rootP</span> <span class="operator">=</span> root;</span><br><span class="line">            <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> -<span class="number">1</span>, r = -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; target.length(); i++) {</span><br><span class="line">                <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> target.charAt(i) - <span class="string">'a'</span>;</span><br><span class="line">                <span class="keyword">if</span> (rootP.charArr[idx] == <span class="literal">null</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]{-<span class="number">1</span>, -<span class="number">1</span>};</span><br><span class="line">                l = char2MinIdx.get(rootP.charArr[idx]);</span><br><span class="line">                r = char2MaxIdx.get(rootP.charArr[idx]);</span><br><span class="line">                rootP = rootP.charArr[idx];</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[] {l, r};</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Design-Pattern</title>
      <link href="/2023/10/24/Design-Pattern/"/>
      <url>/2023/10/24/Design-Pattern/</url>
      
        <content type="html"><![CDATA[<h1 id="Behavioral-Pattern"><a href="#Behavioral-Pattern" class="headerlink" title="Behavioral Pattern"></a>Behavioral Pattern</h1><p><img src="/2023/10/24/Design-Pattern/Mediator_Structure.png" alt="Mediator_Structure"></p><h1 id="Structural-Pattern"><a href="#Structural-Pattern" class="headerlink" title="Structural Pattern"></a>Structural Pattern</h1><h2 id="Adapter-Pattern"><a href="#Adapter-Pattern" class="headerlink" title="Adapter Pattern"></a>Adapter Pattern</h2><p>使一个老的方案通过<code>adapter</code>来实现新的方案</p><p><img src="/2023/10/24/Design-Pattern/adapter_guru_1.png" alt="adapter_guru_1"></p><h2 id="解决的问题："><a href="#解决的问题：" class="headerlink" title="解决的问题："></a>解决的问题：</h2><p>当想要整合老旧方案到一个新的方案时，在不修改老方案的内容的情况下，使用adapter：</p><p>A special object that converts the interface of one object so that another object can understand it.</p><h2 id="Decorator"><a href="#Decorator" class="headerlink" title="Decorator"></a>Decorator</h2><p><strong>Decorator</strong>  lets you attach new behaviors to objects by placing these objects inside special wrapper objects that contain the behaviors.</p><p><img src="/2023/10/24/Design-Pattern/decorator-2x.png" alt="decorator-2x"></p><p>四个组成：</p><ol><li>Componenet Interface<ol><li>interface for the objects that will have additional features added to them.</li></ol></li><li>Concrete Component <ol><li>basic implementation of the component interface.</li></ol></li><li>Decorator<ol><li>abstract class implementing the component interface and holding a reference to a component object.</li></ol></li><li>Concrete Decorators<ol><li>These are implementations of the decorator that add specific behaviors or states to the component.</li></ol></li></ol><h2 id="解决的问题：-1"><a href="#解决的问题：-1" class="headerlink" title="解决的问题："></a>解决的问题：</h2>]]></content>
      
      
      <categories>
          
          <category> Design Pattern </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> Design Pattern </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>八股文</title>
      <link href="/2023/10/24/%E5%85%AB%E8%82%A1%E6%96%87/"/>
      <url>/2023/10/24/%E5%85%AB%E8%82%A1%E6%96%87/</url>
      
        <content type="html"><![CDATA[<h1 id="进程-vs-线程-vs-协程"><a href="#进程-vs-线程-vs-协程" class="headerlink" title="进程 vs 线程 vs 协程"></a>进程 vs 线程 vs 协程</h1><blockquote><p><a href="https://www.cnblogs.com/Survivalist/p/11527949.html">进程 vs 线程 vs 协程</a></p></blockquote><p>包含关系如下：</p><p><img src="/2023/10/24/%E5%85%AB%E8%82%A1%E6%96%87/Thread-Process-Coroutine.png" alt="Thread-Process-Coroutine"></p>]]></content>
      
      
      <categories>
          
          <category> 八股 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面经 </tag>
            
            <tag> 八股文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前后缀分解</title>
      <link href="/2023/10/22/%E5%89%8D%E5%90%8E%E7%BC%80%E5%88%86%E8%A7%A3/"/>
      <url>/2023/10/22/%E5%89%8D%E5%90%8E%E7%BC%80%E5%88%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>一个prefix数组 一个 suffix 数组</p><p>在<code>idx = i</code>处可以使用<code>prefix</code> 和 <code>suffix</code>的一些性质，比如乘积，或者在<code>i</code>上左边的最小值，右边的最小值</p><p>本质是为了快速的在当前<code>i</code>上能够利用信息避免重复计算 </p><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>初见使用在了<a href="https://leetcode.cn/contest/weekly-contest-368/">leetcode 368 周赛</a> Q2:</p><h1 id="元素和最小的山形三元组-II"><a href="#元素和最小的山形三元组-II" class="headerlink" title="元素和最小的山形三元组 II"></a><a href="https://leetcode.cn/problems/minimum-sum-of-mountain-triplets-ii/">元素和最小的山形三元组 II</a></h1><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minimumSum</span><span class="params">(<span class="type">int</span>[] nums)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span>[] leftMin = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="type">int</span>[] rightMin = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        leftMin[<span class="number">0</span>] = Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) {</span><br><span class="line">            leftMin[i] = Math.min(leftMin[i - <span class="number">1</span>], nums[i - <span class="number">1</span>]);</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">        rightMin[n - <span class="number">1</span>] = Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) {</span><br><span class="line">            rightMin[i] = Math.min(rightMin[i + <span class="number">1</span>], nums[i + <span class="number">1</span>]);</span><br><span class="line">        }</span><br><span class="line">        <span class="type">int</span> <span class="variable">minSum</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n - <span class="number">1</span>; i++) {</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &gt; leftMin[i] &amp;&amp; nums[i] &gt; rightMin[i]) {</span><br><span class="line">                minSum = Math.min(minSum, nums[i] + leftMin[i] + rightMin[i]);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> minSum == Integer.MAX_VALUE ? -<span class="number">1</span> : minSum;</span><br><span class="line">   }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="238-除自身以外数组的乘积"><a href="#238-除自身以外数组的乘积" class="headerlink" title="238. 除自身以外数组的乘积"></a><a href="https://leetcode.cn/problems/product-of-array-except-self/">238. 除自身以外数组的乘积</a></h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>摩尔投票</title>
      <link href="/2023/10/20/%E6%91%A9%E5%B0%94%E6%8A%95%E7%A5%A8/"/>
      <url>/2023/10/20/%E6%91%A9%E5%B0%94%E6%8A%95%E7%A5%A8/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://mp.weixin.qq.com/s?__biz=MzU4NDE3MTEyMA==&amp;mid=2247488987&amp;idx=1&amp;sn=6087b1909fea1d24f15353515eee8d93&amp;chksm=fd9cbec4caeb37d235ccad8d59724177784036a60525fa5e7b738267e9a84a572b1545528391&amp;token=1288276346&amp;lang=zh_CN#rd">三叶</a></p></blockquote><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">数组中占比超过一半的元素称之为主要元素。给你一个 整数 数组，找出其中的主要元素。</span><br><span class="line"></span><br><span class="line">输入：[1,2,5,9,5,9,5,5,5]</span><br><span class="line">输出：5</span><br></pre></td></tr></tbody></table></figure><p><strong>摩尔投票 ：在集合中寻找可能存在的多数元素，这一元素在输入的序列重复出现并占到了序列元素的一半以上；在第一遍遍历之后应该再进行一个遍历以统计第一次算法遍历的结果出现次数，确定其是否为众数；如果一个序列中没有占到多数的元素，那么第一次的结果就可能是无效的随机元素。</strong></p><p><strong>换句话说，每次将两个不同的元素进行「抵消」，如果最后有元素剩余，则「可能」为元素个数大于总数一半的那个。</strong></p><p>具体的，我们定义一个变量 来保存那个可能为主要元素的值， 用来记录该值的出现次数。然后在遍历数组 过程中执行如下逻辑：</p><ul><li>如果 为 ：说明之前出现过的 已经被抵消完了，更新一下 为当前值，出现次数为 ：<code>x = nums[i], cnt = 1</code>；</li><li>如果 不为 ：说明之前统计的 还没被抵消完，这是根据 与 是否相等进行计算即可：<code>cnt += nums[i] == x ? 1 : -1</code>。</li></ul><p>当处理完 之后，我们得到了一个<strong>「可能」</strong>的主要元素。注意只是可能，因为我们在处理过程中只使用了 <code>x</code> 和 <code>cnt</code> 来记录，我们是无法确定最后剩下的 是经过多次抵消后剩余的主要元素，还是只是不存在主要元素的数组中的无效随机元素。</p><p>因此我们需要再进行一次遍历，检查这个<strong>「可能」</strong>的主要元素 的出现次数是否超过总数一半。</p><p>O(1) 找众数</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">majorityElement</span><span class="params">(<span class="type">int</span>[] nums)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> -<span class="number">1</span>, cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : nums) {</span><br><span class="line">            <span class="keyword">if</span> (cnt == <span class="number">0</span>) {</span><br><span class="line">                x = i;</span><br><span class="line">                cnt = <span class="number">1</span>;</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                cnt += x == i ? <span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : nums) <span class="keyword">if</span> (x == i) cnt++;</span><br><span class="line">        <span class="keyword">return</span> cnt &gt; n / <span class="number">2</span> ? x : -<span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
            <tag> Array </tag>
            
            <tag> 摩尔投票 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Re:从1500分开始的竞赛生活</title>
      <link href="/2023/10/11/Re-%E4%BB%8E1500%E5%88%86%E5%BC%80%E5%A7%8B%E7%9A%84%E7%AB%9E%E8%B5%9B%E7%94%9F%E6%B4%BB/"/>
      <url>/2023/10/11/Re-%E4%BB%8E1500%E5%88%86%E5%BC%80%E5%A7%8B%E7%9A%84%E7%AB%9E%E8%B5%9B%E7%94%9F%E6%B4%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="序"><a href="#序" class="headerlink" title="序"></a>序</h1><div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>主要在这里练习</p><p><a href="https://huxulm.github.io/lc-rating/#/zen">https://huxulm.github.io/lc-rating/#/zen</a></p></div><h1 id="1500-1600"><a href="#1500-1600" class="headerlink" title="1500 - 1600"></a>1500 - 1600</h1><blockquote><p>学会从题干假设结论，然后尝试验证结论（写一个）或者数学证明</p></blockquote><h2 id="2507-使用质因数之和替换后可以取到的最小值-1500"><a href="#2507-使用质因数之和替换后可以取到的最小值-1500" class="headerlink" title="2507. 使用质因数之和替换后可以取到的最小值 - 1500"></a><a href="https://leetcode.cn/problems/smallest-value-after-replacing-with-sum-of-prime-factors/">2507. 使用质因数之和替换后可以取到的最小值</a> - 1500</h2><p>这道题主要是怎么分解质因数，属于数学题。</p><p>用一个外置的while 循环来判断是否结束，然后从 cur 开始分解，分解从2作为因数开始分解，然后更新 min</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">smallestValue</span><span class="params">(<span class="type">int</span> n)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">nChange</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">cur</span> <span class="operator">=</span> n;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> n;</span><br><span class="line">        <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">while</span> (nChange != count) {</span><br><span class="line">            nChange = count;</span><br><span class="line">            cur = count;</span><br><span class="line">            count = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (cur &gt; <span class="number">1</span>) {</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt;= cur; i++) {</span><br><span class="line">                    <span class="keyword">if</span> (cur % i == <span class="number">0</span>) {</span><br><span class="line">                        cur /= i;</span><br><span class="line">                        count += i;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            min = Math.min(min, count);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> min;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="1525-字符串的好分割数目-1500"><a href="#1525-字符串的好分割数目-1500" class="headerlink" title="1525. 字符串的好分割数目 - 1500"></a><a href="https://leetcode.cn/problems/number-of-good-ways-to-split-a-string/">1525. 字符串的好分割数目</a> - 1500</h2><p>前后缀分解：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numSplits</span><span class="params">(String s)</span> {</span><br><span class="line">        <span class="type">char</span>[] sChar = s.toCharArray();</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> sChar.length;</span><br><span class="line">        <span class="type">int</span>[] leftCount = <span class="keyword">new</span> <span class="title class_">int</span>[n - <span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span>[] rightCount = <span class="keyword">new</span> <span class="title class_">int</span>[n - <span class="number">1</span>];</span><br><span class="line">        Set&lt;Character&gt; left = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        Set&lt;Character&gt; right = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">idxLeft</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">idxRight</span> <span class="operator">=</span> n - <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) {</span><br><span class="line">            left.add(sChar[i]);</span><br><span class="line">            leftCount[idxLeft] = left.size();</span><br><span class="line">            idxLeft++;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n - <span class="number">1</span>; i &gt;= <span class="number">1</span>; i--) {</span><br><span class="line">            right.add(sChar[i]);</span><br><span class="line">            rightCount[idxRight] = right.size();</span><br><span class="line">            idxRight--;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// Arrays.stream(leftCount).forEach(a -&gt; System.out.print(a + " "));</span></span><br><span class="line">        <span class="comment">// System.out.println();</span></span><br><span class="line">        <span class="comment">// Arrays.stream(rightCount).forEach(a -&gt; System.out.print(a + " "));</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) {</span><br><span class="line">            <span class="keyword">if</span> (leftCount[i] == rightCount[i]) count++;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="915-分割数组-1501"><a href="#915-分割数组-1501" class="headerlink" title="915. 分割数组 - 1501"></a><a href="https://leetcode.cn/problems/partition-array-into-disjoint-intervals/">915. 分割数组</a> - 1501</h2><p>利用题中性质：<code>left</code> 中的每个元素都小于或等于 <code>right</code> 中的每个元素。 &lt;-&gt;  等价于找 left 最大 &lt;= right 最小</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">partitionDisjoint</span><span class="params">(<span class="type">int</span>[] nums)</span> {</span><br><span class="line">        <span class="comment">// left 每个元素都小于或等于 right 中的每个元素</span></span><br><span class="line">        <span class="comment">// 等价于找 left 最大 &lt;= right 最小</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span>[] leftMax = <span class="keyword">new</span> <span class="title class_">int</span>[n - <span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span>[] rightMin = <span class="keyword">new</span> <span class="title class_">int</span>[n - <span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> Integer.MIN_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) {</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &gt; max) {</span><br><span class="line">                max = nums[i];</span><br><span class="line">            }</span><br><span class="line">            leftMax[i] = max;</span><br><span class="line">        }</span><br><span class="line">        <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n - <span class="number">1</span>; i &gt;= <span class="number">1</span>; i--) {</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &lt; min) {</span><br><span class="line">                min = nums[i];</span><br><span class="line">            }</span><br><span class="line">            rightMin[i - <span class="number">1</span>] = min;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// Arrays.stream(leftMax).forEach(a -&gt; System.out.print(a + " "));</span></span><br><span class="line">        <span class="comment">// System.out.println();</span></span><br><span class="line">        <span class="comment">// Arrays.stream(rightMin).forEach(a -&gt; System.out.print(a + " "));</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">            <span class="keyword">if</span> (leftMax[i] &lt;= rightMin[i]) {</span><br><span class="line">                <span class="keyword">return</span> i + <span class="number">1</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="1090-受标签影响的最大值-1501"><a href="#1090-受标签影响的最大值-1501" class="headerlink" title="1090. 受标签影响的最大值 - 1501"></a><a href="https://leetcode.cn/problems/largest-values-from-labels/">1090. 受标签影响的最大值</a> - 1501</h2><p>dp做法：（超时）这里忽略了memo的声明需要三重循环，即使是ptthon的@cache也会超时，记忆化在这里并不适用</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="type">int</span>[] values;</span><br><span class="line">    <span class="type">int</span>[] labels;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="type">int</span> numWanted;</span><br><span class="line">    <span class="type">int</span> useLimit;</span><br><span class="line">    Map&lt;Integer, Integer&gt; selectedNumsCount = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">largestValsFromLabels</span><span class="params">(<span class="type">int</span>[] values, <span class="type">int</span>[] labels, <span class="type">int</span> numWanted, <span class="type">int</span> useLimit)</span> {</span><br><span class="line">        <span class="built_in">this</span>.values = values;</span><br><span class="line">        <span class="built_in">this</span>.labels = labels;</span><br><span class="line">        <span class="built_in">this</span>.n = values.length;</span><br><span class="line">        <span class="built_in">this</span>.numWanted = numWanted;</span><br><span class="line">        <span class="built_in">this</span>.useLimit = useLimit;</span><br><span class="line">        <span class="keyword">return</span> dp(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">dp</span><span class="params">(<span class="type">int</span> idx, <span class="type">int</span> sum)</span> {</span><br><span class="line">        <span class="comment">// System.out.println("ini: " + idx + " " + sum + " " + numWanted + " " + useLimit);</span></span><br><span class="line">        <span class="keyword">if</span> (idx &gt;= n) {</span><br><span class="line">            <span class="keyword">return</span> sum;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// if (memo[idx] != -666) return memo[idx];</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 不选当前数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">resNot</span> <span class="operator">=</span> dp(idx + <span class="number">1</span>, sum);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// System.out.println("not select: " + idx + " " + resNot);</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> values[idx];</span><br><span class="line">        <span class="type">int</span> <span class="variable">label</span> <span class="operator">=</span> labels[idx];</span><br><span class="line">        <span class="keyword">if</span> (numWanted == <span class="number">0</span>) <span class="keyword">return</span> resNot;</span><br><span class="line">        <span class="keyword">if</span> (selectedNumsCount.getOrDefault(label, -<span class="number">1</span>) == useLimit) <span class="keyword">return</span> resNot; </span><br><span class="line">        <span class="comment">// 选择当前数</span></span><br><span class="line">        <span class="keyword">if</span> (selectedNumsCount.containsKey(label)){</span><br><span class="line">            selectedNumsCount.put(label, selectedNumsCount.get(label) + <span class="number">1</span>);</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            selectedNumsCount.put(label, <span class="number">1</span>);</span><br><span class="line">        }</span><br><span class="line">        numWanted--;</span><br><span class="line">        sum = sum + value;</span><br><span class="line">        <span class="comment">// System.out.println("pre: " + sum + " " + resNot);</span></span><br><span class="line">        <span class="comment">// System.out.println(selectedNumsCount);</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">resSelected</span> <span class="operator">=</span> dp(idx + <span class="number">1</span>, sum);</span><br><span class="line">        <span class="comment">// System.out.println("after: " + sum + " " + resSelected);</span></span><br><span class="line">        sum = sum - value;</span><br><span class="line">        numWanted++;</span><br><span class="line">        <span class="keyword">if</span> (selectedNumsCount.get(label) &gt; <span class="number">1</span>) {</span><br><span class="line">            selectedNumsCount.put(label, selectedNumsCount.get(label) - <span class="number">1</span>);</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            selectedNumsCount.remove(label);</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// System.out.println(idx + " " + resNot + " " + resSelected);</span></span><br><span class="line">        <span class="comment">// memo[idx] = Math.max(resNot, resSelected);</span></span><br><span class="line">        <span class="keyword">return</span> Math.max(resNot, resSelected);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>正确做法：排序 + 计数</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">largestValsFromLabels</span><span class="params">(<span class="type">int</span>[] values, <span class="type">int</span>[] labels, <span class="type">int</span> numWanted, <span class="type">int</span> useLimit)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> values.length;</span><br><span class="line">        <span class="type">int</span>[][] pairs = <span class="keyword">new</span> <span class="title class_">int</span>[n][<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; ++i) {</span><br><span class="line">            pairs[i] = <span class="keyword">new</span> <span class="title class_">int</span>[]{values[i], labels[i]};</span><br><span class="line">        }</span><br><span class="line">        Arrays.sort(pairs, (a, b) -&gt; b[<span class="number">0</span>] - a[<span class="number">0</span>]);</span><br><span class="line">        Map&lt;Integer, Integer&gt; cnt = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">            <span class="keyword">if</span> (numWanted &lt;= <span class="number">0</span>) {</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="type">int</span> <span class="variable">v</span> <span class="operator">=</span> pairs[i][<span class="number">0</span>], l = pairs[i][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (cnt.getOrDefault(l, <span class="number">0</span>) &lt; useLimit) {</span><br><span class="line">                cnt.merge(l, <span class="number">1</span>, Integer::sum);</span><br><span class="line">                numWanted--;</span><br><span class="line">                ans += v;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="1750-删除字符串两端相同字符后的最短长度-1502"><a href="#1750-删除字符串两端相同字符后的最短长度-1502" class="headerlink" title="1750. 删除字符串两端相同字符后的最短长度 - 1502"></a><a href="https://leetcode.cn/problems/minimum-length-of-string-after-deleting-similar-ends/">1750. 删除字符串两端相同字符后的最短长度</a> - 1502</h2><p>双指针直接模拟：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minimumLength</span><span class="params">(String s)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = n - <span class="number">1</span>;</span><br><span class="line">        <span class="type">char</span>[] cArr = s.toCharArray();</span><br><span class="line">        <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> n;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) {</span><br><span class="line">            <span class="keyword">if</span> (cArr[left] == cArr[right]) {</span><br><span class="line">                <span class="type">char</span> <span class="variable">curDup</span> <span class="operator">=</span> cArr[left];</span><br><span class="line">                <span class="keyword">while</span> (left &lt;= right &amp;&amp; cArr[left] == curDup) {</span><br><span class="line">                    left++;</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">while</span> (right &gt;= <span class="number">0</span> &amp;&amp; left &lt;= right &amp;&amp; cArr[right] == curDup) {</span><br><span class="line">                    right--;</span><br><span class="line">                }</span><br><span class="line">                <span class="comment">// System.out.println(left + " " + right);</span></span><br><span class="line">                min = Math.min(min, right - left + <span class="number">1</span>);</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> min;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="2730-找到最长的半重复子字符串-1502"><a href="#2730-找到最长的半重复子字符串-1502" class="headerlink" title="2730. 找到最长的半重复子字符串 - 1502"></a><a href="https://leetcode.cn/problems/find-the-longest-semi-repetitive-substring/">2730. 找到最长的半重复子字符串</a> - 1502</h2><p>滑动窗口:</p><p>当出现重复次数 &gt; 1时，缩短窗口</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">longestSemiRepetitiveSubstring</span><span class="params">(String s)</span> {</span><br><span class="line">        <span class="type">char</span>[] cArr = s.toCharArray();</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">sameCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> <span class="number">1</span>; right &lt; n; right++) {</span><br><span class="line">            <span class="keyword">if</span> (cArr[right] == cArr[right - <span class="number">1</span>]) {</span><br><span class="line">                sameCount++;</span><br><span class="line">                <span class="keyword">if</span> (sameCount &gt; <span class="number">1</span>) {</span><br><span class="line">                    left += <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">while</span> (left &lt; right &amp;&amp; cArr[left] != cArr[left - <span class="number">1</span>]) {</span><br><span class="line">                        left++;</span><br><span class="line">                    }</span><br><span class="line">                    sameCount--;</span><br><span class="line">                }</span><br><span class="line">            } </span><br><span class="line">            max = Math.max(max, right - left + <span class="number">1</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="2708-一个小组的最大实力值-1502"><a href="#2708-一个小组的最大实力值-1502" class="headerlink" title="2708. 一个小组的最大实力值 - 1502"></a><a href="https://leetcode.cn/problems/maximum-strength-of-a-group/">2708. 一个小组的最大实力值</a> - 1502</h2><p>由于数据规模比较小，可以直接爆搜：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="type">int</span>[] nums;</span><br><span class="line">    <span class="type">long</span> <span class="variable">max</span> <span class="operator">=</span> -<span class="number">10</span>;</span><br><span class="line">    LinkedList&lt;Integer&gt; ls = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">maxStrength</span><span class="params">(<span class="type">int</span>[] nums)</span> {</span><br><span class="line">        n = nums.length;</span><br><span class="line">        <span class="built_in">this</span>.nums = nums;</span><br><span class="line">        dfs(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 选或不选</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> idx)</span> {</span><br><span class="line">        <span class="keyword">if</span> (idx == n) {</span><br><span class="line">            <span class="keyword">if</span> (ls.size() == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">            <span class="type">long</span> <span class="variable">curMax</span> <span class="operator">=</span> ls.get(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; ls.size(); i++) {</span><br><span class="line">                curMax *= ls.get(i);</span><br><span class="line">            }</span><br><span class="line">            max = Math.max(max, curMax);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 不选当前数</span></span><br><span class="line">        dfs(idx + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 选择当前数</span></span><br><span class="line">        ls.add(nums[idx]);</span><br><span class="line">        dfs(idx + <span class="number">1</span>);</span><br><span class="line">        ls.removeLast();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><em>O(n)</em>: 每一次都取当前的最大和最小，最小的可能是负数，负数和负数相乘能得到一个正数</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">maxStrength</span><span class="params">(<span class="type">int</span>[] nums)</span> {</span><br><span class="line">        <span class="type">long</span> <span class="variable">max</span> <span class="operator">=</span> nums[<span class="number">0</span>];</span><br><span class="line">        <span class="type">long</span> <span class="variable">min</span> <span class="operator">=</span> nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; nums.length; i++) {</span><br><span class="line">            <span class="type">long</span> <span class="variable">temp</span> <span class="operator">=</span> max;</span><br><span class="line">            max = Math.max(max, Math.max(nums[i], Math.max(min * nums[i], max * nums[i])));</span><br><span class="line">            min = Math.min(min, Math.min(nums[i], Math.min(min * nums[i], temp * nums[i])));</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="2358-分组的最大数量-1503"><a href="#2358-分组的最大数量-1503" class="headerlink" title="2358. 分组的最大数量 - 1503"></a><a href="https://leetcode.cn/problems/maximum-number-of-groups-entering-a-competition/">2358. 分组的最大数量</a> - 1503</h2><p>这是一道数学题：</p><p>排序之后分组</p><p>第一组一个数，第二组两个数，第三组三个数… </p><p>那么一定满足要求：</p><ul><li>第 <code>i</code> 个分组中的学生总成绩 <strong>小于</strong> 第 <code>(i + 1)</code> 个分组中的学生总成绩，对所有组均成立（除了最后一组）。</li><li>第 <code>i</code> 个分组中的学生总数 <strong>小于</strong> 第 <code>(i + 1)</code> 个分组中的学生总数，对所有组均成立（除了最后一组）</li></ul><p>这是因为 </p><p>假设 <code>排序后</code>分组：</p><p>a | b, c | d, e, f | …</p><p>a &lt; b &lt; c &lt; d &lt; e &lt; f</p><p>则有</p><p>b + c &lt;= d + e</p><p>因此两个条件都可以满足</p><p>是用数学公式：</p><p>1 + 2 + 3 + … + x &lt;= n</p><p>(1 + x) * x / 2 &lt;= n</p><p>x + x^2 - 2n &lt;= 0</p><p>解一元二次方程</p><p>x^2 + x - 2n &lt;= 0</p><p>(-b + sqrt(b^2 - 4ac)) / 2</p><p>向下取整 因此 x 为：</p><p><code>(-1 + (int) Math.sqrt((double) (1 + 8 * grades.length))) / 2</code></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maximumGroups</span><span class="params">(<span class="type">int</span>[] grades)</span> {</span><br><span class="line">        <span class="comment">// 数学证明 + 贪心</span></span><br><span class="line">        <span class="keyword">return</span> (-<span class="number">1</span> + (<span class="type">int</span>) Math.sqrt((<span class="type">double</span>) (<span class="number">1</span> + <span class="number">8</span> * grades.length))) / <span class="number">2</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="2919-使数组变美的最小增量运算数"><a href="#2919-使数组变美的最小增量运算数" class="headerlink" title="2919. 使数组变美的最小增量运算数"></a><a href="https://leetcode.cn/problems/minimum-increment-operations-to-make-array-beautiful/">2919. 使数组变美的最小增量运算数</a></h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="type">long</span>[][] memo;</span><br><span class="line">    <span class="type">int</span>[] nums;</span><br><span class="line">    <span class="type">int</span> k;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">minIncrementOperations</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> {</span><br><span class="line">        <span class="comment">// int n = nums.length;</span></span><br><span class="line">        <span class="comment">// this.k = k;</span></span><br><span class="line">        <span class="comment">// memo = new long[n][3];</span></span><br><span class="line">        <span class="comment">// this.nums = nums;</span></span><br><span class="line">        <span class="comment">// for (long[] m : memo) {</span></span><br><span class="line">        <span class="comment">//     Arrays.fill(m, -1);</span></span><br><span class="line">        <span class="comment">// }</span></span><br><span class="line">        <span class="comment">// return dp(n - 1, 0);</span></span><br><span class="line">        <span class="comment">// 1:1 翻译成 递推</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">long</span>[][] dp = <span class="keyword">new</span> <span class="title class_">long</span>[n + <span class="number">1</span>][<span class="number">3</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) {</span><br><span class="line">                <span class="type">long</span> <span class="variable">select</span> <span class="operator">=</span> dp[i][<span class="number">0</span>] + Math.max(k - nums[i], <span class="number">0</span>);</span><br><span class="line">                <span class="type">long</span> <span class="variable">notSelect</span> <span class="operator">=</span> Long.MAX_VALUE;</span><br><span class="line">                <span class="keyword">if</span> (j &lt; <span class="number">2</span>) {</span><br><span class="line">                    notSelect = dp[i][j + <span class="number">1</span>];</span><br><span class="line">                }</span><br><span class="line">                dp[i + <span class="number">1</span>][j] = Math.min(select, notSelect);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> dp[n][<span class="number">0</span>];</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> <span class="title function_">dp</span><span class="params">(<span class="type">int</span> idx, <span class="type">int</span> left)</span> {</span><br><span class="line">        <span class="keyword">if</span> (idx &lt; <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (memo[idx][left] != -<span class="number">1</span>) <span class="keyword">return</span> memo[idx][left];</span><br><span class="line">        <span class="comment">// 选</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">res</span> <span class="operator">=</span> dp(idx - <span class="number">1</span>, <span class="number">0</span>) + Math.max(k - nums[idx], <span class="number">0</span>);</span><br><span class="line">        <span class="comment">// 不选</span></span><br><span class="line">        <span class="keyword">if</span> (left &lt; <span class="number">2</span>) {</span><br><span class="line">            res = Math.min(res, dp(idx - <span class="number">1</span>, left + <span class="number">1</span>));</span><br><span class="line">        }</span><br><span class="line">        memo[idx][left] = res;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="2527-查询数组-Xor-美丽值-1550"><a href="#2527-查询数组-Xor-美丽值-1550" class="headerlink" title="2527. 查询数组 Xor 美丽值 - 1550"></a><a href="https://leetcode.cn/problems/find-xor-beauty-of-array/">2527. 查询数组 Xor 美丽值</a> - 1550</h2><p>位运算题目，涉及到详细的数学证明：</p><blockquote><p>参考<br>作者：我爱志方小姐<br>链接：<a href="https://leetcode.cn/problems/find-xor-beauty-of-array/">https://leetcode.cn/problems/find-xor-beauty-of-array/</a></p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(a | a) &amp; a     (b | a) &amp; a     (c | a) &amp; a</span><br><span class="line">(a | a) &amp; b     (b | a) &amp; b     (c | a) &amp; b</span><br><span class="line">(a | a) &amp; c     (b | a) &amp; c     (c | a) &amp; c</span><br><span class="line"></span><br><span class="line">(a | b) &amp; a     (b | b) &amp; a     (c | b) &amp; a</span><br><span class="line">(a | b) &amp; b     (b | b) &amp; b     (c | b) &amp; b</span><br><span class="line">(a | b) &amp; c     (b | b) &amp; c     (c | b) &amp; c</span><br><span class="line"></span><br><span class="line">(a | c) &amp; a     (b | c) &amp; a     (c | c) &amp; a</span><br><span class="line">(a | c) &amp; b     (b | c) &amp; b     (c | c) &amp; b</span><br><span class="line">(a | c) &amp; c     (b | c) &amp; c     (c | c) &amp; c</span><br></pre></td></tr></tbody></table></figure><p>根据 按位或 的 对称性，即 x | y = y | x，我们不难发现上面的分块矩阵是一个 对称矩阵，也就是说所有元素的 异或 等于对角线元素的 异或，我们保留 对角线元素(块)，得到如下 3 x 3 矩阵：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(a | a) &amp; a     (b | b) &amp; a     (c | c) &amp; a</span><br><span class="line">(a | a) &amp; b     (b | b) &amp; b     (c | c) &amp; b</span><br><span class="line">(a | a) &amp; c     (b | b) &amp; c     (c | c) &amp; c</span><br></pre></td></tr></tbody></table></figure><p>由于 <code>a | a = a</code>, <code>a &amp; a = a</code>，我们将上面的矩阵再化简一下，有：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">  a       b &amp; a     c &amp; a</span><br><span class="line">a &amp; b       b       c &amp; b</span><br><span class="line">a &amp; c     b &amp; c       c</span><br></pre></td></tr></tbody></table></figure><p>再根据 <code>按位与</code> 运算的 <code>对称性</code>，即 <code>x &amp; y = y &amp; x</code>，我们不难发现，这又是一个 <code>对称矩阵</code>，所有元素的 <code>异或</code> 等于对角线元素的 <code>异或</code>，即：</p><p><code>a ^ b ^ c</code></p><p>因此，我们有如下结论：</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nums 的 <span class="keyword">xor</span> 美丽值即为 nums 所有元素的异或值。</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">xorBeauty</span><span class="params">(<span class="type">int</span>[] nums)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> Arrays.stream(nums).reduce(<span class="number">0</span>, (sub, cur) -&gt; sub ^ cur);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="2780-合法分割的最小下标-1550"><a href="#2780-合法分割的最小下标-1550" class="headerlink" title="2780. 合法分割的最小下标 - 1550"></a><a href="https://leetcode.cn/problems/minimum-index-of-a-valid-split/">2780. 合法分割的最小下标</a> - 1550</h2><p>方法1：两个哈希表</p><p>一个哈希表记录每一个元素的总数，一个哈希表记录当前遍历过程中出现的元素次数</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minimumIndex</span><span class="params">(List&lt;Integer&gt; nums)</span> {</span><br><span class="line">        Map&lt;Integer, Integer&gt; hmAll = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) {</span><br><span class="line">            hmAll.put(num, hmAll.getOrDefault(num, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">        }</span><br><span class="line">        Map&lt;Integer, Integer&gt; hmCur = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.size(); i++) {</span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> nums.get(i);</span><br><span class="line">            hmCur.put(num, hmCur.getOrDefault(num, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (hmCur.get(num) * <span class="number">2</span> &gt; i + <span class="number">1</span> &amp;&amp; (hmAll.get(num) - hmCur.get(num)) * <span class="number">2</span> &gt; nums.size() - i - <span class="number">1</span>) {</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>方法2：数学推理 + 摩尔投票 </p><p><strong>证明</strong>：分割出的两个数组的支配元素就是原数组的支配元素。</p><p>分割出的两个数组的支配元素就是原数组的支配元素。</p><p>设这两个数组的支配元素为 y（题目要求支配元素相同），那么对于第一个数组有</p><p><code>freq_1(y) * 2 &gt; i+1</code></p><p>对于第二个数组有</p><p><code>freq_2(y) * 2 &gt; n - i - 1</code></p><p>由于这两个数组合并之后就是原数组，所以</p><p><code>freq(y) * 2 = freq_1(y) * 2 + freq_2(y) * 2 &gt; (i+1) + (n-i-1) = n</code></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minimumIndex</span><span class="params">(List&lt;Integer&gt; nums)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">mode</span> <span class="operator">=</span> mooreVote(nums);</span><br><span class="line">        <span class="type">int</span> <span class="variable">modeTot</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) {</span><br><span class="line">            <span class="keyword">if</span> (num == mode) modeTot++; </span><br><span class="line">        }</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.size();</span><br><span class="line">        <span class="type">int</span> <span class="variable">modeCnt</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> nums.get(i);</span><br><span class="line">            <span class="keyword">if</span> (num == mode) modeCnt++;</span><br><span class="line">            <span class="keyword">if</span> (modeCnt * <span class="number">2</span> &gt; i + <span class="number">1</span> &amp;&amp; (modeTot - modeCnt) * <span class="number">2</span> &gt; n - <span class="number">1</span> - i) {</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">mooreVote</span><span class="params">(List&lt;Integer&gt; nums)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> nums.get(<span class="number">0</span>), cnt = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; nums.size(); i++) {</span><br><span class="line">            <span class="keyword">if</span> (x != nums.get(i)) {</span><br><span class="line">                cnt -= <span class="number">1</span>;</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                cnt++;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (cnt == <span class="number">0</span>) {</span><br><span class="line">                x = nums.get(i);</span><br><span class="line">                cnt = <span class="number">1</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="type">int</span> <span class="variable">countX</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) {</span><br><span class="line">            <span class="keyword">if</span> (num == x) {</span><br><span class="line">                countX++;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (countX &gt; nums.size() / <span class="number">2</span>) <span class="keyword">return</span> x;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="1600-1900"><a href="#1600-1900" class="headerlink" title="1600 - 1900"></a>1600 - 1900</h1><h2 id="2316-统计无向图中无法互相到达点对数-1604"><a href="#2316-统计无向图中无法互相到达点对数-1604" class="headerlink" title="2316. 统计无向图中无法互相到达点对数 - 1604"></a><a href="https://leetcode.cn/problems/count-unreachable-pairs-of-nodes-in-an-undirected-graph/">2316. 统计无向图中无法互相到达点对数</a> - 1604</h2><p>自我认为一道非常好的题，可以使用DFS，并查集来解题：</p><p>一开始尝试使用了DFS枚举然后去除，暴力超时</p><p>后采用并查集，通过计算乘法原理 O(N^2)</p><p>进行数学优化，直接相乘除二即可，O(N + M)</p><blockquote><a href="/2023/09/10/%E5%B9%B6%E6%9F%A5%E9%9B%86/" title="并查集">并查集</a></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    LinkedList&lt;LinkedList&lt;Integer&gt;&gt; go = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">UF</span> {</span><br><span class="line">        <span class="type">int</span> count;</span><br><span class="line">        <span class="type">int</span>[] parent;</span><br><span class="line">        <span class="type">int</span>[] size;</span><br><span class="line">        UF(<span class="type">int</span> n) {</span><br><span class="line">            <span class="built_in">this</span>.count = n;</span><br><span class="line">            <span class="built_in">this</span>.parent = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">            <span class="built_in">this</span>.size = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">                parent[i] = i;</span><br><span class="line">                <span class="built_in">this</span>.size[i] = <span class="number">1</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">union</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> q)</span> {</span><br><span class="line">            <span class="type">int</span> <span class="variable">rootP</span> <span class="operator">=</span> find(p);</span><br><span class="line">            <span class="type">int</span> <span class="variable">rootQ</span> <span class="operator">=</span> find(q);</span><br><span class="line">            <span class="keyword">if</span> (rootP == rootQ) <span class="keyword">return</span>;</span><br><span class="line">            parent[rootQ] = rootP;</span><br><span class="line">            size[rootP] += size[rootQ]; <span class="comment">// 相当于把 rooQ 的parent指定为rootP, 所以rootP的size需要加上rootQ的size</span></span><br><span class="line">            count--;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span> cur)</span> {</span><br><span class="line">            <span class="keyword">if</span> (parent[cur] != cur) {</span><br><span class="line">                parent[cur] = find(parent[cur]);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">return</span> parent[cur];</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">countPairs</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span>[][] edges)</span> {</span><br><span class="line">        <span class="type">UF</span> <span class="variable">uf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UF</span>(n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">            go.addLast(<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;());</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; edges.length; i++) {</span><br><span class="line">            <span class="type">int</span> <span class="variable">from</span> <span class="operator">=</span> edges[i][<span class="number">0</span>], to = edges[i][<span class="number">1</span>];</span><br><span class="line">            uf.union(from, to);</span><br><span class="line">        }</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Set&lt;Integer&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">            <span class="type">int</span> <span class="variable">p</span> <span class="operator">=</span> uf.find(i);</span><br><span class="line">            <span class="keyword">if</span> (!set.contains(p)) list.add(uf.size[p]);</span><br><span class="line">            set.add(p);</span><br><span class="line">        }</span><br><span class="line">        <span class="type">long</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> ele : list) {</span><br><span class="line">            res += (<span class="type">long</span>) ele * (n - ele);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> res / <span class="number">2</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 周赛 </tag>
            
            <tag> 难度练习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最长公共子序列</title>
      <link href="/2023/10/05/%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E5%BA%8F%E5%88%97/"/>
      <url>/2023/10/05/%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E5%BA%8F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>对于两个字符串求子序列的问题，都是用两个指针 <code>i</code> 和 <code>j</code> 分别在两个字符串上移动，大概率是动态规划思路</strong>。</p><p><a href="https://labuladong.github.io/algo/di-er-zhan-a01c6/zi-xu-lie--6bc09/jing-dian--93b6b/">labuladong-最长公共子序列</a></p></blockquote><h1 id="相关题目"><a href="#相关题目" class="headerlink" title="相关题目"></a>相关题目</h1><p><a href="https://leetcode.cn/problems/longest-common-subsequence/">1143. 最长公共子序列</a></p><p><a href="https://leetcode.cn/problems/delete-operation-for-two-strings/">583. 两个字符串的删除操作</a></p><p><a href="https://leetcode.cn/problems/minimum-ascii-delete-sum-for-two-strings/">712. 两个字符串的最小ASCII删除和</a></p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>定义<code>dp(s1, i, s2, j)</code>为<code>s1[i...]</code> 和 <code>s2[j...]</code>的最长公共子序列长度</p><p>goal: <code>dp(s1, 0, s2, 0)</code> 从零开始的最长公共子序列长度</p><p>base case: <code>i == len(s1)</code> 或 <code>j == len(s2)</code> 由于相当于没有string，所以最长公共子序列长度为0</p><p>状态转移：</p><p>在选的情况下，即charAt[i] == charAt[j]时，状态转移：</p><p><img src="/2023/10/05/%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E5%BA%8F%E5%88%97/%E7%8A%B6%E6%80%81%E8%BD%AC%E7%A7%BB_%E9%80%89.jpeg" alt="状态转移_选"></p><p>在不选的情况下可以从三种情况转移：</p><p><img src="/2023/10/05/%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E5%BA%8F%E5%88%97/%E7%8A%B6%E6%80%81%E8%BD%AC%E7%A7%BB_%E4%B8%8D%E9%80%89.jpeg" alt="状态转移"></p><p><strong>但是其实只有情况一和情况二，因为情况三被情况一cover了</strong></p><h1 id="1143-最长公共子序列"><a href="#1143-最长公共子序列" class="headerlink" title="1143. 最长公共子序列"></a><a href="https://leetcode.cn/problems/longest-common-subsequence/">1143. 最长公共子序列</a></h1><p>模板题</p><p>代码：</p><p>自顶向下的递归解法：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    String text1, text2;</span><br><span class="line">    <span class="type">int</span> m, n;</span><br><span class="line">    <span class="type">int</span>[][] memo;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">longestCommonSubsequence</span><span class="params">(String text1, String text2)</span> {</span><br><span class="line">        m = text1.length();</span><br><span class="line">        n = text2.length();</span><br><span class="line">        <span class="comment">// 初始化 memo 为了消除重复子问题</span></span><br><span class="line">        memo = <span class="keyword">new</span> <span class="title class_">int</span>[m][n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) {</span><br><span class="line">            Arrays.fill(memo[i], -<span class="number">1</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">this</span>.text1 = text1;</span><br><span class="line">        <span class="built_in">this</span>.text2 = text2;</span><br><span class="line">        <span class="keyword">return</span> dp(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">dp</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> {</span><br><span class="line">        <span class="keyword">if</span> (i == m || j == n) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (memo[i][j] != -<span class="number">1</span>) <span class="keyword">return</span> memo[i][j];</span><br><span class="line">        <span class="keyword">if</span> (text1.charAt(i) == text2.charAt(j)) {</span><br><span class="line">            memo[i][j] = dp(i + <span class="number">1</span>, j + <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            memo[i][j] = Math.max(</span><br><span class="line">                dp(i + <span class="number">1</span>, j),</span><br><span class="line">                dp(i, j + <span class="number">1</span>)</span><br><span class="line">            );</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> memo[i][j];</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>自底向上的迭代解法：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">longestCommonSubsequence</span><span class="params">(String s1, String s2)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> s1.length(), n = s2.length();</span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[m + <span class="number">1</span>][n + <span class="number">1</span>];</span><br><span class="line">        <span class="comment">// 定义：s1[0..i-1] 和 s2[0..j-1] 的 lcs 长度为 dp[i][j]</span></span><br><span class="line">        <span class="comment">// 目标：s1[0..m-1] 和 s2[0..n-1] 的 lcs 长度，即 dp[m][n]</span></span><br><span class="line">        <span class="comment">// base case: dp[0][..] = dp[..][0] = 0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= m; i++) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= n; j++) {</span><br><span class="line">                <span class="comment">// 现在 i 和 j 从 1 开始，所以要减一</span></span><br><span class="line">                <span class="keyword">if</span> (s1.charAt(i - <span class="number">1</span>) == s2.charAt(j - <span class="number">1</span>)) {</span><br><span class="line">                    <span class="comment">// s1[i-1] 和 s2[j-1] 必然在 lcs 中</span></span><br><span class="line">                    dp[i][j] = <span class="number">1</span> + dp[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    <span class="comment">// s1[i-1] 和 s2[j-1] 至少有一个不在 lcs 中</span></span><br><span class="line">                    dp[i][j] = Math.max(dp[i][j - <span class="number">1</span>], dp[i - <span class="number">1</span>][j]);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dp[m][n];</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="583-两个字符串的删除操作"><a href="#583-两个字符串的删除操作" class="headerlink" title="583. 两个字符串的删除操作"></a><a href="https://leetcode.cn/problems/delete-operation-for-two-strings/">583. 两个字符串的删除操作</a></h1><p>变换一下思路，我们要的就是让他们成为他们的公共子序列，问的是需要到达公共子序列所需要的步数:</p><p>即 <code>word1.length - LCS.length + word2.length - LCS.length</code></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    String word1, word2;</span><br><span class="line">    <span class="type">int</span> m, n;</span><br><span class="line">    <span class="type">int</span>[][] memo;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minDistance</span><span class="params">(String word1, String word2)</span> {</span><br><span class="line">        m = word1.length();</span><br><span class="line">        n = word2.length();</span><br><span class="line">        <span class="comment">// 初始化 memo 为了消除重复子问题</span></span><br><span class="line">        memo = <span class="keyword">new</span> <span class="title class_">int</span>[m][n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) {</span><br><span class="line">            Arrays.fill(memo[i], -<span class="number">1</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">this</span>.word1 = word1;</span><br><span class="line">        <span class="built_in">this</span>.word2 = word2;</span><br><span class="line">        <span class="type">int</span> <span class="variable">lcsLength</span> <span class="operator">=</span> dp(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> (m - lcsLength) + (n - lcsLength);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">dp</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> {</span><br><span class="line">        <span class="keyword">if</span> (i == m || j == n) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (memo[i][j] != -<span class="number">1</span>) <span class="keyword">return</span> memo[i][j];</span><br><span class="line">        <span class="keyword">if</span> (word1.charAt(i) == word2.charAt(j)) {</span><br><span class="line">            memo[i][j] = dp(i + <span class="number">1</span>, j + <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            memo[i][j] = Math.max(</span><br><span class="line">                dp(i + <span class="number">1</span>, j),</span><br><span class="line">                dp(i, j + <span class="number">1</span>)</span><br><span class="line">            );</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> memo[i][j];</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> dp </tag>
            
            <tag> LCS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序</title>
      <link href="/2023/10/04/%E6%8E%92%E5%BA%8F/"/>
      <url>/2023/10/04/%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="1029-两地调度"><a href="#1029-两地调度" class="headerlink" title="1029. 两地调度"></a><a href="https://leetcode.cn/problems/two-city-scheduling/">1029. 两地调度</a></h1><p>解题思路：贪心 + 排序</p><p>怎么贪：</p><p>培养一个思维：我们不是单独拿一个城市，而是假设所有面试者都去B，那么挑出来去A的应该是代价最小的即按照 <code>cost[i][0] - cost[i][1]</code> 排升序</p><p>也就是 <code>cost[a][0] - cost[a][1] - (cost[b][0] - cost[b][1]) </code> </p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">twoCitySchedCost</span><span class="params">(<span class="type">int</span>[][] costs)</span> {</span><br><span class="line">        Arrays.sort(costs, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;<span class="type">int</span>[]&gt;(){</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(<span class="type">int</span>[] o1, <span class="type">int</span>[] o2)</span> {</span><br><span class="line">                <span class="keyword">return</span> o1[<span class="number">0</span>] - o1[<span class="number">1</span>] - (o2[<span class="number">0</span>] - o2[<span class="number">1</span>]);</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> costs.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">splitN</span> <span class="operator">=</span> n / <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">aSum</span> <span class="operator">=</span> <span class="number">0</span>, bSum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (; i &lt; splitN; i++) {</span><br><span class="line">            aSum += costs[i][<span class="number">0</span>];</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">for</span> (; i &lt; n; i++) {</span><br><span class="line">            bSum += costs[i][<span class="number">1</span>];</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> aSum + bSum;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
            <tag> Array </tag>
            
            <tag> Sort </tag>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Basic-Calculator-Topics</title>
      <link href="/2023/10/03/Basic-Calculator-Topics/"/>
      <url>/2023/10/03/Basic-Calculator-Topics/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://labuladong.github.io/algo/di-san-zha-24031/jing-dian--a94a0/ru-he-shi--24fe4/">Labuladong-实现基础计算器</a></p></blockquote><table><thead><tr><th><a href="https://leetcode.cn/problems/basic-calculator/">224. 基本计算器</a></th></tr></thead><tbody><tr><td><a href="https://leetcode.cn/problems/basic-calculator-ii/">227. 基本计算器 II</a></td></tr><tr><td><a href="https://leetcode.cn/problems/basic-calculator-iii/">772. 基本计算器 III</a></td></tr></tbody></table><p>主要借助栈（加减乘除） + 递归（括号）</p><p>加一个<code>preSign '+'</code></p><p>即：</p><p><code>+</code> <code>-</code> 数 直接入栈</p><p><code>* /</code> 借用栈的性质，将计算结果入栈</p><p><code>(</code> <code>)</code> 使用递归先计算括号内的数，将结果入栈</p><p><img src="/2023/10/03/Basic-Calculator-Topics/Basic-Calculator-push-stack-1.jpeg" alt="Basic-Calculator-push-stack-1"></p><h1 id="227-基本计算器-II"><a href="#227-基本计算器-II" class="headerlink" title="227. 基本计算器 II"></a><a href="https://leetcode.cn/problems/basic-calculator-ii/">227. 基本计算器 II</a></h1><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">calculate</span><span class="params">(String s)</span> {</span><br><span class="line">        Stack&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;Integer&gt;();</span><br><span class="line">        <span class="type">char</span>[] cArr = s.toCharArray();</span><br><span class="line">        <span class="keyword">if</span> (cArr.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">char</span> <span class="variable">sign</span> <span class="operator">=</span> <span class="string">'+'</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; cArr.length;) {</span><br><span class="line">            <span class="keyword">if</span> (Character.isDigit(cArr[i])) {</span><br><span class="line">                num = num * <span class="number">10</span> + (cArr[i] - <span class="string">'0'</span>);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> ((!Character.isDigit(cArr[i]) &amp;&amp; cArr[i] != <span class="string">' '</span>) || i == cArr.length - <span class="number">1</span>) {</span><br><span class="line">                <span class="keyword">if</span> (sign == <span class="string">'+'</span>) {</span><br><span class="line">                    stack.push(num);</span><br><span class="line">                } <span class="keyword">else</span> <span class="keyword">if</span> (sign == <span class="string">'-'</span>) {</span><br><span class="line">                    stack.push(-<span class="number">1</span> * num);</span><br><span class="line">                } <span class="keyword">else</span> <span class="keyword">if</span> (sign == <span class="string">'*'</span>) {</span><br><span class="line">                    <span class="type">int</span> <span class="variable">peek</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">                    stack.push(peek * num);</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    <span class="type">int</span> <span class="variable">peek</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">                    stack.push(peek / num);</span><br><span class="line">                }</span><br><span class="line">                sign = cArr[i];</span><br><span class="line">                num = <span class="number">0</span>;</span><br><span class="line">            }</span><br><span class="line">            i++;</span><br><span class="line">        }</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (!stack.isEmpty()) {</span><br><span class="line">            sum += stack.pop();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算器 </tag>
            
            <tag> Basic-Calculator </tag>
            
            <tag> Stack </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组</title>
      <link href="/2023/10/01/%E6%95%B0%E7%BB%84/"/>
      <url>/2023/10/01/%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h1 id="数组-Array"><a href="#数组-Array" class="headerlink" title="数组 - Array"></a>数组 - Array</h1><blockquote><ul><li><a href="/2023/04/05/%E5%8F%8C%E6%8C%87%E9%92%88/" title="双指针">双指针</a></li><li><a href="/2023/10/04/%E6%8E%92%E5%BA%8F/" title="排序">排序</a></li><li><a href="/2023/10/20/%E6%91%A9%E5%B0%94%E6%8A%95%E7%A5%A8/" title="摩尔投票">摩尔投票</a></li><li><a href="/2023/10/22/%E5%89%8D%E5%90%8E%E7%BC%80%E5%88%86%E8%A7%A3/" title="前后缀分解">前后缀分解</a></li></ul></blockquote><h1 id="57-插入区间"><a href="#57-插入区间" class="headerlink" title="57. 插入区间"></a><a href="https://leetcode.cn/problems/insert-interval/">57. 插入区间</a></h1><p>非常有意思的情况划分题：</p><blockquote><p>参考：<br><a href="https://leetcode.cn/problems/insert-interval/solutions/472435/shou-hua-tu-jie-57-cha-ru-qu-jian-fen-cheng-3ge-ji/">笨猪爆破组</a></p></blockquote><p>核心在于：</p><ol><li>推入前段不重叠部分</li><li>更新重叠部分再推入</li><li>推入后段不重叠部分</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[][] insert(<span class="type">int</span>[][] intervals, <span class="type">int</span>[] newInterval) {</span><br><span class="line">        List&lt;<span class="type">int</span>[]&gt; retList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> intervals.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">newLeft</span> <span class="operator">=</span> newInterval[<span class="number">0</span>], newRight = newInterval[<span class="number">1</span>];</span><br><span class="line">        <span class="comment">// 加入左边不重叠的</span></span><br><span class="line">        <span class="keyword">for</span> (; idx &lt; n; idx++) {</span><br><span class="line">            <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> intervals[idx][<span class="number">0</span>], right = intervals[idx][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (right &lt; newLeft) {</span><br><span class="line">                retList.add(<span class="keyword">new</span> <span class="title class_">int</span>[]{left, right});</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 更新重叠范围</span></span><br><span class="line">        <span class="keyword">for</span> (; idx &lt; n; idx++) {</span><br><span class="line">            <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> intervals[idx][<span class="number">0</span>], right = intervals[idx][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (left &gt; newRight) <span class="keyword">break</span>;</span><br><span class="line">            newLeft = Math.min(left, newLeft);</span><br><span class="line">            newRight = Math.max(right, newRight);</span><br><span class="line">        }</span><br><span class="line">        retList.add(<span class="keyword">new</span> <span class="title class_">int</span>[]{newLeft, newRight});</span><br><span class="line">        <span class="comment">// 加入右边不重叠部分</span></span><br><span class="line">        <span class="keyword">for</span> (; idx &lt; n; idx++) {</span><br><span class="line">            <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> intervals[idx][<span class="number">0</span>], right = intervals[idx][<span class="number">1</span>];</span><br><span class="line">            retList.add(<span class="keyword">new</span> <span class="title class_">int</span>[] {left, right});</span><br><span class="line">        }</span><br><span class="line">        <span class="type">int</span>[][] ret = <span class="keyword">new</span> <span class="title class_">int</span>[retList.size()][<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; ret.length; i++) {</span><br><span class="line">            ret[i] = retList.get(i);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="1366-通过投票对团队排名"><a href="#1366-通过投票对团队排名" class="headerlink" title="1366. 通过投票对团队排名"></a><a href="https://leetcode.cn/problems/rank-teams-by-votes/">1366. 通过投票对团队排名</a></h1><p>直接排序即可，主要检查对于Comparator的应用：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">rankTeams</span><span class="params">(String[] votes)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> votes.length, m = votes[<span class="number">0</span>].length();</span><br><span class="line">        Map&lt;Character, <span class="type">int</span>[]&gt; hm = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String vote : votes) {</span><br><span class="line">            <span class="type">char</span>[] cArr = vote.toCharArray();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) {</span><br><span class="line">                <span class="type">int</span>[] cur = hm.getOrDefault(cArr[i], <span class="keyword">new</span> <span class="title class_">int</span>[cArr.length]);</span><br><span class="line">                cur[i]++;</span><br><span class="line">                hm.put(cArr[i], cur);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        List&lt;Map.Entry&lt;Character, <span class="type">int</span>[]&gt;&gt; ls = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(hm.entrySet());</span><br><span class="line">        Collections.sort(ls, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Map.Entry&lt;Character, <span class="type">int</span>[]&gt;&gt;(){</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Map.Entry&lt;Character, <span class="type">int</span>[]&gt; e1, Map.Entry&lt;Character, <span class="type">int</span>[]&gt; e2)</span> {</span><br><span class="line">                <span class="type">Character</span> <span class="variable">e1Key</span> <span class="operator">=</span> e1.getKey();</span><br><span class="line">                <span class="type">Character</span> <span class="variable">e2Key</span> <span class="operator">=</span> e2.getKey();</span><br><span class="line">                <span class="type">int</span>[] e1Value = e1.getValue();</span><br><span class="line">                <span class="type">int</span>[] e2Value = e2.getValue();</span><br><span class="line">                <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> e1Value.length;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">                    <span class="type">int</span> <span class="variable">first</span> <span class="operator">=</span> e1Value[i], second = e2Value[i];</span><br><span class="line">                    <span class="keyword">if</span> (first == second) {</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    } <span class="keyword">else</span> {</span><br><span class="line">                        <span class="keyword">return</span> second - first;</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">return</span> e1Key - e2Key;</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Character, <span class="type">int</span>[]&gt; ele : ls) {</span><br><span class="line">            sb.append(ele.getKey());</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
            <tag> Array </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DataBricks</title>
      <link href="/2023/09/19/DataBricks-%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/"/>
      <url>/2023/09/19/DataBricks-%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/</url>
      
        <content type="html"><![CDATA[<div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>本篇文章援引：</p><blockquote><p>一亩三分地 - <a href="https://www.1point3acres.com/bbs/space-uid-764814.html">newgpu</a></p><p><a href="https://www.1point3acres.com/bbs/thread-851795-1-1.html"> 谈谈Databricks和云计算</a></p><p><a href="https://www.1point3acres.com/bbs/thread-855806-1-1.html"> 谈谈Databricks和云计算（二）</a></p><p><a href="https://cloud.tencent.com/developer/article/2191426">腾讯数据湖与湖仓一体架构实践</a></p></blockquote></div><h1 id="Data-Warehouse"><a href="#Data-Warehouse" class="headerlink" title="Data Warehouse"></a>Data Warehouse</h1><p>Running on cluster. </p><p>A place to store structured data.</p><p>Source: offline ETL pipline to insert by batch</p><p>goal is to make data scientist to run SQL query</p><p>特点：</p><ol><li>It is a distributed database hence it has a lot features that database own</li><li>Structured data</li></ol><h2 id="snowflake"><a href="#snowflake" class="headerlink" title="snowflake"></a>snowflake</h2><p>managed cloud data warehouse</p><p>data warehouse on cloud</p><h1 id="databricks-and-data-lakehouse"><a href="#databricks-and-data-lakehouse" class="headerlink" title="databricks and data lakehouse"></a>databricks and data lakehouse</h1><p>datalake -&gt; data lakehouse</p><p>No need for schema: friendly to semi-structured and non structured data</p><h1 id="产品"><a href="#产品" class="headerlink" title="产品"></a>产品</h1><h2 id="delta-lake"><a href="#delta-lake" class="headerlink" title="delta lake"></a>delta lake</h2><p>stores data itself and its metadata. </p><p>metadata is for ACID transactions and support for a schema with a supporting write-ahead log for data rolling back when necessary </p><p>Data can be stored on the top of S3, like object storage. Delta Lake imports metadata for ACID transactions and schema. These ACID transactions and schema are necessary for SQL workload</p><h2 id="Databricks-SQL"><a href="#Databricks-SQL" class="headerlink" title="Databricks SQL"></a>Databricks SQL</h2><p>Photon execution engine.</p><h2 id="Databricks-Runtime"><a href="#Databricks-Runtime" class="headerlink" title="Databricks Runtime"></a>Databricks Runtime</h2><p>Create machine -&gt; a tuned spark cluster, and spark is ready to go</p><h2 id="Notebook"><a href="#Notebook" class="headerlink" title="Notebook"></a>Notebook</h2><p>Connect to a cluster that the user have access to. Use scala, python, sql or R to run the spark command and do the manipulation with the data on top of S3</p>]]></content>
      
      
      <categories>
          
          <category> 面经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面经 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最小生成树 - Minimum Spanning Tree - MST</title>
      <link href="/2023/09/12/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"/>
      <url>/2023/09/12/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<p>最小生成树算法主要有： </p><ul><li>Kruskal 算法</li><li>Prim 算法</li></ul><h1 id="什么是最小生成树-MST"><a href="#什么是最小生成树-MST" class="headerlink" title="什么是最小生成树 MST"></a>什么是最小生成树 MST</h1><p><strong>先说「树」和「图」的根本区别：树不会包含环，图可以包含环</strong>。</p><p>什么是图的「生成树」呢，就是在图中找一棵包含图中的所有节点的树。专业点说，生成树是含有图中所有顶点的「无环连通子图」。</p><p><img src="/2023/09/12/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/MST_0.png" alt="MST_0"></p><p>对于加权图，每条边都有权重，所以每棵生成树都有一个权重和。比如上图，右侧生成树的权重和显然比左侧生成树的权重和要小。</p><p><strong>最小生成树: 所有可能的生成树中，权重和最小的那棵生成树就叫「最小生成树」</strong>。</p><h1 id="Kruskal"><a href="#Kruskal" class="headerlink" title="Kruskal"></a>Kruskal</h1><p>MST 要保证边：</p><p>1、包含图中的所有节点。</p><p>2、形成的结构是树结构（即不存在环）。</p><p>3、权重和最小。</p><p>其中 1， 2可以用并查集来做：</p><blockquote><p><strong>对于添加的这条边，如果该边的两个节点本来就在同一连通分量里，那么添加这条边会产生环；反之，如果该边的两个节点不在同一连通分量里，则添加这条边不会产生环</strong>。</p></blockquote><blockquote><p> 详见：<a href="/2023/09/10/%E5%B9%B6%E6%9F%A5%E9%9B%86/" title="并查集">并查集</a> 习题261</p></blockquote><p>对于3:</p><p>用到了贪心思路：</p><p>将所有边按照权重从小到大排序，从权重最小的边开始遍历，如果这条边和 <code>mst</code> 中的其它边不会形成环，则这条边是最小生成树的一部分，将它加入 <code>mst</code> 集合；否则，这条边不是最小生成树的一部分，不要把它加入 <code>mst</code> 集合。</p><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><p>To be write…</p><p>1135</p><p>1584</p>]]></content>
      
      
      <categories>
          
          <category> Algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 并查集 </tag>
            
            <tag> UnionFind </tag>
            
            <tag> 最小生成树 </tag>
            
            <tag> minimum spanning tree </tag>
            
            <tag> Kruscal </tag>
            
            <tag> Prim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并查集</title>
      <link href="/2023/09/10/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
      <url>/2023/09/10/%E5%B9%B6%E6%9F%A5%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h1 id="并查集-解决的问题"><a href="#并查集-解决的问题" class="headerlink" title="并查集 - 解决的问题"></a>并查集 - 解决的问题</h1><ol><li><p>快速的支持以下的操作：（近乎 O(1)）</p><ol><li>将两个集合合并</li><li>询问两个元素是否在一个集合当中</li></ol></li><li><p>基本原理: 每一个集合都用一颗树来表示。树根的标号就是整个集合的编号。每个节点存储他的父节点， p[x] 表示x的父节点</p><ol><li><p>用树（不一定是二叉树）的形式来维护集合：</p></li><li><p>集合的根结点为集合编号</p></li><li><p><img src="/2023/09/10/%E5%B9%B6%E6%9F%A5%E9%9B%86/uf_%E9%9B%86%E5%90%88.png" alt="uf_集合"></p></li></ol></li><li><p>问题1：</p><ol><li>如何判断树根：<ul><li><code>if (p[x] == x)</code> 根节点的parent是他自己</li></ul></li></ol></li><li><p>问题2: </p><ol><li>如何求x的集合编号：<ul><li><code>while (p[x] ≠ x) x = p[x]</code></li></ul></li></ol></li><li><p>问题3: </p><ol><li>如何合并两个集合：<ul><li>把其中一个集合当成另一个集合的儿子；</li><li>p[x] = y (px 是 x的集合编号， py是y的集合编号）</li><li><img src="/2023/09/10/%E5%B9%B6%E6%9F%A5%E9%9B%86/uf_%E5%90%88%E5%B9%B6%E9%9B%86%E5%90%88.png" alt="uf_合并集合"></li></ul></li></ol></li></ol><p>思考：插入需要树的高度的复杂度 → 并查集的优化：路经压缩</p><p>当第一次x节点后，当前路径上经过的所有点都直接指向根节点，因此近乎 O(1)</p><p><img src="/2023/09/10/%E5%B9%B6%E6%9F%A5%E9%9B%86/uf_%E8%B7%AF%E7%BB%8F%E5%8E%8B%E7%BC%A9.png" alt="uf_路经压缩"></p><p>并且同时维护节点数量：</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> p[N], cnt[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span> (p[x] != x) p[x] = <span class="built_in">find</span>(p[x]);</span><br><span class="line">    <span class="keyword">return</span> p[x];</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">    {</span><br><span class="line">        p[i] = i;</span><br><span class="line">        cnt[i] = <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (m -- )</span><br><span class="line">    {</span><br><span class="line">        string op;</span><br><span class="line">        <span class="type">int</span> a, b;</span><br><span class="line">        cin &gt;&gt; op;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (op == <span class="string">"C"</span>)</span><br><span class="line">        {</span><br><span class="line">            cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">            a = <span class="built_in">find</span>(a), b = <span class="built_in">find</span>(b);</span><br><span class="line">            <span class="keyword">if</span> (a != b)</span><br><span class="line">            {</span><br><span class="line">                p[a] = b;</span><br><span class="line">                cnt[b] += cnt[a];</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="string">"Q1"</span>)</span><br><span class="line">        {</span><br><span class="line">            cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">find</span>(a) == <span class="built_in">find</span>(b)) <span class="built_in">puts</span>(<span class="string">"Yes"</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"No"</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        {</span><br><span class="line">            cin &gt;&gt; a;</span><br><span class="line">            cout &lt;&lt; cnt[<span class="built_in">find</span>(a)] &lt;&lt; endl;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>java 代码：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UF</span> {</span><br><span class="line">    <span class="comment">// 连通分量个数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> count;</span><br><span class="line">    <span class="comment">// 存储每个节点的父节点</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] parent;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// n 为图中节点的个数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UF</span><span class="params">(<span class="type">int</span> n)</span> {</span><br><span class="line">        <span class="built_in">this</span>.count = n;</span><br><span class="line">        parent = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">            parent[i] = i;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将节点 p 和节点 q 连通</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">union</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> q)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">rootP</span> <span class="operator">=</span> find(p);</span><br><span class="line">        <span class="type">int</span> <span class="variable">rootQ</span> <span class="operator">=</span> find(q);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (rootP == rootQ)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        </span><br><span class="line">        parent[rootQ] = rootP;</span><br><span class="line">        <span class="comment">// 两个连通分量合并成一个连通分量</span></span><br><span class="line">        count--;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断节点 p 和节点 q 是否连通</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">connected</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> q)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">rootP</span> <span class="operator">=</span> find(p);</span><br><span class="line">        <span class="type">int</span> <span class="variable">rootQ</span> <span class="operator">=</span> find(q);</span><br><span class="line">        <span class="keyword">return</span> rootP == rootQ;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span> x)</span> {</span><br><span class="line">        <span class="keyword">if</span> (parent[x] != x) {</span><br><span class="line">            parent[x] = find(parent[x]); <span class="comment">// 这里是用了路经压缩</span></span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> parent[x];</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回图中的连通分量个数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">count</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>这里的可以增加一个size数组，用来表示每一个联通块的大小</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UF</span> {</span><br><span class="line">    <span class="type">int</span> count;</span><br><span class="line">    <span class="type">int</span>[] parent;</span><br><span class="line">    <span class="type">int</span>[] size;</span><br><span class="line">    UF(<span class="type">int</span> n) {</span><br><span class="line">        <span class="built_in">this</span>.count = n;</span><br><span class="line">        <span class="built_in">this</span>.parent = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="built_in">this</span>.size = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">            parent[i] = i;</span><br><span class="line">            <span class="built_in">this</span>.size[i] = <span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">union</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> q)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">rootP</span> <span class="operator">=</span> find(p);</span><br><span class="line">        <span class="type">int</span> <span class="variable">rootQ</span> <span class="operator">=</span> find(q);</span><br><span class="line">        <span class="keyword">if</span> (rootP == rootQ) <span class="keyword">return</span>;</span><br><span class="line">        parent[rootQ] = rootP;</span><br><span class="line">        size[rootP] += size[rootQ]; <span class="comment">// 相当于把 rooQ 的parent指定为rootP, 所以rootP的size需要加上rootQ的size</span></span><br><span class="line">        count--;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span> cur)</span> {</span><br><span class="line">        <span class="keyword">if</span> (parent[cur] != cur) {</span><br><span class="line">            parent[cur] = find(parent[cur]);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> parent[cur];</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="函数方法"><a href="#函数方法" class="headerlink" title="函数方法"></a>函数方法</h1><p>union很好理解，找到两个根，将其中一个根的parent设置成另一个根的儿子</p><p>主要是find，这里使用了路经压缩：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span> x)</span> {</span><br><span class="line">    <span class="keyword">if</span> (parent[x] != x) {</span><br><span class="line">        parent[x] = find(parent[x]); <span class="comment">// 这里用了路经压缩, find返回了最上面的根，然后当前栈层就会接上这个根</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> parent[x];</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>比如：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1 -&gt; 2 2 -&gt; 3 3 -&gt; 3</span><br><span class="line">4 -&gt; 4</span><br><span class="line">5 -&gt; 6 6 -&gt; 6</span><br><span class="line"></span><br><span class="line">所以是 1-&gt;2-&gt;3; 4-&gt;4; 6-&gt;6; 三个集合</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>那么用 <code>1-&gt;2-&gt;3</code>举例子：1的父节点是2，2的父节点是3，而3是其自己的父节点。</p><p>如果我们调用<code>find(1)</code>：</p><ol><li><code>parent[1]</code> 是 2，不等于1，所以我们要递归地找<code>find(2)</code>。</li><li><code>parent[2]</code> 是 3，不等于2，所以我们要递归地找<code>find(3)</code>。</li><li><code>parent[3]</code> 是 3，等于3，所以返回3。</li></ol><p>在这个过程中，我们还会更新<code>parent[1]</code>和<code>parent[2]</code>都为3，因为3是1和2的代表。这就是路径压缩的优化，确保每个节点都直接指向其代表，从而使得后续的查找操作更快。</p><p>等于说：</p><p><img src="/2023/09/10/%E5%B9%B6%E6%9F%A5%E9%9B%86/uf_%E8%B7%AF%E7%BB%8F%E5%8E%8B%E7%BC%A9_2.jpeg" alt="uf_路经压缩_2"></p><h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><h2 id="200-岛屿数量"><a href="#200-岛屿数量" class="headerlink" title="200. 岛屿数量"></a><a href="https://leetcode.cn/problems/number-of-islands/description/#">200. 岛屿数量</a></h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="type">int</span>[] dx = <span class="keyword">new</span> <span class="title class_">int</span>[] {<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, -<span class="number">1</span>};</span><br><span class="line">    <span class="type">int</span>[] dy = <span class="keyword">new</span> <span class="title class_">int</span>[] {<span class="number">0</span>, <span class="number">1</span>, -<span class="number">1</span>, <span class="number">0</span>};</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">UnionFind</span> {</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> count;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span>[] parent;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">UnionFind</span><span class="params">(<span class="type">char</span>[][] grid)</span> {</span><br><span class="line">            <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> grid.length;</span><br><span class="line">            <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> grid[<span class="number">0</span>].length;</span><br><span class="line">            parent = <span class="keyword">new</span> <span class="title class_">int</span>[n * m];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; m; j++) {</span><br><span class="line">                    <span class="keyword">if</span> (grid[i][j] == <span class="string">'1'</span>) {</span><br><span class="line">                        parent[i * m + j] = i * m + j;</span><br><span class="line">                        count++;</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span> x)</span> {</span><br><span class="line">            <span class="keyword">if</span> (parent[x] != x) {</span><br><span class="line">                parent[x] = find(parent[x]);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">return</span> parent[x];</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">union</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> q)</span> {</span><br><span class="line">            <span class="type">int</span> <span class="variable">rootP</span> <span class="operator">=</span> find(p);</span><br><span class="line">            <span class="type">int</span> <span class="variable">rootQ</span> <span class="operator">=</span> find(q);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (rootP == rootQ) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">            parent[rootQ] = rootP;</span><br><span class="line">            count--;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numIslands</span><span class="params">(<span class="type">char</span>[][] grid)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> grid.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> grid[<span class="number">0</span>].length;</span><br><span class="line">        <span class="type">UnionFind</span> <span class="variable">uf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UnionFind</span>(grid);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; m; j++) {</span><br><span class="line">                <span class="keyword">if</span> (grid[i][j] == <span class="string">'1'</span>) {</span><br><span class="line">                    grid[i][j] = <span class="string">'0'</span>;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">dir</span> <span class="operator">=</span> <span class="number">0</span>; dir &lt; <span class="number">4</span>; dir++) {</span><br><span class="line">                        <span class="type">int</span> <span class="variable">newX</span> <span class="operator">=</span> i + dx[dir], newY = j + dy[dir];</span><br><span class="line">                        <span class="keyword">if</span> (newX &gt;= <span class="number">0</span> &amp;&amp; newX &lt; n &amp;&amp; newY &gt;= <span class="number">0</span> &amp;&amp; newY &lt; m &amp;&amp; grid[newX][newY] == <span class="string">'1'</span>) {</span><br><span class="line">                            uf.union(</span><br><span class="line">                                i * m + j, newX * m + newY</span><br><span class="line">                            );</span><br><span class="line">                        };</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> uf.count;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="721-账户合并"><a href="#721-账户合并" class="headerlink" title="721. 账户合并"></a><a href="https://leetcode.cn/problems/accounts-merge/">721. 账户合并</a></h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">UnionFind</span> {</span><br><span class="line">        <span class="type">int</span>[] parent;</span><br><span class="line">        <span class="type">int</span> count;</span><br><span class="line"></span><br><span class="line">        UnionFind(List&lt;List&lt;String&gt;&gt; accounts) {</span><br><span class="line">            <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> accounts.size();</span><br><span class="line">            parent = <span class="keyword">new</span> <span class="title class_">int</span>[size];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; accounts.size(); i++) {</span><br><span class="line">                parent[i] = i;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span> x)</span> {</span><br><span class="line">            <span class="keyword">if</span> (parent[x] != x) parent[x] = find(parent[x]);</span><br><span class="line">            <span class="keyword">return</span> parent[x];</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">union</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> q)</span> {</span><br><span class="line">            <span class="type">int</span> <span class="variable">rootQ</span> <span class="operator">=</span> find(q);</span><br><span class="line">            <span class="type">int</span> <span class="variable">rootP</span> <span class="operator">=</span> find(p);</span><br><span class="line">            <span class="keyword">if</span> (rootQ == rootP) <span class="keyword">return</span>;</span><br><span class="line">            parent[rootQ] = rootP;</span><br><span class="line">            count--;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="title function_">accountsMerge</span><span class="params">(List&lt;List&lt;String&gt;&gt; accounts)</span> {</span><br><span class="line">        <span class="type">UnionFind</span> <span class="variable">uf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UnionFind</span>(accounts);</span><br><span class="line">        Map&lt;String, Integer&gt; emailToId = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; accounts.size(); i++) {</span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> accounts.get(i).size();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt; num; j++) {</span><br><span class="line">                <span class="type">String</span> <span class="variable">curEmail</span> <span class="operator">=</span> accounts.get(i).get(j);</span><br><span class="line">                <span class="keyword">if</span> (!emailToId.containsKey(curEmail)) {</span><br><span class="line">                    emailToId.put(curEmail, i);</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    uf.union(i, emailToId.get(curEmail));</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        Map&lt;Integer, List&lt;String&gt;&gt; idToEmails = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Integer&gt; entry : emailToId.entrySet()) {</span><br><span class="line">            <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> uf.find(entry.getValue());</span><br><span class="line">            List&lt;String&gt; emails = idToEmails.getOrDefault(id, <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">            emails.add(entry.getKey());</span><br><span class="line">            idToEmails.put(id, emails);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        List&lt;List&lt;String&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(Map.Entry&lt;Integer, List&lt;String&gt;&gt; entry : idToEmails.entrySet()){</span><br><span class="line">            List&lt;String&gt; emails = entry.getValue();</span><br><span class="line">            Collections.sort(emails);</span><br><span class="line">            List&lt;String&gt; tmp = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            tmp.add(accounts.get(entry.getKey()).get(<span class="number">0</span>));</span><br><span class="line">            tmp.addAll(emails);</span><br><span class="line">            res.add(tmp);</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="323-无向图中连通分量的数目"><a href="#323-无向图中连通分量的数目" class="headerlink" title="323.无向图中连通分量的数目"></a><a href="https://leetcode.cn/problems/number-of-connected-components-in-an-undirected-graph/description/">323.无向图中连通分量的数目</a></h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">UnionFind</span> {</span><br><span class="line">        <span class="type">int</span>[] parent;</span><br><span class="line">        <span class="type">int</span> count;</span><br><span class="line">        UnionFind(<span class="type">int</span> n) {</span><br><span class="line">            parent = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">            count = n;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">                parent[i] = i;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">union</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> q)</span> {</span><br><span class="line">            <span class="type">int</span> <span class="variable">rootP</span> <span class="operator">=</span> find(p);</span><br><span class="line">            <span class="type">int</span> <span class="variable">rootQ</span> <span class="operator">=</span> find(q);</span><br><span class="line">            <span class="keyword">if</span> (rootP == rootQ) <span class="keyword">return</span>;</span><br><span class="line">            count--;</span><br><span class="line">            parent[rootQ] = rootP;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span> x)</span> {</span><br><span class="line">            <span class="keyword">if</span> (parent[x] != x) {</span><br><span class="line">                parent[x] = find(parent[x]);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">return</span> parent[x];</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCount</span><span class="params">()</span> {</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.count;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countComponents</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span>[][] edges)</span> {</span><br><span class="line">        <span class="type">UnionFind</span> <span class="variable">uf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UnionFind</span>(n);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; edges.length; i++) {</span><br><span class="line">            <span class="type">int</span> <span class="variable">p</span> <span class="operator">=</span> edges[i][<span class="number">0</span>], q = edges[i][<span class="number">1</span>];</span><br><span class="line">            uf.union(p, q);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> uf.getCount();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="261-以图判树"><a href="#261-以图判树" class="headerlink" title="261.以图判树"></a><a href="https://leetcode.cn/problems/graph-valid-tree/description/">261.以图判树</a></h2><h3 id="并查集"><a href="#并查集" class="headerlink" title="并查集:"></a>并查集:</h3><blockquote><p>树满足两个性质：</p><ol><li>n 个节点 n - 1条边 </li><li>无环</li></ol></blockquote><p>如果一个联通块下相连了两个节点，那么成环：</p><p><img src="/2023/09/10/%E5%B9%B6%E6%9F%A5%E9%9B%86/lc_261_1.png" alt="lc_261_1"></p><p>这种无环：</p><p><img src="/2023/09/10/%E5%B9%B6%E6%9F%A5%E9%9B%86/lc_261_2.png" alt="lc_261_2"></p><blockquote><p><strong>对于添加的这条边，如果该边的两个节点本来就在同一连通分量里，那么添加这条边会产生环；反之，如果该边的两个节点不在同一连通分量里，则添加这条边不会产生环</strong>。</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">UnionFind</span> {</span><br><span class="line">        <span class="type">int</span>[] parent;</span><br><span class="line"></span><br><span class="line">        UnionFind(<span class="type">int</span> n) {</span><br><span class="line">            parent = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">                parent[i] = i;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span> x)</span> {</span><br><span class="line">            <span class="keyword">if</span> (parent[x] != x) {</span><br><span class="line">                parent[x] = find(parent[x]);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">return</span> parent[x];</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">union</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> q)</span> {</span><br><span class="line">            <span class="type">int</span> <span class="variable">rootP</span> <span class="operator">=</span> find(p), rootQ = find(q);</span><br><span class="line">            <span class="keyword">if</span> (rootP == rootQ) <span class="keyword">return</span>;</span><br><span class="line">            parent[rootQ] = rootP;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="type">boolean</span> <span class="title function_">isConnected</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> q)</span> {</span><br><span class="line">            <span class="type">int</span> <span class="variable">rootP</span> <span class="operator">=</span> find(p), rootQ = find(q);</span><br><span class="line">            <span class="keyword">return</span> rootP == rootQ;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">validTree</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span>[][] edges)</span> {</span><br><span class="line">        <span class="comment">// 如果一个联通块下相连了两个节点，那么成环</span></span><br><span class="line">        <span class="comment">// 树满足两个性质：1. n 个节点 n - 1条边 2. 无环</span></span><br><span class="line">        <span class="comment">// 1. n 个节点 n - 1条边</span></span><br><span class="line">        <span class="keyword">if</span> (n - <span class="number">1</span> != edges.length) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">UnionFind</span> <span class="variable">uf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UnionFind</span>(n);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断有无环就是判断两个联通块是否又被尝试链接，如果是，那么就有环</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; edges.length; i++) {</span><br><span class="line">            <span class="type">int</span> <span class="variable">p</span> <span class="operator">=</span> edges[i][<span class="number">0</span>], q = edges[i][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (!uf.isConnected(p, q)) {</span><br><span class="line">                uf.union(p, q);</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="DFS-Visited"><a href="#DFS-Visited" class="headerlink" title="DFS + Visited"></a>DFS + Visited</h3><p>比较困难的地方在于如何能够判断环即如何使用visited数组，由于这是个无向图，那么比如 <code>0 &lt;-&gt; 1</code> 节点0在遍历邻居1后，邻居1还会遍历它的邻居0，所以会被visited阻止，解决办法是传入一个parent变量，从而可以追踪目前的父节点。当当前节点的邻居和父节点为同一节点时跳过。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="type">boolean</span>[] visited;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; graph = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">validTree</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span>[][] edges)</span> {</span><br><span class="line">        <span class="keyword">if</span> (n - <span class="number">1</span> != edges.length) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        buildGraph(n);</span><br><span class="line">        visited = <span class="keyword">new</span> <span class="title class_">boolean</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; edges.length; i++) {</span><br><span class="line">            <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> edges[i][<span class="number">0</span>], b = edges[i][<span class="number">1</span>];</span><br><span class="line">            add(a, b);</span><br><span class="line">            add(b, a);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (!dfs(<span class="number">0</span>, -<span class="number">1</span>)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">boolean</span> v : visited) { <span class="comment">// Checks if all nodes are visited</span></span><br><span class="line">            <span class="keyword">if</span> (!v) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">buildGraph</span><span class="params">(<span class="type">int</span> n)</span> {</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">            graph.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> from, <span class="type">int</span> to)</span> {</span><br><span class="line">        graph.get(from).add(to);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> cur, <span class="type">int</span> parent)</span> {</span><br><span class="line">        <span class="keyword">if</span> (visited[cur]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        visited[cur] = <span class="literal">true</span>;</span><br><span class="line">        List&lt;Integer&gt; neighbours = graph.get(cur);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> neig : neighbours) {</span><br><span class="line">            <span class="keyword">if</span> (neig == parent) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (!dfs(neig, cur)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 并查集 </tag>
            
            <tag> UnionFind </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dijkstra</title>
      <link href="/2023/09/07/Dijkstra/"/>
      <url>/2023/09/07/Dijkstra/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>链式前向星-LinkedForwardStar</title>
      <link href="/2023/09/02/%E9%93%BE%E5%BC%8F%E5%89%8D%E5%90%91%E6%98%9F/"/>
      <url>/2023/09/02/%E9%93%BE%E5%BC%8F%E5%89%8D%E5%90%91%E6%98%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="链式前向星-Linked-Forward-Star"><a href="#链式前向星-Linked-Forward-Star" class="headerlink" title="链式前向星 - (Linked) Forward Star"></a>链式前向星 - (Linked) Forward Star</h1><p>它是一种存图的方式，是优化过的<strong>邻接表</strong>的表达方式</p><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p><strong>为了方便，我们约定 k 为点数，m 为边数。</strong></p><p>邻接矩阵：适用于边数较多的<strong>「稠密图」</strong>使用，当边数量接近点的数量的平方，即 <strong>「m ≈ n^2」</strong> 时，可定义为<strong>「稠密图」</strong>。</p><p>邻接表：适用于边数较少的<strong>「稀疏图」</strong>使用，当边数量接近点的数量，即 <strong>「m ≈ n」</strong> 时，可定义为<strong>「稀疏图」</strong>。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] he = <span class="keyword">new</span> <span class="title class_">int</span>[N], e = <span class="keyword">new</span> <span class="title class_">int</span>[M], ne = <span class="keyword">new</span> <span class="title class_">int</span>[M], w = <span class="keyword">new</span> <span class="title class_">int</span>[M];</span><br><span class="line"><span class="type">int</span> idx;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span> {</span><br><span class="line">    e[idx] = b;</span><br><span class="line">    ne[idx] = he[a];</span><br><span class="line">    he[a] = idx;</span><br><span class="line">    w[idx] = c;</span><br><span class="line">    idx++;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><code>idx</code> 是用来对边进行编号的，然后对存图用到的几个数组作简单解释：</p><ul><li><code>he</code> 数组：存储是某个节点所对应的边的集合（链表）的头结点；</li><li><code>e</code> 数组：由于访问某一条边指向的节点；</li><li><code>ne</code> 数组：由于是以链表的形式进行存边，该数组就是用于找到下一条边；</li><li><code>w</code> 数组：用于记录某条边的权重为多少。</li></ul><p>因此当我们想要遍历所有由 <code>a</code> 点发出的边时，可以使用如下方式：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> he[a]; i != -<span class="number">1</span>; i = ne[i]) {</span><br><span class="line">    <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> e[i], c = w[i]; <span class="comment">// 存在由 a 指向 b 的边，权重为 c</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>自己整理的java版本：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkedForwardStar</span> {</span><br><span class="line">    <span class="type">int</span>[] head = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>];</span><br><span class="line">    <span class="type">int</span>[] edge = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line">    <span class="type">int</span>[] next = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line">    <span class="type">int</span>[] weight = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line">    <span class="type">int</span> <span class="variable">tot</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    LinkedForwardStar() {</span><br><span class="line">        Arrays.fill(head, -<span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">add</span> <span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> w)</span> {</span><br><span class="line">        edge[tot] = b; <span class="comment">// 设置边的终点</span></span><br><span class="line">        next[tot] = head[a]; <span class="comment">// 设置该边的下一条边</span></span><br><span class="line">        weight[tot] = w; <span class="comment">// 设置该边的权重</span></span><br><span class="line">        head[a] = tot; <span class="comment">// 更新节点 u 的出边起始位置</span></span><br><span class="line">        tot++; <span class="comment">// 增加边数</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">traverseFrom</span><span class="params">(<span class="type">int</span> a)</span> {</span><br><span class="line">        System.out.println(<span class="string">"Traversing from node "</span> + a);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> head[a]; i != -<span class="number">1</span>; i = next[i]) {</span><br><span class="line">            <span class="type">int</span> <span class="variable">v</span> <span class="operator">=</span> edge[i];</span><br><span class="line">            <span class="type">int</span> <span class="variable">w</span> <span class="operator">=</span> weight[i];</span><br><span class="line">            System.out.println(a + <span class="string">" -&gt; "</span> + v + <span class="string">" weight: "</span> + w);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">LinkedForwardStar</span> <span class="variable">lfs</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LinkedForwardStar</span>();</span><br><span class="line">        lfs.add(<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line">        lfs.add(<span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>);</span><br><span class="line">        lfs.add(<span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>);</span><br><span class="line">        lfs.add(<span class="number">2</span>, <span class="number">4</span>, <span class="number">2</span>);</span><br><span class="line">        <span class="comment">// 遍历从各个节点出去的边</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; <span class="number">5</span>; i++) {</span><br><span class="line">            lfs.traverseFrom(i);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="Appendix"><a href="#Appendix" class="headerlink" title="Appendix"></a>Appendix</h2><p><a href="https://mp.weixin.qq.com/s/2Ba8-NI7lQh2_MvMpg-CZg">图论 - 存图方式 - 三叶</a></p><p>非链式前向星的建图方式：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt;[] buildGraph(<span class="type">int</span> numCourses, <span class="type">int</span>[][] prerequisites) {</span><br><span class="line">    <span class="comment">// 图中共有 numCourses 个节点</span></span><br><span class="line">    List&lt;Integer&gt;[] graph = <span class="keyword">new</span> <span class="title class_">LinkedList</span>[numCourses];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; numCourses; i++) {</span><br><span class="line">        graph[i] = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span>[] edge : prerequisites) {</span><br><span class="line">        <span class="type">int</span> <span class="variable">from</span> <span class="operator">=</span> edge[<span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">to</span> <span class="operator">=</span> edge[<span class="number">0</span>];</span><br><span class="line">        graph[from].add(to);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> graph;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 邻接表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从二叉树到回溯到DP</title>
      <link href="/2023/08/20/%E4%BB%8E%E4%BA%8C%E5%8F%89%E6%A0%91%E5%88%B0%E5%9B%9E%E6%BA%AF%E5%88%B0DP/"/>
      <url>/2023/08/20/%E4%BB%8E%E4%BA%8C%E5%8F%89%E6%A0%91%E5%88%B0%E5%9B%9E%E6%BA%AF%E5%88%B0DP/</url>
      
        <content type="html"><![CDATA[<h1 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h1><p>暂略，已经练习很多了</p><p>见 <a href="/2023/04/17/%E4%BA%8C%E5%8F%89%E6%A0%91/" title="二叉树">二叉树</a> 中包含所有二叉树</p><h1 id="回溯"><a href="#回溯" class="headerlink" title="回溯"></a>回溯</h1><div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>主要参考：<br><a href="https://www.bilibili.com/video/BV1mG4y1A7Gu/?spm_id_from=333.788&amp;vd_source=54f34024c3784d45de85a3f70808ab70">灵茶山艾府 - 回溯 - [14 - 16]</a></p><p>自己之前也收集过：见 <a href="/2023/04/20/%E5%9B%9E%E6%BA%AF/" title="回溯">回溯</a> </p></div><blockquote><p>回溯有一个增量构造答案的过程，这个过程通常使用递归来实现。选 “a”, “b”, “c” 选 “ad” …</p></blockquote><blockquote><p>递归： 考虑好边界条件以及和非边界条件写对即可。剩下交给数学归纳法</p></blockquote><p>回溯/动归三问：-&gt; 主要是为了写对 <strong>边界条件以及和非边界条件</strong></p><ul><li><p>当前操作是什么？</p></li><li><p>子问题是什么？</p></li><li><p>下一个子问题是什么？</p></li></ul><h2 id="子集型"><a href="#子集型" class="headerlink" title="子集型"></a>子集型</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>可以有两种思路：</p><p>站在输入的角度：</p><p>枚举第 i 个元素 你是<strong>选/不选</strong></p><blockquote><p>ps: 01背包与此相似</p></blockquote><p>每个数都可以在子集中，也可以不在子集中</p><p>此时：<strong>叶子结点是答案</strong></p><p><img src="/2023/08/20/%E4%BB%8E%E4%BA%8C%E5%8F%89%E6%A0%91%E5%88%B0%E5%9B%9E%E6%BA%AF%E5%88%B0DP/78_%E8%BE%93%E5%85%A5%E8%A7%92%E5%BA%A6_%E9%80%89%E6%88%96%E4%B8%8D%E9%80%89.png" alt="78_输入角度_选或不选"></p><p>回溯三问：</p><ol><li>当前操作 <ol><li>枚举第 i 个数<strong>选/不选</strong></li></ol></li><li>子问题<ol><li>从下标 &gt;= i 的数字中构造子集</li></ol></li><li>下一个子问题<ol><li>从下标 &gt;= i + 1的数字中构造子集</li></ol></li></ol><p>站在<strong>答案</strong>角度：</p><p>枚举第一个数选择谁，第二个数选择谁，</p><p>此时：<strong>每个节点都是答案</strong></p><p><img src="/2023/08/20/%E4%BB%8E%E4%BA%8C%E5%8F%89%E6%A0%91%E5%88%B0%E5%9B%9E%E6%BA%AF%E5%88%B0DP/78_%E7%AD%94%E6%A1%88%E8%A7%92%E5%BA%A6_%E9%80%89%E6%88%96%E4%B8%8D%E9%80%89.png" alt="78_答案角度_选或不选"></p><p>回溯三问：</p><ol><li>当前操作 <ol><li>枚举答案的第一个数选什么第二个数选什么…</li></ol></li><li>子问题<ol><li>从下标 &gt;= i 的数字中构造子集</li></ol></li><li>下一个子问题<ol><li>从下标 &gt;= j + 1的数字中构造子集</li></ol></li></ol><h2 id="组合型"><a href="#组合型" class="headerlink" title="组合型"></a>组合型</h2><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>子集 + 剪枝 = 组合型问题</p><p>下图（左选两个数，右选三个数）</p><p><img src="/2023/08/20/%E4%BB%8E%E4%BA%8C%E5%8F%89%E6%A0%91%E5%88%B0%E5%9B%9E%E6%BA%AF%E5%88%B0DP/%E7%BB%84%E5%90%88%E5%9E%8B%E5%9B%9E%E6%BA%AF-%E5%89%AA%E6%9E%9D1.png" alt="组合型回溯-剪枝1"></p><p><img src="/2023/08/20/%E4%BB%8E%E4%BA%8C%E5%8F%89%E6%A0%91%E5%88%B0%E5%9B%9E%E6%BA%AF%E5%88%B0DP/77_%E6%80%9D%E8%B7%AF.png" alt="77_思路"></p><blockquote><p>为什么从大到小枚举呢？</p></blockquote><p>假设我们需要选 3 个数，现在已经选了1个了，即 k = 3, m = 1; 我们还需要选择 d = k - m -&gt; 3 - 1 = 2 个数</p><p>由于是从大到小枚举，那么我们如果 i &lt; d; 即要选的数为[1,1] 也就是1的话那么是无论如何都没办法选出来两个数 k = 2 的（这是因为题目的范围是[1,n]）所以从大到小会比较容易剪枝</p><blockquote><p>正序枚举怎么做呢？</p></blockquote><p><code>k - path.size()</code> 是 我们还需要几个</p><p>我们要判断的就是还需要的能否被正确的提供，当前我们剩余的个数是 <code>n - i + 1</code></p><p>因此如果需要的不能被满足，直接提前截止即可 <code> if (k - path.size() &gt; n - cur + 1) return;</code></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>对于组合型和子集型回溯有两种思考路径：</p><ul><li>选或不选 - 输入视角<ul><li><a href="https://leetcode.cn/problems/generate-parentheses/">括号生成</a></li></ul></li><li>枚举选哪个 - 输出视角<ul><li><a href="https://leetcode.cn/problems/generate-parentheses/">分割回文串</a></li></ul></li></ul><h2 id="排列型"><a href="#排列型" class="headerlink" title="排列型"></a>排列型</h2><p><img src="/2023/08/20/%E4%BB%8E%E4%BA%8C%E5%8F%89%E6%A0%91%E5%88%B0%E5%9B%9E%E6%BA%AF%E5%88%B0DP/%E6%8E%92%E5%88%97%E5%9E%8B%E5%9B%9E%E6%BA%AF.png" alt="排列型回溯"></p><p>和组合的区别就在于<code>[2, 1]</code> 和 <code>[1, 2]</code>在组合中被认定为一种，但是排列中则是两种不同的</p><h1 id="DP"><a href="#DP" class="headerlink" title="DP"></a>DP</h1><div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>主要参考：</p><p>灵茶山艾府：</p><p><a href="https://www.bilibili.com/video/BV1Xj411K7oF/?spm_id_from=333.788&amp;vd_source=54f34024c3784d45de85a3f70808ab70">从记忆化搜索到<strong>递推</strong></a></p><p><a href="https://www.bilibili.com/video/BV1AM4y1x7r4/?spm_id_from=333.999.0.0">选或不选 vs 枚举选哪个</a></p></div><p>主要还是<br>状态定义 + 状态转移</p><p>可以借用子集型回溯中的</p><p>选或不选 / 选哪个</p><p><img src="/2023/08/20/%E4%BB%8E%E4%BA%8C%E5%8F%89%E6%A0%91%E5%88%B0%E5%9B%9E%E6%BA%AF%E5%88%B0DP/dp_%E5%90%AF%E5%8F%91.png" alt="dp_启发"></p><h2 id="从上至下-记忆化搜索"><a href="#从上至下-记忆化搜索" class="headerlink" title="从上至下 - 记忆化搜索"></a>从上至下 - 记忆化搜索</h2><p><img src="/2023/08/20/%E4%BB%8E%E4%BA%8C%E5%8F%89%E6%A0%91%E5%88%B0%E5%9B%9E%E6%BA%AF%E5%88%B0DP/dp_%E8%AE%B0%E5%BF%86%E5%8C%96%E6%90%9C%E7%B4%A2.png" alt="dp_记忆化搜索"></p><p><img src="/2023/08/20/%E4%BB%8E%E4%BA%8C%E5%8F%89%E6%A0%91%E5%88%B0%E5%9B%9E%E6%BA%AF%E5%88%B0DP/dp_%E8%AE%B0%E5%BF%86%E5%8C%96%E6%90%9C%E7%B4%A2_2.png" alt="dp_记忆化搜索_2"></p><h2 id="从下而上-递推"><a href="#从下而上-递推" class="headerlink" title="从下而上 - 递推"></a>从下而上 - 递推</h2><p><img src="/2023/08/20/%E4%BB%8E%E4%BA%8C%E5%8F%89%E6%A0%91%E5%88%B0%E5%9B%9E%E6%BA%AF%E5%88%B0DP/dp_%E9%80%92%E5%BD%92%E5%88%B0%E9%80%92%E6%8E%A8.png" alt="dp_递归到递推"></p><h1 id="回溯例题"><a href="#回溯例题" class="headerlink" title="回溯例题"></a>回溯例题</h1><h2 id="子集型-1"><a href="#子集型-1" class="headerlink" title="子集型"></a>子集型</h2><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">17. 电话号码的字母组合 https://leetcode.cn/problems/letter-combinations-of-a-phone-number/solutions/2059416/hui-su-bu-hui-xie-tao-lu-zai-ci-pythonja-3orv/</span><br><span class="line">78. 子集 https://leetcode.cn/problems/subsets/solutions/2059409/hui-su-bu-hui-xie-tao-lu-zai-ci-pythonja-8tkl/</span><br><span class="line">131. 分割回文串 https://leetcode.cn/problems/palindrome-partitioning/solutions/2059414/hui-su-bu-hui-xie-tao-lu-zai-ci-pythonja-fues/</span><br><span class="line">784. 字母大小写全排列 https://leetcode.cn/problems/letter-case-permutation/</span><br><span class="line">1601. 最多可达成的换楼请求数目 https://leetcode.cn/problems/maximum-number-of-achievable-transfer-requests/</span><br><span class="line">2397. 被列覆盖的最多行数 https://leetcode.cn/problems/maximum-rows-covered-by-columns/</span><br><span class="line">306. 累加数 https://leetcode.cn/problems/additive-number/ </span><br><span class="line">2698. 求一个整数的惩罚数 https://leetcode.cn/problems/find-the-punishment-number-of-an-integer/</span><br></pre></td></tr></tbody></table></figure><h2 id="组合型-1"><a href="#组合型-1" class="headerlink" title="组合型"></a>组合型</h2><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">77. 组合 https://leetcode.cn/problems/combinations/solutions/2071017/hui-su-bu-hui-xie-tao-lu-zai-ci-pythonja-65lh/</span><br><span class="line">216. 组合总和 III https://leetcode.cn/problems/combination-sum-iii/solutions/2071013/hui-su-bu-hui-xie-tao-lu-zai-ci-pythonja-feme/</span><br><span class="line">22. 括号生成 https://leetcode.cn/problems/generate-parentheses/solutions/2071015/hui-su-bu-hui-xie-tao-lu-zai-ci-pythonja-wcdw/</span><br><span class="line">301. 删除无效的括号 https://leetcode.cn/problems/remove-invalid-parentheses/</span><br></pre></td></tr></tbody></table></figure><h2 id="排列型-1"><a href="#排列型-1" class="headerlink" title="排列型"></a>排列型</h2><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">46. 全排列 https://leetcode.cn/problems/permutations/solutions/2079585/hui-su-bu-hui-xie-tao-lu-zai-ci-jing-que-6hrh/</span><br><span class="line">51. N 皇后 https://leetcode.cn/problems/n-queens/solutions/2079586/hui-su-tao-lu-miao-sha-nhuang-hou-shi-pi-mljv/</span><br><span class="line">52. N 皇后 II（直接用 51 题代码搞定）https://leetcode.cn/problems/n-queens-ii/solution/hui-su-miao-sha-nhuang-hou-yi-ge-shi-pin-l41</span><br></pre></td></tr></tbody></table></figure><h1 id="子集型："><a href="#子集型：" class="headerlink" title="子集型："></a>子集型：</h1><h1 id="17-电话号码的字母组合"><a href="#17-电话号码的字母组合" class="headerlink" title="17. 电话号码的字母组合"></a><a href="https://leetcode.cn/problems/letter-combinations-of-a-phone-number/">17. 电话号码的字母组合</a></h1><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    String[] hm = <span class="keyword">new</span> <span class="title class_">String</span>[] {</span><br><span class="line">        <span class="string">""</span>,</span><br><span class="line">        <span class="string">""</span>,</span><br><span class="line">        <span class="string">"abc"</span>,</span><br><span class="line">        <span class="string">"def"</span>,</span><br><span class="line">        <span class="string">"ghi"</span>,</span><br><span class="line">        <span class="string">"jkl"</span>,</span><br><span class="line">        <span class="string">"mno"</span>,</span><br><span class="line">        <span class="string">"pqrs"</span>,</span><br><span class="line">        <span class="string">"tuv"</span>,</span><br><span class="line">        <span class="string">"wxyz"</span></span><br><span class="line">    };</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="type">char</span>[] digitCharArr;</span><br><span class="line">    List&lt;String&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">letterCombinations</span><span class="params">(String digits)</span> {</span><br><span class="line">        digitCharArr = digits.toCharArray();</span><br><span class="line">        n = digitCharArr.length;</span><br><span class="line">        backtrack(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backtrack</span><span class="params">(<span class="type">int</span> curIdx)</span> {</span><br><span class="line">        <span class="keyword">if</span> (curIdx == n) {</span><br><span class="line">            <span class="type">String</span> <span class="variable">innerRes</span> <span class="operator">=</span> sb.toString();</span><br><span class="line">            <span class="keyword">if</span> (innerRes.length() != <span class="number">0</span>) res.add(innerRes);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> digitCharArr[curIdx] - <span class="string">'0'</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; hm[idx].length(); i++) {</span><br><span class="line">            sb.append(hm[idx].charAt(i));</span><br><span class="line">            backtrack(curIdx + <span class="number">1</span>);</span><br><span class="line">            sb.deleteCharAt(sb.length() - <span class="number">1</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="78-子集"><a href="#78-子集" class="headerlink" title="78. 子集"></a><a href="https://leetcode.cn/problems/subsets/">78. 子集</a></h1><p><img src="/2023/08/20/%E4%BB%8E%E4%BA%8C%E5%8F%89%E6%A0%91%E5%88%B0%E5%9B%9E%E6%BA%AF%E5%88%B0DP/78_%E6%80%9D%E8%B7%AF.jpeg" alt="78_思路"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="type">int</span>[] nums;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; paths = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    LinkedList&lt;Integer&gt; path = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">subsets</span><span class="params">(<span class="type">int</span>[] nums)</span> {</span><br><span class="line">        <span class="built_in">this</span>.nums = nums;</span><br><span class="line">        n = nums.length;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span> paths;</span><br><span class="line">        backtrackSelectOrNot(<span class="number">0</span>);</span><br><span class="line">        backtrackChooseFromEnumeration(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> paths;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backtrackSelectOrNot</span><span class="params">(<span class="type">int</span> curIdx)</span> {</span><br><span class="line">        <span class="comment">// 选或不选</span></span><br><span class="line">        <span class="keyword">if</span> (curIdx == n) {</span><br><span class="line">            paths.add(<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;(path));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// select</span></span><br><span class="line">        path.addLast(nums[curIdx]);</span><br><span class="line">        backtrackSelectOrNot(curIdx + <span class="number">1</span>);</span><br><span class="line">        path.removeLast();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// not select</span></span><br><span class="line">        backtrackSelectOrNot(curIdx + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backtrackChooseFromEnumeration</span><span class="params">(<span class="type">int</span> curIdx)</span> {</span><br><span class="line">        <span class="comment">// 枚举选哪个</span></span><br><span class="line">        paths.add(<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;(path));</span><br><span class="line">        <span class="keyword">if</span> (curIdx == n) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">innerIdx</span> <span class="operator">=</span> curIdx; innerIdx &lt; n; innerIdx++) {</span><br><span class="line">            path.addLast(nums[innerIdx]);</span><br><span class="line">            backtrackChooseFromEnumeration(innerIdx + <span class="number">1</span>);</span><br><span class="line">            path.removeLast();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>选或不选：</p><p>每一次抉择（backtrackSelectOrNot function中）都只有两种选择，选或者不选，并且这种情况下只有叶子结点为答案，因此需要判断是否为叶子结点，如果是的话才加入答案中</p><p>枚举选哪个：</p><p>每一次枚举（backtrackChooseFromEnumeration中）都可以选择curIdx之后的数，且所有的节点都为答案，因此无需判断直接加入，只需要做好递归的边界即可</p><h1 id="131-分割回文串"><a href="#131-分割回文串" class="headerlink" title="131. 分割回文串"></a><a href="https://leetcode.cn/problems/palindrome-partitioning/">131. 分割回文串</a></h1><p><img src="/2023/08/20/%E4%BB%8E%E4%BA%8C%E5%8F%89%E6%A0%91%E5%88%B0%E5%9B%9E%E6%BA%AF%E5%88%B0DP/131_%E6%80%9D%E8%B7%AF.jpeg" alt="131_思路"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    List&lt;List&lt;String&gt;&gt; paths = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    LinkedList&lt;String&gt; path = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">char</span>[] sCharArr;</span><br><span class="line">    String s;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="title function_">partition</span><span class="params">(String s)</span> {</span><br><span class="line">        n = s.length();</span><br><span class="line">        sCharArr = s.toCharArray();</span><br><span class="line">        <span class="built_in">this</span>.s = s;</span><br><span class="line">        <span class="comment">// backtrackEnumerate(0);</span></span><br><span class="line">        backtrackSelectOrNot(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> paths;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backtrackSelectOrNot</span><span class="params">(<span class="type">int</span> start, <span class="type">int</span> i)</span> {</span><br><span class="line">        <span class="keyword">if</span> (start == n) {</span><br><span class="line">            paths.add(<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;(path));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 不选择这个逗号 （最后一个char (i - 1) 一定要选）</span></span><br><span class="line">        <span class="keyword">if</span> (i &lt; n - <span class="number">1</span>) {</span><br><span class="line">            backtrackSelectOrNot(start, i + <span class="number">1</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 选择这个逗号</span></span><br><span class="line">        <span class="comment">// 检查是否回文</span></span><br><span class="line">        <span class="keyword">if</span> (isPalindrome(start, i)) {</span><br><span class="line">            path.addLast(s.substring(start, i + <span class="number">1</span>));</span><br><span class="line">            backtrackSelectOrNot(i + <span class="number">1</span>, i + <span class="number">1</span>);</span><br><span class="line">            path.removeLast();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backtrackEnumerate</span><span class="params">(<span class="type">int</span> start)</span> {</span><br><span class="line">        <span class="comment">// 枚举子串的终点</span></span><br><span class="line">        <span class="keyword">if</span> (start == n) {</span><br><span class="line">            paths.add(<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;(path));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt; n; i++) {</span><br><span class="line">            <span class="keyword">if</span> (isPalindrome(start, i)) {</span><br><span class="line">                path.addLast(s.substring(start, i + <span class="number">1</span>));</span><br><span class="line">                backtrackEnumerate(i + <span class="number">1</span>);</span><br><span class="line">                path.removeLast();</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isPalindrome</span><span class="params">(<span class="type">int</span> left, <span class="type">int</span> right)</span> {</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) {</span><br><span class="line">            <span class="keyword">if</span> (sCharArr[left] == sCharArr[right]) {</span><br><span class="line">                left++;</span><br><span class="line">                right--;</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="784-字母大小写全排列"><a href="#784-字母大小写全排列" class="headerlink" title="784. 字母大小写全排列"></a><a href="https://leetcode.cn/problems/letter-case-permutation/">784. 字母大小写全排列</a></h1><p>两个难点：</p><ol><li>决策树如何画</li><li>如何将char 小写变大写，大写变小写</li></ol><p>问题1:</p><p><img src="/2023/08/20/%E4%BB%8E%E4%BA%8C%E5%8F%89%E6%A0%91%E5%88%B0%E5%9B%9E%E6%BA%AF%E5%88%B0DP/784_%E6%80%9D%E8%B7%AF.png" alt="784_思路"></p><p>问题2:</p><a href="/2023/04/15/Java%E7%A2%8E%E7%A2%8E%E5%BF%B5/" title="Java碎碎念">Java碎碎念</a><p><code>char[idx] ^= 1 &lt;&lt; 5</code></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    List&lt;String&gt; paths = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">char</span>[] cArr;</span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">letterCasePermutation</span><span class="params">(String s)</span> {</span><br><span class="line">        n = s.length();</span><br><span class="line">        cArr = s.toCharArray();</span><br><span class="line">        backtrack(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> paths;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backtrack</span><span class="params">(<span class="type">int</span> startIdx)</span> {</span><br><span class="line">        <span class="keyword">if</span> (startIdx == n) {</span><br><span class="line">            paths.add(<span class="keyword">new</span> <span class="title class_">String</span>(cArr));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (Character.isDigit(cArr[startIdx])) {</span><br><span class="line">            backtrack(startIdx + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        cArr[startIdx] ^= <span class="number">1</span> &lt;&lt; <span class="number">5</span>;</span><br><span class="line">        backtrack(startIdx + <span class="number">1</span>);</span><br><span class="line">        cArr[startIdx] ^= <span class="number">1</span> &lt;&lt; <span class="number">5</span>; <span class="comment">// 回溯</span></span><br><span class="line"></span><br><span class="line">        backtrack(startIdx + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这道题其实可以不用恢复现场，因为我们需要的是叶子结点；但是我们需要先处理 <code>不转换当前char</code>再处理<code>转换当前char</code>由于回溯发生在不转换，即没有变化，那也就不需要回溯现场了：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    List&lt;String&gt; paths = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">char</span>[] cArr;</span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">letterCasePermutation</span><span class="params">(String s)</span> {</span><br><span class="line">        n = s.length();</span><br><span class="line">        cArr = s.toCharArray();</span><br><span class="line">        backtrack(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> paths;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backtrack</span><span class="params">(<span class="type">int</span> startIdx)</span> {</span><br><span class="line">        <span class="keyword">if</span> (startIdx == n) {</span><br><span class="line">            paths.add(<span class="keyword">new</span> <span class="title class_">String</span>(cArr));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (Character.isDigit(cArr[startIdx])) {</span><br><span class="line">            backtrack(startIdx + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        backtrack(startIdx + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        cArr[startIdx] ^= <span class="number">1</span> &lt;&lt; <span class="number">5</span>;</span><br><span class="line">        backtrack(startIdx + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="2397-被列覆盖的最多行数"><a href="#2397-被列覆盖的最多行数" class="headerlink" title="2397. 被列覆盖的最多行数"></a><a href="https://leetcode.cn/problems/maximum-rows-covered-by-columns/">2397. 被列覆盖的最多行数</a></h1><p>这道题关键在于枚举列然后计算覆盖的行然后统计最大即可</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> m, n;</span><br><span class="line">    <span class="type">int</span>[][] matrix, matrixCopy;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maximumRows</span><span class="params">(<span class="type">int</span>[][] matrix, <span class="type">int</span> numSelect)</span> {</span><br><span class="line">        m = matrix.length;</span><br><span class="line">        n = matrix[<span class="number">0</span>].length;</span><br><span class="line">        <span class="built_in">this</span>.matrix = matrix;</span><br><span class="line">        matrixCopy = <span class="keyword">new</span> <span class="title class_">int</span>[m][];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) {</span><br><span class="line">            matrixCopy[i] = matrix[i].clone();</span><br><span class="line">        }</span><br><span class="line">        backtrack(<span class="number">0</span>, numSelect);</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backtrack</span><span class="params">(<span class="type">int</span> startIdx, <span class="type">int</span> numSelect)</span> {</span><br><span class="line">        <span class="keyword">if</span> (n - startIdx &lt; numSelect) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (numSelect == <span class="number">0</span>) {</span><br><span class="line">            max = Math.max(max, countCovers());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> startIdx; i &lt; n; i++) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> <span class="number">0</span>; r &lt; m; r++) {</span><br><span class="line">                matrix[r][i] = <span class="number">0</span>;</span><br><span class="line">            }</span><br><span class="line">            backtrack(i + <span class="number">1</span>, numSelect - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> <span class="number">0</span>; r &lt; m; r++) {</span><br><span class="line">                matrix[r][i] = matrixCopy[r][i];</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">countCovers</span><span class="params">()</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">ret</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) {</span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) {</span><br><span class="line">                <span class="keyword">if</span> (matrix[i][j] == <span class="number">0</span>) count++;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (count == n) ret++; </span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">printMatrix</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) {</span><br><span class="line">                System.out.print(matrix[i][j] + <span class="string">" "</span>);</span><br><span class="line">            }</span><br><span class="line">            System.out.println();</span><br><span class="line">        }</span><br><span class="line">        System.out.println();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="306-累加数"><a href="#306-累加数" class="headerlink" title="306. 累加数"></a><a href="https://leetcode.cn/problems/additive-number/">306. 累加数</a></h1><p>这道题自己的做法是枚举切割的起始点，能做但是比较复杂；</p><p>如果回溯返回boolean想要记录结果的话：</p><p><code>if (backtrack()) return true</code></p><p>代码：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="type">int</span> <span class="variable">numSelected</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    String num;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    LinkedList&lt;BigInteger&gt; path = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAdditiveNumber</span><span class="params">(String num)</span> {</span><br><span class="line">        <span class="built_in">this</span>.num = num;</span><br><span class="line">        n = num.length();</span><br><span class="line">        <span class="keyword">return</span> backtrack(<span class="number">0</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">backtrack</span><span class="params">(<span class="type">int</span> cutIdx)</span> {</span><br><span class="line">        <span class="comment">// System.out.println(path + " " + cutIdx);</span></span><br><span class="line">        <span class="keyword">if</span> (cutIdx == n) {</span><br><span class="line">            <span class="keyword">return</span> path.size() &gt;= <span class="number">3</span> &amp;&amp; check(path.get(path.size() - <span class="number">3</span>), path.get(path.size() - <span class="number">2</span>), path.get(path.size() - <span class="number">1</span>));</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (num.charAt(cutIdx) == <span class="string">'0'</span>) {</span><br><span class="line">            <span class="keyword">if</span> (path.size() &gt;= <span class="number">2</span>) {</span><br><span class="line">                <span class="keyword">if</span> (check(path.get(path.size() - <span class="number">2</span>), </span><br><span class="line">                path.get(path.size() - <span class="number">1</span>), BigInteger.ZERO)) {</span><br><span class="line">                    path.addLast(BigInteger.ZERO);</span><br><span class="line">                    <span class="keyword">if</span> (backtrack(cutIdx + <span class="number">1</span>)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                    path.removeLast();   </span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                }</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                path.addLast(BigInteger.ZERO);</span><br><span class="line">                <span class="keyword">if</span> (backtrack(cutIdx + <span class="number">1</span>)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                path.removeLast();  </span><br><span class="line">            }</span><br><span class="line">            </span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> cutIdx; i &lt; n; i++) {</span><br><span class="line">                <span class="type">BigInteger</span> <span class="variable">current</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigInteger</span>(num.substring(cutIdx, i + <span class="number">1</span>));</span><br><span class="line">                path.addLast(current);</span><br><span class="line">                <span class="keyword">if</span> (path.size() &gt;= <span class="number">3</span> &amp;&amp; !check(path.get(path.size() - <span class="number">3</span>), path.get(path.size() - <span class="number">2</span>), current)) {</span><br><span class="line">                    path.removeLast();</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">if</span> (backtrack(i + <span class="number">1</span>)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                path.removeLast();</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">check</span><span class="params">(BigInteger a, BigInteger b, BigInteger c)</span> {</span><br><span class="line">        <span class="type">BigInteger</span> <span class="variable">sum</span> <span class="operator">=</span> a.add(b);</span><br><span class="line">        <span class="keyword">return</span> sum.equals(c);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p><a href="https://leetcode.cn/problems/additive-number/solutions/1201929/gong-shui-san-xie-hui-su-gao-jing-du-jia-6o6b/">三叶的解法</a>是枚举结束点</p><p>并且这里教了如何使用高精度加法：</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    String num;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAdditiveNumber</span><span class="params">(String _num)</span> {</span><br><span class="line">        num = _num;</span><br><span class="line">        n = num.length();</span><br><span class="line">        <span class="keyword">return</span> dfs(<span class="number">0</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> u)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> list.size();</span><br><span class="line">        <span class="keyword">if</span> (u == n) <span class="keyword">return</span> m &gt;= <span class="number">3</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> num.charAt(u) == <span class="string">'0'</span> ? u + <span class="number">1</span> : n;</span><br><span class="line">        List&lt;Integer&gt; cur = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> u; i &lt; max; i++) {</span><br><span class="line">            cur.add(<span class="number">0</span>, num.charAt(i) - <span class="string">'0'</span>);</span><br><span class="line">            <span class="keyword">if</span> (m &lt; <span class="number">2</span> || check(list.get(m - <span class="number">2</span>), list.get(m - <span class="number">1</span>), cur)) {</span><br><span class="line">                list.add(cur);</span><br><span class="line">                <span class="keyword">if</span> (dfs(i + <span class="number">1</span>)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                list.remove(list.size() - <span class="number">1</span>);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">check</span><span class="params">(List&lt;Integer&gt; a, List&lt;Integer&gt; b, List&lt;Integer&gt; c)</span> {</span><br><span class="line">        List&lt;Integer&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.size() || i &lt; b.size(); i++) {</span><br><span class="line">            <span class="keyword">if</span> (i &lt; a.size()) t += a.get(i);</span><br><span class="line">            <span class="keyword">if</span> (i &lt; b.size()) t += b.get(i);</span><br><span class="line">            ans.add(t % <span class="number">10</span>);</span><br><span class="line">            t /= <span class="number">10</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (t &gt; <span class="number">0</span>) ans.add(t);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">ok</span> <span class="operator">=</span> c.size() == ans.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; c.size() &amp;&amp; ok; i++) {</span><br><span class="line">            <span class="keyword">if</span> (c.get(i) != ans.get(i)) ok = <span class="literal">false</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> ok;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">作者：宫水三叶</span><br><span class="line">链接：https:<span class="comment">//leetcode.cn/problems/additive-number/</span></span><br><span class="line">来源：力扣（LeetCode）</span><br><span class="line">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><br></pre></td></tr></tbody></table></figure><h1 id="2698-求一个整数的惩罚数"><a href="#2698-求一个整数的惩罚数" class="headerlink" title="2698. 求一个整数的惩罚数"></a><a href="https://leetcode.cn/problems/find-the-punishment-number-of-an-integer/">2698. 求一个整数的惩罚数</a></h1><p>这道题非常有意思，可以用两个指针来做到选或不选的思路：</p><p><img src="/2023/08/20/%E4%BB%8E%E4%BA%8C%E5%8F%89%E6%A0%91%E5%88%B0%E5%9B%9E%E6%BA%AF%E5%88%B0DP/2698_%E9%80%89%E6%88%96%E4%B8%8D%E9%80%89.jpeg" alt="2698_选或不选"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 选或不选</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">punishmentNumber</span><span class="params">(<span class="type">int</span> n)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) {</span><br><span class="line">            sum = <span class="number">0</span>;</span><br><span class="line">            <span class="type">char</span>[] square = Integer.toString(i * i).toCharArray();</span><br><span class="line">            <span class="keyword">if</span> (backtrack(square, <span class="number">0</span>, <span class="number">0</span>, i)) {</span><br><span class="line">                res += i * i;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">backtrack</span><span class="params">(<span class="type">char</span>[] square, <span class="type">int</span> start, <span class="type">int</span> end, <span class="type">int</span> i)</span> {</span><br><span class="line">        <span class="keyword">if</span> (end == square.length) {</span><br><span class="line">            <span class="keyword">return</span> i == sum;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (sum &gt; i) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (end &lt; square.length - <span class="number">1</span>) {</span><br><span class="line">            <span class="keyword">if</span> (backtrack(square, start, end + <span class="number">1</span>, i)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        sum += sumUp(square, start, end);</span><br><span class="line">        <span class="keyword">if</span> (backtrack(square, end + <span class="number">1</span>, end + <span class="number">1</span>, i)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        sum -= sumUp(square, start, end);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">sumUp</span><span class="params">(<span class="type">char</span>[] square, <span class="type">int</span> start, <span class="type">int</span> end)</span>{</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt;= end; i++){</span><br><span class="line">            x = x * <span class="number">10</span> + square[i] - <span class="string">'0'</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>从答案的视角枚举</p><p><img src="/2023/08/20/%E4%BB%8E%E4%BA%8C%E5%8F%89%E6%A0%91%E5%88%B0%E5%9B%9E%E6%BA%AF%E5%88%B0DP/2698_%E6%9E%9A%E4%B8%BE.jpeg" alt="2698_枚举"></p><p>其实就是枚举逗号位置</p><p>在start = 0 时候 i尝试 0, 1, 2, 3 也就是[0,0],[0, 1], [0,2],[0,3] 即temp = 1, 12, 129, 1296 sum = <code>此时的 temp</code></p><p>在start = 1 时候 i尝试 1, 2, 3 也就是[1, 1], [1,2],[1,3] 即temp = 2, 29, 296; sum = <code>start = 0 时候的temp</code> + <code>此时的 temp</code></p><p>在start = 2 时候 i尝试 2, 3 也就是[2,2],[2,3] 即temp = 9, 96; sum = <code>start = 0 时候的temp</code>+ <code>start = 1 时候的temp</code> + <code>此时的 temp</code></p><p>在start = 3 时候 i尝试 3 也就是[3,3] 即temp = 6; sum = <code>start = 0 时候的temp</code>+ <code>start = 1 时候的temp</code>  + <code>start = 2 时候的temp</code>+ <code>此时的 temp</code></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">punishmentNumber</span><span class="params">(<span class="type">int</span> n)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) {</span><br><span class="line">            sum = <span class="number">0</span>;</span><br><span class="line">            <span class="type">char</span>[] square = Integer.toString(i * i).toCharArray();</span><br><span class="line">            <span class="keyword">if</span> (backtrackEnumeration(square, <span class="number">0</span>, i)) {</span><br><span class="line">                res += i * i;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">backtrackEnumeration</span><span class="params">(<span class="type">char</span>[] square, <span class="type">int</span> start, <span class="type">int</span> target)</span> {</span><br><span class="line">        <span class="keyword">if</span> (start == square.length) <span class="keyword">return</span> target == sum;</span><br><span class="line">        <span class="keyword">if</span> (sum &gt; target) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">// 开始枚举</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt; square.length; i++) {</span><br><span class="line">            temp = temp * <span class="number">10</span> + square[i] - <span class="string">'0'</span>;</span><br><span class="line">            sum = sum + temp;</span><br><span class="line">            <span class="keyword">if</span> (backtrackEnumeration(square, i + <span class="number">1</span>, target)) {</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            }</span><br><span class="line">            sum = sum - temp;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="子集型总结"><a href="#子集型总结" class="headerlink" title="子集型总结"></a>子集型总结</h1><p>一般可以从选和不选以及枚举选哪个来做；</p><p>碰到需要选择切点的，类似于306, 以及2698题，我们可以先通过把一个数变成一个string或者char[]来进行枚举。</p><p>另外枚举状态下的回溯就是无非是当前层然后深入下一层然后碰到递归终点返回之后会继续尝试</p><p>其达成的效果就是当前层穷举，下一层穷举…</p><p>所以这就是所谓的递归不要管他是如何深入的。只要知道做了什么事，怎么出去，完成当前scope下的任务即可</p><h1 id="组合型-2"><a href="#组合型-2" class="headerlink" title="组合型"></a>组合型</h1><h1 id="77-组合"><a href="#77-组合" class="headerlink" title="77. 组合"></a><a href="https://leetcode.cn/problems/combinations/">77. 组合</a></h1><p>无优化剪枝：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    LinkedList&lt;Integer&gt; path = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; paths = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span> n, k;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combine</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k)</span> {</span><br><span class="line">        <span class="built_in">this</span>.n = n;</span><br><span class="line">        <span class="built_in">this</span>.k = k;</span><br><span class="line">        backtrack(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> paths;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backtrack</span><span class="params">(<span class="type">int</span> cur)</span> {</span><br><span class="line">        <span class="keyword">if</span> (path.size() == k) {</span><br><span class="line">            paths.add(<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;(path));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> cur; i &lt;= n; i++) {</span><br><span class="line">            path.addLast(i);</span><br><span class="line">            backtrack(i + <span class="number">1</span>);</span><br><span class="line">            path.removeLast();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>从大到小枚举剪枝：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    LinkedList&lt;Integer&gt; path = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; paths = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span> n, k;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combine</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k)</span> {</span><br><span class="line">        <span class="built_in">this</span>.n = n;</span><br><span class="line">        <span class="built_in">this</span>.k = k;</span><br><span class="line">        backtrack(n);</span><br><span class="line">        <span class="keyword">return</span> paths;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backtrack</span><span class="params">(<span class="type">int</span> cur)</span> {</span><br><span class="line">        <span class="keyword">if</span> (path.size() == k) {</span><br><span class="line">            paths.add(<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;(path));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> cur; i &gt;= <span class="number">1</span>; i--) {</span><br><span class="line">            <span class="keyword">if</span> (i &lt; k - path.size()) <span class="keyword">return</span>;</span><br><span class="line">            path.addLast(i);</span><br><span class="line">            backtrack(i - <span class="number">1</span>);</span><br><span class="line">            path.removeLast();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>从小到大枚举</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    LinkedList&lt;Integer&gt; path = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; paths = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span> n, k;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combine</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k)</span> {</span><br><span class="line">        <span class="built_in">this</span>.n = n;</span><br><span class="line">        <span class="built_in">this</span>.k = k;</span><br><span class="line">        backtrack(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> paths;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backtrack</span><span class="params">(<span class="type">int</span> cur)</span> {</span><br><span class="line">        <span class="keyword">if</span> (k - path.size() &gt; n - cur + <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (path.size() == k) {</span><br><span class="line">            paths.add(<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;(path));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> cur; i &lt;= n; i++) {</span><br><span class="line">            path.addLast(i);</span><br><span class="line">            backtrack(i + <span class="number">1</span>);</span><br><span class="line">            path.removeLast();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="216-组合总和-III"><a href="#216-组合总和-III" class="headerlink" title="216. 组合总和 III"></a><a href="https://leetcode.cn/problems/combination-sum-iii/">216. 组合总和 III</a></h1><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    LinkedList&lt;Integer&gt; path = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; paths = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span> k, n;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combinationSum3</span><span class="params">(<span class="type">int</span> k, <span class="type">int</span> n)</span> {</span><br><span class="line">        <span class="built_in">this</span>.k = k;</span><br><span class="line">        <span class="built_in">this</span>.n = n;</span><br><span class="line">        backtrackSelectOrNot(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> paths;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backtrackEnumeration</span><span class="params">(<span class="type">int</span> start)</span> {</span><br><span class="line">        <span class="keyword">if</span> (path.size() == k) {</span><br><span class="line">            <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; path.size(); i++) {</span><br><span class="line">                sum += path.get(i);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (sum == n) paths.add(<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;(path));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt;= <span class="number">9</span>; i++) {</span><br><span class="line">            path.addLast(i);</span><br><span class="line">            backtrackEnumeration(i + <span class="number">1</span>);</span><br><span class="line">            path.removeLast();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backtrackSelectOrNot</span><span class="params">(<span class="type">int</span> cur)</span> {</span><br><span class="line">        <span class="keyword">if</span> (cur &gt; <span class="number">9</span>) {</span><br><span class="line">            <span class="keyword">if</span> (path.size() != k) <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (path.size() == k) {</span><br><span class="line">            <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; path.size(); i++) {</span><br><span class="line">                sum += path.get(i);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (sum == n) paths.add(<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;(path));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 不选</span></span><br><span class="line">        backtrackSelectOrNot(cur + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 选</span></span><br><span class="line">        path.addLast(cur);</span><br><span class="line">        backtrackSelectOrNot(cur + <span class="number">1</span>);</span><br><span class="line">        path.removeLast();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    } </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="22-括号生成"><a href="#22-括号生成" class="headerlink" title="22. 括号生成"></a><a href="https://leetcode.cn/problems/generate-parentheses/">22. 括号生成</a></h1><p>依旧是使用了选和不选的操作：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    LinkedList&lt;Character&gt; path = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    List&lt;String&gt; paths = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span> m;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">generateParenthesis</span><span class="params">(<span class="type">int</span> n)</span> {</span><br><span class="line">        <span class="built_in">this</span>.n = n;</span><br><span class="line">        m = <span class="number">2</span> * n;</span><br><span class="line">        backtrackSelectOrNot(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> paths;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backtrackSelectOrNot</span><span class="params">(<span class="type">int</span> parenthesisSum, <span class="type">int</span> leftParenthesisCount)</span> {</span><br><span class="line">        <span class="keyword">if</span> (parenthesisSum == m) {</span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">char</span> c : path) {</span><br><span class="line">                sb.append(c);</span><br><span class="line">            }</span><br><span class="line">            paths.add(sb.toString());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 选左括号</span></span><br><span class="line">        <span class="keyword">if</span> (leftParenthesisCount &lt; n) {</span><br><span class="line">            path.addLast(<span class="string">'('</span>);</span><br><span class="line">            backtrackSelectOrNot(parenthesisSum + <span class="number">1</span>, leftParenthesisCount + <span class="number">1</span>);</span><br><span class="line">            path.removeLast();</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 不选左括号（选右括号）</span></span><br><span class="line">        <span class="keyword">if</span> (parenthesisSum - leftParenthesisCount &lt; leftParenthesisCount) {</span><br><span class="line">            path.addLast(<span class="string">')'</span>);</span><br><span class="line">            backtrackSelectOrNot(parenthesisSum + <span class="number">1</span>, leftParenthesisCount);</span><br><span class="line">            path.removeLast();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>需要注意的是这个树的构成是要计算左右可选的括号数量而不是盲目的选或者不选。</p><p>比如：我们一开始会选择左括号，当不选择左括号的时候（左括号数量满足数量），我们会去选择有括号，这时候是不选左括号的下分情况的选择右括号的情况：（右括号的数量 &lt; 左括号的数量）</p><h1 id="301-删除无效的括号"><a href="#301-删除无效的括号" class="headerlink" title="301. 删除无效的括号"></a><a href="https://leetcode.cn/problems/remove-invalid-parentheses/">301. 删除无效的括号</a></h1><p>暴力的穷举每一个括号看是选择还是不选择</p><p>答案加入到数组里后从中选择最长的就是满足要求的，将最长的加入答案</p><p>另外判断一个字符串的括号是否合法的函数也很有意思，可以多学习一下, 思路是用代表左括号的指针移动，碰到左括号右移，右括号左移，如果left == 0证明合法，否则比如左括号的idx &lt; 0则代表右括号&gt;左括号数量，不合法。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    List&lt;String&gt; paths = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    String s;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">removeInvalidParentheses</span><span class="params">(String s)</span> {</span><br><span class="line">        <span class="built_in">this</span>.s = s;</span><br><span class="line">        n = s.length();</span><br><span class="line">        backtrack(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> filterResult();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; <span class="title function_">filterResult</span><span class="params">()</span> {</span><br><span class="line">        <span class="comment">// 筛选出最长的有效括号字符串</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">maxLen</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (String str : paths) {</span><br><span class="line">            maxLen = Math.max(maxLen, str.length());</span><br><span class="line">        }</span><br><span class="line">        HashSet&lt;String&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String str : paths) {</span><br><span class="line">            <span class="keyword">if</span> (str.length() == maxLen) {</span><br><span class="line">                set.add(str);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;(set);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backtrack</span><span class="params">(<span class="type">int</span> idx)</span> {</span><br><span class="line">        <span class="keyword">if</span> (idx == n) {</span><br><span class="line">            <span class="keyword">if</span> (isValid(sb.toString())) {</span><br><span class="line">                paths.add(sb.toString());</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> s.charAt(idx);</span><br><span class="line">        <span class="keyword">if</span> (c != <span class="string">'('</span> &amp;&amp; c != <span class="string">')'</span>) {</span><br><span class="line">            sb.append(c);</span><br><span class="line">            backtrack(idx + <span class="number">1</span>);</span><br><span class="line">            sb.deleteCharAt(sb.length() - <span class="number">1</span>);</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="comment">// 选择当前的括号</span></span><br><span class="line">            sb.append(c);</span><br><span class="line">            backtrack(idx + <span class="number">1</span>);</span><br><span class="line">            sb.deleteCharAt(sb.length() - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 不选择当前的括号</span></span><br><span class="line">            backtrack(idx + <span class="number">1</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(String sb)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : sb.toCharArray()) {</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">'('</span>) {</span><br><span class="line">                left++;</span><br><span class="line">            } <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">')'</span>) {</span><br><span class="line">                left--;</span><br><span class="line">                <span class="keyword">if</span> (left &lt; <span class="number">0</span>) {</span><br><span class="line">                    <span class="comment">// 右括号比左括号多，肯定无效</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 如果左括号的数量等于右括号的数量，才是一个有效的括号字符串</span></span><br><span class="line">        <span class="keyword">return</span> left == <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="排列型-2"><a href="#排列型-2" class="headerlink" title="排列型"></a>排列型</h1><h1 id="46-全排列"><a href="#46-全排列" class="headerlink" title="46. 全排列"></a><a href="https://leetcode.cn/problems/permutations/">46. 全排列</a></h1><p>代码：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    LinkedList&lt;Integer&gt; path = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; paths = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span>[] nums;</span><br><span class="line">    <span class="type">boolean</span>[] numAppeared;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">permute</span><span class="params">(<span class="type">int</span>[] nums)</span> {</span><br><span class="line">        <span class="built_in">this</span>.nums = nums;</span><br><span class="line">        n = nums.length;</span><br><span class="line">        numAppeared = <span class="keyword">new</span> <span class="title class_">boolean</span>[n];</span><br><span class="line">        backtrack(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> paths;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backtrack</span><span class="params">(<span class="type">int</span> idx)</span> {</span><br><span class="line">        System.out.println(idx + <span class="string">" "</span> + path);</span><br><span class="line">        <span class="keyword">if</span> (idx == n) {</span><br><span class="line">            paths.add(<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;(path));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">            <span class="keyword">if</span> (!numAppeared[i]) {</span><br><span class="line">                numAppeared[i] = <span class="literal">true</span>;</span><br><span class="line">                path.addLast(nums[i]);</span><br><span class="line">                backtrack(idx + <span class="number">1</span>);</span><br><span class="line">                path.removeLast();</span><br><span class="line">                numAppeared[i] = <span class="literal">false</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这里需要注意的有两个点：</p><ol><li>backtrack中的for loop 是 <code>i: [0, n)</code> 因为我们每一次都要看从 0 开始的然后通过boolean[] 来判断是否加入答案</li><li>注意递归时候是 <code>(idx + 1)</code> 而不是 <code>(i + 1)</code> <ol><li><code>idx</code>应该表示的是当前的排列中已经放置了多少数字，或者说正在为哪个位置选择数字。然后选择的是 <code>[0, n]</code></li></ol></li></ol><h1 id="N皇后问题"><a href="#N皇后问题" class="headerlink" title="N皇后问题"></a>N皇后问题</h1><p>这道题有两种思维方式，首先是 <a href="https://labuladong.github.io/algo/di-san-zha-24031/bao-li-sou-96f79/hui-su-sua-c26da/">labuladong</a>的比较好理解的，其次是<a href="https://www.bilibili.com/video/BV1mY411D7f6/?spm_id_from=333.788&amp;vd_source=54f34024c3784d45de85a3f70808ab70">灵神</a>的通过抽屉原理证明的全排列</p><p>其方法核心大差不差，主要是在构造上</p><p>核心：枚举每一行上的皇后的全排列，在不冲突的前提下进行构造</p><h2 id="51-N-皇后"><a href="#51-N-皇后" class="headerlink" title="51. N 皇后"></a><a href="https://leetcode.cn/problems/n-queens/">51. N 皇后</a></h2><p>labuladong版本：</p><p>整体比较长，每一次都需要判断左上和右上角是否冲突</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    List&lt;List&lt;String&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="title function_">solveNQueens</span><span class="params">(<span class="type">int</span> n)</span> {</span><br><span class="line">        <span class="type">char</span>[][] chessBoard = <span class="keyword">new</span> <span class="title class_">char</span>[n][n];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span>[] chessRow : chessBoard) {</span><br><span class="line">            Arrays.fill(chessRow, <span class="string">'.'</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">curRow</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        backtracking(chessBoard, curRow, n);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(<span class="type">char</span>[][] chessBoard, <span class="type">int</span> curRow, <span class="type">int</span> n)</span> {</span><br><span class="line">        <span class="keyword">if</span> (curRow == n) {</span><br><span class="line">            <span class="comment">// 到叶子结点，将此时的棋盘加入答案</span></span><br><span class="line">            res.add(array2List(chessBoard));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">curCol</span> <span class="operator">=</span> <span class="number">0</span>; curCol &lt; n; curCol++) {</span><br><span class="line">            <span class="keyword">if</span> (isValid(chessBoard, curRow, curCol)) {</span><br><span class="line">                chessBoard[curRow][curCol] = <span class="string">'Q'</span>;</span><br><span class="line">                backtracking(chessBoard, curRow + <span class="number">1</span>, n);</span><br><span class="line">                chessBoard[curRow][curCol] = <span class="string">'.'</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(<span class="type">char</span>[][] chessBoard, <span class="type">int</span> curRow, <span class="type">int</span> curCol)</span> {</span><br><span class="line">        <span class="comment">// 检查同一列是不是已经有Queen</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> <span class="number">0</span>; r &lt; curRow; r++) {</span><br><span class="line">            <span class="keyword">if</span> (chessBoard[r][curCol] == <span class="string">'Q'</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检查 \ 是否有Queen</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> curRow - <span class="number">1</span>, c = curCol - <span class="number">1</span>; r &gt;= <span class="number">0</span> &amp;&amp; c &gt;= <span class="number">0</span>; r--, c--) {</span><br><span class="line">            <span class="keyword">if</span> (chessBoard[r][c] == <span class="string">'Q'</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检查 / 是否有Queen</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> curRow - <span class="number">1</span>, c = curCol + <span class="number">1</span>; r &gt;= <span class="number">0</span> &amp;&amp; c &lt; chessBoard[<span class="number">0</span>].length; r--, c++) {</span><br><span class="line">            <span class="keyword">if</span> (chessBoard[r][c] == <span class="string">'Q'</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; <span class="title function_">array2List</span><span class="params">(<span class="type">char</span>[][] chessBoard)</span> {</span><br><span class="line">        List&lt;String&gt; transformedArray = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> chessBoard.length, c = chessBoard[<span class="number">0</span>].length;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span>[] chars : chessBoard) {</span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; c; j++) {</span><br><span class="line">                sb.append(chars[j]);</span><br><span class="line">            }</span><br><span class="line">            transformedArray.add(sb.toString());</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> transformedArray;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>灵神的第一个版本也需要判断：</p><p><img src="/2023/08/20/%E4%BB%8E%E4%BA%8C%E5%8F%89%E6%A0%91%E5%88%B0%E5%9B%9E%E6%BA%AF%E5%88%B0DP/N%E7%9A%87%E5%90%8E_%E7%81%B5%E7%A5%9E_%E8%A7%A3%E6%B3%951.png" alt="N皇后_灵神_解法1"></p><p>但是加入了一点数学证明：即右上方的 r + c == 当前的 r + c 左上方的 r - c == 当前的 r - c:</p><p><img src="/2023/08/20/%E4%BB%8E%E4%BA%8C%E5%8F%89%E6%A0%91%E5%88%B0%E5%9B%9E%E6%BA%AF%E5%88%B0DP/N%E7%9A%87%E5%90%8E_%E7%81%B5%E7%A5%9E_%E8%A1%8C%E5%88%97.png" alt="N皇后_灵神_行列"></p><p>从而发现我们可以通过开辟两个<code>boolean[]</code>来看r + c是否之前出现过如果出现过就说明当前位置无法放置皇后因为会冲突</p><p>修改过后：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    List&lt;List&lt;String&gt;&gt; paths = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span>[] col;</span><br><span class="line">    <span class="type">boolean</span>[] onPath, diagRPlusC, diagRMinusC;</span><br><span class="line">    <span class="type">int</span> m, n;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="title function_">solveNQueens</span><span class="params">(<span class="type">int</span> n)</span> {</span><br><span class="line">        <span class="built_in">this</span>.n = n;</span><br><span class="line">        <span class="built_in">this</span>.m = <span class="number">2</span> * n - <span class="number">1</span>;</span><br><span class="line">        col = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        onPath = <span class="keyword">new</span> <span class="title class_">boolean</span>[m];</span><br><span class="line">        diagRMinusC = <span class="keyword">new</span> <span class="title class_">boolean</span>[m];</span><br><span class="line">        diagRPlusC = <span class="keyword">new</span> <span class="title class_">boolean</span>[m];</span><br><span class="line">        backtrack(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> paths;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backtrack</span><span class="params">(<span class="type">int</span> r)</span> {</span><br><span class="line">        <span class="keyword">if</span> (r == n) {</span><br><span class="line">            List&lt;String&gt; board = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(n);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> c : col) {</span><br><span class="line">                <span class="type">char</span>[] row = <span class="keyword">new</span> <span class="title class_">char</span>[n];</span><br><span class="line">                Arrays.fill(row, <span class="string">'.'</span>);</span><br><span class="line">                row[c] = <span class="string">'Q'</span>;</span><br><span class="line">                board.add(<span class="keyword">new</span> <span class="title class_">String</span>(row));</span><br><span class="line">            }</span><br><span class="line">            paths.add(board);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">0</span>; c &lt; n; c++) {</span><br><span class="line">            <span class="type">int</span> <span class="variable">rc</span> <span class="operator">=</span> r - c + n - <span class="number">1</span>; <span class="comment">// 防止负的index</span></span><br><span class="line">            <span class="keyword">if</span> (!onPath[c] &amp;&amp; !diagRPlusC[r + c] &amp;&amp; !diagRMinusC[rc]) {</span><br><span class="line">                col[r] = c;</span><br><span class="line">                onPath[c] = diagRPlusC[r + c] = diagRMinusC[rc] = <span class="literal">true</span>;</span><br><span class="line">                backtrack(r + <span class="number">1</span>);</span><br><span class="line">                onPath[c] = diagRPlusC[r + c] = diagRMinusC[rc] = <span class="literal">false</span>; <span class="comment">// 恢复现场</span></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="52-N-皇后-II"><a href="#52-N-皇后-II" class="headerlink" title="52. N 皇后 II"></a><a href="https://leetcode.cn/problems/n-queens-ii/">52. N 皇后 II</a></h2><p>只需要稍微更改下逻辑即可：这里我们返回计数而不是构造了一个答案</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="type">int</span> res;</span><br><span class="line">    <span class="type">int</span>[] col;</span><br><span class="line">    <span class="type">boolean</span>[] onPath, diagRPlusC, diagRMinusC;</span><br><span class="line">    <span class="type">int</span> m, n;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">totalNQueens</span><span class="params">(<span class="type">int</span> n)</span> {</span><br><span class="line">        <span class="built_in">this</span>.n = n;</span><br><span class="line">        <span class="built_in">this</span>.m = <span class="number">2</span> * n - <span class="number">1</span>;</span><br><span class="line">        col = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        onPath = <span class="keyword">new</span> <span class="title class_">boolean</span>[m];</span><br><span class="line">        diagRMinusC = <span class="keyword">new</span> <span class="title class_">boolean</span>[m];</span><br><span class="line">        diagRPlusC = <span class="keyword">new</span> <span class="title class_">boolean</span>[m];</span><br><span class="line">        backtrack(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backtrack</span><span class="params">(<span class="type">int</span> r)</span> {</span><br><span class="line">        <span class="keyword">if</span> (r == n) {</span><br><span class="line">            res++;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">0</span>; c &lt; n; c++) {</span><br><span class="line">            <span class="type">int</span> <span class="variable">rc</span> <span class="operator">=</span> r - c + n - <span class="number">1</span>; <span class="comment">// 防止负的index</span></span><br><span class="line">            <span class="keyword">if</span> (!onPath[c] &amp;&amp; !diagRPlusC[r + c] &amp;&amp; !diagRMinusC[rc]) {</span><br><span class="line">                col[r] = c;</span><br><span class="line">                onPath[c] = diagRPlusC[r + c] = diagRMinusC[rc] = <span class="literal">true</span>;</span><br><span class="line">                backtrack(r + <span class="number">1</span>);</span><br><span class="line">                onPath[c] = diagRPlusC[r + c] = diagRMinusC[rc] = <span class="literal">false</span>; <span class="comment">// 恢复现场</span></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="DP例题"><a href="#DP例题" class="headerlink" title="DP例题"></a>DP例题</h1><h1 id="DP-1"><a href="#DP-1" class="headerlink" title="DP"></a>DP</h1><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">198. 打家劫舍 https://leetcode.cn/problems/house-robber/solutions/2102725/ru-he-xiang-chu-zhuang-tai-ding-yi-he-zh-1wt1/</span><br><span class="line">70. 爬楼梯 https://leetcode.cn/problems/climbing-stairs/</span><br><span class="line">746. 使用最小花费爬楼梯 https://leetcode.cn/problems/min-cost-climbing-stairs/</span><br><span class="line">2466. 统计构造好字符串的方案数 https://leetcode.cn/problems/count-ways-to-build-good-strings/</span><br><span class="line">213. 打家劫舍 II https://leetcode.cn/problems/house-robber-ii/</span><br><span class="line">213. 打家劫舍 II 题解 https://leetcode.cn/problems/house-robber-ii/solution/jian-ji-xie-fa-zhi-jie-diao-yong-198-ti-qhvri/</span><br></pre></td></tr></tbody></table></figure><h1 id="198-打家劫舍"><a href="#198-打家劫舍" class="headerlink" title="198. 打家劫舍"></a><a href="https://leetcode.cn/problems/house-robber/">198. 打家劫舍</a></h1><p>按照思路一步步来：</p><ol><li>回溯怎么写：<ol><li>当前操作：选或者不选当前这家偷</li><li>子问题和下一个子问题：<ol><li>如果之前偷了，那就是从 n - 2开始</li><li>如果之前不偷，那就是从 n - 1开始</li></ol></li></ol></li></ol><p>回溯代码：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="type">int</span>[] nums;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">rob</span><span class="params">(<span class="type">int</span>[] nums)</span> {</span><br><span class="line">        <span class="built_in">this</span>.nums = nums;</span><br><span class="line">        n = nums.length;</span><br><span class="line">        <span class="keyword">return</span> backtrack(n - <span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">backtrack</span><span class="params">(<span class="type">int</span> i)</span> {</span><br><span class="line">        <span class="keyword">if</span> (i &lt; <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;            </span><br><span class="line">        }</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> Math.max(backtrack(i - <span class="number">1</span>), backtrack(i - <span class="number">2</span>) + nums[i]);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>注意这里的回溯定义，返回了从 n - 1开始之前的打家劫舍的最大值</p><p>加入记忆化搜索：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="type">int</span>[] nums;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="type">int</span>[] cache;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">rob</span><span class="params">(<span class="type">int</span>[] nums)</span> {</span><br><span class="line">        <span class="built_in">this</span>.nums = nums;</span><br><span class="line">        n = nums.length;</span><br><span class="line">        cache = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        Arrays.fill(cache, -<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> backtrack(n - <span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">backtrack</span><span class="params">(<span class="type">int</span> i)</span> {</span><br><span class="line">        <span class="keyword">if</span> (i &lt; <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;            </span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (cache[i] != -<span class="number">1</span>) <span class="keyword">return</span> cache[i];</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> Math.max(backtrack(i - <span class="number">1</span>), backtrack(i - <span class="number">2</span>) + nums[i]);</span><br><span class="line">        cache[i] = res;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>改造为递推 </p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">rob</span><span class="params">(<span class="type">int</span>[] nums)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">2</span>];</span><br><span class="line">        dp[n + <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        dp[n] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">            dp[i + <span class="number">2</span>] = Math.max(dp[i + <span class="number">1</span>], dp[i] + nums[i]);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> dp[n + <span class="number">1</span>];</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>空间优化（由于 i + 2 只和i + 1 以及 i 有关）</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">rob</span><span class="params">(<span class="type">int</span>[] nums)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">f</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">f1</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">f0</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">            f = Math.max(f1, f0 + nums[i]);</span><br><span class="line">            f0 = f1; <span class="comment">// f1 是当前的上一个，对于下一个属于上上一个</span></span><br><span class="line">            f1 = f; <span class="comment">// f 是当前的，对于下一次属于上一个</span></span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> f1;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="213-打家劫舍-II"><a href="#213-打家劫舍-II" class="headerlink" title="213. 打家劫舍 II"></a><a href="https://leetcode.cn/problems/house-robber-ii/">213. 打家劫舍 II</a></h1><p>由于现在是环形那么我们就是在原版的198中增加了一些条件限制：</p><ul><li>如果选<code>nums[0]</code>进行偷窃，我们下一个偷的就从<code>2</code>开始；因为是环形，偷了第<code>i = 0</code>个意味着不能偷<code>i = n - 1</code>，也就是 偷<code>n - 2</code><ul><li>因此问题变成从<code>nums[2]</code> 到 <code>nums[n−2]</code> 的非环形版本，调用 198 题的代码解决</li></ul></li><li>如果<code>不</code>选<code>nums[0]</code>进行偷窃，我们下一个偷的就从<code>1</code>开始；因为是环形，偷了第 <code>i = 1</code>个意味着不能偷<code>i = n - 2</code>，也就是 偷<code>n - 1</code><ul><li>因此问题变成从<code>nums[1]</code> 到 <code>nums[n−1]</code> 的非环形版本，调用 198 题的代码解决</li></ul></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">rob</span><span class="params">(<span class="type">int</span>[] nums)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="keyword">return</span> Math.max(robFromLC198(nums, <span class="number">2</span>, n - <span class="number">2</span>) + nums[<span class="number">0</span>], robFromLC198(nums, <span class="number">1</span>, n - <span class="number">1</span>));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">robFromLC198</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> start, <span class="type">int</span> end)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">f</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">f1</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">f0</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt;= end; i++) {</span><br><span class="line">            f = Math.max(f1, f0 + nums[i]);</span><br><span class="line">            f0 = f1; <span class="comment">// f1 是当前的上一个，对于下一个属于上上一个</span></span><br><span class="line">            f1 = f; <span class="comment">// f 是当前的，对于下一次属于上一个</span></span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> f1;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="337-打家劫舍-III"><a href="#337-打家劫舍-III" class="headerlink" title="337. 打家劫舍 III"></a><a href="https://leetcode.cn/problems/house-robber-iii/">337. 打家劫舍 III</a></h1><p>这是一道树形DP：</p><p><img src="/2023/08/20/%E4%BB%8E%E4%BA%8C%E5%8F%89%E6%A0%91%E5%88%B0%E5%9B%9E%E6%BA%AF%E5%88%B0DP/%E6%A0%91%E5%BD%A2DP_%E6%80%9D%E8%B7%AF%E6%80%BB%E7%BB%93.png" alt="树形DP_思路总结"></p><blockquote><p>这个考点叫树上最大独立集</p><p>最大独立集：从图中选出尽量多的点，是的这些点互不相邻；它的变形是最大化点权之和</p></blockquote><p><img src="/2023/08/20/%E4%BB%8E%E4%BA%8C%E5%8F%89%E6%A0%91%E5%88%B0%E5%9B%9E%E6%BA%AF%E5%88%B0DP/%E6%A0%91%E5%BD%A2DP_%E4%B8%80%E8%88%AC%E6%A0%91_%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D3.png" alt="树形DP_一般树_打家劫舍3"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="comment">// 应该就是将遍历方式转变为了tree的traversal</span></span><br><span class="line">    <span class="comment">// 就是 treeDFS + DP</span></span><br><span class="line">    Map&lt;TreeNode, Integer&gt; memo = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">rob</span><span class="params">(TreeNode root)</span> {</span><br><span class="line">        <span class="type">int</span>[] res = dfs2(root);</span><br><span class="line">        <span class="keyword">return</span> Math.max(res[<span class="number">0</span>], res[<span class="number">1</span>]);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">dfs</span><span class="params">(TreeNode node)</span> {</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (memo.containsKey(node)) {</span><br><span class="line">            <span class="keyword">return</span> memo.get(node);</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 偷：</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">rob_result</span> <span class="operator">=</span> node.val </span><br><span class="line">        + (node.left == <span class="literal">null</span> ? <span class="number">0</span> : rob(node.left.left) + rob(node.left.right))</span><br><span class="line">        + (node.right == <span class="literal">null</span> ? <span class="number">0</span> : rob(node.right.left) + rob(node.right.right));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 不偷，那就是由孩子们决定：</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">not_rob_result</span> <span class="operator">=</span> rob(node.left) + rob(node.right);</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> Math.max(rob_result, not_rob_result);</span><br><span class="line">        memo.put(node, result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当前节点进行决策偷和不偷能获得的最大值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] dfs2(TreeNode node) {</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="literal">null</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[] {<span class="number">0</span>, <span class="number">0</span>};</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[] leftResult = dfs2(node.left);</span><br><span class="line">        <span class="type">int</span>[] rightResult = dfs2(node.right);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 偷：</span></span><br><span class="line">        <span class="comment">// 就不能偷下家</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">resRob</span> <span class="operator">=</span> leftResult[<span class="number">0</span>] + rightResult[<span class="number">0</span>] + node.val;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 不偷</span></span><br><span class="line">        <span class="comment">// 可以选择偷不偷下家其结果是由左子树的最大值（偷或不偷能获得的最大金额）和右子树的最大值决定</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">resNotRob</span> <span class="operator">=</span> Math.max(leftResult[<span class="number">0</span>], leftResult[<span class="number">1</span>]) + Math.max(rightResult[<span class="number">0</span>], rightResult[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[] {resNotRob, resRob};</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="70-爬楼梯"><a href="#70-爬楼梯" class="headerlink" title="70. 爬楼梯"></a><a href="https://leetcode.cn/problems/climbing-stairs/">70. 爬楼梯</a></h1><p>分成多个子问题，爬第n阶楼梯的方法数量，等于 2 部分之和</p><ul><li>爬上 n−1 阶楼梯的方法数量。因为再爬1阶就能到第n阶</li><li>爬上 n−2 阶楼梯的方法数量，因为再爬2阶就能到第n阶</li></ul><p>所以我们得到公式 dp[n]=dp[n−1]+dp[n−2]<br>同时需要初始化 dp[0]=1 和 dp[1]=1<br>时间复杂度：O(n)</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">climbStairs</span><span class="params">(<span class="type">int</span> n)</span> {</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">f1</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">f2</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">3</span>; i &lt;= n; i++) {</span><br><span class="line">            <span class="type">int</span> <span class="variable">newF</span> <span class="operator">=</span> f1 + f2;</span><br><span class="line">            f1 = f2;</span><br><span class="line">            f2 = newF;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> f2;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="746-使用最小花费爬楼梯"><a href="#746-使用最小花费爬楼梯" class="headerlink" title="746. 使用最小花费爬楼梯"></a><a href="https://leetcode.cn/problems/min-cost-climbing-stairs/">746. 使用最小花费爬楼梯</a></h1><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minCostClimbingStairs</span><span class="params">(<span class="type">int</span>[] cost)</span> {</span><br><span class="line">        <span class="comment">// dp[i] 来表示到第i层的最低开销 dp[cost.length] 就是 到最顶</span></span><br><span class="line">        <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[cost.length + <span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        dp[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt; dp.length; i++) {</span><br><span class="line">            dp[i] = Math.min(dp[i - <span class="number">1</span>] + cost[i - <span class="number">1</span>], dp[i - <span class="number">2</span>] + cost[i - <span class="number">2</span>]);</span><br><span class="line">        }</span><br><span class="line">        Arrays.stream(dp).forEach(e -&gt; System.out.print(e + <span class="string">" "</span>));</span><br><span class="line">        <span class="keyword">return</span> dp[dp.length - <span class="number">1</span>];</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>然后是基于dp数组的空间优化：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minCostClimbingStairs</span><span class="params">(<span class="type">int</span>[] cost)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">dpi1</span> <span class="operator">=</span> <span class="number">0</span>, dpi2 = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">minCost</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt; cost.length + <span class="number">1</span>; i++) {</span><br><span class="line">            minCost = Math.min(dpi1 + cost[i - <span class="number">1</span>], dpi2 + cost[i - <span class="number">2</span>]);</span><br><span class="line">            dpi2 = dpi1;</span><br><span class="line">            dpi1 = minCost;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// Arrays.stream(dp).forEach(e -&gt; System.out.println(e));</span></span><br><span class="line">        <span class="keyword">return</span> minCost;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>最后是这次写出来的版本：根本区别是我定义是到达这个位置的最小成本（初始化f0 = cost[0] f1 = cost[1]）而之前的是初始化为0</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minCostClimbingStairs</span><span class="params">(<span class="type">int</span>[] cost)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">f0</span> <span class="operator">=</span> cost[<span class="number">0</span>], f1 = cost[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt; cost.length; i++) {</span><br><span class="line">            <span class="type">int</span> <span class="variable">newF</span> <span class="operator">=</span> Math.min(f0, f1) + cost[i];</span><br><span class="line">            f0 = f1;</span><br><span class="line">            f1 = newF;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> Math.min(f0, f1);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="2466-统计构造好字符串的方案数"><a href="#2466-统计构造好字符串的方案数" class="headerlink" title="2466. 统计构造好字符串的方案数"></a><a href="https://leetcode.cn/problems/count-ways-to-build-good-strings/">2466. 统计构造好字符串的方案数</a></h1><ol><li>题目中：请你返回满足以上要求的 <strong>不同</strong> 好字符串数目。由于答案可能很大，请将结果对 <code>109 + 7</code> <strong>取余</strong> 后返回。<ol><li>范围比较大，就是大概率dp问题</li></ol></li><li>这道题和 70 题类似思路是：<ol><li>dp定义：dp[i] 是当前长度为i的字符串数目<ol><li>所以答案是 dp[row] + … + dp[high]</li></ol></li><li>状态转移：和 70 题类似：<ol><li>70 是要么一次爬一级楼梯要么爬两级所以转移从 i - 1 以及 i - 2 得到</li><li>这道题是 转移从 zero 或者 one 得到 <ol><li>i - zero 为末尾加了 zero 个 零</li><li>i - one 为 末尾 加了 one 个 一</li></ol></li></ol></li><li>初始化 技巧：涉及到方案数我们可以列举Corner Case e.g.: 如果是空串，那么就是 <code>f[0] = 1</code>空串的字符串个数为1</li><li>取MOD</li></ol></li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MOD</span> <span class="operator">=</span> (<span class="type">int</span>) <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countGoodStrings</span><span class="params">(<span class="type">int</span> low, <span class="type">int</span> high, <span class="type">int</span> zero, <span class="type">int</span> one)</span> {</span><br><span class="line">        <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[high + <span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= high; i++) {</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= zero) dp[i] = (dp[i] + dp[i - zero]) % MOD ;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= one) dp[i] = (dp[i] + dp[i - one]) % MOD;</span><br><span class="line">        }</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> low; i &lt;= high; i++) {</span><br><span class="line">            ans = (ans + dp[i]) % MOD;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>例子：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：low = 3, high = 3, zero = 1, one = 1</span><br><span class="line">输出：8</span><br></pre></td></tr></tbody></table></figure><p>我们有dp数组：1 2 4 8</p><ul><li><code>dp[1]</code> = 2 (可以由1个1组成 或者 由1个0)</li><li><code>dp[2]</code> = 4 (<code>1</code>0， <code>1</code>1，<code>0</code>1，<code>0</code>0）</li><li><code>dp[3]</code> = 8 (<code>10</code>0，<code>10</code>1，<code>11</code>0，<code>11</code>1，<code>01</code>0，<code>01</code>1，<code>00</code>0，<code>00</code>1)</li></ul><p>所以就是每一次都将<code>添加1或0后的形成的方案数</code>+ <code>之前的结果转移</code>得到</p><h1 id="背包问题"><a href="#背包问题" class="headerlink" title="背包问题"></a>背包问题</h1><h2 id="0-1背包-和-完全背包"><a href="#0-1背包-和-完全背包" class="headerlink" title="0-1背包 和 完全背包"></a>0-1背包 和 完全背包</h2><h2 id="494-目标和-01背包"><a href="#494-目标和-01背包" class="headerlink" title="494. 目标和 - 01背包"></a><a href="https://leetcode.cn/problems/target-sum/">494. 目标和</a> - 01背包</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="type">int</span>[] nums;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="type">int</span>[][] memo;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findTargetSumWays</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> {</span><br><span class="line">        <span class="built_in">this</span>.nums = nums;</span><br><span class="line">        <span class="built_in">this</span>.n = <span class="built_in">this</span>.nums.length;</span><br><span class="line">        <span class="comment">// p &lt;- + 所能够组成的和</span></span><br><span class="line">        <span class="comment">// s &lt;- sum of the nums</span></span><br><span class="line">        <span class="comment">// s - p &lt;- - 所能组成的集合 </span></span><br><span class="line">        <span class="comment">// p - (s - p) = t</span></span><br><span class="line">        <span class="comment">// p - s + p = t</span></span><br><span class="line">        <span class="comment">// t = 2p - s</span></span><br><span class="line">        <span class="comment">// p = (t + s) // 2</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">s</span> <span class="operator">=</span> Arrays.stream(nums).sum();</span><br><span class="line">        <span class="type">int</span> <span class="variable">p</span> <span class="operator">=</span> target + s;</span><br><span class="line">        <span class="keyword">if</span> (p % <span class="number">2</span> != <span class="number">0</span> || s &lt; target || p &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        p /= <span class="number">2</span>;</span><br><span class="line">        <span class="comment">// 递推</span></span><br><span class="line">        <span class="comment">// int[][] dp = new int[n + 1][p + 1];</span></span><br><span class="line">        <span class="comment">// dp[0][0] = 1;</span></span><br><span class="line">        <span class="comment">// for (int i = 0; i &lt; n; i++) {</span></span><br><span class="line">        <span class="comment">//     for (int j = 0; j &lt;= p; j++) {</span></span><br><span class="line">        <span class="comment">//         if (j &lt; nums[i]) {</span></span><br><span class="line">        <span class="comment">//             dp[i + 1][j] = dp[i][j];</span></span><br><span class="line">        <span class="comment">//         } else {</span></span><br><span class="line">        <span class="comment">//             dp[i + 1][j] = dp[i][j] + dp[i][j - nums[i]];</span></span><br><span class="line">        <span class="comment">//         }</span></span><br><span class="line">        <span class="comment">//     }</span></span><br><span class="line">        <span class="comment">// }</span></span><br><span class="line">        <span class="comment">// return dp[n][p];</span></span><br><span class="line">        <span class="comment">// 递推优化I:</span></span><br><span class="line">        <span class="comment">// int[][] dp = new int[2][p + 1];</span></span><br><span class="line">        <span class="comment">// dp[0][0] = 1;</span></span><br><span class="line">        <span class="comment">// for (int i = 0; i &lt; n; i++) {</span></span><br><span class="line">        <span class="comment">//     for (int j = 0; j &lt;= p; j++) {</span></span><br><span class="line">        <span class="comment">//         if (j &lt; nums[i]) {</span></span><br><span class="line">        <span class="comment">//             dp[(i + 1) % 2][j] = dp[i % 2][j];</span></span><br><span class="line">        <span class="comment">//         } else {</span></span><br><span class="line">        <span class="comment">//             dp[(i + 1) % 2][j] = dp[i % 2][j] + dp[i % 2][j - nums[i]];</span></span><br><span class="line">        <span class="comment">//         }</span></span><br><span class="line">        <span class="comment">//     }</span></span><br><span class="line">        <span class="comment">// }</span></span><br><span class="line">        <span class="comment">// return dp[n % 2][p];</span></span><br><span class="line">        <span class="comment">// 递推优化II：</span></span><br><span class="line">        <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[p + <span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> nums[i];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> p; j &gt;= num; j--) {</span><br><span class="line">                dp[j] = dp[j] + dp[j - num];</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> dp[p];</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">dp</span><span class="params">(<span class="type">int</span> idx, <span class="type">int</span> target)</span> {</span><br><span class="line">        <span class="keyword">if</span> (idx &lt; <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">return</span> target == <span class="number">0</span> ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (memo[idx][target] != -<span class="number">1</span>) <span class="keyword">return</span> memo[idx][target];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (target &lt; nums[idx]) {</span><br><span class="line">            <span class="comment">// 容量不够了 </span></span><br><span class="line">            memo[idx][target] = dp(idx - <span class="number">1</span>, target); </span><br><span class="line">            <span class="keyword">return</span> memo[idx][target];</span><br><span class="line">        } </span><br><span class="line">        <span class="type">int</span> <span class="variable">tot</span> <span class="operator">=</span> dp(idx - <span class="number">1</span>, target) + dp(idx - <span class="number">1</span>, target - nums[idx]);</span><br><span class="line">        memo[idx][target] = tot;</span><br><span class="line">        <span class="keyword">return</span> tot;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="322-零钱兑换-完全背包"><a href="#322-零钱兑换-完全背包" class="headerlink" title="322. 零钱兑换 - 完全背包"></a><a href="https://leetcode.cn/problems/coin-change/">322. 零钱兑换</a> - 完全背包</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="type">int</span>[] coins;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="type">int</span>[][] memo;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">coinChange</span><span class="params">(<span class="type">int</span>[] coins, <span class="type">int</span> amount)</span> {</span><br><span class="line">        <span class="built_in">this</span>.n = coins.length;</span><br><span class="line">        <span class="built_in">this</span>.coins = coins;</span><br><span class="line">        <span class="comment">// this.memo = new int[n + 1][amount + 1];</span></span><br><span class="line">        <span class="comment">// for (int[] m : memo) {</span></span><br><span class="line">        <span class="comment">//     Arrays.fill(m, -1);</span></span><br><span class="line">        <span class="comment">// }</span></span><br><span class="line">        <span class="comment">// int result = dp(0, amount);</span></span><br><span class="line">        <span class="comment">// return result &gt;= Integer.MAX_VALUE / 2 ? -1 : result;</span></span><br><span class="line">        <span class="comment">// 递推I - 无优化</span></span><br><span class="line">        <span class="comment">// int[][] dp = new int[n + 1][amount + 1];</span></span><br><span class="line">        <span class="comment">// for (int[] d : dp) {</span></span><br><span class="line">        <span class="comment">//     Arrays.fill(d, Integer.MAX_VALUE / 2);</span></span><br><span class="line">        <span class="comment">// }</span></span><br><span class="line">        <span class="comment">// dp[0][0] = 0;</span></span><br><span class="line">        <span class="comment">// for (int i = 0; i &lt; n; i++) {</span></span><br><span class="line">        <span class="comment">//     for (int capacity = 0; capacity &lt;= amount; capacity++) {</span></span><br><span class="line">        <span class="comment">//         if (capacity &lt; coins[i]) {</span></span><br><span class="line">        <span class="comment">//             dp[i + 1][capacity] = dp[i][capacity];</span></span><br><span class="line">        <span class="comment">//             continue;</span></span><br><span class="line">        <span class="comment">//         }</span></span><br><span class="line">      <span class="comment">// 这里指的是如果不选那么直接从上一个转移过来，如果选当前 i + 1 那么就从去掉当前 coint的地方转移而来</span></span><br><span class="line">        <span class="comment">//         dp[i + 1][capacity] = Math.min(dp[i][capacity], dp[i + 1][capacity - coins[i]] + 1);</span></span><br><span class="line">        <span class="comment">//     }</span></span><br><span class="line">        <span class="comment">// }</span></span><br><span class="line">        <span class="comment">// return dp[n][amount] &lt; Integer.MAX_VALUE / 2 ? dp[n][amount] : -1;</span></span><br><span class="line">        <span class="comment">// 递推II - 一维数组</span></span><br><span class="line">        <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[amount + <span class="number">1</span>];</span><br><span class="line">        Arrays.fill(dp, Integer.MAX_VALUE / <span class="number">2</span>);</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> coin : coins) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">capacity</span> <span class="operator">=</span> coin; capacity &lt;= amount; capacity++) {</span><br><span class="line">                dp[capacity] = Math.min(dp[capacity], dp[capacity - coin] + <span class="number">1</span>);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> dp[amount];</span><br><span class="line">        <span class="keyword">return</span> ans &lt; Integer.MAX_VALUE / <span class="number">2</span> ? ans : -<span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">dp</span><span class="params">(<span class="type">int</span> idx, <span class="type">int</span> amount)</span> {</span><br><span class="line">        <span class="keyword">if</span> (idx == n) {</span><br><span class="line">            <span class="keyword">return</span> amount == <span class="number">0</span> ? <span class="number">0</span> : Integer.MAX_VALUE / <span class="number">2</span>; <span class="comment">// 由于是取min, 所以这里返回0指有合法方案；</span></span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (memo[idx][amount] != -<span class="number">1</span>) <span class="keyword">return</span> memo[idx][amount];</span><br><span class="line">        <span class="keyword">if</span> (coins[idx] &gt; amount) {</span><br><span class="line">            memo[idx][amount] = dp(idx + <span class="number">1</span>, amount);</span><br><span class="line">            <span class="keyword">return</span> memo[idx][amount];</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> Math.min(dp(idx + <span class="number">1</span>, amount), dp(idx, amount - coins[idx]) + <span class="number">1</span>); <span class="comment">// 对于选择了硬币之后产生的方案数，我们对硬币数目+1</span></span><br><span class="line">        memo[idx][amount] = res;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
            <tag> 动态规划 </tag>
            
            <tag> dp </tag>
            
            <tag> 回溯 </tag>
            
            <tag> backtrack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>周赛记录</title>
      <link href="/2023/08/20/%E5%91%A8%E8%B5%9B%E8%AE%B0%E5%BD%95/"/>
      <url>/2023/08/20/%E5%91%A8%E8%B5%9B%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>🐛🦆！（飘了）</p></div><h1 id="第-359-场周赛"><a href="#第-359-场周赛" class="headerlink" title="第 359 场周赛"></a>第 359 场周赛</h1>]]></content>
      
      
      <categories>
          
          <category> Algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 周赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试经验集合</title>
      <link href="/2023/08/16/%E9%9D%A2%E8%AF%95%E7%BB%8F%E9%AA%8C%E9%9B%86%E5%90%88/"/>
      <url>/2023/08/16/%E9%9D%A2%E8%AF%95%E7%BB%8F%E9%AA%8C%E9%9B%86%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h1 id="腾讯"><a href="#腾讯" class="headerlink" title="腾讯"></a>腾讯</h1><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><p>集合类</p><ol><li>collection list set queue<br>LinkedList arraylist 区别<br>LinkedBlockingQueue</li><li>Map hashmap linkedhashmap sortMap<br>cuccrenthashmap</li></ol><p>多线程</p><ol><li>用到那些多线程框架<br>newCachedThreadPool newFixedThreadPool newSingleThreadExecutor newScheduleThreadPool</li></ol><p>锁</p><ol><li>synchronized ReentrantLock 区别<br>lock</li><li>公平锁/非公平锁</li><li>可重入锁 synchronized</li><li>独享锁/共享锁</li><li>互斥锁/读写锁 ReentrantLock</li><li>乐观锁/悲观锁 区别？ CAS算法</li><li>分段锁 ConcurrentHashMap</li></ol><p>tpc三次握手和四次挥手</p><p>epoll和select区别</p><p>设计模式<br>主要用到那些<br>Singleton 工厂 代理模式</p><p>spring 中用到的动态代理<br>动态代理实现和种类，区别</p><p>jvm回收，java的类加载机制</p><p>微服务，服务注册发现</p><p>docker k8s</p><p>数据库<br>介绍下sql优化经验<br>数据库有哪些常用的引擎，主要区别，索引的实现原理<br>b数，b+数的区别</p><p>动态内容<br>HA+Nginx<br>mybatis 动态分页组件<br>zookeeper 应用场景，一致性hash运用<br>对java 高并发的rpc框架<br>本地缓存+分布式缓存</p><p>1、关于spring的aop的实现方法<br>2、关于分布式消息队列，分布式缓存<br>3、关于rpc方面<br>4、关于hashmap源码实现<br>5、关于Java异常的续承层次结构，讲述异常的续承关系<br>6、关于https握手过程<br>7、关于java数据库问题定位和性能调优<br>8、关于设计模式，uml，jvm 内存回收机制问题<br>9、java中重载和重写有什么区别？分别用什么关键字？<br>10、java线程如何启动？<br>11、java中加锁的方式有哪些，怎么个写法？<br>12、乐观锁和悲观锁解释一下<br>13、ORACLE中的SQL如何进行优化，都有哪些方式？<br>14、java中类的加载机制<br>15、介绍一下自己最近做的一个典型的项目<br>16、在项目中遇到了哪些问题，自己是如何解决的<br>17、说一下有哪些常用的设计模式<br>18、事务有哪些特性，在ORACLE中隔离有哪些级别<br>19、使用memcached是一个什么样的原理<br>20、如何存放数据到memcached集群中，介绍一下这个过程。跟进的问题，讲一下一致性哈希算法的实现原理。<br>21、JVM中堆是如何管理的，JVM的内存回收机制，介绍一下<br>22、数据库慢查询优化</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//笔试题目: 无</span></span><br><span class="line"><span class="comment">// 一、基础</span></span><br><span class="line"><span class="comment">//1.面向对象的特征</span></span><br><span class="line"><span class="comment">//2.重载和重写的区别</span></span><br><span class="line"><span class="comment">//3.抽象类和接口的区别</span></span><br><span class="line"><span class="comment">//4.List和Set区别（Arraylist、LinkedList）</span></span><br><span class="line"><span class="comment">//5.HashMap（原理及实现）</span></span><br><span class="line"><span class="comment">//6.线程池的原理及实现（ThreadLocal）</span></span><br><span class="line"><span class="comment">//7.JVM运行时内存区域(内存溢出OOM问题)</span></span><br><span class="line"><span class="comment">//8.常见的设计模式？简单介绍1~2个</span></span><br><span class="line"><span class="comment">//9.MySQL个人简单总结（索引优化）</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//// 二、代码</span></span><br><span class="line"><span class="comment">//1.饿汉式、懒汉式的单例模式Java代码实现</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 懒汉:</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> {</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> {}</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 饿汉:</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> {</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> {}</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="Databricks-数据🧱"><a href="#Databricks-数据🧱" class="headerlink" title="Databricks 数据🧱"></a>Databricks 数据🧱</h1><a href="/2023/09/19/DataBricks-%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/" title="DataBricks">DataBricks</a>]]></content>
      
      
      <categories>
          
          <category> 面经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面经 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>背包问题</title>
      <link href="/2023/07/11/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/"/>
      <url>/2023/07/11/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="背包问题"><a href="#背包问题" class="headerlink" title="背包问题"></a>背包问题</h1><p>背包问题包含以下这些：<br><img src="/2023/07/11/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/%E8%83%8C%E5%8C%85%E6%A6%82%E8%BF%B0.png" alt="背包概述"></p><p>主要需要掌握的是01背包以及完全背包</p><p>完全背包是01背包的演化，完全背包的物品数量无限</p><h2 id="01背包"><a href="#01背包" class="headerlink" title="01背包"></a>01背包</h2><p>定义：</p><p>有 <code>n</code> 件物品和一个最多能背重量为<code>w</code>的背包。</p><p>第 <code>i</code>件物品的重量是<code>weight[i]</code>，可以得到的价值是<code>value[i]</code>。每件物品只能用一次</p><p>将哪些物品放入背包里物品价值总和最大。</p><p>暴力解法：对于每一个物品我们有两个选择，选或者不选，所以可以采用回溯法来搜索所有的情况时间复杂度为 O(2^n) n是物品数量</p><p>所以需要优化 穷举 + 求最值 -&gt; 动态规划</p><h3 id="题目假设"><a href="#题目假设" class="headerlink" title="题目假设"></a>题目假设</h3><p>背包最大重量为4，有如下的物品：</p><table><thead><tr><th>重量</th><th>价值</th><th></th></tr></thead><tbody><tr><td>物品0</td><td>1</td><td>15</td></tr><tr><td>物品1</td><td>3</td><td>20</td></tr><tr><td>物品2</td><td>4</td><td>30</td></tr></tbody></table><p>目前最大价值为 4 * 15 = 60</p><h4 id="二维dp来解决01背包问题"><a href="#二维dp来解决01背包问题" class="headerlink" title="二维dp来解决01背包问题"></a>二维dp来解决01背包问题</h4><ol><li><p>分析dp数组含义</p><p><code>dp[i][j]</code>用来表示从下标<code>[0,i]</code>的物品随便取一个，放进容量为j的背包，价值总和最大为多少</p></li><li><p>递推公式</p><p><code>dp[i][j]</code>能被转移过来的情况分成两种</p><p>如果不放物品，就是从<code>dp[i - 1][j]</code>转移而来，由于不放入新的重量所以其实重量就还是<code>dp[i - 1][j]</code> 可能的场景是：当物品i的重量超过了背包能够承载的容积，新的物品i无法放入其中</p><p>如果放物品，考虑<code>dp[i - 1][j - weight[i]]</code>含义为背包容量为 <code>j - weight[i]</code>时候的不放入i所能获得的最大价值，贪心一点，我们必须要腾出这部分的空间才行因为我们要保证背包是一直饱和的状态是当时的最优解。</p><p>在0-1背包问题中，<code>dp[i][j]</code>通常表示前i个物品填满背包容量为j的最大价值。<code>dp[i - 1][j - weight[i]]</code>表示的是在背包容量为<code>j-weight[i]</code>的时候，前<code>i-1</code>个物品的最大价值。之所以使用这个状态转移方程，是因为我们在考虑是否将第i个物品放入背包时，需要先确定在还没有放入第i个物品，并且背包容量为<code>j-weight[i]</code>时的最大价值。</p><p>这里的“j - weight[i]”是为了腾出第i个物品所需的空间，以便我们能够将其放入背包。之后，我们将该物品的价值<code>value[i]</code>加上<code>dp[i - 1][j - weight[i]]</code>，这样就能得到在将第i个物品放入背包的情况下，能够得到的最大价值。</p><p>简单来说，<code>dp[i - 1][j - weight[i]] + value[i]</code>就表示：在考虑放入第i个物品（即在已经腾出了第i个物品所需的空间后），我们能够得到的最大价值。如果不把这个空间腾出来，那我们就没有地方放这个物品。</p></li><li><p>初始化</p><p>我们首先要对一个二维的数组来进行初始化因此需要搞清楚 [i] 和 [j] 的含义</p><p>回想定义：<code>dp[i][j]</code>用来表示从下标<code>[0,i]</code>的物品随便取一个，放进容量为j的背包，价值总和最大为多少</p><p>那么 <code>dp[i][0]</code>指的是如果背包容量j为0，表示从下标<code>[0,i]</code>的物品随便取一个，放进容量为0的背包，价值总和最大为多少，那么明显是0</p><p>其次由于我们需要使用 <code>dp[i - 1][j]</code> 来作为其中一项来推导<code>dp[i][j]</code>因此我们需要初始化<code>dp[0][j]</code>即，存放编号0的各种容量的背包中能获得的最大价值那么会有两种情况：</p><p>当 <code>j &lt; weight[0]</code>的时候，<code>dp[0][j]</code> 应该是 0，因为背包容量比编号0的物品重量还小。</p><p>当<code>j &gt;= weight[0]</code>时，<code>dp[0][j]</code> 应该是value[0]，因为背包容量放足够放编号0物品。</p></li></ol><p>​综上，对于上面的例子我们有：</p><p><img src="/2023/07/11/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/01%E8%83%8C%E5%8C%85%E5%88%9D%E5%A7%8B%E5%8C%961.png" alt="01背包初始化1"></p><p>对于其他的，由于都会被转化并且被覆盖新值，因此无论初始化成什么都可以</p><ol start="4"><li><p>确定遍历顺序</p><p>我们需要遍历是应该从物品[i]还是背包容积[j]开始</p><p>由于<code>dp[i][j]</code>所需要的数据就是左上角</p></li></ol><p><img src="/2023/07/11/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/01%E8%83%8C%E5%8C%85%E9%81%8D%E5%8E%86%E9%A1%BA%E5%BA%8F.png" alt="01背包遍历顺序"></p><p>所以无论从哪里开始都可以得到结果</p><ol start="5"><li>举例推导dp数组</li></ol><p><img src="/2023/07/11/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/01%E8%83%8C%E5%8C%85%E7%BB%93%E6%9E%9C.jpeg" alt="01背包结果"></p><h4 id="滚动数组优化"><a href="#滚动数组优化" class="headerlink" title="滚动数组优化"></a>滚动数组优化</h4><p>由于<code>dp[i][j]</code>仅依赖于前一个物品的值（<code>dp[i - 1][j]</code> 和 <code>dp[i - 1][j - weight[i]]</code>），所以实际上我们并不需要维护一个二维数组，只需要一个一维数组就足够了。这个问题的特殊之处在于，<code>dp[i][j]</code>的值只依赖于<code>dp[i-1][*]</code>，即只依赖于前一个物品的状态。这给我们提供了一个优化空间，那就是我们其实不需要存储所有的i，也就是不需要存储所有物品的状态，只需要存储前一个物品的状态就足够了。这就是为什么我们可以省去一个维度的原因。我们使用一维数组dp[j]来替代二维数组<code>dp[i][j]</code>。在每一次的迭代中，dp[j]表示的都是在考虑当前物品，并且在背包容量为j的情况下，我们能获得的最大价值。换句话说，我们的一维数组dp[j]在每次迭代过程中，都相当于原来二维数组的<code>dp[i][j]</code>。</p><ol><li>dp数组含义：</li></ol><p>此时的含义就变为:</p><p>我们有容量为j的背包从前i个物品取能取到的最大价值</p><ol start="2"><li>转移方程递推公式：</li></ol><p>此时dp[j]有两个选择，一个是取自己dp[j] 相当于 二维dp数组中的<code>dp[i-1][j]</code>，即不放物品i，一个是取<code>dp[j - weight[i]] + value[i]</code>，即放物品i，指定是取最大的，毕竟是求最大价值，</p><p>即：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp[j] = max(dp[j], dp[j - weight[i]] + value[i])</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>初始化：</li></ol><p>最初dp[0]容量为0的背包，那么最大价值一定为0</p><ol start="4"><li>遍历顺序</li></ol><p><strong>重点</strong>：在这个优化策略中，我们必须从大到小遍历j，这是因为dp[j - weight[i]]必须在dp[j]之前更新。原因是我们在每次迭代中都在复用上一轮迭代中的结果。为了确保这次迭代的结果不会影响到下一次迭代，我们需要从大到小遍历j。</p><p>具体地说，如果我们从小到大遍历j，考虑在计算dp[j]时，由于dp[j - weight[i]]可能在这个迭代过程中已经被更新过（因为j - weight[i] &lt; j），我们就会使用到这个物品i在多次的情况，这明显违反了我们的原始假设（每个物品只能用一次）。为了避免这个问题，我们选择从大到小遍历j，在计算dp[j]时，dp[j - weight[i]]对应的就是上一轮迭代的结果，也就是没有使用过物品i的情况。</p><p>例如，假设我们有物品的重量和价值分别为2和3，背包的容量为4，初始化dp数组为0。如果从小到大遍历j，计算过程如下：</p><ul><li>当j=2时，dp[2] = max(dp[2], dp[2-2] + 3) = 3</li><li>当j=3时，dp[3] = max(dp[3], dp[3-2] + 3) = 3</li><li>当j=4时，dp[4] = max(dp[4], dp[4-2] + 3) = 6</li></ul><p>在这个例子中，dp[4]的值为6，明显不对，因为我们的物品只有一个，但我们却计算得到了两个物品的价值，这就是因为在计算dp[4]时，dp[2]已经使用过当前物品，被更新为3了。</p><p>结论：从后往前循环，每次取得状态不会和之前取得状态重合，这样每种物品就只取一次了。</p><h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><h1 id="416-分割等和子集"><a href="#416-分割等和子集" class="headerlink" title="416. 分割等和子集"></a><a href="https://leetcode.cn/problems/partition-equal-subset-sum/description/">416. 分割等和子集</a></h1><p>第一个难点是如何转化为01背包问题：</p><p>这道题首先我们要等和，所以一个背包的容积就是 sum / 2</p><p>那么我们就是看是不是<strong>给一个可装载重量为 <code>sum / 2</code> 的背包和 <code>N</code> 个物品，每个物品的重量为 <code>nums[i]</code>。现在让你装物品，是否存在一种装法，能够恰好将背包装满</strong>？</p><blockquote><p>注意不能直接看除2是否能除尽，因为除2不代表有对应的子集比如[1,2,5]</p></blockquote><p><code>dp</code> 数组的定义：<code>dp[i][j] = x</code> 表示，对于前 <code>i</code> 个物品，当前背包的容量为 <code>j</code> 时，若 <code>x</code> 为 <code>true</code>，则说明可以恰好将背包装满，若 <code>x</code> 为 <code>false</code>，则说明不能恰好将背包装满。</p><p>根据 <code>dp</code> 数组含义，可以根据「选择」对 <code>dp[i][j]</code> 得到以下状态转移：</p><p>如果不把 <code>nums[i]</code> 算入子集，<strong>或者说你不把这第 <code>i</code> 个物品装入背包</strong>，那么是否能够恰好装满背包，取决于上一个状态 <code>dp[i-1][j]</code>，继承之前的结果。</p><p>如果把 <code>nums[i]</code> 算入子集，<strong>或者说你把这第 <code>i</code> 个物品装入了背包</strong>，那么是否能够恰好装满背包，取决于状态 <code>dp[i-1][j-nums[i-1]]</code>。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canPartition</span><span class="params">(<span class="type">int</span>[] nums)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> Arrays.stream(nums).sum();</span><br><span class="line">        <span class="keyword">if</span> (sum % <span class="number">2</span> != <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">col</span> <span class="operator">=</span> sum/<span class="number">2</span>;</span><br><span class="line">        <span class="type">boolean</span>[][] dp = <span class="keyword">new</span> <span class="title class_">boolean</span>[row + <span class="number">1</span>][col + <span class="number">1</span>];</span><br><span class="line">        <span class="comment">// base case:</span></span><br><span class="line">        <span class="comment">// 意思是当没有物品时背包永远不可能被装满</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt;= col; j++) {</span><br><span class="line">            dp[<span class="number">0</span>][j] = <span class="literal">false</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 意思是当背包容量为0时，直接就是满的</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= row; i++) {</span><br><span class="line">            dp[i][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 状态转移</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= row; i++) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= col; j++) {</span><br><span class="line">                <span class="comment">// 背包容量不够的情形：</span></span><br><span class="line">                <span class="keyword">if</span> (j - nums[i - <span class="number">1</span>] &lt; <span class="number">0</span>) {</span><br><span class="line">                    <span class="comment">// 没有办法再放入当前的物品, 结果就是如果之前的能刚好放进去，那么现在不放也可以刚好放进去</span></span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j];</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    <span class="comment">// 如果我 i 刚好能放进去，那么我放入nums[i]也刚好能放进去</span></span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j] || dp[i - <span class="number">1</span>][j - nums[i - <span class="number">1</span>]];</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// for (int i = 0; i &lt;= row; i++) {</span></span><br><span class="line">        <span class="comment">//     for (int j = 0; j &lt;= col; j++) {</span></span><br><span class="line">        <span class="comment">//         System.out.print(dp[i][j] + " ");</span></span><br><span class="line">        <span class="comment">//     }</span></span><br><span class="line">        <span class="comment">//     System.out.println();</span></span><br><span class="line">        <span class="comment">// }</span></span><br><span class="line">        <span class="keyword">return</span> dp[row][col];</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>滚动数组优化：</p><p>相当于i直接就是每一层搞一次，但我们不用存储 i - 1的结果了，直接覆盖就可以了</p><p>Eg: [1,2,5]</p><table><thead><tr><th></th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th></tr></thead><tbody><tr><td>0</td><td>t</td><td>f</td><td>f</td><td>f</td><td>f</td></tr><tr><td>1</td><td>t</td><td>t</td><td>f</td><td>f</td><td>f</td></tr><tr><td>2</td><td>t</td><td>t</td><td>t</td><td>t</td><td>f</td></tr><tr><td>3</td><td>t</td><td>t</td><td>t</td><td>t</td><td>f</td></tr></tbody></table><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canPartition</span><span class="params">(<span class="type">int</span>[] nums)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> Arrays.stream(nums).sum();</span><br><span class="line">        <span class="keyword">if</span> (sum % <span class="number">2</span> != <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">col</span> <span class="operator">=</span> sum/<span class="number">2</span>;</span><br><span class="line">        <span class="type">boolean</span>[] dp = <span class="keyword">new</span> <span class="title class_">boolean</span>[col + <span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= row; i++) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> col; j &gt;= <span class="number">1</span>; j--) {</span><br><span class="line">                <span class="keyword">if</span> (j &gt;= nums[i - <span class="number">1</span>]) {</span><br><span class="line">                    dp[j] = dp[j] || dp[j - nums[i - <span class="number">1</span>]];  </span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">// StringBuilder result = new StringBuilder();</span></span><br><span class="line">            <span class="comment">// for (boolean element : dp) {</span></span><br><span class="line">            <span class="comment">//     result.append(element).append(" ");</span></span><br><span class="line">            <span class="comment">// }</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// // Remove the trailing space before printing</span></span><br><span class="line">            <span class="comment">// System.out.println(result.toString().trim());</span></span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> dp[col];</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="1049-最后一块石头的重量-II"><a href="#1049-最后一块石头的重量-II" class="headerlink" title="1049.最后一块石头的重量 II"></a><a href="https://leetcode.cn/problems/last-stone-weight-ii/">1049.最后一块石头的重量 II</a></h1><p>和416类似，重点是要知道如何转换为01背包问题</p><p>对于石头问题，我们想要的是尽量让两边相等然后看差值。</p><p>那么就是有个容量为 sum/2的背包，里面能够装的最大的重量，就是尽可能让两边相等的解法。</p><p>所以就是：</p><p>对于容积为sum/2的背包，我们有 stones[i] 价值的，重量为stones[i]的石头，怎么放，价值最大：</p><p>常规的二维dp：</p><blockquote><p>注意labuladong和代码随想录不一样，labuladong的i从1开始然后 i - 1是对应的价值。而代码随想录从0开始，i就是对应的价值了</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lastStoneWeightII</span><span class="params">(<span class="type">int</span>[] stones)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> Arrays.stream(stones).sum();</span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[stones.length + <span class="number">1</span>][sum / <span class="number">2</span> + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= stones.length; i++) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= sum / <span class="number">2</span>; j++) {</span><br><span class="line">                <span class="keyword">if</span> (stones[i - <span class="number">1</span>] &gt; j) {</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j];</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    dp[i][j] = Math.max(dp[i - <span class="number">1</span>][j], dp[i - <span class="number">1</span>][j - stones[i - <span class="number">1</span>]] + stones[i - <span class="number">1</span>]);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 打印dp数组 </span></span><br><span class="line">        <span class="comment">// for (int i = 0; i &lt; stones.length; i++) { </span></span><br><span class="line">        <span class="comment">//     for (int j = 0; j &lt;= sum / 2; j++) { </span></span><br><span class="line">        <span class="comment">//         System.out.print(dp[i][j] + " "); </span></span><br><span class="line">        <span class="comment">//     } </span></span><br><span class="line">        <span class="comment">//     System.out.println(); </span></span><br><span class="line">        <span class="comment">// } </span></span><br><span class="line">        <span class="keyword">return</span> sum - dp[stones.length][sum / <span class="number">2</span>] - dp[stones.length][sum / <span class="number">2</span>];</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>滚动数组优化，注意遍历顺序，（虽然道理已经明白了，可是还是不太懂这个到底是怎么优化的。。。）</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lastStoneWeightII</span><span class="params">(<span class="type">int</span>[] stones)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> Arrays.stream(stones).sum();</span><br><span class="line">        <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[sum / <span class="number">2</span> + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= stones.length; i++) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> sum / <span class="number">2</span>; j &gt;= stones[i - <span class="number">1</span>]; j--) {</span><br><span class="line">                dp[j] = Math.max(dp[j], dp[j - stones[i - <span class="number">1</span>]] + stones[i - <span class="number">1</span>]);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> sum - dp[sum / <span class="number">2</span>] - dp[sum / <span class="number">2</span>];</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="494-目标和"><a href="#494-目标和" class="headerlink" title="494. 目标和"></a><a href="https://leetcode.cn/problems/target-sum/">494. 目标和</a></h1><p>本题的关键难点在于如何做好问题转化，即怎么把这个问题转换为01背包问题：</p><p>这是一个经典的子集和问题（subset sum problem）转化。原始问题是从数组 <code>nums</code> 中选取若干数，可以加上+或-号，使得它们的总和为 <code>target</code>。问题被转化为找出 <code>nums</code> 中有多少个子集 <code>A</code> 使得这个子集的和等于 <code>(target + sum(nums)) / 2</code>。</p><p>为什么要这样转化呢？我们来详细理解下。</p><p>原始方程是：<br>[ sum(A) - sum(B) = target ]</p><p>其中，<code>A</code> 是被加上 <code>+</code> 号的子集，<code>B</code> 是被加上 <code>-</code> 号的子集。</p><p>再加上以下方程：<br>[ sum(A) + sum(B) = sum(nums) ]</p><p>两边都加上 <code>sum(A)</code>：<br>[ 2 \times sum(A) = target + sum(nums) ]</p><p>从这个方程，我们得到：<br>[ sum(A) = (target + sum(nums)) / 2 ]</p><p>这就将原始问题转化为一个子集和问题，即从 <code>nums</code> 中找到所有子集 <code>A</code>，其和为 <code>(target + sum(nums)) / 2</code>。这是一个经典的动态规划问题，通常使用一个二维数组 <code>dp</code> 来解决。<code>dp[i][j]</code> 表示使用前 <code>i</code> 个数字，能否组成和为 <code>j</code> 的子集。</p><p>那么为什么是<code>(target + sum(nums)) / 2</code> 而不是 target呢？</p><p>假设<code>nums: [1,2,3,4]</code> 和 <code>target:4</code> 。</p><p>首先，我们看转化的方法：</p><ol><li><p>从 <code>nums</code> 中选择数字，有的加上 <code>+</code> 号，有的加上 <code>-</code> 号，使其总和为 <code>target</code>。</p></li><li><p>使用转化方法，我们得到以下方程：<br>[ sum(A) - sum(B) = target ]<br>[ sum(A) + sum(B) = sum(nums) ]<br>代入第一个方程得到：<br>[ sum(A) = (target + sum(nums)) / 2 ]<br>[ sum(A) = (4 + 10) / 2 = 7 ]</p></li></ol><p>所以，我们需要找到 <code>nums</code> 中子集和为7的所有情况。</p><p>以下是子集和为7的组合：</p><ol><li>[1,2,4]</li><li>[3,4]</li></ol><p>这些组合可以得到如下的表示达到 target 4：</p><ol><li>+1+2+4-3</li><li>+3+4-1-2</li></ol><p>现在，如果我们直接找出 <code>nums</code> 中的子集和为 <code>target=4</code> 的组合，我们得到：</p><ol><li>[1,3]</li><li>[4]</li></ol><p>这些组合表示了如何通过简单组合 <code>nums</code> 中的数字得到4，但没有表示如何通过加法和减法操作得到4。这就是为什么直接使用 <code>target</code> 作为背包容量是不准确的，因为你只能得到部分答案，而不能表示如何通过整个 <code>nums</code> 数组的加减操作得到目标值 <code>target</code>。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findTargetSumWays</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> Arrays.stream(nums).sum();</span><br><span class="line">        <span class="keyword">if</span> ((target + sum) % <span class="number">2</span> != <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (Math.abs(target) &gt; sum) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">subSetTotal</span> <span class="operator">=</span> (target + sum) / <span class="number">2</span>;</span><br><span class="line">        <span class="comment">// 背包大小 subsettotal:</span></span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[nums.length + <span class="number">1</span>][subSetTotal + <span class="number">1</span>];</span><br><span class="line">      <span class="comment">// 注意一下这里的初始化，dp[i][0]因为现在有可能性什么都不装即有一种装法，即从dp[0][0]转移而来</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length + <span class="number">1</span>; i++) dp[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; nums.length + <span class="number">1</span>; i++) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; subSetTotal + <span class="number">1</span>; j++) {</span><br><span class="line">                <span class="keyword">if</span> (j &gt;= nums[i - <span class="number">1</span>]) {</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j] + dp[i - <span class="number">1</span>][j - nums[i - <span class="number">1</span>]];</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j];</span><br><span class="line">                }</span><br><span class="line"></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dp[nums.length][subSetTotal];</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>二维变一维：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findTargetSumWays</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> Arrays.stream(nums).sum();</span><br><span class="line">        <span class="keyword">if</span> ((target + sum) % <span class="number">2</span> != <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (Math.abs(target) &gt; sum) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">subSetTotal</span> <span class="operator">=</span> (target + sum) / <span class="number">2</span>;</span><br><span class="line">        <span class="comment">// 背包大小 subsettotal:</span></span><br><span class="line">        <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[subSetTotal + <span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= nums.length; i++) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> subSetTotal; j &gt;= <span class="number">0</span>; j--) {</span><br><span class="line">                <span class="keyword">if</span> (j &gt;= nums[i - <span class="number">1</span>])</span><br><span class="line">                    dp[j] = dp[j] + dp[j - nums[i - <span class="number">1</span>]];</span><br><span class="line">                <span class="keyword">else</span> {</span><br><span class="line">                    dp[j] = dp[j];</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            </span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dp[subSetTotal];</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> dp </tag>
            
            <tag> 背包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划</title>
      <link href="/2023/06/24/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
      <url>/2023/06/24/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
      
        <content type="html"><![CDATA[<div class="note green icon-padding flat"><i class="note-icon fas fa-rocket"></i><p>📚 此文档包含以下几个部分：</p><ul><li><a href="/2023/10/05/%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E5%BA%8F%E5%88%97/" title="最长公共子序列">最长公共子序列</a></li></ul></div><h1 id="一般形式"><a href="#一般形式" class="headerlink" title="一般形式"></a>一般形式</h1><p>动态规划问题的一般形式就是<strong>求最值</strong>。核心问题是 <strong>穷举</strong>。</p><p>比如最长递增子序列，最小编辑距离这种问题</p><p>列出正确的状态转移方程，</p><p>判读是否具备最优子结构（即是否可以通过自问题的最值的道原问题的最值）</p><p>是否可以使用数据结构来优化穷举过程以避免不必要的计算。</p><p>一般包含以下三要素：</p><p>重叠子问题，最优子结构，状态转移方程</p><p>对于状态转移方程：</p><p><strong>明确 base case -&gt; 明确「状态」-&gt; 明确「选择」 -&gt; 定义 <code>dp</code> 数组/函数的含义</strong>。</p><h1 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h1><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 自顶向下递归的动态规划</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dp</span>(<span class="params">状态<span class="number">1</span>, 状态<span class="number">2</span>, ...</span>):</span><br><span class="line">    <span class="keyword">for</span> 选择 <span class="keyword">in</span> 所有可能的选择:</span><br><span class="line">        <span class="comment"># 此时的状态已经因为做了选择而改变</span></span><br><span class="line">        result = 求最值(result, dp(状态<span class="number">1</span>, 状态<span class="number">2</span>, ...))</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自底向上迭代的动态规划</span></span><br><span class="line"><span class="comment"># 初始化 base case</span></span><br><span class="line">dp[<span class="number">0</span>][<span class="number">0</span>][...] = base <span class="keyword">case</span></span><br><span class="line"><span class="comment"># 进行状态转移</span></span><br><span class="line"><span class="keyword">for</span> 状态<span class="number">1</span> <span class="keyword">in</span> 状态<span class="number">1</span>的所有取值：</span><br><span class="line">    <span class="keyword">for</span> 状态<span class="number">2</span> <span class="keyword">in</span> 状态<span class="number">2</span>的所有取值：</span><br><span class="line">        <span class="keyword">for</span> ...</span><br><span class="line">            dp[状态<span class="number">1</span>][状态<span class="number">2</span>][...] = 求最值(选择<span class="number">1</span>，选择<span class="number">2.</span>..)</span><br></pre></td></tr></tbody></table></figure><h1 id="解题步骤"><a href="#解题步骤" class="headerlink" title="解题步骤"></a>解题步骤</h1><ol><li>dp数组以及下标的含义</li><li>确定递推公式</li><li>dp数组初始化</li><li>确定遍历顺序</li><li>举例推导dp数组</li></ol><h1 id="自顶向下和自底向上"><a href="#自顶向下和自底向上" class="headerlink" title="自顶向下和自底向上"></a>自顶向下和自底向上</h1><p>以<a href="https://leetcode.cn/problems/fibonacci-number/">509. 斐波那契数</a>为例：</p><h2 id="自顶向下"><a href="#自顶向下" class="headerlink" title="自顶向下"></a>自顶向下</h2><p>自顶向下就像是DFS/递归，把大问题逐渐分解规模，直到base case。从上到下，然后逐层返回答案。（注意图中含有剪枝操作，好处是可以讲原本 O(2^n)的算法简化为 O(n)</p><p><img src="/2023/06/24/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E8%87%AA%E9%A1%B6%E5%90%91%E4%B8%8B1.jpeg" alt="自顶向下1"></p><p><img src="/2023/06/24/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E8%87%AA%E9%A1%B6%E5%90%91%E4%B8%8B2.jpeg" alt="自顶向下2"></p><h2 id="自底向上"><a href="#自底向上" class="headerlink" title="自底向上"></a>自底向上</h2><p>就是从问题规模最小的问题（base case）往上推直到得到问题的答案</p><p><img src="/2023/06/24/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E8%87%AA%E5%BA%95%E5%90%91%E4%B8%8A1.jpeg" alt="自底向上1"></p><h1 id="状态转移方程"><a href="#状态转移方程" class="headerlink" title="状态转移方程"></a>状态转移方程</h1><p>依旧用509斐波那契数举例子：</p><p><img src="/2023/06/24/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E7%8A%B6%E6%80%81%E8%BD%AC%E7%A7%BB%E6%96%B9%E7%A8%8B-fib.png" alt="状态转移方程-fib"></p><p><code>f(n)</code> 的函数参数会不断变化，所以你把参数 <code>n</code> 想做一个状态，这个状态 <code>n</code> 是由状态 <code>n - 1</code> 和状态 <code>n - 2</code> 转移（相加）而来，这就叫状态转移，仅此而已。</p><p>你会发现，上面的几种解法中的所有操作，例如 <code>return f(n - 1) + f(n - 2)</code>，<code>dp[i] = dp[i - 1] + dp[i - 2]</code>，以及对备忘录或 DP table 的初始化操作，都是围绕这个方程式的不同表现形式</p><h1 id="最优子结构"><a href="#最优子结构" class="headerlink" title="最优子结构"></a>最优子结构</h1><p>子问题间必须相互独立 -&gt; 最优子结构</p><p>例子：比如我想考第一名那么每一科目都考第一就能总成绩第一，但是一般数学高的话语文就会低，这就违背了子问题间相互独立</p><h1 id="如何写状态转移方程"><a href="#如何写状态转移方程" class="headerlink" title="如何写状态转移方程"></a>如何写状态转移方程</h1><p>自己总结的：</p><p>感觉题目基本就给了dp函数的定义，可以尝试一下能否写出来base case，当前状态，以及怎么做选择</p><ol><li>明确 状态 + 选择</li></ol><p>​状态：过程中会变化的</p><p>​选择：导致状态发生改变的</p><ol start="2"><li>明确 dp数组 定义</li><li>带入定义搞清楚 base case 以及 目标/终点 或者 查看定义是否正确 即能否转移来，子问题是什么？</li></ol><h1 id="如何定位重叠子问题"><a href="#如何定位重叠子问题" class="headerlink" title="如何定位重叠子问题"></a>如何定位重叠子问题</h1><p>首先理解为什么会重叠？</p><p>这是因为在状态转移的过程中，同一个状态有多个转移过去的方式，从而导致了重复的计算。</p><p>步骤：</p><ol><li><strong>抽出来dp过程中递归部分中，递归出现次数多的部分</strong></li><li><strong>定位为了到达目标，是否有同一个状态有多种转移过去的方式</strong></li></ol><h1 id="如何确定dp数组的遍历顺序"><a href="#如何确定dp数组的遍历顺序" class="headerlink" title="如何确定dp数组的遍历顺序"></a>如何确定dp数组的遍历顺序</h1><p>确定base case 就是起点从哪里开始，终点就是想要的结果，方向就是起点到终点</p><p>basecase 可以转移到哪里，基本就确定了转移方向</p><p>下图：我们可以从 basecase: (0, 0) (0, 1) (1, 0) 从而得到 (1, 1) 之后又可以用 (0, 1) (1, 1) (0, 2) 从而得到 (1, 2) 以此类推</p><p><img src="/2023/06/24/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E7%A1%AE%E5%AE%9A%E9%81%8D%E5%8E%86%E9%A1%BA%E5%BA%8F_1.png" alt="确定遍历顺序_1"></p><p>再比如：</p><p><img src="/2023/06/24/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E7%A1%AE%E5%AE%9A%E9%81%8D%E5%8E%86%E9%A1%BA%E5%BA%8F_2.png" alt="确定遍历顺序_2"></p><p><img src="/2023/06/24/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E7%A1%AE%E5%AE%9A%E9%81%8D%E5%8E%86%E9%A1%BA%E5%BA%8F_3.png" alt="确定遍历顺序_3"></p><p><img src="/2023/06/24/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E7%A1%AE%E5%AE%9A%E9%81%8D%E5%8E%86%E9%A1%BA%E5%BA%8F_4.png" alt="确定遍历顺序_4"></p><h1 id="状态压缩"><a href="#状态压缩" class="headerlink" title="状态压缩"></a>状态压缩</h1><p>使用一个二进制数表示当前哪些数已被选，哪些数未被选，目的是为了可以使用位运算进行加速。</p><p>Eg: 二进制：(000… 0101) 表示1和3被visited过了</p><p>当我们需要检查值为 <em>k</em> 的数是否被使用时 <code>a = (state &gt;&gt; k) &amp; 1</code>查看第k位为1（被使用）或0（未被使用）</p><h1 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h1><h2 id="以322-零钱兑换为样例："><a href="#以322-零钱兑换为样例：" class="headerlink" title="以322. 零钱兑换为样例："></a>以<a href="https://leetcode.cn/problems/coin-change/">322. 零钱兑换</a>为样例：</h2><p>按照：</p><p><strong>明确 base case -&gt; 明确「状态」-&gt; 明确「选择」 -&gt; 定义 <code>dp</code> 数组/函数的含义</strong>。</p><ol><li>明确 base case:<ol><li>剩余钱为0时即不需要任何其他的硬币，达到结果</li></ol></li><li>明确「状态」</li><li>状态：原问题和子问题中会变化的变量：amount</li><li>由于硬币数量无限，硬币的面额也是题目给定的，只有目标金额会不断地向 base case 靠近，所以唯一的「状态」就是目标金额 <code>amount</code>。</li><li>明确「选择」<ol><li>每选择一枚硬币，就相当于减少了目标金额。所以说所有硬币的面值，就是你的「选择」。</li></ol></li><li>dp<ol><li>函数：<ol><li>自顶向下<ol><li>函数的参数就是状态转移中会变化的量，也就是上面说到的「状态」；函数的返回值就是题目要求我们计算的量。</li><li>就本题来说，状态只有一个，即「目标金额」，题目要求我们计算凑出目标金额所需的最少硬币数量。</li><li><strong><code>dp(n)</code> 表示，输入一个目标金额 <code>n</code>，返回凑出目标金额 <code>n</code> 所需的最少硬币数量</strong>。</li></ol></li></ol></li><li>数组：<ol><li>自底向上<ol><li><strong><code>dp</code> 数组的定义：当目标金额为 <code>i</code> 时，至少需要 <code>dp[i]</code> 枚硬币凑出</strong>。</li></ol></li></ol></li></ol></li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自顶向下：</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">  <span class="type">int</span>[] memo;</span><br><span class="line">  <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">coinChange</span><span class="params">(<span class="type">int</span>[] coins, <span class="type">int</span> amount)</span> {</span><br><span class="line">      memo = <span class="keyword">new</span> <span class="title class_">int</span>[amount + <span class="number">1</span>];</span><br><span class="line">      Arrays.fill(memo, -<span class="number">999</span>);</span><br><span class="line">      <span class="keyword">return</span> dp(coins, amount);</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">dp</span><span class="params">(<span class="type">int</span>[] coins, <span class="type">int</span> amount)</span> {</span><br><span class="line">      <span class="keyword">if</span> (amount == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">if</span> (amount &lt; <span class="number">0</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (memo[amount] != -<span class="number">999</span>) <span class="keyword">return</span> memo[amount];</span><br><span class="line"></span><br><span class="line">      <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> coin : coins) {</span><br><span class="line">          <span class="type">int</span> <span class="variable">subAmount</span> <span class="operator">=</span> dp(coins, amount - coin);</span><br><span class="line">          <span class="keyword">if</span> (subAmount &lt; <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">          res = Math.min(res, subAmount + <span class="number">1</span>);</span><br><span class="line">      }</span><br><span class="line">      memo[amount] = (res == Integer.MAX_VALUE) ? -<span class="number">1</span> : res;</span><br><span class="line">      <span class="keyword">return</span> memo[amount];</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"><span class="comment">// 自底向上：</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">  <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">coinChange</span><span class="params">(<span class="type">int</span>[] coins, <span class="type">int</span> amount)</span> {</span><br><span class="line">      <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[amount + <span class="number">1</span>];</span><br><span class="line">      Arrays.fill(dp, amount + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">      dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; dp.length; i++) {</span><br><span class="line">          <span class="keyword">for</span> (<span class="type">int</span> coin : coins) {</span><br><span class="line">              <span class="keyword">if</span> (i - coin &lt; <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">              dp[i] = Math.min(dp[i], <span class="number">1</span> + dp[i - coin]);</span><br><span class="line">          }</span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">return</span> dp[amount] == amount + <span class="number">1</span> ? -<span class="number">1</span> : dp[amount];</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="72-编辑距离"><a href="#72-编辑距离" class="headerlink" title="72. 编辑距离"></a><a href="https://leetcode.cn/problems/edit-distance/">72. 编辑距离</a></h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minDistance</span><span class="params">(String word1, String word2)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> word1.length(), n = word2.length();</span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[m + <span class="number">1</span>][n + <span class="number">1</span>];</span><br><span class="line">        <span class="comment">// 状态：dp[i][j] 表示word1[0, i] 转换成 word2[0, j] 所使用的最小操作数</span></span><br><span class="line">        <span class="comment">// 选择：相等时 什么都不做，不相等时可以 插入，删除，替换，</span></span><br><span class="line">        <span class="comment">// 函数定义：表示word1[0, i] 转换成 word2[0, j] 所使用的最小操作数</span></span><br><span class="line">        <span class="comment">// 状态转移：相等时 什么都不做; Min(插入，删除，替换) </span></span><br><span class="line">        <span class="comment">// dp[i][j] = Math.min(</span></span><br><span class="line">        <span class="comment">//     dp[i - 1][j]; // 删除</span></span><br><span class="line">        <span class="comment">//     dp[i][j - 1]; // 插入</span></span><br><span class="line">        <span class="comment">//     dp[i - 1][j - 1]; // 替换</span></span><br><span class="line">        <span class="comment">// )</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// base case:</span></span><br><span class="line">        <span class="comment">// word1 为 空字符串, 转换为 word2[0, j] 需要 j 种方法 （直接增加）</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt;= n; j++) {</span><br><span class="line">            dp[<span class="number">0</span>][j] = j;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// word2 为 空字符串, 转换为 word1[0, i] 需要 i 种方法 （直接增加）</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= m; i++) {</span><br><span class="line">            dp[i][<span class="number">0</span>] = i;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 都为空串:</span></span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= m; i++) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= n; j++) {</span><br><span class="line">                <span class="keyword">if</span> (word1.charAt(i - <span class="number">1</span>) == word2.charAt(j - <span class="number">1</span>)) {</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    dp[i][j] = Math.min(</span><br><span class="line">                        dp[i - <span class="number">1</span>][j] + <span class="number">1</span>,</span><br><span class="line">                        Math.min(</span><br><span class="line">                            dp[i][j - <span class="number">1</span>] + <span class="number">1</span>,</span><br><span class="line">                            dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span></span><br><span class="line">                        )</span><br><span class="line">                    );</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> dp[m][n];</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="如何debug"><a href="#如何debug" class="headerlink" title="如何debug"></a>如何debug</h1><p><strong>做动规的题目，写代码之前一定要把状态转移在dp数组的上具体情况模拟一遍，心中有数，确定最后推出的是想要的结果</strong> 然后再写代码，如果代码没通过就打印dp数组，看看是不是和自己预先推导的哪里不一样。如果打印出来和自己预先模拟推导是一样的，那么就是自己的递归公式、初始化或者遍历顺序有问题了。</p><h1 id="70-爬楼梯"><a href="#70-爬楼梯" class="headerlink" title="70. 爬楼梯"></a><a href="https://leetcode.cn/problems/climbing-stairs/">70. 爬楼梯</a></h1><p>其实就是斐波那契数</p><p>f[x] = f[x - 1] + f[x - 2]</p><p>自顶向下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span>[] memo;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">climbStairs</span><span class="params">(<span class="type">int</span> n)</span> {</span><br><span class="line">        memo = <span class="keyword">new</span> <span class="title class_">int</span>[n +<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">return</span> dp(n);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">dp</span><span class="params">(<span class="type">int</span> floor)</span> {</span><br><span class="line">        <span class="keyword">if</span> (floor == <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (floor &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (memo[floor] != <span class="number">0</span>) <span class="keyword">return</span> memo[floor];</span><br><span class="line">        memo[floor] = dp(floor - <span class="number">2</span>) + dp(floor - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> memo[floor];</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>自底向上：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">climbStairs</span><span class="params">(<span class="type">int</span> n)</span> {</span><br><span class="line">        <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>; </span><br><span class="line">        dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt; dp.length; i++) {</span><br><span class="line">            dp[i] = dp[i - <span class="number">1</span>] + dp[i - <span class="number">2</span>];</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// Arrays.stream(dp).forEach(System.out::println);</span></span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>滚动优化：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">climbStairs</span><span class="params">(<span class="type">int</span> n)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>; </span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt; n + <span class="number">1</span>; i++) {</span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> a + b;</span><br><span class="line">            a = b;</span><br><span class="line">            b = temp;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// Arrays.stream(dp).forEach(System.out::println);</span></span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="746-使用最小花费爬楼梯"><a href="#746-使用最小花费爬楼梯" class="headerlink" title="746. 使用最小花费爬楼梯"></a><a href="https://leetcode.cn/problems/min-cost-climbing-stairs/">746. 使用最小花费爬楼梯</a></h1><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minCostClimbingStairs</span><span class="params">(<span class="type">int</span>[] cost)</span> {</span><br><span class="line">        <span class="comment">// dp[i] 来表示到第i层的最低开销 dp[cost.length] 就是 到最顶</span></span><br><span class="line">        <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[cost.length + <span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        dp[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt; dp.length; i++) {</span><br><span class="line">            dp[i] = Math.min(dp[i - <span class="number">1</span>] + cost[i - <span class="number">1</span>], dp[i - <span class="number">2</span>] + cost[i - <span class="number">2</span>]);</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// Arrays.stream(dp).forEach(e -&gt; System.out.println(e));</span></span><br><span class="line">        <span class="keyword">return</span> dp[dp.length - <span class="number">1</span>];</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>空间优化：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minCostClimbingStairs</span><span class="params">(<span class="type">int</span>[] cost)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">dpi1</span> <span class="operator">=</span> <span class="number">0</span>, dpi2 = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">minCost</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt; cost.length + <span class="number">1</span>; i++) {</span><br><span class="line">            minCost = Math.min(dpi1 + cost[i - <span class="number">1</span>], dpi2 + cost[i - <span class="number">2</span>]);</span><br><span class="line">            dpi2 = dpi1;</span><br><span class="line">            dpi1 = minCost;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// Arrays.stream(dp).forEach(e -&gt; System.out.println(e));</span></span><br><span class="line">        <span class="keyword">return</span> minCost;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="62-不同路径"><a href="#62-不同路径" class="headerlink" title="62. 不同路径"></a><a href="https://leetcode.cn/problems/unique-paths/">62. 不同路径</a></h1><ol><li>确定 dp 函数的含义：<ol><li><code>dp[i][j]</code> 代表 从 起点出发， 到 <code>(i,j)</code> 的路径方案总数</li></ol></li><li>确定递推公式<ol><li>由于方向只能从 <code>上面</code> 以及 <code>左面</code> 所以 <code>dp[i][j]</code> 会由 <code>dp[i - 1][j]</code> 和 <code>dp[i][j - 1]</code>转移而来。</li><li><code>dp[i - 1][j]</code> 是从(0, 0)的位置到(i - 1, j)有几条路径，<code>dp[i][j - 1]</code>同理。</li></ol></li><li>初始化<ol><li><code>dp[i][0]</code>一定都是1，因为从(0, 0)的位置到(i, 0)的路径只有一条，那么<code>dp[0][j]</code>也同理。</li></ol></li><li>确定遍历顺序<ol><li>我们要保证转移的顺序，因此 <code>dp[i - 1][j]</code> 和 <code>dp[i][j - 1]</code> 必须先由<code>dp[i][j]</code>计算完成</li><li>发现顺序遍历就可以达到这个效果，因此顺序遍历</li></ol></li><li>举例推导dp数组</li></ol><p><img src="/2023/06/24/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/lc62_%E4%B8%BE%E4%BE%8B%E6%8E%A8%E5%AF%BC.png" alt="lc62_举例推导"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">uniquePaths</span><span class="params">(<span class="type">int</span> m, <span class="type">int</span> n)</span> {</span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[m][n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) dp[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) dp[<span class="number">0</span>][j] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) {</span><br><span class="line">                <span class="keyword">if</span> (i == <span class="number">0</span> || j == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j] + dp[i][j - <span class="number">1</span>];</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> dp[m - <span class="number">1</span>][n - <span class="number">1</span>];</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>自顶向下：（但是memo其实就是dp table了）</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="type">int</span>[][] memo;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">uniquePaths</span><span class="params">(<span class="type">int</span> m, <span class="type">int</span> n)</span> {</span><br><span class="line">        memo = <span class="keyword">new</span> <span class="title class_">int</span>[m][n];</span><br><span class="line">        <span class="type">int</span> <span class="variable">ret</span> <span class="operator">=</span> dp(m - <span class="number">1</span>, n - <span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">dp</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> {</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">0</span> &amp;&amp; j == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">// 代表 (0, 0) 到 (0, 0) 有一条路径</span></span><br><span class="line">        <span class="keyword">if</span> (i &lt; <span class="number">0</span> || j &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (memo[i][j] != <span class="number">0</span>) <span class="keyword">return</span> memo[i][j];</span><br><span class="line">        memo[i][j] = dp(i - <span class="number">1</span>, j) + dp(i, j - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> memo[i][j];</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="63-不同路径-II"><a href="#63-不同路径-II" class="headerlink" title="63. 不同路径 II"></a><a href="https://leetcode.cn/problems/unique-paths-ii/">63. 不同路径 II</a></h1><p>总体和 62 差别不大，但是在初始化时以及转移方程需要特别处理一下：</p><ol><li>确定dp数组（dp table）以及下标的含义<ol><li><code>dp[i][j]</code> ：表示从（0 ，0）出发，到(i, j) 有dp[i][j]条不同的路径。</li></ol></li><li>确定递推公式<ol><li>递推公式和62.不同路径一样，<code>dp[i][j] = dp[i - 1][j] + dp[i][j - 1]</code></li><li>但这里需要注意一点，因为有了障碍，(i, j)如果就是障碍的话应该就保持初始状态（初始状态为0）</li></ol></li><li>初始化<ol><li>这里的区分比较大，主要是由于在第一行和第一列如果有了障碍，那么这个障碍之后的全部都应为0</li></ol></li></ol><p><img src="/2023/06/24/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/lc63_1.png" alt="lc63_1"></p><ol start="4"><li>确定遍历顺序<ol><li>一定是从左到右一层一层遍历，这样保证推导dp[i][j]的时候，<code>dp[i - 1][j] 和 dp[i][j - 1]</code>一定是有数值。</li></ol></li><li>举例推导dp数组</li></ol><p><img src="/2023/06/24/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/lc63_%E4%B8%BE%E4%BE%8B%E6%8E%A8%E5%AF%BC.png" alt="lc63_举例推导"></p><p>自底向上：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">uniquePathsWithObstacles</span><span class="params">(<span class="type">int</span>[][] obstacleGrid)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> obstacleGrid.length, n = obstacleGrid[<span class="number">0</span>].length;</span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[m][n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) {</span><br><span class="line">            <span class="keyword">if</span> (obstacleGrid[i][<span class="number">0</span>] == <span class="number">1</span>) <span class="keyword">break</span>; </span><br><span class="line">            dp[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) {</span><br><span class="line">            <span class="keyword">if</span> (obstacleGrid[<span class="number">0</span>][j] == <span class="number">1</span>) <span class="keyword">break</span>; </span><br><span class="line">            dp[<span class="number">0</span>][j] = <span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) {</span><br><span class="line">                <span class="keyword">if</span> (i == <span class="number">0</span> || j == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span> (obstacleGrid[i][j] == <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j] + dp[i][j - <span class="number">1</span>];</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> dp[m - <span class="number">1</span>][n - <span class="number">1</span>];</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>自顶向下 （记忆化搜索）</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="type">int</span>[][] memo;</span><br><span class="line">    <span class="type">int</span>[][] grid;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">uniquePathsWithObstacles</span><span class="params">(<span class="type">int</span>[][] obstacleGrid)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> obstacleGrid.length, n = obstacleGrid[<span class="number">0</span>].length;</span><br><span class="line">        memo = <span class="keyword">new</span> <span class="title class_">int</span>[m][n];</span><br><span class="line">        grid = obstacleGrid;</span><br><span class="line">        <span class="keyword">return</span> dp(m - <span class="number">1</span>, n - <span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">dp</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> {</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">0</span> &amp;&amp; j == <span class="number">0</span> &amp;&amp; grid[i][j] != <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; <span class="number">0</span> || j &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (grid[i][j] == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (memo[i][j] != <span class="number">0</span>) <span class="keyword">return</span> memo[i][j];</span><br><span class="line">        memo[i][j] = dp(i - <span class="number">1</span>, j) + dp(i, j - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> memo[i][j];</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="343-整数拆分"><a href="#343-整数拆分" class="headerlink" title="343. 整数拆分"></a><a href="https://leetcode.cn/problems/integer-break/">343. 整数拆分</a></h1><p>这道题主要难在怎么分：</p><p>一开始思维方式是dfs，求出来所有组合，然后每一个组合都要相乘，比较最大值，但是显然这样我们需要非常大的空间来存储。</p><p>用<code>dp[n]</code>来表示整数为n时，我们能够得到的最大乘积。</p><p>转移方程比较难想：</p><p>比方说 <code>n = 4</code>，我们可以把 4 拆分成 <code>1 + 3, 2 + 2</code>，对应的乘积就是 <code>1 * 3, 2 * 2</code>。但此时我们直接比较 <code>1 * 3, 2 * 2</code> 的大小还不够，因为 <code>3, 2</code> 它们可能还会被分解成 <code>1 * 2, 1 * 1</code>，也就是说把 <code>n = 4</code> 进一步分解成 <code>1 * (1 * 2), 2 * (1 * 1)</code>，这两种可能也要纳入考虑。</p><p>到底需不需要进一步分解呢？不知道，所以我们都穷举一遍取最大值就可以了。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  integerBreak(<span class="number">4</span>)</span><br><span class="line">= max(<span class="number">1</span> * <span class="number">3</span>, <span class="number">1</span> * integerBreak(<span class="number">3</span>), <span class="number">2</span> * <span class="number">2</span>, <span class="number">2</span> * integerBreak(<span class="number">2</span>))</span><br><span class="line">= max(</span><br><span class="line">    <span class="number">1</span> * max(<span class="number">3</span>, integerBreak(<span class="number">3</span>)),</span><br><span class="line">    <span class="number">2</span> * max(<span class="number">2</span>, integerBreak(<span class="number">2</span>))</span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure><p>其实就是拿着刚分解完的结果以及未来要分解的结果求最大值。</p><p>再加上 memo 来消除重叠子问题：</p><p>自顶向下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="type">int</span>[] memo;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">integerBreak</span><span class="params">(<span class="type">int</span> n)</span> {</span><br><span class="line">        memo = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">return</span> dp(n);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// dp[n] 为 把n拆分后的乘积最大的结果</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">dp</span><span class="params">(<span class="type">int</span> n)</span> {</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (memo[n] != <span class="number">0</span>) <span class="keyword">return</span> memo[n];</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> Integer.MIN_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) {</span><br><span class="line">            result = Math.max(</span><br><span class="line">                result, </span><br><span class="line">                i * Math.max(dp(n - i), n - i)</span><br><span class="line">            );</span><br><span class="line">        }</span><br><span class="line">        memo[n] = result;</span><br><span class="line">        <span class="keyword">return</span> memo[n];</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>自底向上：</p><p>整体思路是差不多的，都是考虑了两种情况：</p><p><code>dp[i]</code>要么从 <code>dp[i - j] * j</code> 转移而来 要么从 <code>(i - j) * j</code> 转移而来，</p><p>由于<code>dp[i]</code>之前已经被赋值，因此我们仍需要加入最大值判断</p><p>比较特殊的点在于初始化：</p><p>严格从dp[i]的定义来说，dp[0] dp[1] 就不应该初始化，也就是没有意义的数值。这里我只初始化dp[2] = 1，从dp[i]的定义来说，拆分数字2，得到的最大乘积是1。</p><p>以及遍历顺序：</p><p><code>dp[i]</code> 是依靠 <code>dp[i - j]</code>的状态，所以遍历i一定是从前向后遍历，先有<code>dp[i - j]</code>再有<code>dp[i]</code>。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">integerBreak</span><span class="params">(<span class="type">int</span> n)</span> {</span><br><span class="line">        <span class="comment">// dp[i] 表示 i 拆分后能够获得的最大乘积</span></span><br><span class="line">        <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">3</span>; i &lt;= n; i++) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt; i; j++) {</span><br><span class="line">                dp[i] = Math.max(</span><br><span class="line">                    dp[i],</span><br><span class="line">                    Math.max(</span><br><span class="line">                        dp[i - j] * j, (i - j) * j</span><br><span class="line">                    )</span><br><span class="line">                );</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="背包问题"><a href="#背包问题" class="headerlink" title="背包问题"></a>背包问题</h1><p>见 <a href="/2023/07/11/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/" title="背包问题">背包问题</a> 中包含背包问题的思路</p>]]></content>
      
      
      <categories>
          
          <category> Algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> dp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计数排序</title>
      <link href="/2023/06/09/%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8F/"/>
      <url>/2023/06/09/%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>引用：</p><div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>此教程参考  <a href="https://cloud.tencent.com/developer/article/1684188">什么是计数排序？</a> 感谢支持！</p></div><h1 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h1><p>计数排序（Counting Sort）是一种针对于<strong>特定范围</strong>之间的整数进行排序的算法。它通过统计给定数组中不同元素的数量（类似于哈希映射），然后对映射后的数组进行排序输出即可。</p>]]></content>
      
      
      <categories>
          
          <category> Algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>贪心</title>
      <link href="/2023/06/01/%E8%B4%AA%E5%BF%83/"/>
      <url>/2023/06/01/%E8%B4%AA%E5%BF%83/</url>
      
        <content type="html"><![CDATA[<h1 id="贪心思想"><a href="#贪心思想" class="headerlink" title="贪心思想"></a>贪心思想</h1><p>核心：从局部最优到全局最优</p><h2 id="解题步骤"><a href="#解题步骤" class="headerlink" title="解题步骤"></a>解题步骤</h2><ul><li>将问题分解为若干个子问题</li><li>找出适合的贪心策略</li><li>求解每一个子问题的最优解</li><li>将局部最优解堆叠成全局最优解</li></ul><p>找出局部的最优解，从而推出全局最优解</p><h1 id="455-分发饼干"><a href="#455-分发饼干" class="headerlink" title="455. 分发饼干"></a><a href="https://leetcode.cn/problems/assign-cookies/">455. 分发饼干</a></h1><p>两个贪心思路：</p><p>大饼干喂大胃口 或者 小饼干喂小胃口</p><p>自己的解法：贪心 + 排序 + 双指针</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findContentChildren</span><span class="params">(<span class="type">int</span>[] g, <span class="type">int</span>[] s)</span> {</span><br><span class="line">        Arrays.sort(g);</span><br><span class="line">        Arrays.sort(s);</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = <span class="number">0</span>; i &lt; g.length &amp;&amp; j &lt; s.length;) {</span><br><span class="line">            <span class="keyword">if</span> (s[j] &gt;= g[i]) {</span><br><span class="line">                count++;</span><br><span class="line">                j++;</span><br><span class="line">                i++;</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                j++;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>其他解法：贪心 + 排序</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="comment">// 思路1：优先考虑饼干，小饼干先喂饱小胃口</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findContentChildren</span><span class="params">(<span class="type">int</span>[] g, <span class="type">int</span>[] s)</span> {</span><br><span class="line">        Arrays.sort(g);</span><br><span class="line">        Arrays.sort(s);</span><br><span class="line">        <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length &amp;&amp; start &lt; g.length; i++) {</span><br><span class="line">            <span class="keyword">if</span> (s[i] &gt;= g[start]) {</span><br><span class="line">                start++;</span><br><span class="line">                count++;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    }</span><br><span class="line">  <span class="comment">// 思路2：优先考虑胃口，先喂饱大胃口</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findContentChildren</span><span class="params">(<span class="type">int</span>[] g, <span class="type">int</span>[] s)</span> {</span><br><span class="line">        Arrays.sort(g);</span><br><span class="line">        Arrays.sort(s);</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> s.length - <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 遍历胃口</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> g.length - <span class="number">1</span>; index &gt;= <span class="number">0</span>; index--) {</span><br><span class="line">            <span class="keyword">if</span>(start &gt;= <span class="number">0</span> &amp;&amp; g[index] &lt;= s[start]) {</span><br><span class="line">                start--;</span><br><span class="line">                count++;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="376-摆动序列"><a href="#376-摆动序列" class="headerlink" title="376. 摆动序列"></a><a href="https://leetcode.cn/problems/wiggle-subsequence/">376. 摆动序列</a></h1><p>贪心思想：（假装）删除单调坡度上的节点从而使得局部峰值++</p><p>需要分三种情况：</p><ul><li>上下坡中有平坡<ul><li>[1,2,2,2,1], 此时应返回3</li></ul></li><li>数组首尾两端</li><li>单调坡中有平坡</li></ul><h2 id="上下坡中有平坡"><a href="#上下坡中有平坡" class="headerlink" title="上下坡中有平坡"></a>上下坡中有平坡</h2><p><img src="/2023/06/01/%E8%B4%AA%E5%BF%83/lc376%E4%B8%8A%E4%B8%8B%E5%9D%A1%E4%B8%AD%E6%9C%89%E5%B9%B3%E5%9D%A1.png" alt="lc376上下坡中有平坡"></p><p>添加 <code>preDiff = 0</code> 即可解决问题</p><h2 id="数组首尾两端"><a href="#数组首尾两端" class="headerlink" title="数组首尾两端"></a>数组首尾两端</h2><p>题目要求如果只有两个元素，且两个元素不想等，此时长度为2。</p><p>解决方法：补全开头的元素 -&gt; preDiff 初始值为0</p><p><img src="/2023/06/01/%E8%B4%AA%E5%BF%83/lc376%E6%95%B0%E7%BB%84%E9%A6%96%E5%B0%BE%E4%B8%A4%E7%AB%AF.png" alt="lc376数组首尾两端"></p><h2 id="单调坡中有平坡"><a href="#单调坡中有平坡" class="headerlink" title="单调坡中有平坡"></a>单调坡中有平坡</h2><p><img src="/2023/06/01/%E8%B4%AA%E5%BF%83/lc376%E5%8D%95%E8%B0%83%E5%9D%A1%E4%B8%AD%E6%9C%89%E5%B9%B3%E5%9D%A1.png" alt="lc376单调坡中有平坡"></p><p>此时结果应为2不为3，如果我们按照以下的代码更新 <code>preDiff</code>就会出现问题，因为此时preDiff直接，实时地更新为curDiff：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> <span class="title function_">wiggleMaxLength</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> {</span><br><span class="line">        <span class="keyword">if</span> (nums.size() &lt;= <span class="number">1</span>) <span class="keyword">return</span> nums.size();</span><br><span class="line">        <span class="type">int</span> <span class="variable">curDiff</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">// 当前一对差值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">preDiff</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">// 前一对差值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">1</span>;  <span class="comment">// 记录峰值个数，序列默认序列最右边有一个峰值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.size() - <span class="number">1</span>; i++) {</span><br><span class="line">            curDiff = nums[i + <span class="number">1</span>] - nums[i];</span><br><span class="line">            <span class="comment">// 出现峰值</span></span><br><span class="line">            <span class="keyword">if</span> ((preDiff &lt;= <span class="number">0</span> &amp;&amp; curDiff &gt; <span class="number">0</span>) || (preDiff &gt;= <span class="number">0</span> &amp;&amp; curDiff &lt; <span class="number">0</span>)) {</span><br><span class="line">                result++;</span><br><span class="line">            }</span><br><span class="line">            preDiff = curDiff; </span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p>解决方法：preDiff当且仅当摆动时才更新</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>综上我们有：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">wiggleMaxLength</span><span class="params">(<span class="type">int</span>[] nums)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">preDiff</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">// 解决情况二</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">curDiff</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length - <span class="number">1</span>; i++) {</span><br><span class="line">            curDiff = nums[i + <span class="number">1</span>] - nums[i];</span><br><span class="line">            <span class="keyword">if</span> (checkWiggle(preDiff, curDiff)) {</span><br><span class="line">                result++;</span><br><span class="line">                <span class="comment">// preDiff 只在有摆动的时候更新，主要解决情况三：单调有平坡</span></span><br><span class="line">                preDiff = curDiff;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">checkWiggle</span><span class="params">(<span class="type">int</span> preDiff, <span class="type">int</span> curDiff)</span> {</span><br><span class="line">      <span class="comment">// 解决情况1</span></span><br><span class="line">        <span class="keyword">if</span> (preDiff &gt;= <span class="number">0</span> &amp;&amp; curDiff &lt; <span class="number">0</span> || preDiff &lt;= <span class="number">0</span> &amp;&amp; curDiff &gt; <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>PS:本题也可以使用动态规划：（当前仅了解，tbc…）</p><ul><li>设 dp 状态<code>dp[i][0]</code>，表示考虑前 i 个数，第 i 个数作为山峰的摆动子序列的最长长度</li><li>设 dp 状态<code>dp[i][1]</code>，表示考虑前 i 个数，第 i 个数作为山谷的摆动子序列的最长长度</li></ul><p>转移方程为：</p><ul><li><code>dp[i][0] = max(dp[i][0], dp[j][1] + 1)</code>，其中<code>0 &lt; j &lt; i</code>且<code>nums[j] &lt; nums[i]</code>，表示将 nums[i]接到前面某个山谷后面，作为山峰。</li><li><code>dp[i][1] = max(dp[i][1], dp[j][0] + 1)</code>，其中<code>0 &lt; j &lt; i</code>且<code>nums[j] &gt; nums[i]</code>，表示将 nums[i]接到前面某个山峰后面，作为山谷。</li></ul><h1 id="53-最大子数组和"><a href="#53-最大子数组和" class="headerlink" title="53. 最大子数组和"></a><a href="https://leetcode.cn/problems/maximum-subarray/">53. 最大子数组和</a></h1><p><img src="/2023/06/01/%E8%B4%AA%E5%BF%83/lc53%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%92%8C.gif" alt="lc53最大子序和"></p><h2 id="贪心"><a href="#贪心" class="headerlink" title="贪心"></a>贪心</h2><p>连续和 + 当前数，如果连续和 &lt; 0 那么直接取当前数作为新的开始。因为连续和&lt;0必定会拖累当前数的值</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxSubArray</span><span class="params">(<span class="type">int</span>[] nums)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> Integer.MIN_VALUE;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) {</span><br><span class="line">            <span class="type">int</span> <span class="variable">curNum</span> <span class="operator">=</span> nums[i];</span><br><span class="line">            count += curNum;</span><br><span class="line">            <span class="keyword">if</span> (count &gt; result) result = count; <span class="comment">// 取区间累计的最大值（相当于不断确定最大子序终止位置）</span></span><br><span class="line">            <span class="keyword">if</span> (count &lt; <span class="number">0</span>) count = <span class="number">0</span>; <span class="comment">// 相当于重置最大子序起始位置，因为遇到负数一定是拉低总和</span></span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="122-买卖股票的最佳时机-II"><a href="#122-买卖股票的最佳时机-II" class="headerlink" title="122. 买卖股票的最佳时机 II"></a><a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-ii/">122. 买卖股票的最佳时机 II</a></h1><p>本题的贪心用法在于一个数学思想：</p><p>比如我们需要计算第三天卖出第零天买入能够产生的利润，那么就是 <code>profit[3] - profit[0]</code>. 巧妙的利用下数学性质：</p><p><code>profit[3] - profit[0] = proft[3] - profit[2] + profit[2] - profit[1] + profit[1] - profit[0]</code></p><p>也就是每一天的利润差额。</p><p>因此：</p><p><img src="/2023/06/01/%E8%B4%AA%E5%BF%83/lc122_greedy.png" alt="lc122_greedy"></p><p>因此我们只需要收集两天股票差额为正数的利润就可以拿到最终全局的一个最大利润，即局部最优到全局最优。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxProfit</span><span class="params">(<span class="type">int</span>[] prices)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; prices.length; i++) {</span><br><span class="line">           <span class="type">int</span> <span class="variable">curProfit</span> <span class="operator">=</span> prices[i] - prices[i - <span class="number">1</span>];</span><br><span class="line">           <span class="keyword">if</span> (curProfit &gt; <span class="number">0</span>) sum += curProfit;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="55-跳跃游戏"><a href="#55-跳跃游戏" class="headerlink" title="55. 跳跃游戏"></a><a href="https://leetcode.cn/problems/jump-game/">55. 跳跃游戏</a></h1><p>首先我们不需要实际的知道要跳到哪里，我们只需要知道覆盖范围即可，因为在这个最大范围中，不管怎么跳都可以跳到。</p><p>因此检查覆盖范围是否包含终点就是我们要的结果。</p><p>贪心思想：<strong>每次取最大跳跃步数（取最大覆盖范围），整体最优解：最后得到整体最大覆盖范围，看是否能到终点</strong>。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canJump</span><span class="params">(<span class="type">int</span>[] nums)</span> {</span><br><span class="line">        <span class="comment">// 每一次都选能走的最大的步数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">cover</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (nums.length == <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= cover; i++) {</span><br><span class="line">            cover = Math.max(cover, nums[i] + i);</span><br><span class="line">            <span class="keyword">if</span> (cover &gt;= nums.length - <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="45-跳跃游戏-II"><a href="#45-跳跃游戏-II" class="headerlink" title="45. 跳跃游戏 II"></a><a href="https://leetcode.cn/problems/jump-game-ii/">45. 跳跃游戏 II</a></h1><p>和上一道题的区别在于，此题需要计算能够到终点的步数。因此在继承了上一步的 <strong>覆盖范围</strong> 的思路上我们需要知道什么时候把返回值增加。</p><p>覆盖范围不变，当index到了当前能覆盖的最远距离时，返回值增加。因为当前覆盖的范围是无论如何都能达到的。</p><p>贪心思想：覆盖范围最大，使用的步数最少。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">jump</span><span class="params">(<span class="type">int</span>[] nums)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">curCover</span> <span class="operator">=</span> <span class="number">0</span>, nextCover = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (nums.length == <span class="number">1</span>) <span class="keyword">return</span> count;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) {</span><br><span class="line">            nextCover = Math.max(nextCover, i + nums[i]);</span><br><span class="line">            <span class="keyword">if</span> (i == curCover) {</span><br><span class="line">                count++;</span><br><span class="line">                curCover = nextCover;</span><br><span class="line">                <span class="keyword">if</span> (nextCover &gt;= nums.length - <span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="1005-K-次取反后最大化的数组和"><a href="#1005-K-次取反后最大化的数组和" class="headerlink" title="1005. K 次取反后最大化的数组和"></a><a href="https://leetcode.cn/problems/maximize-sum-of-array-after-k-negations/">1005. K 次取反后最大化的数组和</a></h1><p>贪心 + 分情况讨论</p><p><code>取反一个负数会使得结果变大，取反正数会使结果变小，取反 0 值对结果没有影响</code></p><p>如果想要把 nums[i] 替换为 -nums[i] 并且想要得到可能的最大和。那么我们应该尽量：</p><ol><li>更改负数，将负数变为正数</li><li>将正数的值小的数变为负数从而减少影响。</li></ol><p>因此需要按照绝对值的大小来进行降序排序。然后优先更改负数。如果k&lt;负数个数的情况直接返回结果，但如果 <em>K</em> 的值较大，那么我们不得不去修改非负数（即正数或者 0）了：</p><ul><li>如果数组中存在 0，那么我们可以对它进行多次修改，直到把剩余的修改次数用完；</li><li>如果数组中不存在 0 并且剩余的修改次数是偶数，由于对同一个数修改两次等价于不进行修改，因此我们也可以在不减小数组的和的前提下，把修改次数用完；</li><li>如果数组中不存在 0 并且剩余的修改次数是奇数，那么我们必然需要使用单独的一次修改将一个正数变为负数（剩余的修改次数为偶数，就不会减小数组的和）。为了使得数组的和尽可能大，我们就选择那个最小的正数。</li></ul><div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>这道题可以用<a href="/2023/06/09/%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8F/" title="计数排序">计数排序</a>来优化（June 9th： 还在学习计数排序）</p></div><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">largestSumAfterKNegations</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> {</span><br><span class="line">        Integer[] numsInt = Arrays.stream(nums).boxed().toArray(Integer[]::<span class="keyword">new</span>);</span><br><span class="line">        Arrays.sort(numsInt, (a, b) -&gt; Math.abs(b) - Math.abs(a));</span><br><span class="line">        <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (idx &lt; numsInt.length &amp;&amp; k &gt; <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">if</span> (numsInt[idx] &lt; <span class="number">0</span>) {</span><br><span class="line">                numsInt[idx] = -numsInt[idx]; </span><br><span class="line">                k--;</span><br><span class="line">            } </span><br><span class="line">            idx++;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (k % <span class="number">2</span> == <span class="number">1</span>) numsInt[numsInt.length - <span class="number">1</span>] = -numsInt[numsInt.length - <span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> a : numsInt) result += a;        </span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="134-加油站"><a href="#134-加油站" class="headerlink" title="134. 加油站"></a><a href="https://leetcode.cn/problems/gas-station/">134. 加油站</a></h1><p>这道题的思路有点像跳跃游戏，同样需要看覆盖范围。</p><ol><li>若总油量 &gt; 总消耗，那么一定有办法绕一圈</li><li>记录一个curSum来跟踪当前油量和，如果curSum &lt; 0那么说明<strong>之前无论怎么走都无法达到当前的点i，因此从下一个点开始找，并且重置curSum</strong></li></ol><p><img src="/2023/06/01/%E8%B4%AA%E5%BF%83/lc_%E5%8A%A0%E6%B2%B9%E7%AB%99.png" alt="lc_加油站"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">canCompleteCircuit</span><span class="params">(<span class="type">int</span>[] gas, <span class="type">int</span>[] cost)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">curSum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">totalSum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> gas.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len; i++) {</span><br><span class="line">            curSum += gas[i] - cost[i];</span><br><span class="line">            totalSum += gas[i] - cost[i];</span><br><span class="line">            <span class="keyword">if</span> (curSum &lt; <span class="number">0</span>) {</span><br><span class="line">                curSum = <span class="number">0</span>;</span><br><span class="line">                start = i + <span class="number">1</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (totalSum &lt; <span class="number">0</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> start;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="135-分发糖果"><a href="#135-分发糖果" class="headerlink" title="135. 分发糖果"></a><a href="https://leetcode.cn/problems/candy/">135. 分发糖果</a></h1><p>左右扫描两次 + 贪心</p><p><img src="/2023/06/01/%E8%B4%AA%E5%BF%83/lc135_%E5%88%86%E5%8F%91%E7%B3%96%E6%9E%9C.png" alt="lc135_分发糖果"></p><p>单从左向右扫描就会导致单调递减的情况下出错，因此我们需要再从右向左扫描一遍。</p><p><img src="/2023/06/01/%E8%B4%AA%E5%BF%83/%E5%88%86%E5%8F%91%E7%B3%96%E6%9E%9C2.png" alt="分发糖果2"></p><p>贪心：</p><p>取最大值从而满足当前的孩子的糖比左和右都大，从而满足题目条件</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">candy</span><span class="params">(<span class="type">int</span>[] ratings)</span> {</span><br><span class="line">        <span class="type">int</span>[] candies = <span class="keyword">new</span> <span class="title class_">int</span>[ratings.length];</span><br><span class="line">        <span class="comment">// Arrays.fill(candies, 1);</span></span><br><span class="line">        candies[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; ratings.length; i++) {</span><br><span class="line">            <span class="keyword">if</span> (ratings[i] &gt; ratings[i - <span class="number">1</span>]) {</span><br><span class="line">                candies[i] = candies[i - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                candies[i] = <span class="number">1</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="type">int</span> <span class="variable">ret</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> ratings.length - <span class="number">1</span>; i &gt;= <span class="number">1</span>; i--) {</span><br><span class="line">            <span class="keyword">if</span> (ratings[i - <span class="number">1</span>] &gt; ratings[i]) {</span><br><span class="line">                candies[i - <span class="number">1</span>] = Math.max(candies[i - <span class="number">1</span>], candies[i] + <span class="number">1</span>);</span><br><span class="line">            }</span><br><span class="line">            ret += candies[i];</span><br><span class="line">        }</span><br><span class="line">        ret += candies[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="860-柠檬水找零"><a href="#860-柠檬水找零" class="headerlink" title="860. 柠檬水找零"></a><a href="https://leetcode.cn/problems/lemonade-change/">860. 柠檬水找零</a></h1><p>分类讨论 + 贪心</p><p>顾客只可能给你三个面值的钞票，而且我们一开始没有任何钞票，因此我们拥有的钞票面值只可能是 5 美元，10 美元和 20 美元三种</p><p>所以会有以下的情况：</p><ul><li>5 美元，由于柠檬水的价格也为 5 美元，因此我们直接收下即可。</li><li>10 美元，我们需要找回 5 美元，如果没有 5 美元面值的钞票，则无法正确找零。</li><li>20 美元，我们需要找回 15 美元，此时有两种组合方式，一种是一张 10 美元和 5 美元的钞票，一种是 3 张 5 美元的钞票，如果两种组合方式都没有，则无法正确找零。当可以正确找零时，两种找零的方式中我们更倾向于第一种，即如果存在 5 美元和 10 美元，我们就按第一种方式找零，否则按第二种方式找零，因为需要使用 5 美元的找零场景会比需要使用 10 美元的找零场景多，我们需要尽可能保留 5 美元的钞票。</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">lemonadeChange</span><span class="params">(<span class="type">int</span>[] bills)</span> {</span><br><span class="line">        <span class="type">int</span>[] count = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; bills.length; i++) {</span><br><span class="line">            <span class="keyword">if</span> (bills[i] == <span class="number">5</span>) {</span><br><span class="line">                count[<span class="number">0</span>]++;</span><br><span class="line">            } <span class="keyword">else</span> <span class="keyword">if</span> (bills[i] == <span class="number">10</span>) {</span><br><span class="line">                <span class="comment">// 此时只能找5块的</span></span><br><span class="line">                count[<span class="number">0</span>] -= <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (count[<span class="number">0</span>] &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                count[<span class="number">1</span>]++;</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                <span class="comment">// 贪心：优先用10元，没10元的再用两个5元</span></span><br><span class="line">                <span class="keyword">if</span> (count[<span class="number">1</span>] &gt; <span class="number">0</span>) {</span><br><span class="line">                    count[<span class="number">1</span>] -= <span class="number">1</span>;</span><br><span class="line">                    count[<span class="number">0</span>] -= <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">if</span> (count[<span class="number">0</span>] &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    count[<span class="number">0</span>] -= <span class="number">3</span>;</span><br><span class="line">                    <span class="keyword">if</span> (count[<span class="number">0</span>] &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                }</span><br><span class="line">                count[<span class="number">2</span>]++;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="406-根据身高重建队列"><a href="#406-根据身高重建队列" class="headerlink" title="406. 根据身高重建队列"></a><a href="https://leetcode.cn/problems/queue-reconstruction-by-height/">406. 根据身高重建队列</a></h1><ol><li>这道题类似于分糖果（135），有两个纬度需要考虑，但是一样的，我们一次只考虑一个。</li><li>若考虑K维度：<ol><li>按照k从小到大，当相等时h从小到大<ol><li>排序的结果一条都不满足，一个纬度都确定不下来</li></ol></li></ol></li><li>若考虑H维度：<ol><li>按照H从高到低，当相等时K从低到高，这样的身高相对顺序是被确定了的</li></ol></li></ol><p>因此我们考虑确定H维度：</p><p><strong>优先按身高高的people的k来插入。插入操作过后的people满足队列属性</strong>这是因为按照身高排序之后，优先按身高高的people的k来插入，后序插入节点也不会影响前面已经插入的节点，最终按照k的规则完成了队列。</p><p><img src="/2023/06/01/%E8%B4%AA%E5%BF%83/LC_406.jpg" alt="LC_406"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[][] reconstructQueue(<span class="type">int</span>[][] people) {</span><br><span class="line">        <span class="comment">// 确定一个维度再处理另一个纬度</span></span><br><span class="line">        <span class="comment">// 确定身高纬度：（因为如果确定的是K的维度，那么比如k按照升序排列，当相等时h按照升序排列，会发现没有按照k的要求得到一个排序的队列）</span></span><br><span class="line">        Arrays.sort(people, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;<span class="type">int</span>[]&gt;(){</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(<span class="type">int</span>[] person1, <span class="type">int</span>[] person2)</span> {</span><br><span class="line">                <span class="keyword">if</span> (person1[<span class="number">0</span>] != person2[<span class="number">0</span>]) {</span><br><span class="line">                    <span class="keyword">return</span> person2[<span class="number">0</span>] - person1[<span class="number">0</span>];</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    <span class="keyword">return</span> person1[<span class="number">1</span>] - person2[<span class="number">1</span>];</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line"></span><br><span class="line">        LinkedList&lt;<span class="type">int</span>[]&gt; ret = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; people.length; i++) {</span><br><span class="line">            <span class="type">int</span>[] person = people[i];</span><br><span class="line">            <span class="type">int</span> <span class="variable">position</span> <span class="operator">=</span> person[<span class="number">1</span>];</span><br><span class="line">            ret.add(position, person);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> ret.toArray(<span class="keyword">new</span> <span class="title class_">int</span>[people.length][<span class="number">2</span>]);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h1 id="区间调度，重叠类问题"><a href="#区间调度，重叠类问题" class="headerlink" title="区间调度，重叠类问题"></a>区间调度，重叠类问题</h1><h2 id="什么是区间调度问题"><a href="#什么是区间调度问题" class="headerlink" title="什么是区间调度问题"></a>什么是区间调度问题</h2><p>“区间调度”是一类常见的计算机科学问题，其主要目标是在给定一组区间时，找出最多的不相交区间。在这个问题中，区间通常以一对数字表示，例如 [a, b)，表示一个区间从 a 开始，到 b 结束。</p><p>具体的问题定义如下：</p><p>给定一个区间的集合，每个区间包括一个开始时间和一个结束时间。编写一个算法，找到最大的不相交区间的集合，即在这个集合中，任何两个区间都不会重叠。</p><p>例如，假设我们有以下区间：[1, 2], [2, 3], [3, 4], [1, 3]。最大的不相交区间的集合是 [1, 2], [2, 3], [3, 4]，因为我们可以安排这些区间，使得没有任何两个区间是重叠的。</p><p>注意，在解决这类问题时，一个常用的策略是贪心算法。我们首先将所有区间按照结束时间排序，然后每次选择结束时间最早的区间，并且这个区间不与已选择的区间重叠。这种方法能够确保我们总是选择最多的不相交区间。</p><h2 id="具体思路"><a href="#具体思路" class="headerlink" title="具体思路"></a>具体思路</h2><p>对于区间调度问题，我们考虑如下的贪心思路：</p><ol><li>每次选择可选区间中开始最早的那个</li><li>每次选择可选区间中最短的那个</li><li>选择出现冲突最少的那个区间</li></ol><p>但是这些都不对，以下是反例：</p><ol><li><p>每次选择可选区间中开始最早的：</p><p>对于区间集合 = [[1,9], [2,5], [6,8]]</p><p>应该返回的结果是2，因为可以选中两个区间，即[2,5]和[6,8]。</p><p>但如果使用这种策略，实际返回的结果是1，因为它首先选择了开始最早的区间[1,9]，而错过了后面的两个区间。</p></li><li><p>每次选择最短的区间：</p><p>对于区间集合 = [[1,3], [2,4], [5,7], [6,9]]</p><p>应该返回的结果是2，因为可以选择两个不相交的区间，例如[1,3]和[5,7]或者[2,4]和[6,9]。</p><p>但如果使用这种策略，实际返回的结果是3，它选中了[1,3]，[2,4]和[6,9]，但其中[1,3]和[2,4]是冲突的。</p></li><li><p>每次选择出现冲突最少的区间：</p><p>对于区间集合 = [[1,4], [2,3], [5,6]]</p><p>应该返回的结果是2，因为可以选择两个不相交的区间，即[1,4]和[5,6]。</p><p>但如果使用这种策略，实际返回的结果是2，选中的区间是[2,3]和[5,6]，虽然结果数量是对的，但选中的区间并不是最优的，因为选择[1,4]和[5,6]可以覆盖更大的区域。</p></li></ol><p>所以，上述的三种贪心策略都不能保证得到最优答案。正确的贪心策略应该是：每次选择结尾最早的，且与当前已选区间不冲突的区间。</p><p>实现上可以分为以下三步：</p><ol><li>从排序好的（按照结束时间升序排列）选择区间右节点<code>xEnd</code></li><li>把与xEnd相交的区间删除（skip）</li><li>重复直至结束</li></ol><p><img src="/2023/06/01/%E8%B4%AA%E5%BF%83/lc_%E5%8C%BA%E9%97%B4%E8%B0%83%E5%BA%A6.gif" alt="lc_区间调度"></p><p>为什么选择区间右端点？</p><p><strong>由于我们事先排了序</strong>，不难发现所有与 <code>x</code> 相交的区间必然会与 <code>x</code> 的 <code>end</code> 相交；如果一个区间不想与 <code>x</code> 的 <code>end</code> 相交，它的 <code>start</code> 必须要大于（或等于）<code>x</code> 的 <code>end</code>：</p><p><img src="/2023/06/01/%E8%B4%AA%E5%BF%83/lc_%E5%8C%BA%E9%97%B4%E8%B0%83%E5%BA%A62.jpeg" alt="lc_区间调度2"></p><h2 id="452-用最少数量的箭引爆气球"><a href="#452-用最少数量的箭引爆气球" class="headerlink" title="452. 用最少数量的箭引爆气球"></a><a href="https://leetcode.cn/problems/minimum-number-of-arrows-to-burst-balloons/">452. 用最少数量的箭引爆气球</a></h2><p>核心在于：</p><ol><li><p>如果最多有 <code>n</code> 个不重叠的区间，那么就至少需要 <code>n</code> 个箭头穿透所有区间</p></li><li><p>两个边界挨着的时候也可以使气球引爆</p></li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findMinArrowShots</span><span class="params">(<span class="type">int</span>[][] points)</span> {</span><br><span class="line">        Arrays.sort(points, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;<span class="type">int</span>[]&gt;(){</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(<span class="type">int</span>[] point1, <span class="type">int</span>[] point2)</span> {</span><br><span class="line">                <span class="comment">// return point1[1] - point2[1]; 为了应对 [[-2147483646,-2147483645],[2147483646,2147483647]] 不能这么写</span></span><br><span class="line">                <span class="keyword">if</span> (point1[<span class="number">1</span>] &gt; point2[<span class="number">1</span>]) {</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                } <span class="keyword">else</span> <span class="keyword">if</span> (point1[<span class="number">1</span>] &lt; point2[<span class="number">1</span>]) {</span><br><span class="line">                    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> findIntervals(points);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">findIntervals</span><span class="params">(<span class="type">int</span>[][] points)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">xEnd</span> <span class="operator">=</span> points[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] point : points) {</span><br><span class="line">            <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> point[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span> (start &gt; xEnd) {</span><br><span class="line">                count++;</span><br><span class="line">                xEnd = point[<span class="number">1</span>];</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="435-无重叠区间"><a href="#435-无重叠区间" class="headerlink" title="435. 无重叠区间"></a><a href="https://leetcode.cn/problems/non-overlapping-intervals/">435. 无重叠区间</a></h2><p>找到最多不会重复的区间，原长度剪去就是剩下的至少需要去除的区间</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">eraseOverlapIntervals</span><span class="params">(<span class="type">int</span>[][] intervals)</span> {</span><br><span class="line">        Arrays.sort(intervals, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;<span class="type">int</span>[]&gt;(){</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(<span class="type">int</span>[] interval1, <span class="type">int</span>[] interval2)</span> {</span><br><span class="line">                <span class="keyword">if</span> (interval1[<span class="number">1</span>] &gt; interval2[<span class="number">1</span>]) {</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                } <span class="keyword">else</span> <span class="keyword">if</span> (interval1[<span class="number">1</span>] &lt; interval2[<span class="number">1</span>]) {</span><br><span class="line">                    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line">        <span class="type">int</span> <span class="variable">noOverlappingCount</span> <span class="operator">=</span> findNotOverlaps(intervals);</span><br><span class="line">        <span class="keyword">return</span> intervals.length - noOverlappingCount;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">findNotOverlaps</span><span class="params">(<span class="type">int</span>[][] intervals)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> intervals[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] interval : intervals) {</span><br><span class="line">            <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> interval[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span> (start &gt;= end) {</span><br><span class="line">                end = interval[<span class="number">1</span>];</span><br><span class="line">                count++;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="763-划分字母区间"><a href="#763-划分字母区间" class="headerlink" title="763. 划分字母区间"></a><a href="https://leetcode.cn/problems/partition-labels/">763. 划分字母区间</a></h2><p><img src="/2023/06/01/%E8%B4%AA%E5%BF%83/lc763.png" alt="lc763"></p><p><strong>找到之前遍历过的所有字母的最远边界，说明这个边界就是分割点</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">partitionLabels</span><span class="params">(String s)</span> {</span><br><span class="line">        <span class="type">int</span>[] charPositions = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">27</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) {</span><br><span class="line">            charPositions[s.charAt(i) - <span class="string">'a'</span>] = i;</span><br><span class="line">        }</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) {</span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> s.charAt(i);</span><br><span class="line">            right = Math.max(charPositions[c - <span class="string">'a'</span>], right); <span class="comment">// 找到重叠区间的最右端点</span></span><br><span class="line">            <span class="keyword">if</span> (i == right) {</span><br><span class="line">                res.add(right - left + <span class="number">1</span>);</span><br><span class="line">                left = i + <span class="number">1</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="56-合并区间"><a href="#56-合并区间" class="headerlink" title="56. 合并区间"></a><a href="https://leetcode.cn/problems/merge-intervals/">56. 合并区间</a></h2><p>按照右端点排序非常的麻烦，因为会出现：</p><p><code>[[2,3],[4,5],[6,7],[8,9],[1,10]]</code></p><p>这个样例需要返回 <code>[1,10]</code>，如果使用正常的正序遍历：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[][] merge(<span class="type">int</span>[][] intervals) {</span><br><span class="line">        Arrays.sort(intervals, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;<span class="type">int</span>[]&gt;() {</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(<span class="type">int</span>[] arr1, <span class="type">int</span>[] arr2)</span> {</span><br><span class="line">                <span class="keyword">if</span> (arr1[<span class="number">1</span>] &gt; arr2[<span class="number">1</span>]) {</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                } <span class="keyword">else</span> <span class="keyword">if</span> (arr1[<span class="number">1</span>] == arr2[<span class="number">1</span>]) {</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line">        List&lt;<span class="type">int</span>[]&gt; ret = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        ret.add(intervals[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; intervals.length; i++) {</span><br><span class="line">            <span class="type">int</span> <span class="variable">prevLeft</span> <span class="operator">=</span> intervals[i - <span class="number">1</span>][<span class="number">0</span>], prevRight = intervals[i - <span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">            <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> intervals[i][<span class="number">0</span>], right = intervals[i][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (left &lt;= prevRight) {</span><br><span class="line">                <span class="comment">// need to update interval;</span></span><br><span class="line">                <span class="type">int</span>[] removed = ret.remove(ret.size() - <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">if</span> (prevLeft &gt; left) {</span><br><span class="line">                    ret.add(intervals[i]);</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    removed[<span class="number">1</span>] = right;</span><br><span class="line">                    ret.add(removed);</span><br><span class="line">                }</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                ret.add(intervals[i]);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="type">int</span>[][] retArr = <span class="keyword">new</span> <span class="title class_">int</span>[ret.size()][<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; ret.size(); i++) {</span><br><span class="line">            retArr[i] = ret.get(i);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> retArr;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>那么会返回结果:</p><p><code>[[2,3],[4,5],[6,7],[1,10]]</code></p><p>所以我们需要倒序遍历，并将需要加入的不能合并的区间加入链表头，每一次取表头来和当前区间比较是否需要合并，递归处理。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[][] merge(<span class="type">int</span>[][] intervals) {</span><br><span class="line">        Arrays.sort(intervals, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;<span class="type">int</span>[]&gt;() {</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(<span class="type">int</span>[] arr1, <span class="type">int</span>[] arr2)</span> {</span><br><span class="line">                <span class="keyword">if</span> (arr1[<span class="number">1</span>] &gt; arr2[<span class="number">1</span>]) {</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                } <span class="keyword">else</span> <span class="keyword">if</span> (arr1[<span class="number">1</span>] == arr2[<span class="number">1</span>]) {</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line">        LinkedList&lt;<span class="type">int</span>[]&gt; ret = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// use the end to sort will make this part harder: </span></span><br><span class="line">        <span class="comment">// eg test case: [[2,3],[4,5],[6,7],[8,9],[1,10]],</span></span><br><span class="line">        <span class="comment">// to solve this problem, we need to loop from the end:</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> intervals.length - <span class="number">1</span>; i &gt;= <span class="number">0</span> ; i--) {</span><br><span class="line">            <span class="keyword">if</span> (ret.isEmpty()) {</span><br><span class="line">                ret.addFirst(intervals[i]);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span>[] last = ret.getFirst();</span><br><span class="line">            <span class="type">int</span> <span class="variable">prevLeft</span> <span class="operator">=</span> last[<span class="number">0</span>], prevRight = last[<span class="number">1</span>];</span><br><span class="line">            <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> intervals[i][<span class="number">0</span>], right = intervals[i][<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (right &gt;= prevLeft) {</span><br><span class="line">                <span class="comment">// need to update interval;</span></span><br><span class="line">                last[<span class="number">0</span>] = Math.min(prevLeft, left);</span><br><span class="line">                last[<span class="number">1</span>] = Math.max(prevRight, right);</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                ret.addFirst(intervals[i]);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="type">int</span>[][] retArr = <span class="keyword">new</span> <span class="title class_">int</span>[ret.size()][<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; ret.size(); i++) {</span><br><span class="line">            retArr[i] = ret.get(i);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> retArr;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="1288-删除被覆盖区间"><a href="#1288-删除被覆盖区间" class="headerlink" title="1288. 删除被覆盖区间"></a><a href="https://leetcode.cn/problems/remove-covered-intervals/">1288. 删除被覆盖区间</a></h2><p>按照左端点升序排列后右端点按照降序排列</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">removeCoveredIntervals</span><span class="params">(<span class="type">int</span>[][] intervals)</span> {</span><br><span class="line">        Arrays.sort(intervals, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;<span class="type">int</span>[]&gt;() {</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(<span class="type">int</span>[] arr1, <span class="type">int</span>[] arr2)</span> {</span><br><span class="line">                <span class="keyword">if</span> (arr1[<span class="number">0</span>] &gt; arr2[<span class="number">0</span>]) {</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                } <span class="keyword">else</span> <span class="keyword">if</span> (arr1[<span class="number">0</span>] &lt; arr2[<span class="number">0</span>]) {</span><br><span class="line">                    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    <span class="keyword">return</span> arr2[<span class="number">1</span>] - arr1[<span class="number">1</span>];</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> intervals[<span class="number">0</span>][<span class="number">0</span>], right = intervals[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; intervals.length; i++) {</span><br><span class="line">            <span class="type">int</span> <span class="variable">curLeft</span> <span class="operator">=</span> intervals[i][<span class="number">0</span>], curRight = intervals[i][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (left &lt;= curLeft &amp;&amp; right &gt;= curRight) {</span><br><span class="line">                <span class="comment">// 判断是否覆盖：</span></span><br><span class="line">                count++;</span><br><span class="line">            } <span class="keyword">else</span> <span class="keyword">if</span> (right &gt;= curLeft &amp;&amp; right &lt; curRight) {</span><br><span class="line">                <span class="comment">// 相交情况下，扩展当前区间</span></span><br><span class="line">                right = curRight;</span><br><span class="line">            } <span class="keyword">else</span> <span class="keyword">if</span> (curLeft &gt; left &amp;&amp; curRight &gt; right) {</span><br><span class="line">              <span class="comment">// 完全不相交，更新left，right</span></span><br><span class="line">                left = curLeft;</span><br><span class="line">                right = curRight;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> intervals.length - count;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="986-区间列表的交集"><a href="#986-区间列表的交集" class="headerlink" title="986. 区间列表的交集"></a><a href="https://leetcode.cn/problems/interval-list-intersections/">986. 区间列表的交集</a></h2><p>分情况分析讨论题</p><p>这道题按照区间的重合可以区分为以下四种情况：</p><p>设两个列表的每个区间为 <code>[an, an+1]</code> <code>[bn, bn+1]</code>，那么如果这两个区间有交集，需满足 <code>b2 &gt;= a1 &amp;&amp; a2 &gt;= b1</code>，分下面四种情况：</p><p><img src="/2023/06/01/%E8%B4%AA%E5%BF%83/lc986_%E6%83%85%E5%86%B5.jpeg" alt="lc986_情况"></p><p>如果有交集<code>[c1,c2]</code>那么我们有 <code>c1 = max(a1, b1), c2 = min(a2, b2)</code></p><p><img src="/2023/06/01/%E8%B4%AA%E5%BF%83/lc986_%E4%BA%A4%E9%9B%86.jpeg" alt="lc986_交集"></p><p>那么剩下的就是双指针问题了，当一个区间被作为交集使用过后，即，他是左边的区间时，指针移动</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[][] intervalIntersection(<span class="type">int</span>[][] firstList, <span class="type">int</span>[][] secondList) {</span><br><span class="line">        <span class="type">int</span> <span class="variable">firstIdx</span> <span class="operator">=</span> <span class="number">0</span>, secondIdx = <span class="number">0</span>;</span><br><span class="line">        LinkedList&lt;<span class="type">int</span>[]&gt; res = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (firstIdx &lt; firstList.length &amp;&amp; secondIdx &lt; secondList.length) {</span><br><span class="line">            <span class="type">int</span> <span class="variable">a1</span> <span class="operator">=</span> firstList[firstIdx][<span class="number">0</span>], a2 = firstList[firstIdx][<span class="number">1</span>];</span><br><span class="line">            <span class="type">int</span> <span class="variable">b1</span> <span class="operator">=</span> secondList[secondIdx][<span class="number">0</span>], b2 = secondList[secondIdx][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (b1 &lt;= a2 &amp;&amp; b2 &gt;= a1) {</span><br><span class="line">                <span class="type">int</span> <span class="variable">c1</span> <span class="operator">=</span> Math.max(a1, b1), c2 = Math.min(a2, b2);</span><br><span class="line">                res.add(<span class="keyword">new</span> <span class="title class_">int</span>[]{c1, c2});</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (a2 &lt; b2) {</span><br><span class="line">                firstIdx++;</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                secondIdx++;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> res.toArray(<span class="keyword">new</span> <span class="title class_">int</span>[res.size()][]);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>对于区间调度问题，按照右端点排序的贪心思路解决。对于区间合并问题，按照左端点排序</p><p>按照左端点排序的目的是为了保证左端点的前后关系，这样我们就能保证一个区间的左端点一定不会大于其后面区间的左端点。这在处理一些需要关注<strong>区间的覆盖，或者合并等问题时会比较有用。</strong></p><p>按照右端点排序的目的则是为了保证右端点的前后关系，使得一个区间的右端点不会大于其后面区间的右端点。这在处理一些需要关注<strong>区间的交叉，或者选择不重叠区间</strong>的问题时会比较有用。</p><h1 id="738-单调递增的数字"><a href="#738-单调递增的数字" class="headerlink" title="738. 单调递增的数字"></a><a href="https://leetcode.cn/problems/monotone-increasing-digits/">738. 单调递增的数字</a></h1><p>这道题与其说是一道贪心题，它更像是一道按照规则的模拟题。贪心思想题现在了按照规则构造时候的模拟题</p><ol><li>先把数字转化成一个char[]</li></ol><p>我们对每一位进行贪心地修改：</p><p>由于我们想要数尽可能的大，所以我们要尽可能填充9，而填充9的位置就是第一个单调递减的位置：</p><p>12321 -&gt; 12999</p><p>3就是第一个需要变化的位置</p><p>但是会有一种情况：</p><p>1233321 -&gt; 那么这个时候我们就不能只简单的看n 和 n+1我们需要一个额外的变量来跟踪第一个max index：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">monotoneIncreasingDigits</span><span class="params">(<span class="type">int</span> n)</span> {</span><br><span class="line">        <span class="type">char</span>[] nToChar = (n + <span class="string">""</span>).toCharArray();</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> -<span class="number">1</span>, idx = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nToChar.length - <span class="number">1</span>; i++) {</span><br><span class="line">            <span class="keyword">if</span> (max &lt; nToChar[i]) {</span><br><span class="line">                max = nToChar[i];</span><br><span class="line">                idx = i;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (nToChar[i] &gt; nToChar[i + <span class="number">1</span>]) {</span><br><span class="line">                nToChar[idx] -= <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> idx + <span class="number">1</span>; j &lt; nToChar.length; j++) {</span><br><span class="line">                    nToChar[j] = <span class="string">'9'</span>;</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> Integer.parseInt(<span class="keyword">new</span> <span class="title class_">String</span>(nToChar));</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="621-任务调度器"><a href="#621-任务调度器" class="headerlink" title="621. 任务调度器"></a><a href="https://leetcode.cn/problems/task-scheduler/">621. 任务调度器</a></h1><p>这是一道带有贪心思想的脑筋急转弯题，需要画图以及理解任务的调度：</p><p>贪心体现在：尽可能安排出现次数多的任务，然后将其他任务填充在次数多的任务的冷却期中。</p><p>假设我们有桶子：</p><p><img src="/2023/06/01/%E8%B4%AA%E5%BF%83/lc621_%E8%B4%AA%E5%BF%83%E6%9E%84%E9%80%A0_1.png" alt="lc621_贪心构造_1"></p><p>我们需要执行4个任务，那么由于除了最后一个以外都有冷冻期，那么就会有：</p><p>(n + 1) * (m - 1) + 1</p><p>假设任务重复次数最多为max，若有tot个任务数量为 max 的任务：</p><blockquote><p>当任务总数不超过 (n+1)×(max⁡−1)+tot时，我们总能将其他任务插到空闲时间中去，不会引入额外的冻结时间（下左图）；而当任务数超过该值时，我们可以在将其横向添加每个 n+1 块的后面，同时不会引入额外的冻结时间（下右图）：</p><p>作者：宫水三叶<br>链接：<a href="https://leetcode.cn/problems/task-scheduler/description/">https://leetcode.cn/problems/task-scheduler/description/</a></p></blockquote><p><img src="/2023/06/01/%E8%B4%AA%E5%BF%83/lc621_%E8%B4%AA%E5%BF%83%E6%9E%84%E9%80%A0_2.png" alt="lc621_贪心构造_2"></p><p>综上：</p><p>结果为<code> return Math.max(len, (n + 1) * (max - 1) + tot);</code></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">leastInterval</span><span class="params">(<span class="type">char</span>[] tasks, <span class="type">int</span> n)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> tasks.length;</span><br><span class="line">        <span class="type">int</span>[] hm = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len; i++) {</span><br><span class="line">            hm[tasks[i] - <span class="string">'A'</span>]++;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">26</span>; i++) {</span><br><span class="line">            max = Math.max(hm[i], max);</span><br><span class="line">        }</span><br><span class="line">        <span class="type">int</span> <span class="variable">tot</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">26</span>; i++) {</span><br><span class="line">            <span class="keyword">if</span> (hm[i] == max) tot++;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> Math.max(len, (n + <span class="number">1</span>) * (max - <span class="number">1</span>) + tot);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="1024-视频拼接"><a href="#1024-视频拼接" class="headerlink" title="1024. 视频拼接"></a><a href="https://leetcode.cn/problems/video-stitching/">1024. 视频拼接</a></h1><p>类区间调度的贪心题：</p><blockquote><p><strong>区间问题肯定按照区间的起点或者终点进行排序</strong></p><p><a href="https://labuladong.github.io/algo/di-er-zhan-a01c6/tan-xin-le-9bedf/jian-shi-p-4302c/">labuladong-剪视频</a></p></blockquote><p>将 <code>clips</code> 按照起点升序排序，起点相同的按照终点降序排序</p><p><img src="/2023/06/01/%E8%B4%AA%E5%BF%83/lc1024_%E6%8E%92%E5%BA%8F_1.jpeg" alt="lc1024_排序_1"></p><p>然后比较所有起点小于 <code>clips[0][1]</code> 的区间，根据贪心策略，它们中终点最大的那个区间就是第二个会被选中的视频</p><p><img src="/2023/06/01/%E8%B4%AA%E5%BF%83/lc1024_%E6%8E%92%E5%BA%8F_2.gif" alt="lc1024_排序_2"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">videoStitching</span><span class="params">(<span class="type">int</span>[][] clips, <span class="type">int</span> time)</span> {</span><br><span class="line">        Arrays.sort(clips, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;<span class="type">int</span>[]&gt;(){</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(<span class="type">int</span>[] clip1, <span class="type">int</span>[] clip2)</span> {</span><br><span class="line">                <span class="keyword">if</span> (clip1[<span class="number">0</span>] == clip2[<span class="number">0</span>]) {</span><br><span class="line">                    <span class="keyword">return</span> clip2[<span class="number">1</span>] - clip1[<span class="number">1</span>];</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">return</span> clip1[<span class="number">0</span>] - clip2[<span class="number">0</span>];</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">curRight</span> <span class="operator">=</span> <span class="number">0</span>, rightMost = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; clips.length &amp;&amp; clips[i][<span class="number">0</span>] &lt;= curRight) {</span><br><span class="line">            <span class="type">int</span>[] clip = clips[i];</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">0</span>) {</span><br><span class="line">                curRight = clip[<span class="number">1</span>];</span><br><span class="line">                i++;</span><br><span class="line">                res++;</span><br><span class="line">                <span class="keyword">if</span> (curRight &gt;= time) <span class="keyword">return</span> res;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">// System.out.println(curRight + " " + rightMost);</span></span><br><span class="line">            <span class="keyword">while</span> (i &lt; clips.length &amp;&amp; clips[i][<span class="number">0</span>] &lt;= curRight) {</span><br><span class="line">                rightMost = Math.max(rightMost, clips[i][<span class="number">1</span>]);</span><br><span class="line">                i++;</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">// System.out.println(rightMost);</span></span><br><span class="line">            res++;</span><br><span class="line">            <span class="keyword">if</span> (rightMost &gt;= time) <span class="keyword">return</span> res;</span><br><span class="line">            curRight = rightMost;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回溯之棋盘问题</title>
      <link href="/2023/05/18/%E5%9B%9E%E6%BA%AF%E4%B9%8B%E6%A3%8B%E7%9B%98%E9%97%AE%E9%A2%98/"/>
      <url>/2023/05/18/%E5%9B%9E%E6%BA%AF%E4%B9%8B%E6%A3%8B%E7%9B%98%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="51-N-皇后"><a href="#51-N-皇后" class="headerlink" title="51. N 皇后"></a><a href="https://leetcode.cn/problems/n-queens/">51. N 皇后</a></h1><ol><li>构造树：</li></ol><p>一个 3 * 3 的棋盘，将搜索过程抽象为一棵树</p><p>二维矩阵中矩阵的<strong>高</strong>就是这棵树的<strong>高度</strong>，矩阵的<strong>宽</strong>就是树形结构中每一个节点的<strong>宽度</strong>。</p><p>那么我们用皇后们的约束条件，来回溯搜索这棵树，<strong>只要搜索到了树的叶子节点，说明就找到了皇后们的合理位置了</strong></p><ol start="2"><li>皇后的位置：<ol><li>不能同行</li><li>不能同列</li><li>不能同斜线</li></ol></li></ol><p><img src="/2023/05/18/%E5%9B%9E%E6%BA%AF%E4%B9%8B%E6%A3%8B%E7%9B%98%E9%97%AE%E9%A2%98/51_NQueen_tree.jpeg" alt="51_NQueen_tree"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">  List&lt;List&lt;String&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">  <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="title function_">solveNQueens</span><span class="params">(<span class="type">int</span> n)</span> {</span><br><span class="line">      <span class="type">char</span>[][] chessBoard = <span class="keyword">new</span> <span class="title class_">char</span>[n][n];</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (<span class="type">char</span>[] chessRow : chessBoard) {</span><br><span class="line">          Arrays.fill(chessRow, <span class="string">'.'</span>);</span><br><span class="line">      }</span><br><span class="line"></span><br><span class="line">      <span class="type">int</span> <span class="variable">curRow</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">      backtracking(chessBoard, curRow, n);</span><br><span class="line">      <span class="keyword">return</span> res;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(<span class="type">char</span>[][] chessBoard, <span class="type">int</span> curRow, <span class="type">int</span> n)</span> {</span><br><span class="line">      <span class="keyword">if</span> (curRow == n) {</span><br><span class="line">          <span class="comment">// 到叶子结点，将此时的棋盘加入答案</span></span><br><span class="line">          res.add(array2List(chessBoard));</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">      }</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">curCol</span> <span class="operator">=</span> <span class="number">0</span>; curCol &lt; n; curCol++) {</span><br><span class="line">          <span class="keyword">if</span> (isValid(chessBoard, curRow, curCol)) {</span><br><span class="line">              chessBoard[curRow][curCol] = <span class="string">'Q'</span>;</span><br><span class="line">              backtracking(chessBoard, curRow + <span class="number">1</span>, n);</span><br><span class="line">              chessBoard[curRow][curCol] = <span class="string">'.'</span>;</span><br><span class="line">          }</span><br><span class="line">      }</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(<span class="type">char</span>[][] chessBoard, <span class="type">int</span> curRow, <span class="type">int</span> curCol)</span> {</span><br><span class="line">      <span class="comment">// 检查同一列是不是已经有Queen</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> <span class="number">0</span>; r &lt; curRow; r++) {</span><br><span class="line">          <span class="keyword">if</span> (chessBoard[r][curCol] == <span class="string">'Q'</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      }</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 检查 \ 是否有Queen</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> curRow - <span class="number">1</span>, c = curCol - <span class="number">1</span>; r &gt;= <span class="number">0</span> &amp;&amp; c &gt;= <span class="number">0</span>; r--, c--) {</span><br><span class="line">          <span class="keyword">if</span> (chessBoard[r][c] == <span class="string">'Q'</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      }</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 检查 / 是否有Queen</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> curRow - <span class="number">1</span>, c = curCol + <span class="number">1</span>; r &gt;= <span class="number">0</span> &amp;&amp; c &lt; chessBoard[<span class="number">0</span>].length; r--, c++) {</span><br><span class="line">          <span class="keyword">if</span> (chessBoard[r][c] == <span class="string">'Q'</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> List&lt;String&gt; <span class="title function_">array2List</span><span class="params">(<span class="type">char</span>[][] chessBoard)</span> {</span><br><span class="line">      List&lt;String&gt; transformedArray = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">      <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> chessBoard.length, c = chessBoard[<span class="number">0</span>].length;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (<span class="type">char</span>[] chars : chessBoard) {</span><br><span class="line">          <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">          <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; c; j++) {</span><br><span class="line">              sb.append(chars[j]);</span><br><span class="line">          }</span><br><span class="line">          transformedArray.add(sb.toString());</span><br><span class="line">      }</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> transformedArray;</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="37-解数独"><a href="#37-解数独" class="headerlink" title="37. 解数独"></a><a href="https://leetcode.cn/problems/sudoku-solver/">37. 解数独</a></h1><p>和N皇后不同的是，N皇后一旦确定某行中的位置，那么他就唯一确定了但是数独中数字会取决于之前的数字，会存在依赖关系，因此需要枚举每一个格子。</p><p><img src="/2023/05/18/%E5%9B%9E%E6%BA%AF%E4%B9%8B%E6%A3%8B%E7%9B%98%E9%97%AE%E9%A2%98/lc37_tree.png" alt="lc37_tree"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="type">int</span> <span class="variable">boardRow</span> <span class="operator">=</span> <span class="number">9</span>, boardCol = <span class="number">9</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">solveSudoku</span><span class="params">(<span class="type">char</span>[][] board)</span> {</span><br><span class="line">        backtracking(board, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">backtracking</span><span class="params">(<span class="type">char</span>[][] board, <span class="type">int</span> r, <span class="type">int</span> c)</span> {</span><br><span class="line">        <span class="keyword">if</span> (c == boardCol) {</span><br><span class="line">            <span class="keyword">return</span> backtracking(board, r + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (r == boardRow) {</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (board[r][c] != <span class="string">'.'</span>) {</span><br><span class="line">            <span class="keyword">return</span> backtracking(board, r, c + <span class="number">1</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> <span class="variable">num</span> <span class="operator">=</span> <span class="string">'1'</span>; num &lt;= <span class="string">'9'</span>; num++) {</span><br><span class="line">            <span class="keyword">if</span> (!isValid(board, r, c, num)) <span class="keyword">continue</span>;</span><br><span class="line">            board[r][c] = num;</span><br><span class="line">            <span class="keyword">if</span> (backtracking(board, r, c + <span class="number">1</span>)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            board[r][c] = <span class="string">'.'</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(<span class="type">char</span>[][] board, <span class="type">int</span> r, <span class="type">int</span> c, <span class="type">char</span> num)</span> {</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) {</span><br><span class="line">            <span class="comment">// 判断行是否存在重复</span></span><br><span class="line">            <span class="keyword">if</span> (board[r][i] == num) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="comment">// 判断列是否存在重复</span></span><br><span class="line">            <span class="keyword">if</span> (board[i][c] == num) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="comment">// 判断 3 x 3 方框是否存在重复</span></span><br><span class="line">            <span class="keyword">if</span> (board[(r/<span class="number">3</span>)*<span class="number">3</span> + i/<span class="number">3</span>][(c/<span class="number">3</span>)*<span class="number">3</span> + i%<span class="number">3</span>] == num)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 回溯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++碎碎念</title>
      <link href="/2023/05/18/C-%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
      <url>/2023/05/18/C-%E7%A2%8E%E7%A2%8E%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>本文档用来记录一些C++知识，从而更好地应对就业寒冬 (就比如 “XX已死”)</p><p>卷不死就往死里卷 <span class="github-emoji"><span>😆</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p></div><h1 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h1><h2 id="Coding-Style"><a href="#Coding-Style" class="headerlink" title="Coding Style"></a>Coding Style</h2><p>对于类和结构，通常使用 CamelCase；对于函数和变量，通常使用 snake_case。全局常量和宏常常全部大写，并用下划线分隔。</p><h2 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h2><ol><li><p>头文件区：<code>#include &lt;&gt;</code></p></li><li><p>命名空间：<code>using namespace std;</code></p><ol><li>保证不同命名空间中变量不冲突</li></ol></li><li><p>程序执行入口</p><ol><li><code>int main()</code></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> Programming-Languages </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回溯之切割问题</title>
      <link href="/2023/05/13/%E5%9B%9E%E6%BA%AF%E4%B9%8B%E5%88%87%E5%89%B2%E9%97%AE%E9%A2%98/"/>
      <url>/2023/05/13/%E5%9B%9E%E6%BA%AF%E4%B9%8B%E5%88%87%E5%89%B2%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h1><h2 id="131-分割回文串"><a href="#131-分割回文串" class="headerlink" title="131. 分割回文串"></a><a href="https://leetcode.cn/problems/palindrome-partitioning/">131. 分割回文串</a></h2><p>枚举切割的点来得到分割方案</p><p>只有树枝上的子串是回文串时才能继续往下走，最后如果能够走到空串节点，就说明整个 <code>s</code> 完成了切分，也就是得到了一个合法的答案。</p><p><img src="/2023/05/13/%E5%9B%9E%E6%BA%AF%E4%B9%8B%E5%88%87%E5%89%B2%E9%97%AE%E9%A2%98/%E5%88%86%E5%89%B2%E5%9B%9E%E6%96%87_lc131_tree.jpg" alt="分割回文_lc131_tree"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line"></span><br><span class="line">    List&lt;List&lt;String&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    LinkedList&lt;String&gt; path = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="title function_">partition</span><span class="params">(String s)</span> {</span><br><span class="line">        backtracking(s, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(String s, <span class="type">int</span> startIdx)</span> {</span><br><span class="line">        <span class="keyword">if</span> (startIdx &gt;= s.length()) {</span><br><span class="line">            <span class="comment">// base case，走到叶子节点</span></span><br><span class="line">            <span class="comment">// 即整个 s 被成功分割为若干个回文子串，记下答案</span></span><br><span class="line">            res.add(<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;(path));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> startIdx; i &lt; s.length(); i++) {</span><br><span class="line">            <span class="type">String</span> <span class="variable">cur</span> <span class="operator">=</span> s.substring(startIdx, i + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (isPalindrome(cur)) {</span><br><span class="line">                <span class="comment">// s[start..i] 是一个回文串，可以进行分割</span></span><br><span class="line">                <span class="comment">// 做选择，把 s[start..i] 放入路径列表中</span></span><br><span class="line">                path.add(cur);</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            }</span><br><span class="line">            backtracking(s, i + <span class="number">1</span>);</span><br><span class="line">            path.removeLast();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isPalindrome</span><span class="params">(String str)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">s</span> <span class="operator">=</span> <span class="number">0</span>, e = str.length() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (s &lt; e) {</span><br><span class="line">            <span class="keyword">if</span> (str.charAt(s) != str.charAt(e)) {</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            }</span><br><span class="line">            s++;</span><br><span class="line">            e--;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="93-复原-IP-地址"><a href="#93-复原-IP-地址" class="headerlink" title="93. 复原 IP 地址"></a><a href="https://leetcode.cn/problems/restore-ip-addresses/">93. 复原 IP 地址</a></h2><p>两个难点：</p><ol><li>将问题转化为切割问题从而用回溯法来解决<ol><li>如何造树</li></ol></li><li>边界的处理<ol><li>base case</li><li>判断子字符串是否合法</li></ol></li></ol><p>对于第一个问题：</p><p><img src="/2023/05/13/%E5%9B%9E%E6%BA%AF%E4%B9%8B%E5%88%87%E5%89%B2%E9%97%AE%E9%A2%98/lc_93_%E5%A4%8D%E5%8E%9FIP_tres.png" alt="lc_93_复原IP_tres"></p><p>对于第二个问题:</p><ol><li>base case <ol><li>通过变量pointNum，记录添加逗点的数量。</li></ol></li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (pointCount == <span class="number">3</span>) {  <span class="comment">// 逗点数量为3时，分隔结束</span></span><br><span class="line">  <span class="comment">// 判断第四段子字符串是否合法，如果合法就放进result中</span></span><br><span class="line">    <span class="keyword">if</span> (isValid(s, startIdx, s.length() - <span class="number">1</span>)) {</span><br><span class="line">        res.add(s);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>切割出来的子字符串是否合法<ol><li>段位以0为开头的数字不合法</li><li>段位里有非正整数字符不合法</li><li>段位如果大于255了不合法</li></ol></li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(String s, <span class="type">int</span> start, <span class="type">int</span> end)</span> {</span><br><span class="line">    <span class="keyword">if</span> (start &gt; end) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (s.charAt(start) == <span class="string">'0'</span> &amp;&amp; start != end) { <span class="comment">// 0开头的数字不合法</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt;= end; i++) {</span><br><span class="line">        <span class="keyword">if</span> (s.charAt(i) &gt; <span class="string">'9'</span> || s.charAt(i) &lt; <span class="string">'0'</span>) { <span class="comment">// 遇到⾮数字字符不合法</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        }</span><br><span class="line">        num = num * <span class="number">10</span> + (s.charAt(i) - <span class="string">'0'</span>);</span><br><span class="line">        <span class="keyword">if</span> (num &gt; <span class="number">255</span>) { <span class="comment">// 如果⼤于255了不合法</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>综上：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line"></span><br><span class="line">    List&lt;String&gt; res = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">restoreIpAddresses</span><span class="params">(String s)</span> {</span><br><span class="line">        backtracking(s, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(String s, <span class="type">int</span> startIdx, <span class="type">int</span> pointCount)</span> {</span><br><span class="line">        <span class="keyword">if</span> (pointCount == <span class="number">3</span>) {</span><br><span class="line">            <span class="keyword">if</span> (isValid(s, startIdx, s.length() - <span class="number">1</span>)) {</span><br><span class="line">                res.add(s);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> startIdx; i &lt; s.length(); i++) {</span><br><span class="line">            <span class="keyword">if</span> (isValid(s, startIdx, i)) {</span><br><span class="line">                s = s.substring(<span class="number">0</span>, i + <span class="number">1</span>) + <span class="string">"."</span> + s.substring(i + <span class="number">1</span>);</span><br><span class="line">                pointCount++;</span><br><span class="line">              <span class="comment">// 注意这里是 i + 2 由于加了一个 "."</span></span><br><span class="line">                backtracking(s, i + <span class="number">2</span>, pointCount);</span><br><span class="line">                pointCount--;</span><br><span class="line">                s = s.substring(<span class="number">0</span>, i + <span class="number">1</span>) + s.substring(i + <span class="number">2</span>);</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(String s, <span class="type">int</span> start, <span class="type">int</span> end)</span> {</span><br><span class="line">        <span class="keyword">if</span> (start &gt; end) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (s.charAt(start) == <span class="string">'0'</span> &amp;&amp; start != end) { <span class="comment">// 0开头的数字不合法</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt;= end; i++) {</span><br><span class="line">            <span class="keyword">if</span> (s.charAt(i) &gt; <span class="string">'9'</span> || s.charAt(i) &lt; <span class="string">'0'</span>) { <span class="comment">// 遇到⾮数字字符不合法</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            }</span><br><span class="line">            num = num * <span class="number">10</span> + (s.charAt(i) - <span class="string">'0'</span>);</span><br><span class="line">            <span class="keyword">if</span> (num &gt; <span class="number">255</span>) { <span class="comment">// 如果⼤于255了不合法</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 回溯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图论</title>
      <link href="/2023/05/10/%E5%9B%BE%E8%AE%BA/"/>
      <url>/2023/05/10/%E5%9B%BE%E8%AE%BA/</url>
      
        <content type="html"><![CDATA[<div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>此教程参考 <a href="https://www.programmercarl.com/other/tulunshuoming.html">代码随想录-图论篇</a> 以及 <a href="https://labuladong.github.io/algo/di-yi-zhan-da78c/shou-ba-sh-03a72/tu-lun-ji--d55b2/">labuladong - 图论</a><br>感谢支持！</p></div><div class="note blue icon-padding flat"><i class="note-icon fas fa-rocket"></i><ul><li><a href="/2023/09/02/%E9%93%BE%E5%BC%8F%E5%89%8D%E5%90%91%E6%98%9F/" title="链式前向星-LinkedForwardStar">链式前向星-LinkedForwardStar</a></li><li><a href="/2023/09/07/Dijkstra/" title="Dijkstra">Dijkstra</a></li><li><a href="/2023/05/10/%E6%8B%93%E6%89%91%E5%BA%8F%E5%88%97/" title="拓扑序列">拓扑序列</a></li><li><a href="/2023/09/10/%E5%B9%B6%E6%9F%A5%E9%9B%86/" title="并查集">并查集</a></li><li><a href="/2023/09/12/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/" title="最小生成树 - Minimum Spanning Tree - MST">最小生成树 - Minimum Spanning Tree - MST</a></li></ul></div><h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><p>图就是多叉树的延伸，</p><p>多叉树 &amp; 图：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 图节点的逻辑结构 */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Vertex</span> {</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    Vertex[] neighbors;</span><br><span class="line">}</span><br><span class="line"><span class="comment">/* 基本的 N 叉树节点 */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TreeNode</span> {</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    TreeNode[] children;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h1 id="建图-和-建表"><a href="#建图-和-建表" class="headerlink" title="建图 和 建表"></a>建图 和 建表</h1><p><img src="/2023/05/10/%E5%9B%BE%E8%AE%BA/%E9%82%BB%E6%8E%A5%E8%A1%A8_%E9%82%BB%E6%8E%A5%E7%9F%A9%E9%98%B5_0.jpeg" alt="邻接表_邻接矩阵_0"></p><p><img src="/2023/05/10/%E5%9B%BE%E8%AE%BA/%E9%82%BB%E6%8E%A5%E8%A1%A8_%E9%82%BB%E6%8E%A5%E7%9F%A9%E9%98%B5.jpeg" alt="邻接表_邻接矩阵"></p><p>邻接表：我把每个节点 <code>x</code> 的邻居都存到一个列表里，然后把 <code>x</code> 和这个列表关联起来，这样就可以通过一个节点 <code>x</code> 找到它的所有相邻节点。</p><p>邻接矩阵：一个二维布尔数组，我们权且称为 <code>matrix</code>，如果节点 <code>x</code> 和 <code>y</code> 是相连的，那么就把 <code>matrix[x][y]</code> 设为 <code>true</code>（上图中绿色的方格代表 <code>true</code>）。如果想找节点 <code>x</code> 的邻居，去扫一圈 <code>matrix[x][..]</code> 就行了。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 邻接表</span></span><br><span class="line"><span class="comment">// graph[x] 存储 x 的所有邻居节点</span></span><br><span class="line">List&lt;Integer&gt;[] graph;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 邻接矩阵</span></span><br><span class="line"><span class="comment">// matrix[x][y] 记录 x 是否有一条指向 y 的边</span></span><br><span class="line"><span class="type">boolean</span>[][] matrix;</span><br></pre></td></tr></tbody></table></figure><p>建图建表的优劣：</p><p>邻接表：占用空间少，但是无法<strong>快速</strong>判断两个节点是否相邻</p><p>邻接矩阵：空间占用高，但是可以快速查找相邻节点</p><p>比如判断节点 <code>1</code> 是否和节点 <code>3</code> 相邻，我要去邻接表里 <code>1</code> 对应的邻居列表里查找 <code>3</code> 是否存在。但对于邻接矩阵就简单了，只要看看 <code>matrix[1][3]</code> 就知道了，效率高。</p><p>除链式前向星外：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">buildGraph</span><span class="params">(<span class="type">int</span> n)</span> {</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">        graph.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;());</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> from, <span class="type">int</span> to)</span> {</span><br><span class="line">    graph.get(from).add(to);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="度"><a href="#度" class="headerlink" title="度"></a>度</h1><h2 id="入度-和-出度"><a href="#入度-和-出度" class="headerlink" title="入度 和 出度"></a>入度 和 出度</h2><p>由于有向图的边有方向，所以有向图中每个节点「度」被细分为<strong>入度</strong>（indegree）和<strong>出度</strong>（outdegree）</p><p>上图中的3的入度为3出度为1</p><h1 id="加权"><a href="#加权" class="headerlink" title="加权"></a>加权</h1><p>邻接表：</p><p>存储不单单邻居节点还存储权重</p><p>邻接矩阵：</p><p><code>matrix[x][y]</code> 不再是布尔值，而是一个 int 值，0 表示没有连接，其他值表示权重</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 邻接表</span></span><br><span class="line"><span class="comment">// graph[x] 存储 x 的所有邻居节点以及对应的权重</span></span><br><span class="line">List&lt;<span class="type">int</span>[]&gt;[] graph;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 邻接矩阵</span></span><br><span class="line"><span class="comment">// matrix[x][y] 记录 x 指向 y 的边的权重，0 表示不相邻</span></span><br><span class="line"><span class="type">int</span>[][] matrix;</span><br></pre></td></tr></tbody></table></figure><h1 id="无向"><a href="#无向" class="headerlink" title="无向"></a>无向</h1><p>无向图 == 双向</p><p>邻接表：</p><p>在 <code>x</code> 的邻居列表里添加 <code>y</code>，同时在 <code>y</code> 的邻居列表里添加 <code>x</code></p><p>邻接矩阵：</p><p>把 <code>matrix[x][y]</code> 和 <code>matrix[y][x]</code> 都变成 <code>true</code> ；</p><h1 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h1><p>遍历（多叉）树结构时，我们有：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 多叉树遍历框架 */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">traverse</span><span class="params">(TreeNode root)</span> {</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">// 前序位置</span></span><br><span class="line">    <span class="keyword">for</span> (TreeNode child : root.children) {</span><br><span class="line">        traverse(child);</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 后序位置</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>由于图可能包含环，所以为了避免无限遍历我们需要一个<code>visited</code>数组来表示已经遍历过：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 记录被遍历过的节点</span></span><br><span class="line"><span class="type">boolean</span>[] visited;</span><br><span class="line"><span class="comment">// 记录从起点到当前节点的路径</span></span><br><span class="line"><span class="type">boolean</span>[] onPath;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 图遍历框架 */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">traverse</span><span class="params">(Graph graph, <span class="type">int</span> s)</span> {</span><br><span class="line">    <span class="keyword">if</span> (visited[s]) <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">// 经过节点 s，标记为已遍历</span></span><br><span class="line">    visited[s] = <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">// 做选择：标记节点 s 在路径上</span></span><br><span class="line">    onPath[s] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> neighbor : graph.neighbors(s)) {</span><br><span class="line">        traverse(graph, neighbor);</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 撤销选择：节点 s 离开路径</span></span><br><span class="line">    onPath[s] = <span class="literal">false</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>注意，<code>visited</code>数组不需要撤销操作，这是因为我们需要始终记录已经遍历过的节点；而<code>onPath</code> 数组需要撤销操作从而保证遍历了每一个节点，但是注意的是回溯中撤销的是枝干，因此在for循环里面，但是这里的dfs关注的是节点，因此在for循环外面</p><p><img src="/2023/05/10/%E5%9B%BE%E8%AE%BA/onpath_viisted.gif" alt="onpath_viisted"></p><p>visited 中用灰色标记已经遍历过的节点，用onPath来表示正在遍历的节点</p><h1 id="Dijkstra"><a href="#Dijkstra" class="headerlink" title="Dijkstra"></a>Dijkstra</h1><a href="/2023/09/07/Dijkstra/" title="Dijkstra">Dijkstra</a><h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><h2 id="310-最小高度树"><a href="#310-最小高度树" class="headerlink" title="310.最小高度树"></a><a href="https://leetcode.cn/problems/minimum-height-trees/description/#">310.最小高度树</a></h2><p>这道题比较有意思的点在于其涉及到一个技巧：</p><p>从叶子结点BFS，越往深处，节点连接的点越多，最里面的点即为最小高度</p><p>举一反三：</p><blockquote><p>这种套路题，找最近叶子节点就从根开始 BFS，找根节点的话就从叶子开始 BFS，记住这种处理方式就好了，一般不会有什么变体。</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; graph = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span>[] outDegree;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">buildGraph</span><span class="params">(<span class="type">int</span> n)</span> {</span><br><span class="line">        outDegree = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">            graph.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;());</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> from, <span class="type">int</span> to)</span> {</span><br><span class="line">        graph.get(from).add(to);</span><br><span class="line">        outDegree[from]++;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从叶子结点BFS，越往深处，节点连接的点越多，最里面的点即为最小高度</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">findMinHeightTrees</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span>[][] edges)</span> {</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) {</span><br><span class="line">            res.add(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        }</span><br><span class="line">        buildGraph(n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; edges.length; i++) {</span><br><span class="line">            add(edges[i][<span class="number">0</span>], edges[i][<span class="number">1</span>]);</span><br><span class="line">            add(edges[i][<span class="number">1</span>], edges[i][<span class="number">0</span>]);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        Deque&lt;Integer&gt; dq = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 叶子结点即为出度为1的点, 因为是无向图</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; outDegree.length; i++) {</span><br><span class="line">            <span class="keyword">if</span> (outDegree[i] == <span class="number">1</span>) dq.addLast(i);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">while</span> (!dq.isEmpty()) {</span><br><span class="line">            <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> dq.size();</span><br><span class="line">            res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++) {</span><br><span class="line">                <span class="type">int</span> <span class="variable">cur</span> <span class="operator">=</span> dq.pollFirst();</span><br><span class="line">                res.add(cur);</span><br><span class="line">                List&lt;Integer&gt; neighbors = graph.get(cur);</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> neighbor : neighbors) {</span><br><span class="line">                    outDegree[neighbor]--;</span><br><span class="line">                    <span class="keyword">if</span> (outDegree[neighbor] == <span class="number">1</span>) dq.addLast(neighbor);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            </span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>建表：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">buildGraph</span><span class="params">(<span class="type">int</span> n)</span> {</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">        graph.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;());</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> from, <span class="type">int</span> to)</span> {</span><br><span class="line">    graph.get(from).add(to);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="417-太平洋大西洋水流问题"><a href="#417-太平洋大西洋水流问题" class="headerlink" title="417.太平洋大西洋水流问题"></a><a href="https://leetcode.cn/problems/pacific-atlantic-water-flow/description/">417.太平洋大西洋水流问题</a></h2><p>从边出发，水往高处流</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="type">int</span>[] dx = <span class="keyword">new</span> <span class="title class_">int</span>[] {-<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>};</span><br><span class="line">    <span class="type">int</span>[] dy = <span class="keyword">new</span> <span class="title class_">int</span>[] {<span class="number">0</span>, -<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>};</span><br><span class="line">    <span class="type">int</span>[][] graph;</span><br><span class="line">    <span class="type">int</span> m, n;</span><br><span class="line">    <span class="type">boolean</span>[][] visited;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">pacificAtlantic</span><span class="params">(<span class="type">int</span>[][] heights)</span> {</span><br><span class="line">        graph = heights;</span><br><span class="line">        m = heights.length;</span><br><span class="line">        n = heights[<span class="number">0</span>].length;</span><br><span class="line">        Deque&lt;<span class="type">int</span>[]&gt; dqPacific = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        Deque&lt;<span class="type">int</span>[]&gt; dqAtlantic = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        <span class="type">boolean</span>[][] flushSucceedPacific = <span class="keyword">new</span> <span class="title class_">boolean</span>[m][n];</span><br><span class="line">        <span class="type">boolean</span>[][] flushSucceedAtlantic = <span class="keyword">new</span> <span class="title class_">boolean</span>[m][n];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) {</span><br><span class="line">                <span class="keyword">if</span> (i == <span class="number">0</span> || j == <span class="number">0</span>) {</span><br><span class="line">                    dqPacific.add(<span class="keyword">new</span> <span class="title class_">int</span>[]{i, j});</span><br><span class="line">                    flushSucceedPacific[i][j] = <span class="literal">true</span>;    </span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">if</span> (i == m - <span class="number">1</span> || j == n - <span class="number">1</span>) {</span><br><span class="line">                    dqAtlantic.add(<span class="keyword">new</span> <span class="title class_">int</span>[] {i, j});</span><br><span class="line">                    flushSucceedAtlantic[i][j] = <span class="literal">true</span>;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        visited = <span class="keyword">new</span> <span class="title class_">boolean</span>[m][n];</span><br><span class="line">        bfs(dqPacific, flushSucceedPacific);</span><br><span class="line">        visited = <span class="keyword">new</span> <span class="title class_">boolean</span>[m][n];</span><br><span class="line">        bfs(dqAtlantic, flushSucceedAtlantic);</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; ret = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) {</span><br><span class="line">                <span class="keyword">if</span> (flushSucceedPacific[i][j] &amp;&amp; flushSucceedAtlantic[i][j]) {</span><br><span class="line">                    List&lt;Integer&gt; dir = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">                    dir.add(i);</span><br><span class="line">                    dir.add(j);</span><br><span class="line">                    ret.add(dir);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">bfs</span><span class="params">(Deque&lt;<span class="type">int</span>[]&gt; dq, <span class="type">boolean</span>[][] res)</span> {</span><br><span class="line">        <span class="keyword">while</span> (!dq.isEmpty()) {</span><br><span class="line">            <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> dq.size();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++) {</span><br><span class="line">                <span class="type">int</span>[] cur = dq.pollFirst();</span><br><span class="line">                <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> cur[<span class="number">0</span>], y = cur[<span class="number">1</span>];</span><br><span class="line">                <span class="type">int</span> <span class="variable">curHeight</span> <span class="operator">=</span> graph[x][y];</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">dir</span> <span class="operator">=</span> <span class="number">0</span>; dir &lt; <span class="number">4</span>; dir++) {</span><br><span class="line">                    <span class="type">int</span> <span class="variable">newX</span> <span class="operator">=</span> x + dx[dir], newY = y + dy[dir];</span><br><span class="line">                    <span class="keyword">if</span> (newX &lt; <span class="number">0</span> || newX &gt;= m || newY &lt; <span class="number">0</span> || newY &gt;= n) <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">if</span> (visited[newX][newY]) <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">newHeight</span> <span class="operator">=</span> graph[newX][newY];</span><br><span class="line">                    <span class="keyword">if</span> (curHeight &gt; newHeight) <span class="keyword">continue</span>;</span><br><span class="line">                    dq.addLast(<span class="keyword">new</span> <span class="title class_">int</span>[] {newX, newY});</span><br><span class="line">                    visited[newX][newY] = <span class="literal">true</span>;</span><br><span class="line">                    res[newX][newY] = <span class="literal">true</span>;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="1197-进击的骑士"><a href="#1197-进击的骑士" class="headerlink" title="1197.进击的骑士"></a><a href="https://leetcode.cn/problems/minimum-knight-moves/description/">1197.进击的骑士</a></h2><p>这是一道数学取巧题：</p><p>由于范围：<br><code>0 &lt;= |x| + |y| &lt;= 300</code></p><p>因此我们得知：</p><p><img src="/2023/05/10/%E5%9B%BE%E8%AE%BA/1197_%E6%95%B0%E6%8D%AE%E8%8C%83%E5%9B%B41.png" alt="1197_数据范围1"></p><p>转换一下使得其适合从0开始的索引：<br><img src="/2023/05/10/%E5%9B%BE%E8%AE%BA/1197_%E6%95%B0%E6%8D%AE%E8%8C%83%E5%9B%B42.png" alt="1197_数据范围2"></p><p>同时，为了避免目标(x,y)刚好在边界，我们往外再扩大成最右上角为 (666,666) 这是由于 我们 要的是 <code>移动次数</code> 所以不需要想坐标转换</p><p>直接贴一个别人的做法：</p><blockquote><p><a href="https://leetcode.cn/problems/minimum-knight-moves/solutions/388183/1197-jin-ji-de-qi-shi-by-klb/">K.L.B 解法</a></p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">        <span class="comment">// 八个方向</span></span><br><span class="line">    <span class="type">int</span>[][] dirs = <span class="keyword">new</span> <span class="title class_">int</span>[][]{</span><br><span class="line">            {<span class="number">1</span>, <span class="number">2</span>}, {<span class="number">2</span>, <span class="number">1</span>}, {<span class="number">2</span>, -<span class="number">1</span>}, {<span class="number">1</span>, -<span class="number">2</span>}, {-<span class="number">1</span>, -<span class="number">2</span>}, {-<span class="number">2</span>, -<span class="number">1</span>}, {-<span class="number">2</span>, <span class="number">1</span>}, {-<span class="number">1</span>, <span class="number">2</span>}</span><br><span class="line">    };</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minKnightMoves</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">dist</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">abs</span> <span class="operator">=</span> getMhdDist(<span class="number">0</span>, <span class="number">0</span>, x, y);   <span class="comment">// (0,0)到(x,y)的距离（横坐标之差加纵坐标之差）</span></span><br><span class="line">        <span class="comment">// 目标最远不超过 |x| + |y| &lt;= 300</span></span><br><span class="line">        <span class="comment">// 666 表示把 [-333, 333] 映射为 [0, 666]</span></span><br><span class="line">        <span class="type">boolean</span>[][] mark = <span class="keyword">new</span> <span class="title class_">boolean</span>[<span class="number">666</span>][<span class="number">666</span>];   <span class="comment">// 用于标记已走过的位置</span></span><br><span class="line">        Queue&lt;Node&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">Node</span> <span class="variable">curNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);   <span class="comment">// 起点，已走步数为 0</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">newNode</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        mark[<span class="number">333</span>][<span class="number">333</span>] = <span class="literal">true</span>;  <span class="comment">// 映射后的 (0,0)坐标</span></span><br><span class="line">        queue.add(curNode);</span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) {</span><br><span class="line">            curNode = queue.remove();</span><br><span class="line">            <span class="type">int</span> <span class="variable">curX</span> <span class="operator">=</span> curNode.x;</span><br><span class="line">            <span class="type">int</span> <span class="variable">curY</span> <span class="operator">=</span> curNode.y;</span><br><span class="line">            <span class="type">int</span> <span class="variable">curDist</span> <span class="operator">=</span> curNode.dist; <span class="comment">// 从 (0,0) 到 (curX,curY) 的已走步数</span></span><br><span class="line">            <span class="keyword">if</span> (curX == x &amp;&amp; curY == y) {</span><br><span class="line">                <span class="comment">// 当前点已在终点，返回已走步数</span></span><br><span class="line">                <span class="keyword">return</span> curDist;</span><br><span class="line">            }</span><br><span class="line">            <span class="type">int</span> <span class="variable">mhdist</span> <span class="operator">=</span> getMhdDist(curX, curY, x, y);  <span class="comment">// 剩余距离</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span>[] dir : dirs) {    <span class="comment">// 往八个方向走</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">newX</span> <span class="operator">=</span> curX + dir[<span class="number">0</span>];</span><br><span class="line">                <span class="type">int</span> <span class="variable">newY</span> <span class="operator">=</span> curY + dir[<span class="number">1</span>];</span><br><span class="line">                <span class="type">int</span> <span class="variable">nextDist</span> <span class="operator">=</span> curDist + <span class="number">1</span>; <span class="comment">// 新的步数等于已走步数加一</span></span><br><span class="line">                <span class="keyword">if</span> (mark[newX + <span class="number">333</span>][newY + <span class="number">333</span>]) {</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                }</span><br><span class="line">                <span class="comment">// 下一步走的方向一定是往目的地靠近</span></span><br><span class="line">                <span class="comment">// 即 getMhdDist(newX, newY, x, y) &lt; (curX, curY, x, y)</span></span><br><span class="line">                <span class="comment">// 而不是八个方向都走一遍</span></span><br><span class="line">                <span class="keyword">if</span> (mhdist &gt; getMhdDist(newX, newY, x, y) || abs &lt; <span class="number">4</span>) {</span><br><span class="line">                    newNode = <span class="keyword">new</span> <span class="title class_">Node</span>(newX, newY, nextDist);</span><br><span class="line">                    queue.add(newNode);</span><br><span class="line">                    mark[newX + <span class="number">333</span>][newY + <span class="number">333</span>] = <span class="literal">true</span>;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">getMhdDist</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j, <span class="type">int</span> x, <span class="type">int</span> y)</span> {</span><br><span class="line">        <span class="keyword">return</span> Math.abs(i - x) + Math.abs(j - y);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Node</span> {</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        <span class="type">int</span> y;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> dist;    <span class="comment">// (0,0)走到(x,y)的最少移动次数</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> dist)</span> {</span><br><span class="line">            <span class="built_in">this</span>.x = x;</span><br><span class="line">            <span class="built_in">this</span>.y = y;</span><br><span class="line">            <span class="built_in">this</span>.dist = dist;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">作者：K.L.B</span><br><span class="line">链接：https:<span class="comment">//leetcode.cn/problems/minimum-knight-moves/</span></span><br></pre></td></tr></tbody></table></figure><h2 id="1293-网格中的最短路径"><a href="#1293-网格中的最短路径" class="headerlink" title="1293. 网格中的最短路径"></a><a href="https://leetcode.cn/problems/shortest-path-in-a-grid-with-obstacles-elimination/">1293. 网格中的最短路径</a></h2><p>这道题复杂在需要开一个额外的维度来储存当前剩余的可以清空障碍的操作数量。不过剩下的就都是BFS了。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="type">int</span>[] dx = <span class="keyword">new</span> <span class="title class_">int</span>[]{-<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>};</span><br><span class="line">    <span class="type">int</span>[] dy = <span class="keyword">new</span> <span class="title class_">int</span>[]{<span class="number">0</span>, -<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>};</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">shortestPath</span><span class="params">(<span class="type">int</span>[][] grid, <span class="type">int</span> k)</span> {</span><br><span class="line">        Deque&lt;<span class="type">int</span>[]&gt; dq = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        dq.add(<span class="keyword">new</span> <span class="title class_">int</span>[]{<span class="number">0</span>, <span class="number">0</span>, k});</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> grid.length, n = grid[<span class="number">0</span>].length;</span><br><span class="line">      <span class="comment">// 这里的边界</span></span><br><span class="line">        <span class="keyword">if</span> ((m == <span class="number">1</span>) &amp;&amp; (n == <span class="number">1</span>)) {</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="type">int</span> <span class="variable">step</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        k = Math.min(k, m + n - <span class="number">3</span>);</span><br><span class="line">        <span class="comment">// 额外记录k的剩余情况的维度</span></span><br><span class="line">        <span class="type">boolean</span>[][][] visited = <span class="keyword">new</span> <span class="title class_">boolean</span>[m][n][k + <span class="number">1</span>];</span><br><span class="line">        visited[<span class="number">0</span>][<span class="number">0</span>][k] = <span class="literal">true</span>;</span><br><span class="line">      <span class="comment">// 边界</span></span><br><span class="line">        <span class="keyword">if</span> (k &gt;= m + n - <span class="number">3</span>){</span><br><span class="line">            <span class="keyword">return</span> m + n - <span class="number">2</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">while</span> (!dq.isEmpty()) {</span><br><span class="line">            <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> dq.size();</span><br><span class="line">            step++;</span><br><span class="line">            <span class="keyword">while</span> (size-- &gt; <span class="number">0</span>) {</span><br><span class="line">                <span class="type">int</span>[] cur = dq.pollFirst();</span><br><span class="line">                <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> cur[<span class="number">0</span>], y = cur[<span class="number">1</span>], kleft = cur[<span class="number">2</span>];</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) {</span><br><span class="line">                    <span class="type">int</span> <span class="variable">newX</span> <span class="operator">=</span> x + dx[i];</span><br><span class="line">                    <span class="type">int</span> <span class="variable">newY</span> <span class="operator">=</span> y + dy[i];</span><br><span class="line">                    <span class="keyword">if</span> (x == m - <span class="number">1</span> &amp;&amp; y == n - <span class="number">1</span>) {</span><br><span class="line">                        <span class="keyword">return</span> step;</span><br><span class="line">                    }</span><br><span class="line">                    <span class="keyword">if</span> (newX &gt;= <span class="number">0</span> &amp;&amp; newX &lt; m &amp;&amp; newY &gt;= <span class="number">0</span> &amp;&amp; newY &lt; n &amp;&amp; !visited[newX][newY][kleft]) {</span><br><span class="line">                        <span class="keyword">if</span> (grid[newX][newY] == <span class="number">1</span> &amp;&amp; kleft &gt; <span class="number">0</span>) {</span><br><span class="line">                            <span class="comment">// obstacle</span></span><br><span class="line">                            visited[newX][newY][kleft - <span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">                            dq.addLast(<span class="keyword">new</span> <span class="title class_">int</span>[]{newX, newY, kleft - <span class="number">1</span>});</span><br><span class="line">                        } <span class="keyword">else</span> <span class="keyword">if</span> (grid[newX][newY] == <span class="number">0</span>){</span><br><span class="line">                            visited[newX][newY][kleft] = <span class="literal">true</span>;</span><br><span class="line">                            dq.addLast(<span class="keyword">new</span> <span class="title class_">int</span>[]{newX, newY, kleft});</span><br><span class="line">                        }</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>拓扑序列</title>
      <link href="/2023/05/10/%E6%8B%93%E6%89%91%E5%BA%8F%E5%88%97/"/>
      <url>/2023/05/10/%E6%8B%93%E6%89%91%E5%BA%8F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>此教程参考 <a href="https://raelum.blog.csdn.net/article/details/129650604?ydreferer=aHR0cHM6Ly93d3cuYWN3aW5nLmNvbS8=">还不会拓扑排序？看这一篇就够了</a> 以及 <a href="https://www.acwing.com/video/280/">acwing 算法基础课 848</a></p></div> <h1 id="拓扑序列"><a href="#拓扑序列" class="headerlink" title="拓扑序列"></a>拓扑序列</h1><ol><li>一定得是有向图才（可能）会有拓扑序列</li><li>必须是由起点指向终点不能从后指向前</li><li>有向无环图一定存在拓扑序列<ol><li>DAG也被称为拓扑图</li></ol></li><li>度数：<ol><li>入度和出度<ol><li>入度：有多少条边指向自己</li><li>出度：有多少条边出去</li><li><img src="/2023/05/10/%E6%8B%93%E6%89%91%E5%BA%8F%E5%88%97/%E5%85%A5%E5%BA%A6%E5%92%8C%E5%87%BA%E5%BA%A6.png" alt="入度和出度"></li></ol></li></ol></li></ol><h2 id="如何求拓扑序列"><a href="#如何求拓扑序列" class="headerlink" title="如何求拓扑序列"></a>如何求拓扑序列</h2><ol><li>任何入度为0的都可以作为起点（当前最前面的位置）</li><li>BFS</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 入队 queue.add(入度为0的点)</span></span><br><span class="line">Queue.add(所有入度为<span class="number">0</span>的点)</span><br><span class="line"><span class="keyword">while</span> !queue.isEmpty() {</span><br><span class="line">  <span class="comment">// 拿出队头 t</span></span><br><span class="line">  <span class="comment">// 枚举对头 t 的所有出边 t -&gt; j</span></span><br><span class="line">  <span class="comment">// 删掉 t -&gt; j, j的入度 减1</span></span><br><span class="line">  <span class="comment">// if d[j] == 0; 此时j为新的入度为0的点，j 入队</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>如果图中有环，那么一定会有点无法入队；反之，所有点都会在queue中</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>拓扑排序其是一种有向无环图 (DAG) 的顶点排序方法，它将一个有向无环图的所有顶点排成一个线性序列，使得<strong>图中任意一条有向边的起点排在终点的前面</strong></p><table><thead><tr><th>课程编号</th><th>课程名称</th><th>先修课程</th></tr></thead><tbody><tr><td>1</td><td>高等数学</td><td>−</td></tr><tr><td>2</td><td>程序设计基础</td><td>−</td></tr><tr><td>3</td><td>离散数学</td><td>1, 2</td></tr><tr><td>4</td><td>数据结构</td><td>2, 3</td></tr><tr><td>5</td><td>高级语言程序设计</td><td>2</td></tr><tr><td>6</td><td>编译方法</td><td>4,5</td></tr><tr><td>7</td><td>操作系统</td><td>4,9</td></tr><tr><td>8</td><td>普通物理</td><td>1</td></tr><tr><td>9</td><td>计算机原理</td><td>8</td></tr></tbody></table><h1 id="2115-从给定原材料中找到所有可以做出的菜"><a href="#2115-从给定原材料中找到所有可以做出的菜" class="headerlink" title="2115. 从给定原材料中找到所有可以做出的菜"></a><a href="https://leetcode.cn/problems/find-all-possible-recipes-from-given-supplies/">2115. 从给定原材料中找到所有可以做出的菜</a></h1><p>这里使用了map建表</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    Map&lt;String, LinkedList&lt;String&gt;&gt; graph = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    Map&lt;String, Integer&gt; inDegree = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">findAllRecipes</span><span class="params">(String[] recipes, List&lt;List&lt;String&gt;&gt; ingredients, String[] supplies)</span> {</span><br><span class="line">        <span class="comment">// 本质上是一个拓扑序问题，因为你要有原材料才能做东西</span></span><br><span class="line">        <span class="comment">// 建一条有向边从材料到菜</span></span><br><span class="line">        n = recipes.length;</span><br><span class="line">        List&lt;String&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">            <span class="type">String</span> <span class="variable">recipe</span> <span class="operator">=</span> recipes[i];</span><br><span class="line">            <span class="keyword">for</span> (String ingredient : ingredients.get(i)) {</span><br><span class="line">                add(ingredient, recipe);</span><br><span class="line">                <span class="keyword">if</span> (!inDegree.containsKey(ingredient)) {</span><br><span class="line">                    inDegree.put(ingredient, <span class="number">0</span>);</span><br><span class="line">                }</span><br><span class="line">                updateInDegree(recipe);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (!graph.containsKey(recipe)) {</span><br><span class="line">                graph.put(recipe, <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;());</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// System.out.println(graph);</span></span><br><span class="line">        <span class="comment">// System.out.println(inDegree);</span></span><br><span class="line"></span><br><span class="line">        Deque&lt;String&gt; dq = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String k : supplies) {</span><br><span class="line">            <span class="keyword">if</span> (!inDegree.containsKey(k)) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (inDegree.get(k) == <span class="number">0</span>) {</span><br><span class="line">                dq.addLast(k);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// System.out.println(dq);</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!dq.isEmpty()) {</span><br><span class="line">            <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> dq.size();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++) {</span><br><span class="line">                <span class="type">String</span> <span class="variable">curRecipe</span> <span class="operator">=</span> dq.pollFirst();</span><br><span class="line">                <span class="comment">// System.out.println(curRecipe);</span></span><br><span class="line">                List&lt;String&gt; neighbors = adj(curRecipe);</span><br><span class="line">                <span class="keyword">for</span> (String neighbor : neighbors) {</span><br><span class="line">                    <span class="type">int</span> <span class="variable">curIndegree</span> <span class="operator">=</span> inDegree.get(neighbor) - <span class="number">1</span>;</span><br><span class="line">                    inDegree.put(neighbor, curIndegree);</span><br><span class="line">                    <span class="keyword">if</span> (curIndegree == <span class="number">0</span>) {</span><br><span class="line">                        dq.addLast(neighbor);</span><br><span class="line">                        res.add(neighbor);</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(String from, String to)</span> {</span><br><span class="line">        LinkedList&lt;String&gt; cur = graph.getOrDefault(from, <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;());</span><br><span class="line">        cur.addLast(to);</span><br><span class="line">        graph.put(from, cur);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">updateInDegree</span><span class="params">(String to)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">cur</span> <span class="operator">=</span> inDegree.getOrDefault(to, <span class="number">0</span>);</span><br><span class="line">        inDegree.put(to, cur + <span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; <span class="title function_">adj</span><span class="params">(String cur)</span> {</span><br><span class="line">        <span class="keyword">return</span> graph.get(cur);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="210-课程表-II"><a href="#210-课程表-II" class="headerlink" title="210. 课程表 II"></a><a href="https://leetcode.cn/problems/course-schedule-ii/">210. 课程表 II</a></h1><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="type">int</span>[] inDegree;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] findOrder(<span class="type">int</span> numCourses, <span class="type">int</span>[][] prerequisites) {</span><br><span class="line">        List&lt;Integer&gt; path = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        inDegree = <span class="keyword">new</span> <span class="title class_">int</span>[numCourses];</span><br><span class="line">        Deque&lt;Integer&gt; dq = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; graph = buildGraph(numCourses, prerequisites);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; numCourses; i++) {</span><br><span class="line">            <span class="keyword">if</span> (inDegree[i] == <span class="number">0</span>) dq.addLast(i);</span><br><span class="line">        }</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (!dq.isEmpty()) {</span><br><span class="line">            <span class="type">int</span> <span class="variable">cur</span> <span class="operator">=</span> dq.pollFirst();</span><br><span class="line">            path.add(cur);</span><br><span class="line">            count++;</span><br><span class="line">            List&lt;Integer&gt; neighbors = adj(graph, cur);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> next : neighbors) {</span><br><span class="line">                inDegree[next]--;</span><br><span class="line">                <span class="keyword">if</span> (inDegree[next] == <span class="number">0</span>) dq.addLast(next);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (count == numCourses) {</span><br><span class="line">            <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[numCourses];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; path.size(); i++) {</span><br><span class="line">                res[i] = path.get(i);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">0</span>];</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">private</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">buildGraph</span><span class="params">(<span class="type">int</span> numCourses, <span class="type">int</span>[][] prerequisites)</span> {</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; graph = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; numCourses; i++) {</span><br><span class="line">            graph.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; prerequisites.length; i++) {</span><br><span class="line">            <span class="type">int</span> <span class="variable">from</span> <span class="operator">=</span> prerequisites[i][<span class="number">1</span>], to = prerequisites[i][<span class="number">0</span>];</span><br><span class="line">            add(graph, from, to);</span><br><span class="line">            inDegree[prerequisites[i][<span class="number">0</span>]]++;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> graph;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; graph, <span class="type">int</span> a, <span class="type">int</span> b)</span> {</span><br><span class="line">        graph.get(a).add(b);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">private</span> List&lt;Integer&gt; <span class="title function_">adj</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; graph, <span class="type">int</span> cur)</span> {</span><br><span class="line">        <span class="keyword">return</span> graph.get(cur);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> 拓扑序列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回溯之集合划分问题</title>
      <link href="/2023/05/09/%E5%9B%9E%E6%BA%AF%E4%B9%8B%E9%9B%86%E5%90%88%E5%88%92%E5%88%86%E9%97%AE%E9%A2%98/"/>
      <url>/2023/05/09/%E5%9B%9E%E6%BA%AF%E4%B9%8B%E9%9B%86%E5%90%88%E5%88%92%E5%88%86%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="698-划分为k个相等的子集"><a href="#698-划分为k个相等的子集" class="headerlink" title="698. 划分为k个相等的子集"></a><a href="https://leetcode.cn/problems/partition-to-k-equal-sum-subsets/">698. 划分为k个相等的子集</a></h1>]]></content>
      
      
      <categories>
          
          <category> Algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 回溯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回溯之排列-组合-子集问题</title>
      <link href="/2023/05/09/%E5%9B%9E%E6%BA%AF%E4%B9%8B%E6%8E%92%E5%88%97-%E7%BB%84%E5%90%88-%E5%AD%90%E9%9B%86%E9%97%AE%E9%A2%98/"/>
      <url>/2023/05/09/%E5%9B%9E%E6%BA%AF%E4%B9%8B%E6%8E%92%E5%88%97-%E7%BB%84%E5%90%88-%E5%AD%90%E9%9B%86%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h1><p>这类问题一般就是说 从 <strong>序列</strong> <code>nums</code> 中 <strong>以给定规则取若干元素</strong> 有如下几种变体：</p><ol><li>元素<strong>无重不可复选</strong>，即 <code>nums</code> 中的元素都是唯一的，每个元素最多只能被使用一次，这也是<strong>最基本</strong>的形式<ol><li>以组合为例，如果输入 <code>nums = [2,3,6,7]</code>，和为 7 的组合应该只有 <code>[7]</code>。</li></ol></li><li><strong>元素可重不可复选</strong>，即 <code>nums</code> 中的元素可以<strong>存在重复</strong>，每个元素最多只能被使用一次。<ol><li>以组合为例，如果输入 <code>nums = [2,5,2,1,2]</code>，和为 7 的组合应该有两种 <code>[2,2,2,1]</code> 和 <code>[5,2]</code>。</li></ol></li><li><strong>元素无重可复选</strong>，即 <code>nums</code> 中的<strong>元素都是唯一</strong>的，每个元素可以被<strong>使用若干次</strong>。<ol><li>以组合为例，如果输入 <code>nums = [2,3,6,7]</code>，和为 7 的组合应该有两种 <code>[2,2,3]</code> 和 <code>[7]</code>。</li></ol></li></ol><p>PS: 也可以说有第四种形式，即<strong>元素可重可复选</strong>。但既然元素可复选，那又<strong>何必存在重复元素</strong>呢？元素去重之后就等同于形式三，所以这种情况不用考虑。</p><p>排列、组合、子集问题都可以有这三种基本形式，所以共有 9 种变化。但无论形式怎么变化，其本质就是<strong>穷举所有解</strong>，而这些解呈现树形结构，所以合理使用回溯算法框架，稍改代码框架即可把这些问题一网打尽。</p><p><img src="/2023/05/09/%E5%9B%9E%E6%BA%AF%E4%B9%8B%E6%8E%92%E5%88%97-%E7%BB%84%E5%90%88-%E5%AD%90%E9%9B%86%E9%97%AE%E9%A2%98/%E5%9B%9E%E6%BA%AF%E7%BB%84%E5%90%88_%E5%AD%90%E9%9B%86%E6%A0%91.jpeg" alt="回溯组合_子集树"></p><p><img src="/2023/05/09/%E5%9B%9E%E6%BA%AF%E4%B9%8B%E6%8E%92%E5%88%97-%E7%BB%84%E5%90%88-%E5%AD%90%E9%9B%86%E9%97%AE%E9%A2%98/%E5%9B%9E%E6%BA%AF%E6%8E%92%E5%88%97%E6%A0%91.jpeg" alt="回溯排列树"></p><h1 id="元素无重不可复选"><a href="#元素无重不可复选" class="headerlink" title="元素无重不可复选"></a>元素无重不可复选</h1><h2 id="78-子集"><a href="#78-子集" class="headerlink" title="78. 子集"></a><a href="https://leetcode.cn/problems/subsets/">78. 子集</a></h2><p><img src="/2023/05/09/%E5%9B%9E%E6%BA%AF%E4%B9%8B%E6%8E%92%E5%88%97-%E7%BB%84%E5%90%88-%E5%AD%90%E9%9B%86%E9%97%AE%E9%A2%98/lc78%E5%AD%90%E9%9B%86.jpeg" alt="lc78子集"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    LinkedList&lt;Integer&gt; path = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">subsets</span><span class="params">(<span class="type">int</span>[] nums)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">startIdx</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        backtracking(nums, startIdx);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> startIdx)</span> {</span><br><span class="line">      <span class="comment">// 直接将路径加入答案中</span></span><br><span class="line">        res.add(<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;(path));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> startIdx; i &lt; nums.length; i++) {</span><br><span class="line">            <span class="type">int</span> <span class="variable">cur</span> <span class="operator">=</span> nums[i];</span><br><span class="line">            path.add(cur);</span><br><span class="line">            backtracking(nums, i + <span class="number">1</span>);</span><br><span class="line">            path.removeLast();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="77-组合"><a href="#77-组合" class="headerlink" title="77. 组合"></a><a href="https://leetcode.cn/problems/combinations/">77. 组合</a></h2><p><img src="/2023/05/09/%E5%9B%9E%E6%BA%AF%E4%B9%8B%E6%8E%92%E5%88%97-%E7%BB%84%E5%90%88-%E5%AD%90%E9%9B%86%E9%97%AE%E9%A2%98/lc77_%E7%BB%84%E5%90%88_%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95.jpg" alt="lc77_组合_代码随想录"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combine</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k)</span> {</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; paths = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        List&lt;Integer&gt; path = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        backtracking(idx, paths, path, n, k);</span><br><span class="line">        <span class="keyword">return</span> paths;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(<span class="type">int</span> idx, List&lt;List&lt;Integer&gt;&gt; paths, List&lt;Integer&gt; path, <span class="type">int</span> n, <span class="type">int</span> k)</span> {</span><br><span class="line">        <span class="keyword">if</span> (path.size() == k) {</span><br><span class="line">            paths.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(path));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> idx; i &lt;= n; i++) {</span><br><span class="line">            path.add(i);</span><br><span class="line">            backtracking(i + <span class="number">1</span>, paths, path, n, k);</span><br><span class="line">            path.remove(path.size() - <span class="number">1</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="剪枝-（只需要当元素不够时剪掉即可）-gt-n-k-path-size-1"><a href="#剪枝-（只需要当元素不够时剪掉即可）-gt-n-k-path-size-1" class="headerlink" title="剪枝 （只需要当元素不够时剪掉即可）-> n - (k - path.size()) + 1"></a>剪枝 （只需要当元素不够时剪掉即可）-&gt; n - (k - path.size()) + 1</h3><p>当所需要的元素 &gt; 可选选项可以提供的元素时，我们就无需再往后面进行计算了，直接剪掉</p><p><img src="/2023/05/09/%E5%9B%9E%E6%BA%AF%E4%B9%8B%E6%8E%92%E5%88%97-%E7%BB%84%E5%90%88-%E5%AD%90%E9%9B%86%E9%97%AE%E9%A2%98/%E7%BB%84%E5%90%88%E2%80%94%E5%89%AA%E6%9E%9D.png" alt="组合—剪枝"></p><p>优化过程如下：</p><ol><li>已经选择的元素个数：path.size();</li><li>所需需要的元素个数为: k - path.size();</li><li>列表中剩余元素（n-i） &gt;= 所需需要的元素个数（k - path.size()）</li><li>在集合n中至多要从该起始位置 : i &lt;= n - (k - path.size()) + 1，开始遍历</li></ol><p>为什么有个+1呢，因为包括起始位置，我们要是一个左闭的集合。</p><p>举个例子，n = 4，k = 3， 目前已经选取的元素为0（path.size为0），n - (k - 0) + 1 即 4 - ( 3 - 0) + 1 = 2。</p><p>从2开始搜索都是合理的，可以是组合[2, 3, 4]。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combine</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k)</span> {</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; paths = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        List&lt;Integer&gt; path = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        backtracking(idx, paths, path, n, k);</span><br><span class="line">        <span class="keyword">return</span> paths;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(<span class="type">int</span> idx, List&lt;List&lt;Integer&gt;&gt; paths, List&lt;Integer&gt; path, <span class="type">int</span> n, <span class="type">int</span> k)</span> {</span><br><span class="line">        <span class="keyword">if</span> (path.size() == k) {</span><br><span class="line">            paths.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(path));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> idx; i &lt;= n - (k - path.size()) + <span class="number">1</span>; i++) {</span><br><span class="line">            path.add(i);</span><br><span class="line">            backtracking(i + <span class="number">1</span>, paths, path, n, k);</span><br><span class="line">            path.remove(path.size() - <span class="number">1</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="46-全排列"><a href="#46-全排列" class="headerlink" title="46. 全排列"></a><a href="https://leetcode.cn/problems/permutations/">46. 全排列</a></h2><p><img src="/2023/05/09/%E5%9B%9E%E6%BA%AF%E4%B9%8B%E6%8E%92%E5%88%97-%E7%BB%84%E5%90%88-%E5%AD%90%E9%9B%86%E9%97%AE%E9%A2%98/%E5%85%A8%E6%8E%92%E5%88%97-%E8%B7%AF%E5%BE%84.jpeg" alt="全排列-路径"></p><p><strong><code>[2]</code> 就是「路径」，记录你已经做过的选择；</strong></p><p><strong><code>[1,3]</code> 就是「选择列表」，表示你当前可以做出的选择；</strong></p><p><strong>「结束条件」就是遍历到树的底层叶子节点，这里也就是选择列表为空的时候</strong>。</p><p><img src="/2023/05/09/%E5%9B%9E%E6%BA%AF%E4%B9%8B%E6%8E%92%E5%88%97-%E7%BB%84%E5%90%88-%E5%AD%90%E9%9B%86%E9%97%AE%E9%A2%98/%E5%85%A8%E6%8E%92%E5%88%97-%E5%81%9A%E9%80%89%E6%8B%A9.jpeg" alt="全排列-做选择"></p><p><img src="/2023/05/09/%E5%9B%9E%E6%BA%AF%E4%B9%8B%E6%8E%92%E5%88%97-%E7%BB%84%E5%90%88-%E5%AD%90%E9%9B%86%E9%97%AE%E9%A2%98/lc46_%E5%85%A8%E6%8E%92%E5%88%97.jpeg" alt="lc46_全排列"></p><p>全排列和上边的组合和子集不同的是，我们需要左边的元素，因此不能用<code>startIdx</code>来避免掉重复元素，并且我们<strong>不能</strong>重复选择一个元素，那么我们就需要一个额外的数据结构来跟踪哪些值是被用过了</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    LinkedList&lt;Integer&gt; path = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    Set&lt;Integer&gt; visited = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">permute</span><span class="params">(<span class="type">int</span>[] nums)</span> {</span><br><span class="line">        backtracking(nums);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(<span class="type">int</span>[] nums)</span> {</span><br><span class="line">        <span class="keyword">if</span> (path.size() == nums.length) {</span><br><span class="line">            res.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(path));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) {</span><br><span class="line">            <span class="keyword">if</span> (visited.contains(nums[i])) <span class="keyword">continue</span>;</span><br><span class="line">            path.add(nums[i]);</span><br><span class="line">            visited.add(nums[i]);</span><br><span class="line">            backtracking(nums);</span><br><span class="line">            path.removeLast();</span><br><span class="line">            visited.remove(nums[i]);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>注意hashset在这里是有局限性的因为这道题的元素不重复因此可以用hashset，但应该用<code>boolean visited[]</code>更通用一些：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line"></span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    LinkedList&lt;Integer&gt; track = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">boolean</span>[] used;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">permuteUnique</span><span class="params">(<span class="type">int</span>[] nums)</span> {</span><br><span class="line">        used = <span class="keyword">new</span> <span class="title class_">boolean</span>[nums.length];</span><br><span class="line">        backtrack(nums);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">backtrack</span><span class="params">(<span class="type">int</span>[] nums)</span> {</span><br><span class="line">        <span class="keyword">if</span> (track.size() == nums.length) {</span><br><span class="line">            res.add(<span class="keyword">new</span> <span class="title class_">LinkedList</span>(track));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) {</span><br><span class="line">            <span class="keyword">if</span> (used[i]) {</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            }</span><br><span class="line">            track.add(nums[i]);</span><br><span class="line">            used[i] = <span class="literal">true</span>;</span><br><span class="line">            backtrack(nums);</span><br><span class="line">            track.removeLast();</span><br><span class="line">            used[i] = <span class="literal">false</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="子集-还是-组合："><a href="#子集-还是-组合：" class="headerlink" title="子集 还是 组合："></a>子集 还是 组合：</h3><p>要求大小为 2 的所有组合，就是所有大小为 2 的子集</p><p>所以 <strong>组合和子集是一样的：大小为 <code>k</code> 的组合就是大小为 <code>k</code> 的子集</strong>。</p><p>比如：</p><p>LC77：给定两个整数 <code>n</code> 和 <code>k</code>，返回范围 <code>[1, n]</code> 中所有可能的 <code>k</code> 个数的组合。</p><p>就是：</p><p>给你输入一个数组 <code>nums = [1,2..,n]</code> 和一个正整数 <code>k</code>，请你生成所有大小为 <code>k</code> 的子集。</p><p>也就是LC78：给你一个整数数组 <code>nums</code> ，数组中的元素 <strong>互不相同</strong> 。返回该数组所有可能的子集（幂集）。</p><p>这个组合和子集的唯一区别就是我们现在只需要输出第k层的记过，而不是在前序位置每条路径都加入</p><p><img src="/2023/05/09/%E5%9B%9E%E6%BA%AF%E4%B9%8B%E6%8E%92%E5%88%97-%E7%BB%84%E5%90%88-%E5%AD%90%E9%9B%86%E9%97%AE%E9%A2%98/LC77_%E7%BB%84%E5%90%88_labuladong.jpeg" alt="LC77_组合_labuladong"></p><h3 id="全排列的index："><a href="#全排列的index：" class="headerlink" title="全排列的index："></a>全排列的index：</h3><p>排列问题本身就是让你穷举元素的位置，<code>nums[i]</code> 之后也可以出现 <code>nums[i]</code> 左边的元素，所以之前的那一套使用 <code>startIndex</code> 的就不行了，需要额外使用 <code>used</code> 数组或者<code>hashSet</code>来标记哪些元素还可以被选择。</p><p>如果题目不让你算全排列，而是让你算元素个数为 <code>k</code> 的排列，怎么算？也很简单，改下 <code>backtrack</code> 函数的 base case，仅收集第 <code>k</code> 层的节点值即可：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 回溯算法核心函数</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">backtrack</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> {</span><br><span class="line">    <span class="comment">// base case，到达第 k 层，收集节点的值</span></span><br><span class="line">    <span class="keyword">if</span> (track.size() == k) {</span><br><span class="line">        <span class="comment">// 第 k 层节点的值就是大小为 k 的排列</span></span><br><span class="line">        res.add(<span class="keyword">new</span> <span class="title class_">LinkedList</span>(track));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 回溯算法标准框架</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) {</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        backtrack(nums, k);</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="元素可重不可复选"><a href="#元素可重不可复选" class="headerlink" title="元素可重不可复选"></a>元素可重不可复选</h1><h2 id="90-子集-II"><a href="#90-子集-II" class="headerlink" title="90. 子集 II"></a><a href="https://leetcode.cn/problems/subsets-ii/">90. 子集 II</a></h2><p><img src="/2023/05/09/%E5%9B%9E%E6%BA%AF%E4%B9%8B%E6%8E%92%E5%88%97-%E7%BB%84%E5%90%88-%E5%AD%90%E9%9B%86%E9%97%AE%E9%A2%98/lc90_subset2_tree.jpeg" alt="lc90_subset2_tree"></p><p>如图中所示，我们可以看到的是，同一层的相邻元素如果相同，我们就不需要再处理。</p><p>为了保证相邻元素是相同的我们就需要用一个sort</p><p>综上我们有：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    LinkedList&lt;Integer&gt; path = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">subsetsWithDup</span><span class="params">(<span class="type">int</span>[] nums)</span> {</span><br><span class="line">      <span class="comment">// 排序来保证相邻元素一定是相同的（如果有的话）</span></span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        backtracking(nums, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> startIdx)</span> {</span><br><span class="line">        res.add(<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;(path));</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> startIdx; i &lt; nums.length; i++) {</span><br><span class="line">            <span class="comment">// 注意这里的剪枝逻辑</span></span><br><span class="line">            <span class="keyword">if</span> (i &gt; startIdx &amp;&amp; nums[i] == nums[i - <span class="number">1</span>]) {</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            }</span><br><span class="line">            path.addLast(nums[i]);</span><br><span class="line">            backtracking(nums, i + <span class="number">1</span>);</span><br><span class="line">            path.removeLast();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="40-组合总和-II"><a href="#40-组合总和-II" class="headerlink" title="40. 组合总和 II"></a><a href="https://leetcode.cn/problems/combination-sum-ii/">40. 组合总和 II</a></h2><p>子集问题就是组合的一种问题</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line"></span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    LinkedList&lt;Integer&gt; path = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span> <span class="variable">curSum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combinationSum2</span><span class="params">(<span class="type">int</span>[] candidates, <span class="type">int</span> target)</span> {</span><br><span class="line">        Arrays.sort(candidates);</span><br><span class="line">        backtracking(candidates, target, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(<span class="type">int</span>[] candidates, <span class="type">int</span> target, <span class="type">int</span> startIdx)</span> {</span><br><span class="line">        <span class="keyword">if</span> (curSum == target) {</span><br><span class="line">            res.add(<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;(path));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 进行额外的剪枝，否则会超时</span></span><br><span class="line">        <span class="keyword">if</span> (curSum &gt; target) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> startIdx; i &lt; candidates.length; i++) {</span><br><span class="line">            <span class="keyword">if</span> (i &gt; startIdx &amp;&amp; candidates[i] == candidates[i - <span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">            curSum += candidates[i];</span><br><span class="line">            path.add(candidates[i]);</span><br><span class="line">            backtracking(candidates, target, i + <span class="number">1</span>);</span><br><span class="line">            path.removeLast();</span><br><span class="line">            curSum -= candidates[i];</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="47-全排列-II"><a href="#47-全排列-II" class="headerlink" title="47. 全排列 II"></a><a href="https://leetcode.cn/problems/permutations-ii/">47. 全排列 II</a></h2><ol><li>用used数组来跟踪哪些数在<strong>递归（向下生长时）</strong>被用过，从而避免重复</li><li><code>i &gt; 0 &amp;&amp; nums[i - 1] == nums[i] &amp;&amp; !used[i - 1]</code><ol><li>主要是用来判断当前的数和之前是否相同，如果相同且之前在<strong>同一层</strong>时候处理过，那么我们不需要再处理一遍，跳过即可</li><li>其实核心就是 <strong>保证相同元素在排列中的相对位置保持不变</strong>。</li><li>效果： <strong>当出现重复元素时，比如输入 <code>nums = [1,2,2',2'']</code>，<code>2'</code> 只有在 <code>2</code> 已经被使用的情况下才会被选择，同理，<code>2''</code> 只有在 <code>2'</code> 已经被使用的情况下才会被选择，这就保证了相同元素在排列中的相对位置保证固定</strong>。</li></ol></li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    LinkedList&lt;Integer&gt; path = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">boolean</span>[] used;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">permuteUnique</span><span class="params">(<span class="type">int</span>[] nums)</span> {</span><br><span class="line">        used = <span class="keyword">new</span> <span class="title class_">boolean</span>[nums.length];</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        backtracking(nums);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(<span class="type">int</span>[] nums)</span> {</span><br><span class="line">        <span class="keyword">if</span> (nums.length == path.size()) {</span><br><span class="line">            res.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(path));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) {</span><br><span class="line">            <span class="keyword">if</span> (used[i]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i - <span class="number">1</span>] == nums[i] &amp;&amp; !used[i - <span class="number">1</span>]) {</span><br><span class="line">                <span class="comment">// 这里的 nums[i - 1] == nums[i] &amp;&amp; !used[i - 1]</span></span><br><span class="line">                <span class="comment">// 主要是为了说明现在出现了一个新的和之前一样的数，那么由于之前已经计算过，现在已经不需要重复算了</span></span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            }</span><br><span class="line">            path.addLast(nums[i]);</span><br><span class="line">            used[i] = <span class="literal">true</span>;</span><br><span class="line">            backtracking(nums);</span><br><span class="line">            path.removeLast();</span><br><span class="line">            used[i] = <span class="literal">false</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="元素无重可复选"><a href="#元素无重可复选" class="headerlink" title="元素无重可复选"></a>元素无重可复选</h1><h2 id="39-组合总和"><a href="#39-组合总和" class="headerlink" title="39. 组合总和"></a><a href="https://leetcode.cn/problems/combination-sum/">39. 组合总和</a></h2><p>对于之前的解法我们是 <code>startIdx</code> 每一次传入<code>i + 1</code> 那么下一层回溯树就是从 <code>i + 1</code> 开始，从而保证当前元素不会被重复使用：</p><p><img src="/2023/05/09/%E5%9B%9E%E6%BA%AF%E4%B9%8B%E6%8E%92%E5%88%97-%E7%BB%84%E5%90%88-%E5%AD%90%E9%9B%86%E9%97%AE%E9%A2%98/lc_%E5%AD%90%E9%9B%86%E4%B8%8D%E5%8F%AF%E9%87%8D%E5%A4%8D.jpeg" alt="lc_子集不可重复"></p><p>对于本题来说，其实就是修改了<code>startIdx</code> 之前是 <code>i + 1</code> 现在是 <code>i</code></p><p>相当于给之前的回溯树添加了一条树枝，在遍历这棵树的过程中，一个元素可以被无限次使用：</p><p><img src="/2023/05/09/%E5%9B%9E%E6%BA%AF%E4%B9%8B%E6%8E%92%E5%88%97-%E7%BB%84%E5%90%88-%E5%AD%90%E9%9B%86%E9%97%AE%E9%A2%98/lc39_tree.jpeg" alt="lc39_tree"></p><p>⚠️ 需要注意的是，这样会导致树无限生长，因此我们还需要额外的base case 来结束递归: <code>if (curSum &gt; target) return;</code> 即路径和大于 <code>target</code> 时就没必要再遍历下去了。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    LinkedList&lt;Integer&gt; path = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span> <span class="variable">curSum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combinationSum</span><span class="params">(<span class="type">int</span>[] candidates, <span class="type">int</span> target)</span> {</span><br><span class="line">        backtracking(candidates, target, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(<span class="type">int</span>[] candidates, <span class="type">int</span> target, <span class="type">int</span> startIdx)</span> {</span><br><span class="line">        <span class="keyword">if</span> (curSum == target) {</span><br><span class="line">            res.add(<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;(path));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (curSum &gt; target) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> startIdx; i &lt; candidates.length; i++) {</span><br><span class="line">            curSum += candidates[i];</span><br><span class="line">            path.addLast(candidates[i]);</span><br><span class="line">            backtracking(candidates, target, i);</span><br><span class="line">            curSum -= candidates[i];</span><br><span class="line">            path.removeLast();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="排列"><a href="#排列" class="headerlink" title="排列"></a>排列</h2><p>力扣上没有类似的题目，我们不妨先想一下，<code>nums</code> 数组中的元素无重复且可复选的情况下，会有哪些排列？</p><p>比如输入 <code>nums = [1,2,3]</code>，那么这种条件下的全排列共有 3^3 = 27 种：</p><p>标准的全排列算法利用 <code>used</code> 数组进行剪枝，避免重复使用同一个元素。如果允许重复使用元素的话，直接放飞自我，<strong>去除所有 <code>used</code> 数组的剪枝逻辑</strong>就行了。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line"></span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    LinkedList&lt;Integer&gt; track = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">permuteRepeat</span><span class="params">(<span class="type">int</span>[] nums)</span> {</span><br><span class="line">        backtrack(nums);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 回溯算法核心函数</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">backtrack</span><span class="params">(<span class="type">int</span>[] nums)</span> {</span><br><span class="line">        <span class="comment">// base case，到达叶子节点</span></span><br><span class="line">        <span class="keyword">if</span> (track.size() == nums.length) {</span><br><span class="line">            <span class="comment">// 收集叶子节点上的值</span></span><br><span class="line">            res.add(<span class="keyword">new</span> <span class="title class_">LinkedList</span>(track));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 回溯算法标准框架</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) {</span><br><span class="line">            <span class="comment">// 做选择</span></span><br><span class="line">            track.add(nums[i]);</span><br><span class="line">            <span class="comment">// 进入下一层回溯树</span></span><br><span class="line">            backtrack(nums);</span><br><span class="line">            <span class="comment">// 取消选择</span></span><br><span class="line">            track.removeLast();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h1 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h1><p>有很多的共性，其实树都是差不多的只是多了一些剪枝操作以及base case略有不同</p><h2 id="元素无重不可复选-1"><a href="#元素无重不可复选-1" class="headerlink" title="元素无重不可复选"></a>元素无重不可复选</h2><p>即 <code>nums</code> 中的元素都是唯一的，每个元素最多只能被使用一次</p><p>对于组合或者子集问题：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 组合/子集问题回溯算法框架 */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">backtrack</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> start)</span> {</span><br><span class="line">    <span class="comment">// 回溯算法标准框架</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt; nums.length; i++) {</span><br><span class="line">        <span class="comment">// 做选择</span></span><br><span class="line">        track.addLast(nums[i]);</span><br><span class="line">        <span class="comment">// 注意参数</span></span><br><span class="line">        backtrack(nums, i + <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 撤销选择</span></span><br><span class="line">        track.removeLast();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>对于排列问题：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 排列问题回溯算法框架 */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">backtrack</span><span class="params">(<span class="type">int</span>[] nums)</span> {</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) {</span><br><span class="line">        <span class="comment">// 剪枝逻辑</span></span><br><span class="line">        <span class="keyword">if</span> (used[i]) {</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 做选择</span></span><br><span class="line">        used[i] = <span class="literal">true</span>;</span><br><span class="line">        track.addLast(nums[i]);</span><br><span class="line"></span><br><span class="line">        backtrack(nums);</span><br><span class="line">        <span class="comment">// 撤销选择</span></span><br><span class="line">        track.removeLast();</span><br><span class="line">        used[i] = <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="元素可重不可复选-1"><a href="#元素可重不可复选-1" class="headerlink" title="元素可重不可复选"></a>元素可重不可复选</h2><p>即 <code>nums</code> 中的元素可以存在重复，每个元素最多只能被使用一次，其<strong>关键在于排序和剪枝</strong>，<code>backtrack</code> 核心代码如下：</p><p>对于组合或者子集问题：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Arrays.sort(nums);</span><br><span class="line"><span class="comment">/* 组合/子集问题回溯算法框架 */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">backtrack</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> start)</span> {</span><br><span class="line">    <span class="comment">// 回溯算法标准框架</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt; nums.length; i++) {</span><br><span class="line">        <span class="comment">// 剪枝逻辑，跳过值相同的相邻树枝</span></span><br><span class="line">        <span class="keyword">if</span> (i &gt; start &amp;&amp; nums[i] == nums[i - <span class="number">1</span>]) {</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 做选择</span></span><br><span class="line">        track.addLast(nums[i]);</span><br><span class="line">        <span class="comment">// 注意参数</span></span><br><span class="line">        backtrack(nums, i + <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 撤销选择</span></span><br><span class="line">        track.removeLast();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>对于排列问题：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Arrays.sort(nums);</span><br><span class="line"><span class="comment">/* 排列问题回溯算法框架 */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">backtrack</span><span class="params">(<span class="type">int</span>[] nums)</span> {</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) {</span><br><span class="line">        <span class="comment">// 剪枝逻辑</span></span><br><span class="line">        <span class="keyword">if</span> (used[i]) {</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 剪枝逻辑，固定相同的元素在排列中的相对位置</span></span><br><span class="line">        <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>] &amp;&amp; !used[i - <span class="number">1</span>]) {</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 做选择</span></span><br><span class="line">        used[i] = <span class="literal">true</span>;</span><br><span class="line">        track.addLast(nums[i]);</span><br><span class="line"></span><br><span class="line">        backtrack(nums);</span><br><span class="line">        <span class="comment">// 撤销选择</span></span><br><span class="line">        track.removeLast();</span><br><span class="line">        used[i] = <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="元素无重可复选-1"><a href="#元素无重可复选-1" class="headerlink" title="元素无重可复选"></a><strong>元素无重可复选</strong></h2><p>即 <code>nums</code> 中的元素都是唯一的，每个元素可以被使用若干次，只要<strong>删掉去重逻辑即可</strong>，<code>backtrack</code> 核心代码如下：</p><p>对于组合或者子集问题：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 组合/子集问题回溯算法框架 */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">backtrack</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> start)</span> {</span><br><span class="line">    <span class="comment">// 回溯算法标准框架</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt; nums.length; i++) {</span><br><span class="line">        <span class="comment">// 做选择</span></span><br><span class="line">        track.addLast(nums[i]);</span><br><span class="line">        <span class="comment">// 注意参数</span></span><br><span class="line">        backtrack(nums, i);</span><br><span class="line">        <span class="comment">// 撤销选择</span></span><br><span class="line">        track.removeLast();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>对于排列问题：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 排列问题回溯算法框架 */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">backtrack</span><span class="params">(<span class="type">int</span>[] nums)</span> {</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) {</span><br><span class="line">        <span class="comment">// 做选择</span></span><br><span class="line">        track.addLast(nums[i]);</span><br><span class="line">        backtrack(nums);</span><br><span class="line">        <span class="comment">// 撤销选择</span></span><br><span class="line">        track.removeLast();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="其他例题"><a href="#其他例题" class="headerlink" title="其他例题"></a>其他例题</h1><h2 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h2><h3 id="216-组合总和-III"><a href="#216-组合总和-III" class="headerlink" title="216. 组合总和 III"></a><a href="https://leetcode.cn/problems/combination-sum-iii/">216. 组合总和 III</a></h3><p>和77题几乎一模一样</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="type">int</span> <span class="variable">curSum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combinationSum3</span><span class="params">(<span class="type">int</span> k, <span class="type">int</span> n)</span> {</span><br><span class="line">        List&lt;Integer&gt; path = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; paths = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        backTracking(path, paths, k, n, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> paths;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backTracking</span><span class="params">(List&lt;Integer&gt; path, List&lt;List&lt;Integer&gt;&gt; paths, <span class="type">int</span> k, <span class="type">int</span> n, <span class="type">int</span> startIdx)</span> {</span><br><span class="line">        <span class="keyword">if</span> (path.size() == k) {</span><br><span class="line">            <span class="keyword">if</span> (curSum == n) {</span><br><span class="line">                paths.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(path));</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> startIdx; i &lt;= <span class="number">9</span>; i++) {</span><br><span class="line">            path.add(i);</span><br><span class="line">            curSum += i;</span><br><span class="line">            backTracking(path, paths, k, n, i + <span class="number">1</span>);</span><br><span class="line">            path.remove(path.size() - <span class="number">1</span>);</span><br><span class="line">            curSum -= i;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="剪枝"><a href="#剪枝" class="headerlink" title="剪枝"></a>剪枝</h4><p>这道题剪枝有两个： 剩余元素的剪枝 + 求和的剪枝</p><p> 剩余元素的剪枝:</p><p>即，可选列表中的元素 &lt; 要用的元素 </p><p>求和的剪枝：</p><p>即，当前和已经大于了题目要求的和</p><p><img src="/2023/05/09/%E5%9B%9E%E6%BA%AF%E4%B9%8B%E6%8E%92%E5%88%97-%E7%BB%84%E5%90%88-%E5%AD%90%E9%9B%86%E9%97%AE%E9%A2%98/%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8C3-%E5%89%AA%E6%9E%9D.png" alt="组合总和3-剪枝"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="type">int</span> <span class="variable">curSum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combinationSum3</span><span class="params">(<span class="type">int</span> k, <span class="type">int</span> n)</span> {</span><br><span class="line">        List&lt;Integer&gt; path = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; paths = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        backTracking(path, paths, k, n, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> paths;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backTracking</span><span class="params">(List&lt;Integer&gt; path, List&lt;List&lt;Integer&gt;&gt; paths, <span class="type">int</span> k, <span class="type">int</span> n, <span class="type">int</span> startIdx)</span> {</span><br><span class="line">        <span class="keyword">if</span> (path.size() == k) {</span><br><span class="line">            <span class="keyword">if</span> (curSum == n) {</span><br><span class="line">                paths.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(path));</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> startIdx; i &lt;= <span class="number">9</span> - (k - path.size()) + <span class="number">1</span>; i++) {</span><br><span class="line">            path.add(i);</span><br><span class="line">            curSum += i;</span><br><span class="line">            <span class="keyword">if</span> (curSum &gt; n) {</span><br><span class="line">                curSum -= i;</span><br><span class="line">                path.remove(path.size() - <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            }</span><br><span class="line">            backTracking(path, paths, k, n, i + <span class="number">1</span>);</span><br><span class="line">            path.remove(path.size() - <span class="number">1</span>);</span><br><span class="line">            curSum -= i;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="17-电话号码的字母组合"><a href="#17-电话号码的字母组合" class="headerlink" title="17. 电话号码的字母组合"></a><a href="https://leetcode.cn/problems/letter-combinations-of-a-phone-number/">17. 电话号码的字母组合</a></h3><p>组合的应用题</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">        Map&lt;Character, String&gt; phoneMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">letterCombinations</span><span class="params">(String digits)</span> {</span><br><span class="line">            phoneMap.put(<span class="string">'2'</span>, <span class="string">"abc"</span>);</span><br><span class="line">            phoneMap.put(<span class="string">'3'</span>, <span class="string">"def"</span>);</span><br><span class="line">            phoneMap.put(<span class="string">'4'</span>, <span class="string">"ghi"</span>);</span><br><span class="line">            phoneMap.put(<span class="string">'5'</span>, <span class="string">"jkl"</span>);</span><br><span class="line">            phoneMap.put(<span class="string">'6'</span>, <span class="string">"mno"</span>);</span><br><span class="line">            phoneMap.put(<span class="string">'7'</span>, <span class="string">"pqrs"</span>);</span><br><span class="line">            phoneMap.put(<span class="string">'8'</span>, <span class="string">"tuv"</span>);</span><br><span class="line">            phoneMap.put(<span class="string">'9'</span>, <span class="string">"wxyz"</span>);</span><br><span class="line">            List&lt;String&gt; res = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">cur</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">            <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            backtracking(digits, cur, res, idx);</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(String digits, StringBuilder cur, List&lt;String&gt; res, <span class="type">int</span> idx)</span> {</span><br><span class="line">            <span class="keyword">if</span> (idx &gt; digits.length() - <span class="number">1</span>) {</span><br><span class="line">                res.add(cur.toString());</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="type">char</span> <span class="variable">digit</span> <span class="operator">=</span> digits.charAt(idx);</span><br><span class="line">            <span class="type">String</span> <span class="variable">digit2Chars</span> <span class="operator">=</span> phoneMap.get(digit);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; digit2Chars.length(); i++) {</span><br><span class="line">                <span class="type">char</span> <span class="variable">target</span> <span class="operator">=</span> digit2Chars.charAt(i);</span><br><span class="line">                cur.append(target);</span><br><span class="line">                backtracking(digits, cur, res, idx + <span class="number">1</span>);</span><br><span class="line">                cur.deleteCharAt(cur.length() - <span class="number">1</span>);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><h2 id="子集"><a href="#子集" class="headerlink" title="子集"></a>子集</h2><h3 id="491-递增子序列"><a href="#491-递增子序列" class="headerlink" title="491. 递增子序列"></a><a href="https://leetcode.cn/problems/non-decreasing-subsequences/">491. 递增子序列</a></h3><p>首先 本题在寻找 递增<strong>子序列</strong> 因此本题相当于寻找一种特殊的<strong>子集</strong>，特殊的地方在于 <strong>子集中的元素是递增的</strong></p><p>但是相较于子集问题（特指 90.子集2）本题特殊点在于我们不能再通过排序来过滤掉重复元素，因为这会破坏数组原本的顺序。</p><p>因此我们需要一个 <strong>hashset</strong> 来帮助我们寻找哪些元素在<strong>本层</strong>中用过，注意这里只需要看本层：</p><p><img src="/2023/05/09/%E5%9B%9E%E6%BA%AF%E4%B9%8B%E6%8E%92%E5%88%97-%E7%BB%84%E5%90%88-%E5%AD%90%E9%9B%86%E9%97%AE%E9%A2%98/491_%E9%80%92%E5%A2%9E%E5%AD%90%E5%BA%8F%E5%88%97_tree.png" alt="491_递增子序列_tree"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    LinkedList&lt;Integer&gt; path = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">findSubsequences</span><span class="params">(<span class="type">int</span>[] nums)</span> {</span><br><span class="line">        backtracking(nums, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> startIdx)</span> {</span><br><span class="line">        <span class="keyword">if</span> (path.size() &gt;= <span class="number">2</span>) {</span><br><span class="line">            res.add(<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;(path));</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        Set&lt;Integer&gt; used = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> startIdx; i &lt; nums.length; i++) {</span><br><span class="line">            <span class="keyword">if</span> (!path.isEmpty() &amp;&amp; path.getLast() &gt; nums[i]) {</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (used.contains(nums[i])) {</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            }</span><br><span class="line">            path.addLast(nums[i]);</span><br><span class="line">            used.add(nums[i]);</span><br><span class="line"></span><br><span class="line">            backtracking(nums, i + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            path.removeLast();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="为什么回溯前-used-add-nums-i-回溯后没有撤销？"><a href="#为什么回溯前-used-add-nums-i-回溯后没有撤销？" class="headerlink" title="为什么回溯前 used.add(nums[i]); 回溯后没有撤销？"></a>为什么回溯前 <code>used.add(nums[i]);</code> 回溯后没有撤销？</h4><p>因为 <code>used</code> 是记录<strong>本层</strong>元素是否重复使用，新的一层used都会<strong>重新定义（清空）</strong>，所以要知道used只负责本层！</p>]]></content>
      
      
      <categories>
          
          <category> Algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 回溯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉树之公共祖先</title>
      <link href="/2023/04/27/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B9%8B%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/"/>
      <url>/2023/04/27/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B9%8B%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/</url>
      
        <content type="html"><![CDATA[<h1 id="二叉树之（最近）公共祖先"><a href="#二叉树之（最近）公共祖先" class="headerlink" title="二叉树之（最近）公共祖先"></a>二叉树之（最近）公共祖先</h1><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><p>考虑问题一个简单的问题：如何寻找一个或多个元素:<br>Eg: 寻找值为 <code>val1</code> <strong>或</strong> <code>val2</code> 的节点</p><p>非常简单：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义：在以 root 为根的二叉树中寻找值为 val1 或 val2 的节点</span></span><br><span class="line">TreeNode <span class="title function_">find</span><span class="params">(TreeNode root, <span class="type">int</span> val1, <span class="type">int</span> val2)</span> {</span><br><span class="line">    <span class="comment">// base case</span></span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) {</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 前序位置，看看 root 是不是目标值</span></span><br><span class="line">    <span class="keyword">if</span> (root.val == val1 || root.val == val2) {</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 去左右子树寻找</span></span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">left</span> <span class="operator">=</span> find(root.left, val1, val2);</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">right</span> <span class="operator">=</span> find(root.right, val1, val2);</span><br><span class="line">    <span class="comment">// 后序位置，已经知道左右子树是否存在目标值</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> left != <span class="literal">null</span> ? left : right;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="236-二叉树的最近公共祖先"><a href="#236-二叉树的最近公共祖先" class="headerlink" title="236. 二叉树的最近公共祖先"></a><a href="https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-tree/">236. 二叉树的最近公共祖先</a></h2><p><img src="/2023/04/27/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B9%8B%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/lc236_%E4%BA%8C%E5%8F%89%E6%A0%91%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88.png" alt="LC236公共祖先"></p><p>那么对于寻找LCA来说，其实就是找 <strong>在一个子树下面是否能够同时找到p和q</strong>，寻找最近的公共节点就是寻找最深的公共节点，因此要选择<strong>后序遍历</strong></p><p>那么我们就会得出：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">lowestCommonAncestor</span><span class="params">(TreeNode root, TreeNode p, TreeNode q)</span> {</span><br><span class="line">    <span class="comment">// 通过这个function 来找到子树里是否含有 p 和 q：</span></span><br><span class="line">    <span class="keyword">return</span> findTargeValues(root, p, q);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> TreeNode <span class="title function_">findTargeValues</span><span class="params">(TreeNode root, TreeNode p, TreeNode q)</span> {</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 前序遍历位置，解决情况二：一旦发现有值等于target值，那么它本身就作为最近的祖先；</span></span><br><span class="line">    <span class="comment">// 因为题目说了 p 和 q 一定存在于二叉树中(这点很重要），</span></span><br><span class="line">    <span class="comment">// 所以即便我们遇到 q 就直接返回，根本没遍历到 p，也依然可以断定 p 在 q 底下，q 就是 LCA 节点。</span></span><br><span class="line">    <span class="keyword">if</span> (root.val == p.val || root.val == q.val) {</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">leftValue</span> <span class="operator">=</span> findTargeValues(root.left, p, q);</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">rightValue</span> <span class="operator">=</span> findTargeValues(root.right, p, q);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 后序遍历位置，如果leftValue != null 证明左子树中含有target值，rightValue同理</span></span><br><span class="line">    <span class="comment">// 若同时满足，那么当前root就为最近的公共祖先。</span></span><br><span class="line">    <span class="keyword">if</span> (leftValue != <span class="literal">null</span> &amp;&amp; rightValue != <span class="literal">null</span>) {</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回不是null的那个或者全是null的，不是null的优先返回。</span></span><br><span class="line">    <span class="keyword">return</span> leftValue == <span class="literal">null</span> ? rightValue : leftValue;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="/2023/04/27/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B9%8B%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88%E7%9A%84%E5%9B%9E%E6%BA%AF.png" alt="公共祖先的回溯"></p><p>注意</p><p><code>leftValue == null ? rightValue : leftValue</code></p><p>就是</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(left == <span class="literal">null</span> &amp;&amp; right == <span class="literal">null</span>) { <span class="comment">// 若未找到节点 p 或 q</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">}<span class="keyword">else</span> <span class="keyword">if</span>(left == <span class="literal">null</span> &amp;&amp; right != <span class="literal">null</span>) { <span class="comment">// 若找到一个节点</span></span><br><span class="line">    <span class="keyword">return</span> right;</span><br><span class="line">}<span class="keyword">else</span> <span class="keyword">if</span>(left != <span class="literal">null</span> &amp;&amp; right == <span class="literal">null</span>) { <span class="comment">// 若找到一个节点</span></span><br><span class="line">    <span class="keyword">return</span> left;</span><br><span class="line">}<span class="keyword">else</span> { <span class="comment">// 若找到两个节点</span></span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="1676-二叉树的最近公共祖先-IV"><a href="#1676-二叉树的最近公共祖先-IV" class="headerlink" title="1676. 二叉树的最近公共祖先 IV"></a><a href="https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-tree-iv/">1676. 二叉树的最近公共祖先 IV</a></h2><p>本题  <strong>不再是p，q，而是一组node</strong></p><p>只需要稍微修改一下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">lowestCommonAncestor</span><span class="params">(TreeNode root, TreeNode[] nodes)</span> {</span><br><span class="line">    Set&lt;Integer&gt; hs = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (TreeNode node : nodes) {</span><br><span class="line">        hs.add(node.val);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> findTargetsFromNodes(root, hs);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> TreeNode <span class="title function_">findTargetsFromNodes</span><span class="params">(TreeNode root, Set&lt;Integer&gt; nodes)</span> {</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) {</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 依旧是找当前 root 是否本身即为最近公共祖先， 但是为了快速查找且题目要求node值都不相同，</span></span><br><span class="line">    <span class="comment">// 用 hashset来快速找值</span></span><br><span class="line">    <span class="keyword">if</span> (nodes.contains(root.val)) {</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">leftValue</span> <span class="operator">=</span> findTargetsFromNodes(root.left, nodes);</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">rightValue</span> <span class="operator">=</span> findTargetsFromNodes(root.right, nodes);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (leftValue != <span class="literal">null</span> &amp;&amp; rightValue != <span class="literal">null</span>) {</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> leftValue != <span class="literal">null</span> ? leftValue : rightValue;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="1644-二叉树的最近公共祖先-II"><a href="#1644-二叉树的最近公共祖先-II" class="headerlink" title="1644. 二叉树的最近公共祖先 II"></a><a href="https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-tree-ii/">1644. 二叉树的最近公共祖先 II</a></h2><p>之前的题目都说target节点都在树里，但是本题 <strong>不保证树里一定有p 和 q</strong></p><p>那么，对于上边两道题在前序遍历位置时发现当前root节点和target值相等直接返回就不能用了，<strong>因为不能保证是不是另一个也存在</strong>，我们需要知道树的<strong>所有信息</strong>才行，也就是要在<strong>后序遍历</strong>的位置，即：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="variable">isPExist</span> <span class="operator">=</span> <span class="literal">false</span>, isQExist = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">lowestCommonAncestor</span><span class="params">(TreeNode root, TreeNode p, TreeNode q)</span> {</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">ret</span> <span class="operator">=</span> findTargetValues(root, p, q);</span><br><span class="line">    <span class="keyword">if</span> (!isQExist || !isPExist) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> TreeNode <span class="title function_">findTargetValues</span><span class="params">(TreeNode root, TreeNode p, TreeNode q)</span> {</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">leftValue</span> <span class="operator">=</span> findTargetValues(root.left, p, q);</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">rightValue</span> <span class="operator">=</span> findTargetValues(root.right, p, q);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (leftValue != <span class="literal">null</span> &amp;&amp; rightValue != <span class="literal">null</span>) {</span><br><span class="line">        <span class="comment">// 解决情况1，自身节点不是LCA</span></span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (root.val == p.val) {</span><br><span class="line">        <span class="comment">// 解决情况2，自身节点是LCA：</span></span><br><span class="line">        isPExist = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (root.val == q.val) {</span><br><span class="line">        isQExist = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> leftValue == <span class="literal">null</span> ? rightValue : leftValue;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="235-二叉搜索树的最近公共祖先"><a href="#235-二叉搜索树的最近公共祖先" class="headerlink" title="235. 二叉搜索树的最近公共祖先"></a><a href="https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-search-tree/">235. 二叉搜索树的最近公共祖先</a></h2><p>本题最重要的是利用BST的性质</p><p><img src="/2023/04/27/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B9%8B%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/BST_%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88.png" alt="BST_公共祖先"></p><ol><li>当根节点值小于p和q 即 小于 p，q的最小值<ol><li>说明要的公共祖先在右边的树里</li></ol></li><li>当根节点值大于p和q 即 大于 p，q的最大值<ol><li>说明要的公共祖先在左边的树里</li></ol></li><li>当根节点介于中间时则一定为最近的公共祖先<ol><li>为什么最近？<ol><li>因为如果还要进行下去，要么往左走要么往右走总会丢失一个</li><li>按图中的例子，如果5下面还有更近的祖先，那么假设5往左走，那么会丢失q，同理，向右走则会丢失p</li></ol></li></ol></li></ol><p><strong>结论: <code>Math.min(q.val, p.val) &lt;= root.val &lt;= Math.max(q.val, p.val)</code>那么此时的root即为最近的公共祖先</strong></p><p>pseudocode:</p><p><img src="/2023/04/27/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B9%8B%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/BST_%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88_%E4%BC%AA%E4%BB%A3%E7%A0%81.png" alt="BST_公共祖先_伪代码"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">lowestCommonAncestor</span><span class="params">(TreeNode root, TreeNode p, TreeNode q)</span> {</span><br><span class="line">    <span class="type">int</span> <span class="variable">val1</span> <span class="operator">=</span> Math.min(p.val, q.val);</span><br><span class="line">    <span class="type">int</span> <span class="variable">val2</span> <span class="operator">=</span> Math.max(p.val, q.val);</span><br><span class="line">    <span class="keyword">return</span> findTarget(root, val1, val2);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> TreeNode <span class="title function_">findTarget</span><span class="params">(TreeNode root, <span class="type">int</span> val1, <span class="type">int</span> val2)</span> {</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (root.val &lt; val1) {</span><br><span class="line">        <span class="comment">// 值太小了，应该去右边找</span></span><br><span class="line">        <span class="keyword">return</span> findTarget(root.right, val1, val2);</span><br><span class="line">    } </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (root.val &gt; val2) {</span><br><span class="line">        <span class="comment">// 值太大了， 应该去左边找</span></span><br><span class="line">       <span class="keyword">return</span> findTarget(root.left, val1, val2);</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// root.val &gt;= val1 root.val &lt;= val2 此时就是一个合法的公共祖先</span></span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="1650-二叉树的最近公共祖先-III"><a href="#1650-二叉树的最近公共祖先-III" class="headerlink" title="1650. 二叉树的最近公共祖先 III"></a><a href="https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-tree-iii/">1650. 二叉树的最近公共祖先 III</a></h2><p>本题包含了对父节点的引用：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> val;</span><br><span class="line">    <span class="keyword">public</span> Node left;</span><br><span class="line">    <span class="keyword">public</span> Node right;</span><br><span class="line">    <span class="keyword">public</span> Node parent;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这道题用的是链表合并的思路：</p><p>即让两个指针p1 指向A的指针，p2指向B的指针，<strong>能够同时到达相交节点 <code>c1</code></strong></p><blockquote><p>用两个指针 <code>p1</code> 和 <code>p2</code> 分别在两条链表上前进，我们可以让 <code>p1</code> 遍历完链表 <code>A</code> 之后开始遍历链表 <code>B</code>，让 <code>p2</code> 遍历完链表 <code>B</code> 之后开始遍历链表 <code>A</code>，这样相当于「逻辑上」两条链表接在了一起。</p></blockquote><p><img src="/2023/04/27/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B9%8B%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/%E9%93%BE%E8%A1%A8%E5%90%88%E5%B9%B6.png" alt="链表合并"></p><p>稍微替换一下，借用parent:</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Node <span class="title function_">lowestCommonAncestor</span><span class="params">(Node p, Node q)</span> {</span><br><span class="line">    <span class="type">Node</span> <span class="variable">pPointer</span> <span class="operator">=</span> p, qPointer = q;</span><br><span class="line">    <span class="keyword">while</span> (pPointer != qPointer) {</span><br><span class="line">        <span class="keyword">if</span> (pPointer == <span class="literal">null</span>) pPointer = q;</span><br><span class="line">        <span class="keyword">else</span> pPointer = pPointer.parent;</span><br><span class="line">        <span class="keyword">if</span> (qPointer == <span class="literal">null</span>) qPointer = p;</span><br><span class="line">        <span class="keyword">else</span> qPointer = qPointer.parent;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> pPointer;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉搜索树</title>
      <link href="/2023/04/27/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/"/>
      <url>/2023/04/27/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h1 id="二叉搜索树-BST"><a href="#二叉搜索树-BST" class="headerlink" title="二叉搜索树-BST"></a>二叉搜索树-BST</h1><h2 id="基本知识以及操作："><a href="#基本知识以及操作：" class="headerlink" title="基本知识以及操作："></a>基本知识以及操作：</h2><blockquote><ol><li>提到 BST 就要想到中序遍历：<ol><li>BST的<strong>中序</strong>遍历是<strong>有序的</strong></li></ol></li><li>性质：<ol><li>左子树所有的值都**(严格)小于**根节点</li><li>右子树所有的值都**(严格)大于**根节点</li></ol></li><li>几乎完美的数据结构，复杂度为树高</li><li>最左边的叶子结点是最小值，最右边的叶子结点是最大值</li></ol></blockquote><p>那么对于一个数据结构，无非做的事情就是增删查改。</p><p>那么就是分成两步：1. 找到要操作的位置 （其实就是<strong>查</strong>）2. 操作</p><p>要找到位置：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> TreeNode <span class="title function_">find</span><span class="params">(TreeNode root, <span class="type">int</span> val)</span> {</span><br><span class="line">  <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>; </span><br><span class="line">  <span class="keyword">if</span> (root.val == val) {</span><br><span class="line">      <span class="comment">// 找到节点，返回</span></span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">  } <span class="keyword">else</span> <span class="keyword">if</span> (root.val &lt; val) {</span><br><span class="line">      <span class="comment">// 利用BST的性质，此时说明需要继续去右边找：</span></span><br><span class="line">      <span class="keyword">return</span> find(root.right, val);</span><br><span class="line">  } <span class="keyword">else</span> <span class="keyword">if</span> (root.val &gt; val) {</span><br><span class="line">      <span class="comment">// 利用BST的性质，此时说明需要继续去左边找：</span></span><br><span class="line">      <span class="keyword">return</span> = find(root.left, val);</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"><span class="comment">// 还有一种补充的写法。不过干的事情其实是一样的，只不过返回位置不同</span></span><br><span class="line">TreeNode <span class="title function_">searchBST</span><span class="params">(TreeNode root, <span class="type">int</span> target)</span> {</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) {</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 去左子树搜索</span></span><br><span class="line">    <span class="keyword">if</span> (root.val &gt; target) {</span><br><span class="line">        <span class="keyword">return</span> searchBST(root.left, target);</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 去右子树搜索</span></span><br><span class="line">    <span class="keyword">if</span> (root.val &lt; target) {</span><br><span class="line">        <span class="keyword">return</span> searchBST(root.right, target);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="关于删除操作后的维护："><a href="#关于删除操作后的维护：" class="headerlink" title="关于删除操作后的维护："></a>关于删除操作后的维护：</h3><p>需要分三种情况：</p><h4 id="root-是叶子结点"><a href="#root-是叶子结点" class="headerlink" title="root 是叶子结点"></a>root 是叶子结点</h4><p>直接删除叶子结点 即 直接return null 让上一层接收：</p><p><img src="/2023/04/27/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/BST_%E5%88%A0%E9%99%A4%E5%8F%B6%E5%AD%90%E7%BB%93%E7%82%B9.png" alt="BST_删除叶子结点"></p><h4 id="root-左右有一个子节点为空"><a href="#root-左右有一个子节点为空" class="headerlink" title="root 左右有一个子节点为空"></a>root 左右有一个子节点为空</h4><h5 id="当左子树不为空："><a href="#当左子树不为空：" class="headerlink" title="当左子树不为空："></a>当左子树不为空：</h5><p>直接把左子树拼接上去即可，即返回左子树让上一层接收</p><p><img src="/2023/04/27/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/BST_%E5%88%A0%E9%99%A4%E8%8A%82%E7%82%B9_%E5%B7%A6%E5%AD%90%E6%A0%91%E4%B8%8D%E4%B8%BA%E7%A9%BA.png" alt="删除节点_左子树不为空"></p><p><img src="/2023/04/27/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/BST_%E5%88%A0%E9%99%A4%E8%8A%82%E7%82%B9_%E5%B7%A6%E5%AD%90%E6%A0%91%E4%B8%8D%E4%B8%BA%E7%A9%BA_%E6%8B%BC%E6%8E%A5%E5%90%8E.png" alt="删除节点_左子树不为空_拼接后"></p><h5 id="当右子树不为空："><a href="#当右子树不为空：" class="headerlink" title="当右子树不为空："></a>当右子树不为空：</h5><p>直接把右子树拼接上去即可，即返回右子树让上一层接收</p><p><img src="/2023/04/27/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/BST_%E5%88%A0%E9%99%A4%E8%8A%82%E7%82%B9_%E5%8F%B3%E5%AD%90%E6%A0%91%E4%B8%8D%E4%B8%BA%E7%A9%BA.png" alt="删除节点_右子树不为空"></p><p><img src="/2023/04/27/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/BST_%E5%88%A0%E9%99%A4%E8%8A%82%E7%82%B9_%E5%8F%B3%E5%AD%90%E6%A0%91%E4%B8%8D%E4%B8%BA%E7%A9%BA_%E6%8B%BC%E6%8E%A5%E5%90%8E.png"></p><h4 id="root-左右均不为空"><a href="#root-左右均不为空" class="headerlink" title="root 左右均不为空"></a>root 左右均不为空</h4><p><img src="/2023/04/27/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/BST_%E5%88%A0%E9%99%A4%E8%8A%82%E7%82%B9_%E5%B7%A6%E5%8F%B3%E5%AD%90%E6%A0%91%E5%9D%87%E4%B8%8D%E4%B8%BA%E7%A9%BA.png" alt="左右子树均不为空"></p><p>那么情况会变的复杂一些，这是由于要找到能够接替被删除节点位置的节点。这时，我们会有两种选择：</p><ul><li>找左子树的最大值</li><li>找右子树的最小值</li></ul><p><img src="/2023/04/27/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/BST_%E5%88%A0%E9%99%A4%E8%8A%82%E7%82%B9_%E5%B7%A6%E5%8F%B3%E5%AD%90%E6%A0%91%E5%9D%87%E4%B8%8D%E4%B8%BA%E7%A9%BA_%E5%B7%A6%E5%AD%90%E6%A0%91%E6%9C%80%E5%A4%A7%E5%80%BC.png" alt="左子树最大值"></p><h2 id="98-验证二叉搜索树"><a href="#98-验证二叉搜索树" class="headerlink" title="98. 验证二叉搜索树"></a><a href="https://leetcode.cn/problems/validate-binary-search-tree/">98. 验证二叉搜索树</a></h2><p>中序遍历而不是前序遍历的原因是：</p><p>中序遍历的特性。中序遍历按照“左-根-右”的顺序访问树中的节点。对于二叉搜索树，中序遍历会按照升序的方式访问树中的所有节点。因此，我们可以通过检查在中序遍历过程中每个相邻节点之间的值的大小关系来验证这棵树是否是有效的二叉搜索树。如果遍历的过程中发现某个节点的值小于等于前一个节点的值，那么这棵树就不是一个有效的二叉搜索树。</p><p>相反，前序遍历按照“根-左-右”的顺序访问树中的节点，这种顺序无法直接用来验证二叉搜索树的性质。因为前序遍历不保证访问的节点值是按照升序排列的，所以使用前序遍历会使得验证二叉搜索树的过程变得更加复杂。</p><p>总之，使用中序遍历是因为它可以直接利用二叉搜索树的性质，按照升序访问树中的节点，从而简化了验证二叉搜索树的过程。</p><p>三个方法：</p><ol><li>使用中序遍历的有序性质 + 辅助数组</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; inOrderResult = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValidBST</span><span class="params">(TreeNode root)</span> {</span><br><span class="line">    traverse(root);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = i + <span class="number">1</span>; j &lt; inOrderResult.size();) {</span><br><span class="line">        <span class="keyword">if</span> (inOrderResult.get(j) &lt;= inOrderResult.get(i)) {</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        }</span><br><span class="line">        i++;</span><br><span class="line">        j++;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">traverse</span><span class="params">(TreeNode root)</span> {</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    traverse(root.left);</span><br><span class="line">    inOrderResult.add(root.val);</span><br><span class="line">    traverse(root.right);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>借用一个非常小的值 继续使用中序遍历 PS：这里使用long minValue的原因是有可能存在int的最小值从而使得无法正确判断当左叶子结点特别小（Int MinValue）的情况。</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">long</span> <span class="variable">longMin</span> <span class="operator">=</span> Long.MIN_VALUE;</span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValidBST</span><span class="params">(TreeNode root)</span> {</span><br><span class="line">    <span class="keyword">return</span> traverse(root);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">traverse</span><span class="params">(TreeNode root)</span> {</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">left</span> <span class="operator">=</span> traverse(root.left);</span><br><span class="line">    <span class="keyword">if</span> (root.val &lt;= longMin) {</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line">    longMin = root.val;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">right</span> <span class="operator">=</span> traverse(root.right);</span><br><span class="line">    <span class="keyword">return</span> left &amp;&amp; right;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>双指针，注意previousNode应该作为全局变量从而每一个更新都能被正确更新。</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">TreeNode</span> <span class="variable">previousNode</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValidBST</span><span class="params">(TreeNode root)</span> {</span><br><span class="line">    <span class="keyword">return</span> traverse(root);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">traverse</span><span class="params">(TreeNode root)</span> {</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">left</span> <span class="operator">=</span> traverse(root.left);</span><br><span class="line">    <span class="keyword">if</span> (previousNode != <span class="literal">null</span> &amp;&amp; previousNode.val &gt;= root.val) {</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line">    previousNode = root;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">right</span> <span class="operator">=</span> traverse(root.right);</span><br><span class="line">    <span class="keyword">return</span> left &amp;&amp; right;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>作为参数传递的方法：</p><p>之前<code>previousNode</code>没有正确地更新的原因是：Java中的参数传递采用的是值传递（pass-by-value）。虽然Java中的对象是引用类型，但实际上传递的是引用的副本。因此，在函数<code>traverse</code>内部修改<code>previousNode</code>的值（例如<code>previousNode = root;</code>）不会影响到调用方的<code>previousNode</code>。</p><p>要解决这个问题，可以将<code>previousNode</code>的引用包装在一个可变的容器类中，例如一个单元素的数组。这样，在递归调用中，<code>previousNode</code>的更新将会影响到调用方。以下是修改后的代码：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">TreeNode[] previousNode = <span class="keyword">new</span> <span class="title class_">TreeNode</span>[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValidBST</span><span class="params">(TreeNode root)</span> {</span><br><span class="line">    <span class="keyword">return</span> traverse(root, previousNode);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">traverse</span><span class="params">(TreeNode root, TreeNode[] previousNode)</span> {</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">left</span> <span class="operator">=</span> traverse(root.left, previousNode);</span><br><span class="line">    <span class="keyword">if</span> (previousNode[<span class="number">0</span>] != <span class="literal">null</span> &amp;&amp; previousNode[<span class="number">0</span>].val &gt;= root.val) {</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line">    previousNode[<span class="number">0</span>] = root;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">right</span> <span class="operator">=</span> traverse(root.right, previousNode);</span><br><span class="line">    <span class="keyword">return</span> left &amp;&amp; right;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="701-二叉搜索树中的插入操作"><a href="#701-二叉搜索树中的插入操作" class="headerlink" title="701. 二叉搜索树中的插入操作"></a><a href="https://leetcode.cn/problems/insert-into-a-binary-search-tree/">701. 二叉搜索树中的插入操作</a></h2><blockquote><p>插入操作和二叉树的构造类型题非常类似详情见 <a href="/2023/04/27/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B9%8B%E6%9E%84%E9%80%A0%E7%B1%BB%E9%97%AE%E9%A2%98/" title="二叉树之构造类问题">二叉树之构造类问题</a></p></blockquote><p>不难，详情看代码注释即可。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">insertIntoBST</span><span class="params">(TreeNode root, <span class="type">int</span> val)</span> {</span><br><span class="line">    <span class="keyword">return</span> insert(root, val);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> TreeNode <span class="title function_">insert</span><span class="params">(TreeNode root, <span class="type">int</span> val)</span> {</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(val); <span class="comment">// 这里指找到了插入位置，那么构造一个TreeNode，返回上去，让上一层接收</span></span><br><span class="line">    <span class="keyword">if</span> (root.val &lt; val) {</span><br><span class="line">        <span class="comment">// 利用BST的性质，此时说明需要继续去右边找：</span></span><br><span class="line">        root.right = insert(root.right, val);</span><br><span class="line">    } <span class="keyword">else</span> <span class="keyword">if</span> (root.val &gt; val) {</span><br><span class="line">        <span class="comment">// 利用BST的性质，此时说明需要继续去左边找：</span></span><br><span class="line">        root.left = insert(root.left, val);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> root; <span class="comment">// 将更新好的节点不断向上返回。</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="450-删除二叉搜索树中的节点"><a href="#450-删除二叉搜索树中的节点" class="headerlink" title="450. 删除二叉搜索树中的节点"></a><a href="https://leetcode.cn/problems/delete-node-in-a-bst/">450. 删除二叉搜索树中的节点</a></h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">deleteNode</span><span class="params">(TreeNode root, <span class="type">int</span> key)</span> {</span><br><span class="line">    <span class="keyword">return</span> delete(root, key);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> TreeNode <span class="title function_">delete</span><span class="params">(TreeNode root, <span class="type">int</span> key)</span> {</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (root.val &gt; key) {</span><br><span class="line">        <span class="comment">// 要删除的key在当前节点的左边</span></span><br><span class="line">        root.left = delete(root.left, key);</span><br><span class="line">    } <span class="keyword">else</span> <span class="keyword">if</span> (root.val &lt; key) {</span><br><span class="line">        <span class="comment">// 要删除的key在当前节点的右边</span></span><br><span class="line">        root.right = delete(root.right, key);</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="comment">// 找到了要删除的点：</span></span><br><span class="line">        <span class="keyword">if</span> (root.left == <span class="literal">null</span>) {</span><br><span class="line">            <span class="keyword">return</span> root.right;</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (root.right == <span class="literal">null</span>) {</span><br><span class="line">            <span class="keyword">return</span> root.left;</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">leftTreeMaxNode</span> <span class="operator">=</span> findLeftTreeMaxNode(root.left);</span><br><span class="line">            root.left = removeLeftTreeMaxNode(root.left);</span><br><span class="line">            leftTreeMaxNode.left = root.left;</span><br><span class="line">            leftTreeMaxNode.right = root.right;</span><br><span class="line">            root = leftTreeMaxNode;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 找到左子树中的最大的节点：</span></span><br><span class="line"><span class="keyword">private</span> TreeNode <span class="title function_">findLeftTreeMaxNode</span><span class="params">(TreeNode root)</span> {</span><br><span class="line">    <span class="keyword">while</span> (root.right != <span class="literal">null</span>) {</span><br><span class="line">        root = root.right;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 像移除链表中的最后一个元素一样移除root</span></span><br><span class="line"><span class="keyword">private</span> TreeNode <span class="title function_">removeLeftTreeMaxNode</span><span class="params">(TreeNode root)</span> {</span><br><span class="line">    <span class="keyword">if</span> (root.right == <span class="literal">null</span>) {</span><br><span class="line">        <span class="comment">// 当二叉树走到头时，返回当前节点的左树，这是因为左树中还有节点，如果直接返回null则相当于删除了整个左子树</span></span><br><span class="line">        <span class="keyword">return</span> root.left;</span><br><span class="line">    }</span><br><span class="line">    root.right = removeLeftTreeMaxNode(root.right);</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="669-修剪二叉搜索树"><a href="#669-修剪二叉搜索树" class="headerlink" title="669. 修剪二叉搜索树"></a><a href="https://leetcode.cn/problems/trim-a-binary-search-tree/">669. 修剪二叉搜索树</a></h2><p>利用BST的性质 <strong>递归的处理左树和右树</strong></p><p>1、**<code>root.val &lt; lo</code>，这种情况下 <code>root</code> 节点本身和 <code>root</code> 的左子树全都是小于 <code>lo</code> 的，都需要被剪掉**。</p><p>2、**<code>root.val &gt; hi</code>，这种情况下 <code>root</code> 节点本身和 <code>root</code> 的右子树全都是大于 <code>hi</code> 的，都需要被剪掉**。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">trimBST</span><span class="params">(TreeNode root, <span class="type">int</span> low, <span class="type">int</span> high)</span> {</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">rootTrimmed</span> <span class="operator">=</span> buildTree(root, low, high);</span><br><span class="line">        <span class="keyword">return</span> rootTrimmed;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TreeNode <span class="title function_">buildTree</span><span class="params">(TreeNode root, <span class="type">int</span> low, <span class="type">int</span> high)</span> {</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (root.val &lt; low) {</span><br><span class="line">            <span class="comment">// 注意这里不能直接返回右子树: return root.right 我们需要继续递归的处理子树才行，因为我们要的是最终的结果而不是一次性的结果</span></span><br><span class="line">            <span class="keyword">return</span> buildTree(root.right, low, high);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (root.val &gt; high) {</span><br><span class="line">            <span class="comment">// 注意这里不能直接返回左子树: return root.left 我们需要继续递归的处理子树才行，因为我们要的是最终的结果而不是一次性的结果</span></span><br><span class="line">            <span class="keyword">return</span> buildTree(root.left, low, high);</span><br><span class="line">        }</span><br><span class="line">        root.left = buildTree(root.left, low, high);</span><br><span class="line">        root.right = buildTree(root.right, low, high);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="108-将有序数组转换为二叉搜索树"><a href="#108-将有序数组转换为二叉搜索树" class="headerlink" title="108. 将有序数组转换为二叉搜索树"></a><a href="https://leetcode.cn/problems/convert-sorted-array-to-binary-search-tree/">108. 将有序数组转换为二叉搜索树</a></h2><p>和利用前序和后序数组构造二叉树题目类型非常相似，确定好左右区间，确定好根节点即可：</p><blockquote><p>关于 前序和后序数组<strong>构造</strong>二叉树题目 见 <a href="/2023/04/27/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B9%8B%E6%9E%84%E9%80%A0%E7%B1%BB%E9%97%AE%E9%A2%98/" title="二叉树之构造类问题">二叉树之构造类问题</a></p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">sortedArrayToBST</span><span class="params">(<span class="type">int</span>[] nums)</span> {</span><br><span class="line">        <span class="keyword">return</span> buildTree(nums, <span class="number">0</span>, nums.length - <span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">private</span> TreeNode <span class="title function_">buildTree</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> left, <span class="type">int</span> right)</span> {</span><br><span class="line">        <span class="keyword">if</span> (left &gt; right) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (left + right) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(nums[mid]);</span><br><span class="line">        root.left = buildTree(nums, left, mid - <span class="number">1</span>);</span><br><span class="line">        root.right = buildTree(nums, mid + <span class="number">1</span>, right);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="538-把二叉搜索树转换为累加树"><a href="#538-把二叉搜索树转换为累加树" class="headerlink" title="538. 把二叉搜索树转换为累加树"></a><a href="https://leetcode.cn/problems/convert-bst-to-greater-tree/">538. 把二叉搜索树转换为累加树</a></h2><p>利用BST性质，降序输出，这个也是利用了双指针的性质：</p><p>可以想象成一个数组：</p><p>6 7 8</p><p>需要一个 <strong>累加</strong> 数组，此时用双指针 pre cur 指向 7 8</p><p>那么问题就好解决了，同理，是用双指针：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="type">int</span> <span class="variable">pre</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">convertBST</span><span class="params">(TreeNode root)</span> {</span><br><span class="line">        <span class="comment">// 使用双指针</span></span><br><span class="line">        traverse(root);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">traverse</span><span class="params">(TreeNode root)</span> {</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        traverse(root.right); <span class="comment">// 先遍历右树，使得其按照降序输出</span></span><br><span class="line">        root.val += pre;</span><br><span class="line">        pre = root.val;</span><br><span class="line">        traverse(root.left);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>第二种解法：使用sum作为外部变量</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">convertBST</span><span class="params">(TreeNode root)</span> {</span><br><span class="line">        <span class="comment">// 中序遍历可以按照升序排列来输出，</span></span><br><span class="line">        <span class="comment">// 那么我们只需要做一些修改使其按照降序排列来输出 并 同时维护一个外部变量sum即可</span></span><br><span class="line">        traverse(root);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">traverse</span><span class="params">(TreeNode root)</span> {</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        traverse(root.right); <span class="comment">// 先遍历右树，使得其按照降序输出</span></span><br><span class="line">        sum += root.val;</span><br><span class="line">        root.val = sum;</span><br><span class="line">        traverse(root.left);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 二叉树 </tag>
            
            <tag> 二叉搜索树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉树之构造类问题</title>
      <link href="/2023/04/27/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B9%8B%E6%9E%84%E9%80%A0%E7%B1%BB%E9%97%AE%E9%A2%98/"/>
      <url>/2023/04/27/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B9%8B%E6%9E%84%E9%80%A0%E7%B1%BB%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="构造类问题思路："><a href="#构造类问题思路：" class="headerlink" title="构造类问题思路："></a>构造类问题思路：</h1><blockquote><p><a href="https://labuladong.github.io/algo/di-yi-zhan-da78c/shou-ba-sh-66994/dong-ge-da-172f0/">labuladong</a>的总结很好</p></blockquote><p>二叉树的构造问题一般都是使用<strong>「分解问题」</strong>的思路：<strong>构造整棵树 = 根节点 + 构造左子树 + 构造右子树。</strong></p><p>经典的构造题有三道：</p><h2 id="654-最大二叉树"><a href="#654-最大二叉树" class="headerlink" title="654. 最大二叉树"></a><a href="https://leetcode.cn/problems/maximum-binary-tree/">654. 最大二叉树</a></h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">constructMaximumBinaryTree</span><span class="params">(<span class="type">int</span>[] nums)</span> {</span><br><span class="line">    <span class="comment">// 使用分解问题的思路解题，构造顺序为 根节点 + 构造左树 + 构造的右树</span></span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">root</span> <span class="operator">=</span> constructTree(nums);</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> TreeNode <span class="title function_">constructTree</span><span class="params">(<span class="type">int</span>[] nums)</span> {</span><br><span class="line">    <span class="keyword">if</span> (nums.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">maxIdx</span> <span class="operator">=</span> findMaxNumIndex(nums);</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(nums[maxIdx]);</span><br><span class="line">    <span class="comment">// Arrays.copyOfRange 时间复杂度是O(N)</span></span><br><span class="line">    root.left = constructTree(Arrays.copyOfRange(nums, <span class="number">0</span>, maxIdx));</span><br><span class="line">    root.right = constructTree(Arrays.copyOfRange(nums, maxIdx + <span class="number">1</span>, nums.length));</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">findMaxNumIndex</span><span class="params">(<span class="type">int</span>[] nums)</span> {</span><br><span class="line">    <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">maxValue</span> <span class="operator">=</span> Integer.MIN_VALUE;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) {</span><br><span class="line">        <span class="keyword">if</span> (nums[i] &gt; maxValue) {</span><br><span class="line">            maxValue = nums[i];</span><br><span class="line">            idx = i;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> idx;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>⚠️由于使用了Arrays.copyOfRange此方法会有些慢</p><p>优化后：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 主函数 */</span></span><br><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">constructMaximumBinaryTree</span><span class="params">(<span class="type">int</span>[] nums)</span> {</span><br><span class="line">    <span class="keyword">return</span> build(nums, <span class="number">0</span>, nums.length - <span class="number">1</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 定义：将 nums[lo..hi] 构造成符合条件的树，返回根节点 */</span></span><br><span class="line">TreeNode <span class="title function_">build</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> lo, <span class="type">int</span> hi)</span> {</span><br><span class="line">    <span class="comment">// base case</span></span><br><span class="line">    <span class="keyword">if</span> (lo &gt; hi) {</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 找到数组中的最大值和对应的索引</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> -<span class="number">1</span>, maxVal = Integer.MIN_VALUE;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> lo; i &lt;= hi; i++) {</span><br><span class="line">        <span class="keyword">if</span> (maxVal &lt; nums[i]) {</span><br><span class="line">            index = i;</span><br><span class="line">            maxVal = nums[i];</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(maxVal);</span><br><span class="line">    <span class="comment">// 递归调用构造左右子树</span></span><br><span class="line">    root.left = build(nums, lo, index - <span class="number">1</span>);</span><br><span class="line">    root.right = build(nums, index + <span class="number">1</span>, hi);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="105-从前序与中序遍历序列构造二叉树"><a href="#105-从前序与中序遍历序列构造二叉树" class="headerlink" title="105. 从前序与中序遍历序列构造二叉树"></a><a href="https://leetcode.cn/problems/construct-binary-tree-from-preorder-and-inorder-traversal/">105. 从前序与中序遍历序列构造二叉树</a></h2><p>此题依然沿用思路：使用分解子问题的方法解题：根节点 + 左子树 + 右子树</p><ul><li>对于根节点：利用<strong>前</strong>序遍历的性质，中左右，开头第一个即为根节点</li><li>对于左右子树：利用中序遍历的性质，左右中，我们可以找到root对应的index从而找到左右子树的范围<ul><li>对于左子树来说，<strong>前</strong>序遍历的数组从 preStart + 1 开始 到 preStart + leftSize，中序遍历的数组则从inStart 开始 到 rootIdxInOrder - 1:</li><li>对于右子树来说，<strong>前</strong>序遍历的数组从 preStart + leftSize + 1 开始 到 preEnd，中序遍历的数组则从 rootIdxInOrder + 1 开始 到 inEnd:</li></ul></li><li>❗️总结：利用前序遍历找到root节点，利用中序遍历确定左右子树的区间</li></ul><p>ps: 一点优化：用于快速查找root在inorder array里面的位置，由于tree里面的值保证不重复</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;Integer, Integer&gt; val2idxMap;</span><br><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">buildTree</span><span class="params">(<span class="type">int</span>[] preorder, <span class="type">int</span>[] inorder)</span> {</span><br><span class="line">    <span class="comment">// 继续使用分解子问题的方法解题：根节点 + 左子树 + 右子树</span></span><br><span class="line">    <span class="comment">// 利用前序遍历的性质，中左右，开头第一个即为根节点</span></span><br><span class="line">    <span class="comment">// 利用中序遍历的性质，左右中，我们可以找到root对应的index从而找到左右子树的范围</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用于快速查找root在inorder array里面的位置，由于tree里面的值保证不重复：</span></span><br><span class="line">    val2idxMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; inorder.length; i++) {</span><br><span class="line">        val2idxMap.put(inorder[i], i);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">preStart</span> <span class="operator">=</span> <span class="number">0</span>, preEnd = preorder.length - <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">inStart</span> <span class="operator">=</span> <span class="number">0</span>, inEnd = inorder.length - <span class="number">1</span>;</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">root</span> <span class="operator">=</span> build(preorder, preStart, preEnd, inorder, inStart, inEnd);</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> TreeNode <span class="title function_">build</span><span class="params">(<span class="type">int</span>[] preorder, <span class="type">int</span> preStart, <span class="type">int</span> preEnd,</span></span><br><span class="line"><span class="params">                   <span class="type">int</span>[] inorder, <span class="type">int</span> inStart, <span class="type">int</span> inEnd)</span> {</span><br><span class="line">    <span class="keyword">if</span> (preStart &gt; preEnd) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (inStart &gt; inEnd) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">val</span> <span class="operator">=</span> preorder[preStart];</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(val);</span><br><span class="line">    <span class="type">int</span> <span class="variable">rootIdxInOrder</span> <span class="operator">=</span> val2idxMap.get(val);</span><br><span class="line">    <span class="type">int</span> <span class="variable">leftSize</span> <span class="operator">=</span> rootIdxInOrder - inStart;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对于左子树来说，</span></span><br><span class="line">    <span class="comment">// 前序遍历的数组从 preStart + 1 开始 到 preStart + leftSize</span></span><br><span class="line">    <span class="comment">// 中序遍历的数组则从inStart 开始 到 rootIdxInOrder - 1:</span></span><br><span class="line">    root.left = build(preorder, preStart + <span class="number">1</span>, preStart + leftSize,</span><br><span class="line">            inorder, inStart, rootIdxInOrder - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对于右子树来说，</span></span><br><span class="line">    <span class="comment">// 前序遍历的数组从 preStart + leftSize + 1 开始 到 preEnd</span></span><br><span class="line">    <span class="comment">// 中序遍历的数组则从 rootIdxInOrder + 1 开始 到 inEnd:</span></span><br><span class="line">    root.right = build(preorder, preStart + leftSize + <span class="number">1</span>, preEnd,</span><br><span class="line">            inorder, rootIdxInOrder + <span class="number">1</span>, inEnd);</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="106-从中序与后序遍历序列构造二叉树"><a href="#106-从中序与后序遍历序列构造二叉树" class="headerlink" title="106. 从中序与后序遍历序列构造二叉树"></a><a href="https://leetcode.cn/problems/construct-binary-tree-from-inorder-and-postorder-traversal/">106. 从中序与后序遍历序列构造二叉树</a></h2><p>继续沿用上题思路：</p><p>使用分解子问题的方法解题：根节点 + 左子树 + 右子树</p><ul><li>对于根节点：利用<strong>后</strong>序遍历的性质，左右中，右手边第一个即为根节点</li><li>对于左右子树：利用中序遍历的性质，左右中，我们可以找到root对应的index从而找到左右子树的范围<ul><li>PS: ⚠️为了测试，我这里使用rightTreeSize 但是使用leftTreeSize也是可以的：</li><li>对于左子树来说，<strong>后</strong>序遍历的数组从 postStart 开始 到 postEnd - rightTreeSize - 1，中序遍历的数组则从inStart 开始 到 rootIdx - 1:</li><li>对于右子树来说，<strong>后</strong>序遍历的数组从postEnd - rightTreeSize - 1 开始 到 postEnd - 1，中序遍历的数组则从 rootIdx + 1 开始 到 inEnd:</li></ul></li><li>❗️总结：利用<strong>后</strong>序遍历找到root节点，利用中序遍历确定左右子树的区间</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;Integer, Integer&gt; val2IdxMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">buildTree</span><span class="params">(<span class="type">int</span>[] inorder, <span class="type">int</span>[] postorder)</span> {</span><br><span class="line">    <span class="comment">// 继续 找根 + 左子树范围 + 右子树范围</span></span><br><span class="line">    <span class="comment">// 用后序找根因为后序遍历的从后往前第一个是根节点</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; inorder.length; i++) {</span><br><span class="line">        val2IdxMap.put(inorder[i], i);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">postStart</span> <span class="operator">=</span> <span class="number">0</span>, postEnd = postorder.length - <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">inStart</span> <span class="operator">=</span> <span class="number">0</span>, inEnd = inorder.length - <span class="number">1</span>;</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">root</span> <span class="operator">=</span> build(postorder, postStart, postEnd, inorder, inStart, inEnd);</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> TreeNode <span class="title function_">build</span><span class="params">(<span class="type">int</span>[] postorder, <span class="type">int</span> postStart, <span class="type">int</span> postEnd,</span></span><br><span class="line"><span class="params">                        <span class="type">int</span>[] inorder, <span class="type">int</span> inStart, <span class="type">int</span> inEnd)</span> {</span><br><span class="line">    <span class="keyword">if</span> (postStart &gt; postEnd) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (inStart &gt; inEnd) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">rootVal</span> <span class="operator">=</span> postorder[postEnd];</span><br><span class="line">    <span class="type">int</span> <span class="variable">rootIdx</span> <span class="operator">=</span> val2IdxMap.get(rootVal);</span><br><span class="line">    <span class="type">int</span> <span class="variable">rightTreeSize</span> <span class="operator">=</span> inEnd - rootIdx;</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(rootVal);</span><br><span class="line">    root.left = build(postorder, postStart, postEnd - rightTreeSize - <span class="number">1</span>,</span><br><span class="line">            inorder, inStart, rootIdx - <span class="number">1</span>);</span><br><span class="line">    root.right = build(postorder, postEnd - rightTreeSize - <span class="number">1</span>, postEnd - <span class="number">1</span>,</span><br><span class="line">            inorder, rootIdx + <span class="number">1</span>, inEnd);</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>使用leftTreeSize的解法如下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">TreeNode <span class="title function_">build</span><span class="params">(<span class="type">int</span>[] inorder, <span class="type">int</span> inStart, <span class="type">int</span> inEnd,</span></span><br><span class="line"><span class="params">               <span class="type">int</span>[] postorder, <span class="type">int</span> postStart, <span class="type">int</span> postEnd)</span> {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (inStart &gt; inEnd) {</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// root 节点对应的值就是后序遍历数组的最后一个元素</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">rootVal</span> <span class="operator">=</span> postorder[postEnd];</span><br><span class="line">    <span class="comment">// rootVal 在中序遍历数组中的索引</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> valToIndex.get(rootVal);</span><br><span class="line">    <span class="comment">// 左子树的节点个数</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">leftSize</span> <span class="operator">=</span> index - inStart;</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(rootVal);</span><br><span class="line">    <span class="comment">// 递归构造左右子树</span></span><br><span class="line">    root.left = build(inorder, inStart, index - <span class="number">1</span>,</span><br><span class="line">                        postorder, postStart, postStart + leftSize - <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    root.right = build(inorder, index + <span class="number">1</span>, inEnd,</span><br><span class="line">                        postorder, postStart + leftSize, postEnd - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="889-根据前序和后序遍历构造二叉树"><a href="#889-根据前序和后序遍历构造二叉树" class="headerlink" title="889. 根据前序和后序遍历构造二叉树"></a><a href="https://leetcode.cn/problems/construct-binary-tree-from-preorder-and-postorder-traversal/">889. 根据前序和后序遍历构造二叉树</a></h2><p>思路其实是相通的，但是：</p><p>⚠️<strong>通过前序中序，或者后序中序遍历结果可以确定唯一一棵原始二叉树，但是通过前序后序遍历结果无法确定唯一的原始二叉树</strong>。⚠️</p><p>思路：</p><ol><li>首先把前序遍历结果的第一个元素或者后序遍历结果的最后一个元素确定为根节点的值。</li><li>然后把前序遍历结果的第二个元素作为左子树的根节点的值。</li><li>在后序遍历结果中寻找左子树根节点的值，从而确定了左子树的索引边界，进而确定右子树的索引边界，递归构造左右子树即可。</li></ol><p><img src="/2023/04/27/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B9%8B%E6%9E%84%E9%80%A0%E7%B1%BB%E9%97%AE%E9%A2%98/%E9%80%9A%E8%BF%87%E5%89%8D%E5%BA%8F%E5%90%8E%E5%BA%8F%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91.jpeg" alt="通过前序后序构造二叉树"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;Integer, Integer&gt; val2Idx = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">constructFromPrePost</span><span class="params">(<span class="type">int</span>[] preorder, <span class="type">int</span>[] postorder)</span> {</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; postorder.length; i++) {</span><br><span class="line">        val2Idx.put(postorder[i], i);</span><br><span class="line">    }</span><br><span class="line">    <span class="type">int</span> <span class="variable">preStart</span> <span class="operator">=</span> <span class="number">0</span>, preEnd = preorder.length - <span class="number">1</span>,</span><br><span class="line">            postStart = <span class="number">0</span>, postEnd = postorder.length - <span class="number">1</span>;</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">root</span> <span class="operator">=</span> build(preorder, preStart, preEnd, postorder, postStart, postEnd);</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> TreeNode <span class="title function_">build</span><span class="params">(<span class="type">int</span>[] preorder, <span class="type">int</span> preStart, <span class="type">int</span> preEnd,</span></span><br><span class="line"><span class="params">                        <span class="type">int</span>[] postorder, <span class="type">int</span> postStart, <span class="type">int</span> postEnd)</span> {</span><br><span class="line">    <span class="keyword">if</span> (preStart &gt; preEnd) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (postStart &gt; postEnd) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (preEnd == preStart) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(preorder[preStart]);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">rootVal</span> <span class="operator">=</span> preorder[preStart];</span><br><span class="line">    <span class="type">int</span> <span class="variable">leftRootVal</span> <span class="operator">=</span> preorder[preStart + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">leftTreeRootIdxInPostOrder</span> <span class="operator">=</span> val2Idx.get(leftRootVal);</span><br><span class="line">    <span class="type">int</span> <span class="variable">leftTreeSize</span> <span class="operator">=</span> leftTreeRootIdxInPostOrder - postStart + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(rootVal);</span><br><span class="line">    root.left = build(preorder, preStart + <span class="number">1</span>, preStart + leftTreeSize,</span><br><span class="line">            postorder, postStart, leftTreeRootIdxInPostOrder);</span><br><span class="line">    root.right = build(preorder, preStart + leftTreeSize + <span class="number">1</span>, preEnd,</span><br><span class="line">            postorder, leftTreeRootIdxInPostOrder + <span class="number">1</span>, postEnd - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>额外多了一个检查：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (preEnd == preStart) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(preorder[preStart]);</span><br></pre></td></tr></tbody></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
      
      
      <categories>
          
          <category> Algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉树之计算深度</title>
      <link href="/2023/04/27/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B9%8B%E8%AE%A1%E7%AE%97%E6%B7%B1%E5%BA%A6/"/>
      <url>/2023/04/27/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B9%8B%E8%AE%A1%E7%AE%97%E6%B7%B1%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="树计算深度类问题："><a href="#树计算深度类问题：" class="headerlink" title="树计算深度类问题："></a>树计算深度类问题：</h1><h2 id="111-二叉树的最小深度"><a href="#111-二叉树的最小深度" class="headerlink" title="111. 二叉树的最小深度"></a><a href="https://leetcode.cn/problems/minimum-depth-of-binary-tree/">111. 二叉树的最小深度</a></h2><h3 id="方法1-DFS"><a href="#方法1-DFS" class="headerlink" title="方法1 DFS:"></a>方法1 DFS:</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minDepth</span><span class="params">(TreeNode root)</span> {</span><br><span class="line">    <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span>  dfsCompose(root);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">dfsCompose</span><span class="params">(TreeNode cur)</span> {</span><br><span class="line">    <span class="comment">// 函数定义：返回当前树的最小深度 注意最小深度是根结点到叶子结点</span></span><br><span class="line">    <span class="keyword">if</span>(cur == <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//这道题递归条件里分为三种情况</span></span><br><span class="line">    <span class="comment">//1.左孩子和有孩子都为空的情况，说明到达了叶子节点，直接返回1即可</span></span><br><span class="line">    <span class="keyword">if</span>(cur.left == <span class="literal">null</span> &amp;&amp; cur.right == <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//2.如果左孩子和由孩子其中一个为空，那么需要返回比较大的那个孩子的深度        </span></span><br><span class="line">    <span class="type">int</span> <span class="variable">m1</span> <span class="operator">=</span> minDepth(cur.left);</span><br><span class="line">    <span class="type">int</span> <span class="variable">m2</span> <span class="operator">=</span> minDepth(cur.right);</span><br><span class="line">    <span class="comment">//这里其中一个节点为空，说明m1和m2有一个必然为0，所以可以返回m1 + m2 + 1;</span></span><br><span class="line">    <span class="keyword">if</span>(cur.left == <span class="literal">null</span> || cur.right == <span class="literal">null</span>) <span class="keyword">return</span> m1 + m2 + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.最后一种情况，也就是左右孩子都不为空，返回最小深度+1即可</span></span><br><span class="line">    <span class="keyword">return</span> Math.min(m1,m2) + <span class="number">1</span>; </span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">dfsCompose</span><span class="params">(TreeNode cur, <span class="type">int</span> curDepth)</span> {</span><br><span class="line">    <span class="comment">// 函数定义：返回当前树的最小深度 注意最小深度是根结点到叶子结点</span></span><br><span class="line">    <span class="keyword">if</span> (cur == <span class="literal">null</span>) <span class="keyword">return</span> Integer.MAX_VALUE;</span><br><span class="line">    <span class="keyword">if</span> (cur.left == <span class="literal">null</span> &amp;&amp; cur.right == <span class="literal">null</span>) <span class="keyword">return</span> curDepth;</span><br><span class="line">    <span class="type">int</span> <span class="variable">leftMin</span> <span class="operator">=</span> dfsCompose(cur.left, curDepth + <span class="number">1</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">rightMin</span> <span class="operator">=</span> dfsCompose(cur.right, curDepth + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> Math.min(leftMin, rightMin);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="方法2-BFS"><a href="#方法2-BFS" class="headerlink" title="方法2 BFS"></a>方法2 BFS</h3><p>第一版：（⚠️有瑕疵）</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minDepth</span><span class="params">(TreeNode root)</span> {</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> bfs(root);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">bfs</span><span class="params">(TreeNode cur)</span> {</span><br><span class="line">    <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">    Deque&lt;TreeNode&gt; dq = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">    dq.addLast(cur);</span><br><span class="line">    <span class="type">int</span> <span class="variable">height</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (!dq.isEmpty()) {</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> dq.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len; i++) {</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">levelCur</span> <span class="operator">=</span> dq.pollFirst();</span><br><span class="line">            <span class="keyword">if</span> (levelCur.left == <span class="literal">null</span> &amp;&amp; levelCur.right == <span class="literal">null</span>) min = Math.min(min, height);</span><br><span class="line">            <span class="keyword">if</span> (levelCur.left != <span class="literal">null</span>) dq.addLast(levelCur.left);</span><br><span class="line">            <span class="keyword">if</span> (levelCur.right != <span class="literal">null</span>) dq.addLast(levelCur.right);</span><br><span class="line">        }</span><br><span class="line">        height++;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> min;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>这个版本有瑕疵的原因是BFS<strong>第一个碰到的叶子结点一定是最短的</strong>。因为他是一层一层下去的</p></blockquote><p>因此无需维护min, 可以直接return 所以可以优化为：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minDepth</span><span class="params">(TreeNode root)</span> {</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> bfs(root);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">bfs</span><span class="params">(TreeNode cur)</span> {</span><br><span class="line">    Deque&lt;TreeNode&gt; dq = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">    dq.addLast(cur);</span><br><span class="line">    <span class="type">int</span> <span class="variable">height</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (!dq.isEmpty()) {</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> dq.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len; i++) {</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">levelCur</span> <span class="operator">=</span> dq.pollFirst();</span><br><span class="line">            <span class="keyword">if</span> (levelCur.left == <span class="literal">null</span> &amp;&amp; levelCur.right == <span class="literal">null</span>) <span class="keyword">return</span> height;</span><br><span class="line">            <span class="keyword">if</span> (levelCur.left != <span class="literal">null</span>) dq.addLast(levelCur.left);</span><br><span class="line">            <span class="keyword">if</span> (levelCur.right != <span class="literal">null</span>) dq.addLast(levelCur.right);</span><br><span class="line">        }</span><br><span class="line">        height++;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> height;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>优化前：</p><p><img src="/2023/04/27/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B9%8B%E8%AE%A1%E7%AE%97%E6%B7%B1%E5%BA%A6/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%B0%8F%E6%B7%B1%E5%BA%A6BFS%E4%BC%98%E5%8C%96%E5%89%8D.png" alt="111. 二叉树的最小深度BFS优化前.png"></p><p>优化后：</p><p><img src="/2023/04/27/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B9%8B%E8%AE%A1%E7%AE%97%E6%B7%B1%E5%BA%A6/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%B0%8F%E6%B7%B1%E5%BA%A6BFS%E4%BC%98%E5%8C%96%E5%90%8E.png" alt="111. 二叉树的最小深度BFS优化后.png"></p><h2 id="104-二叉树的最大深度"><a href="#104-二叉树的最大深度" class="headerlink" title="104. 二叉树的最大深度"></a><a href="https://leetcode.cn/problems/maximum-depth-of-binary-tree/">104. 二叉树的最大深度</a></h2><h3 id="dfs的两个解法："><a href="#dfs的两个解法：" class="headerlink" title="dfs的两个解法："></a>dfs的两个解法：</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxDepth</span><span class="params">(TreeNode root)</span> {</span><br><span class="line">    traverse(root);</span><br><span class="line">    <span class="keyword">return</span> res == Integer.MIN_VALUE ? <span class="number">0</span> : res;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">getMax</span><span class="params">(TreeNode cur)</span> {</span><br><span class="line">    <span class="keyword">if</span> (cur == <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">leftMax</span> <span class="operator">=</span> getMax(cur.left);</span><br><span class="line">    <span class="type">int</span> <span class="variable">rightMax</span> <span class="operator">=</span> getMax(cur.right);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">maxDepth</span> <span class="operator">=</span> Math.max(leftMax, rightMax) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> maxDepth;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">depth</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> Integer.MIN_VALUE;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">traverse</span><span class="params">(TreeNode cur)</span> {</span><br><span class="line">    <span class="keyword">if</span> (cur == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">    depth++;</span><br><span class="line">    <span class="keyword">if</span> (cur.left == <span class="literal">null</span> &amp;&amp; cur.right == <span class="literal">null</span>) {</span><br><span class="line">        res = Math.max(depth, res);</span><br><span class="line">    }</span><br><span class="line">    traverse(cur.left);</span><br><span class="line">    traverse(cur.right);</span><br><span class="line">    depth--;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="559-N-叉树的最大深度"><a href="#559-N-叉树的最大深度" class="headerlink" title="559. N 叉树的最大深度"></a><a href="https://leetcode.cn/problems/maximum-depth-of-n-ary-tree/">559. N 叉树的最大深度</a></h2><h3 id="回溯：方法1"><a href="#回溯：方法1" class="headerlink" title="回溯：方法1"></a>回溯：方法1</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxDepth</span><span class="params">(Node root)</span> {</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    traverse(root); </span><br><span class="line">    <span class="keyword">return</span> res + <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> Integer.MIN_VALUE;</span><br><span class="line"><span class="type">int</span> depth;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">traverse</span><span class="params">(Node root)</span> {</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (root.children.size() == <span class="number">0</span>) {</span><br><span class="line">        res = Math.max(res, depth);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (Node child : root.children) {</span><br><span class="line">        depth++;</span><br><span class="line">        traverse(child);</span><br><span class="line">        depth--;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="回溯：格式2"><a href="#回溯：格式2" class="headerlink" title="回溯：格式2"></a>回溯：格式2</h3><p>⚠️注意depth的位置以及res在maxDepth中return的变化⚠️</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxDepth</span><span class="params">(Node root)</span> {</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    traverse(root); </span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> Integer.MIN_VALUE;</span><br><span class="line"><span class="type">int</span> depth;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">traverse</span><span class="params">(Node root)</span> {</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">    depth++;</span><br><span class="line">    <span class="keyword">if</span> (root.children.size() == <span class="number">0</span>) {</span><br><span class="line">        res = Math.max(res, depth);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (Node child : root.children) {</span><br><span class="line">        traverse(child);</span><br><span class="line">    }</span><br><span class="line">    depth--;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
      
      
      <categories>
          
          <category> Algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回溯</title>
      <link href="/2023/04/20/%E5%9B%9E%E6%BA%AF/"/>
      <url>/2023/04/20/%E5%9B%9E%E6%BA%AF/</url>
      
        <content type="html"><![CDATA[<div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>此教程参考  <a href="https://labuladong.github.io/algo/di-ling-zh-bfe1b/hui-su-sua-c26da/">labuladong - 回溯算法框架</a> 以及 <a href="https://www.programmercarl.com/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80.html#%E9%A2%98%E7%9B%AE%E5%88%86%E7%B1%BB%E5%A4%A7%E7%BA%B2%E5%A6%82%E4%B8%8B">代码随想录 - 回溯篇</a><br>感谢支持！</p></div><div class="note green icon-padding flat"><i class="note-icon fas fa-rocket"></i><p>📚 文档目录：</p><p>此文档包含以下几个部分：</p><ul><li><a href="/2023/08/20/%E4%BB%8E%E4%BA%8C%E5%8F%89%E6%A0%91%E5%88%B0%E5%9B%9E%E6%BA%AF%E5%88%B0DP/" title="从二叉树到回溯到DP">从二叉树到回溯到DP</a></li><li><a href="/2023/05/09/%E5%9B%9E%E6%BA%AF%E4%B9%8B%E6%8E%92%E5%88%97-%E7%BB%84%E5%90%88-%E5%AD%90%E9%9B%86%E9%97%AE%E9%A2%98/" title="回溯之排列-组合-子集问题">回溯之排列-组合-子集问题</a></li><li><a href="/2023/05/09/%E5%9B%9E%E6%BA%AF%E4%B9%8B%E9%9B%86%E5%90%88%E5%88%92%E5%88%86%E9%97%AE%E9%A2%98/" title="回溯之集合划分问题">回溯之集合划分问题</a></li><li><a href="/2023/05/13/%E5%9B%9E%E6%BA%AF%E4%B9%8B%E5%88%87%E5%89%B2%E9%97%AE%E9%A2%98/" title="回溯之切割问题">回溯之切割问题</a></li><li><a href="/2023/05/18/%E5%9B%9E%E6%BA%AF%E4%B9%8B%E6%A3%8B%E7%9B%98%E9%97%AE%E9%A2%98/" title="回溯之棋盘问题">回溯之棋盘问题</a></li></ul></div><h1 id="回溯算法框架"><a href="#回溯算法框架" class="headerlink" title="回溯算法框架"></a>回溯算法框架</h1><p>回溯算法和我们常说的 DFS 算法非常类似，本质上就是一种暴力穷举算法。</p><p>回溯算法和 DFS 算法的细微差别是：<strong>回溯算法是在遍历「树枝」，DFS 算法是在遍历「节点」</strong></p><h2 id="关于回溯的撤销"><a href="#关于回溯的撤销" class="headerlink" title="关于回溯的撤销"></a>关于回溯的撤销</h2><p>回溯撤销操作通常在以下情况下执行：</p><ol><li>当你已经完成了<strong>当前层级的所有操作，并且需要返回到上一层级以尝试其他可能性时</strong>。在这种情况下，撤销操作可以帮助你恢复到之前的状态，从而允许你继续探索其他可能的解决方案。</li><li>当你在当前层级上遇到了一个<strong>不满足约束条件的解时</strong>。在这种情况下，你需要撤销在这个解上所做的操作，以便回到之前的状态并尝试其他选择。</li></ol><p>在递归算法中，回溯撤销操作通常在递归调用之后执行。这是因为，在递归调用返回时，你已经完成了该层级的所有操作，现在需要恢复到之前的状态以便探索其他可能性。</p><p>回溯撤销操作应在完成<strong>当前层级的所有操作</strong>后执行，以便在回溯过程中恢复到之前的状态并尝试其他可能性。</p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>为了解决回溯的相关问题，就是解决一个决策树的遍历</p><p>站在回溯树的一个节点上，需要思考 3 个问题：</p><p>1、路径：也就是已经做出的选择。</p><p>2、选择列表：也就是你当前可以做的选择。</p><p>3、结束条件：也就是到达决策树底层，无法再做选择的条件。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">result = []</span><br><span class="line">def <span class="title function_">backtrack</span><span class="params">(路径, 选择列表)</span>:</span><br><span class="line">    <span class="keyword">if</span> 满足结束条件:</span><br><span class="line">        result.add(路径)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> 选择 in 选择列表:</span><br><span class="line">        做选择</span><br><span class="line">        backtrack(路径, 选择列表)</span><br><span class="line">        撤销选择</span><br></pre></td></tr></tbody></table></figure><p><strong>核心就是 for 循环里面的递归，在递归调用之前「做选择」，在递归调用之后「撤销选择」</strong></p><h1 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h1><ul><li><p>排列：N个数按一定规则全排列，有几种排列方式</p></li><li><p>组合：N个数里面按一定规则找出k个数的集合</p></li><li><p>子集：一个N个数的集合里有多少符合条件的子集</p><ul><li><a href="/2023/05/09/%E5%9B%9E%E6%BA%AF%E4%B9%8B%E6%8E%92%E5%88%97-%E7%BB%84%E5%90%88-%E5%AD%90%E9%9B%86%E9%97%AE%E9%A2%98/" title="回溯之排列-组合-子集问题">回溯之排列-组合-子集问题</a></li></ul></li><li><p>切割：一个字符串按一定规则有几种切割方式</p><ul><li><a href="/2023/05/13/%E5%9B%9E%E6%BA%AF%E4%B9%8B%E5%88%87%E5%89%B2%E9%97%AE%E9%A2%98/" title="回溯之切割问题">回溯之切割问题</a></li></ul></li><li><p>棋盘：N皇后，解数独等等</p><ul><li><a href="/2023/05/18/%E5%9B%9E%E6%BA%AF%E4%B9%8B%E6%A3%8B%E7%9B%98%E9%97%AE%E9%A2%98/" title="回溯之棋盘问题">回溯之棋盘问题</a></li></ul></li></ul><p>关键在于<strong>需要暴力去搜索</strong>的算法</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="组合-and-子集"><a href="#组合-and-子集" class="headerlink" title="组合 and 子集"></a>组合 and 子集</h2><h3 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h3><p><img src="/2023/04/20/%E5%9B%9E%E6%BA%AF/%E6%80%BB%E7%BB%93_%E7%BB%84%E5%90%88.png" alt="总结_组合"></p><p>for循环横向遍历，递归纵向遍历，回溯不断调整结果集</p><h3 id="子集"><a href="#子集" class="headerlink" title="子集"></a>子集</h3><h2 id="排列"><a href="#排列" class="headerlink" title="排列"></a>排列</h2><h2 id="N皇后-and-解数独"><a href="#N皇后-and-解数独" class="headerlink" title="N皇后 and 解数独"></a>N皇后 and 解数独</h2>]]></content>
      
      
      <categories>
          
          <category> Algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 回溯 </tag>
            
            <tag> backtrack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>递归</title>
      <link href="/2023/04/17/%E9%80%92%E5%BD%92/"/>
      <url>/2023/04/17/%E9%80%92%E5%BD%92/</url>
      
        <content type="html"><![CDATA[<div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>递归 is all I hate </p></div><h1 id="递归🐢"><a href="#递归🐢" class="headerlink" title="递归🐢"></a>递归🐢</h1><blockquote><p>递归讲究的就是一个自信，<strong>相信自己的函数定义和它的return值</strong>，做下去，wow amazing，你就得到了结果</p></blockquote><p>递归算法的<strong>时间</strong>复杂度 = <strong>递归的次数</strong> x <strong>函数本身的时间复杂度</strong></p><p>递归算法的<strong>空间</strong>复杂度 = <strong>递归堆栈的深度</strong> + <strong>算法申请的存储空间</strong></p><p>或者再说得直观一点：</p><p>递归算法的时间复杂度 = <strong>递归树的节点个数</strong> x <strong>每个节点的时间复杂度</strong></p><p>递归算法的空间复杂度 = <strong>递归树的高度</strong> + <strong>算法申请的存储空间</strong></p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><h3 id="226-翻转二叉树"><a href="#226-翻转二叉树" class="headerlink" title="226. 翻转二叉树"></a><a href="https://leetcode.cn/problems/invert-binary-tree/">226. 翻转二叉树</a></h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">invertTree</span><span class="params">(TreeNode root)</span> {</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">res</span> <span class="operator">=</span> dfs(root);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> TreeNode <span class="title function_">dfs</span><span class="params">(TreeNode cur)</span> {</span><br><span class="line">    <span class="keyword">if</span> (cur == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">leftSwappedResult</span> <span class="operator">=</span> dfs(cur.left);</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">rightSwappedResult</span> <span class="operator">=</span> dfs(cur.right);</span><br><span class="line">    cur.left = rightSwappedResult;</span><br><span class="line">    cur.right = leftSwappedResult;</span><br><span class="line">    <span class="keyword">return</span> cur;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 递归 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉树</title>
      <link href="/2023/04/17/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
      <url>/2023/04/17/%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>此教程参考 <a href="https://programmercarl.com/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80.html">代码随想录-二叉树篇</a> 以及 <a href="https://labuladong.github.io/algo/di-ling-zh-bfe1b/dong-ge-da-334dd/">labuladong - 二叉树</a><br>感谢支持！</p></div><div class="note blue icon-padding flat"><i class="note-icon fas fa-tree"></i><p>见 <a href="/2023/04/27/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B9%8B%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/" title="二叉树之公共祖先">二叉树之公共祖先</a> 中包含公共祖先的习题以及思路</p><p>见 <a href="/2023/04/27/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B9%8B%E6%9E%84%E9%80%A0%E7%B1%BB%E9%97%AE%E9%A2%98/" title="二叉树之构造类问题">二叉树之构造类问题</a> 中包含构造类问题的习题以及思路</p><p>见 <a href="/2023/04/27/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B9%8B%E8%AE%A1%E7%AE%97%E6%B7%B1%E5%BA%A6/" title="二叉树之计算深度">二叉树之计算深度</a> 中包含需要计算深度问题的习题以及思路</p><p>见 <a href="/2023/04/27/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/" title="二叉搜索树">二叉搜索树</a> 中包含二叉搜索树问题的习题以及思路</p></div><h1 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h1><h2 id="定义概念："><a href="#定义概念：" class="headerlink" title="定义概念："></a>定义概念：</h2><p><img src="/2023/04/17/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%AB%98%E5%BA%A6%E5%92%8C%E6%B7%B1%E5%BA%A6.png" alt="二叉树的高度和深度"></p><p>高度：二叉树中任意一个节点到<strong>叶子节点</strong>的距离 &lt;- 经常用<strong>后序遍历</strong>解决问题</p><ul><li>通过将子节点的高度返回给父节点父节点高度 +1 即可解决问题</li></ul><p>深度：二叉树中任意一个节点到<strong>根节点</strong>的距离 &lt;- 经常用<strong>前序遍历</strong>解决问题</p><ul><li>一往下就深度就 +1</li></ul><h2 id="思维方法："><a href="#思维方法：" class="headerlink" title="思维方法："></a>思维方法：</h2><p>遇到一道二叉树的题目时的<strong>通用思考</strong>过程是：</p><p>1、是否可以通过遍历一遍二叉树得到答案？如果可以，用一个 traverse 函数配合外部变量来实现。</p><p>2、是否可以定义一个递归函数，通过子问题（子树）的答案推导出原问题的答案？如果可以，写出这个递归函数的定义，并充分利用这个函数的返回值。</p><p>3、无论使用哪一种思维模式，你都要明白二叉树的每一个节点需要做什么，需要在什么时候（前中后序）做。</p><p>关于后序遍历：</p><p>后序遍历好在：前序位置的代码只能从<strong>函数参数中获取父节点传递来的数据</strong>，而后序位置的代码<strong>不仅可以获取参数数据，还可以获取到子树通过函数返回值传递回来的数据。</strong></p><p><strong>一旦发现题目和子树有关，那大概率要给函数设置合理的定义和返回值，在后序位置写代码了</strong>。</p><blockquote><p>根据刷题经验的补充：可以尝试把树抽象成为数组，来看看用数组怎么解决问题</p></blockquote><h2 id="递归遍历"><a href="#递归遍历" class="headerlink" title="递归遍历"></a>递归遍历</h2><blockquote><p>🤣 一入递归深似海，走到尽头出不来 :P</p></blockquote><ol><li>确定递归函数的参数和返回值</li><li>确定终止条件</li><li>确定单层递归的逻辑</li></ol><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><ul><li>144.二叉树的前序遍历</li><li>145.二叉树的后序遍历</li><li>94.二叉树的中序遍历</li></ul><p>核心就是 traverse function：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">traversalMain</span><span class="params">(TreeNode root)</span> {</span><br><span class="line">    List&lt;Integer&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    traverse(root, res);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">traverse</span><span class="params">(TreeNode cur, List&lt;Integer&gt; res)</span> {</span><br><span class="line">  <span class="keyword">if</span> (cur == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">  <span class="comment">// res.add(cur.val); &lt;- 前序遍历位置</span></span><br><span class="line">  traverse(cur.left, res);</span><br><span class="line">  <span class="comment">// res.add(cur.val); &lt;- 中序遍历位置</span></span><br><span class="line">  traverse(cur.right, res);</span><br><span class="line">  <span class="comment">// res.add(cur.val); &lt;- 后序遍历位置</span></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="迭代遍历"><a href="#迭代遍历" class="headerlink" title="迭代遍历"></a>迭代遍历</h2><p>其实就是用迭代法实现前中后序的遍历</p><blockquote><p>前序 中左右 </p><p>中序 左中右 </p><p>后序 左右中</p></blockquote><p>前序和后序可以归类为一种而中序略微有些差别：</p><p>前序和中序可以被归类为 类似于层序遍历的遍历：</p><p>对于前序来说由于我们需要的结果为 中左右 那么借助栈的先进后出的性质我们需要放入中/根 (pop) 右左：</p><p><img src="/2023/04/17/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86%EF%BC%88%E8%BF%AD%E4%BB%A3%E6%B3%95%EF%BC%89.gif" alt="二叉树前序遍历（迭代法）"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">preorderTraversal</span><span class="params">(TreeNode root)</span> {</span><br><span class="line">    <span class="comment">// 迭代法：前序需要满足 中左右 的遍历顺序</span></span><br><span class="line">    Deque&lt;TreeNode&gt; dq = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">    List&lt;Integer&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> res;</span><br><span class="line">    dq.addLast(root);</span><br><span class="line">    <span class="keyword">while</span> (!dq.isEmpty()) {</span><br><span class="line">        <span class="keyword">if</span> (dq.peekLast() == <span class="literal">null</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">cur</span> <span class="operator">=</span> dq.pollLast();</span><br><span class="line">        res.add(cur.val);</span><br><span class="line">        <span class="keyword">if</span> (cur.right != <span class="literal">null</span>) dq.addLast(cur.right);</span><br><span class="line">        <span class="keyword">if</span> (cur.left != <span class="literal">null</span>) dq.addLast(cur.left);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>对于后序遍历来说，我们只需要完成如下的操作：</p><ol><li>调整层里的右左（前序） -&gt; 左右（后序）</li><li>反转结果即可</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">postorderTraversal</span><span class="params">(TreeNode root)</span> {</span><br><span class="line">    <span class="comment">// 迭代法：后序 需要满足 左右中 的遍历顺序</span></span><br><span class="line">    <span class="comment">// 前序 中左右</span></span><br><span class="line">    <span class="comment">// 通过 中右左 -&gt; 左右中 来达成效果</span></span><br><span class="line">    Deque&lt;TreeNode&gt; dq = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">    List&lt;Integer&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> res;</span><br><span class="line">    dq.addLast(root);</span><br><span class="line">    <span class="keyword">while</span> (!dq.isEmpty()) {</span><br><span class="line">        <span class="keyword">if</span> (dq.peekLast() == <span class="literal">null</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">cur</span> <span class="operator">=</span> dq.pollLast();</span><br><span class="line">        res.add(cur.val);</span><br><span class="line">        <span class="keyword">if</span> (cur.left != <span class="literal">null</span>) dq.addLast(cur.left);</span><br><span class="line">        <span class="keyword">if</span> (cur.right != <span class="literal">null</span>) dq.addLast(cur.right);</span><br><span class="line">    }</span><br><span class="line">    Collections.reverse(res);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>中序遍历会有所不同，因为现在的中不在是上一层的根，而是需要左节点遍历完成后的祖先。因此，我们需要一个额外的遍历的指针来记录visit过的节点：</p><p><img src="/2023/04/17/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86%EF%BC%88%E8%BF%AD%E4%BB%A3%E6%B3%95%EF%BC%89.gif" alt="二叉树中序遍历（迭代法）"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">inorderTraversal</span><span class="params">(TreeNode root)</span> {</span><br><span class="line">    <span class="comment">// 迭代法的中序遍历：左中右</span></span><br><span class="line">    Deque&lt;TreeNode&gt; dq = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">    List&lt;Integer&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">  <span class="comment">// cur 这里只作为一个跟踪的指针用，换成root也没有区别。</span></span><br><span class="line">  <span class="type">TreeNode</span> <span class="variable">cur</span> <span class="operator">=</span> root;</span><br><span class="line">    <span class="keyword">while</span> (!dq.isEmpty() || cur != <span class="literal">null</span>) {</span><br><span class="line">        <span class="keyword">if</span> (cur != <span class="literal">null</span>) {</span><br><span class="line">            dq.addLast(cur);</span><br><span class="line">            cur = cur.left;</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            cur = dq.pollLast();</span><br><span class="line">            res.add(cur.val);</span><br><span class="line">            cur = cur.right;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="统一后的迭代遍历"><a href="#统一后的迭代遍历" class="headerlink" title="统一后的迭代遍历"></a>统一后的迭代遍历</h3><p>为了风格统一，来用以下的方法来做三序的迭代法本质上是用了<strong>标记法</strong>：<strong>就是要处理的节点放入栈之后，紧接着放入一个空指针作为标记。</strong></p><p>中序遍历的标记法例子：</p><p><img src="/2023/04/17/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86%E8%BF%AD%E4%BB%A3%EF%BC%88%E7%BB%9F%E4%B8%80%E5%86%99%E6%B3%95%EF%BC%89.gif" alt="中序遍历迭代（统一写法）"></p><h4 id="前序遍历"><a href="#前序遍历" class="headerlink" title="前序遍历"></a>前序遍历</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">preorderTraversal</span><span class="params">(TreeNode root)</span> {</span><br><span class="line">        List&lt;Integer&gt; result = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        Stack&lt;TreeNode&gt; st = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (root != <span class="literal">null</span>) st.push(root);</span><br><span class="line">        <span class="keyword">while</span> (!st.empty()) {</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> st.peek();</span><br><span class="line">            <span class="keyword">if</span> (node != <span class="literal">null</span>) {</span><br><span class="line">                st.pop(); <span class="comment">// 将该节点弹出，避免重复操作，下面再将右中左节点添加到栈中</span></span><br><span class="line">                <span class="keyword">if</span> (node.right!=<span class="literal">null</span>) st.push(node.right);  <span class="comment">// 添加右节点（空节点不入栈）</span></span><br><span class="line">                <span class="keyword">if</span> (node.left!=<span class="literal">null</span>) st.push(node.left);    <span class="comment">// 添加左节点（空节点不入栈）</span></span><br><span class="line">                st.push(node);                          <span class="comment">// 添加中节点</span></span><br><span class="line">                st.push(<span class="literal">null</span>); <span class="comment">// 中节点访问过，但是还没有处理，加入空节点做为标记。</span></span><br><span class="line">                </span><br><span class="line">            } <span class="keyword">else</span> { <span class="comment">// 只有遇到空节点的时候，才将下一个节点放进结果集</span></span><br><span class="line">                st.pop();           <span class="comment">// 将空节点弹出</span></span><br><span class="line">                node = st.peek();    <span class="comment">// 重新取出栈中元素</span></span><br><span class="line">                st.pop();</span><br><span class="line">                result.add(node.val); <span class="comment">// 加入到结果集</span></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">inorderTraversal</span><span class="params">(TreeNode root)</span> {</span><br><span class="line">        List&lt;Integer&gt; result = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    Stack&lt;TreeNode&gt; st = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (root != <span class="literal">null</span>) st.push(root);</span><br><span class="line">    <span class="keyword">while</span> (!st.empty()) {</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> st.peek();</span><br><span class="line">        <span class="keyword">if</span> (node != <span class="literal">null</span>) {</span><br><span class="line">            st.pop(); <span class="comment">// 将该节点弹出，避免重复操作，下面再将右中左节点添加到栈中</span></span><br><span class="line">            <span class="keyword">if</span> (node.right!=<span class="literal">null</span>) st.push(node.right);  <span class="comment">// 添加右节点（空节点不入栈）</span></span><br><span class="line">            st.push(node);                          <span class="comment">// 添加中节点</span></span><br><span class="line">            st.push(<span class="literal">null</span>); <span class="comment">// 中节点访问过，但是还没有处理，加入空节点做为标记。</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (node.left!=<span class="literal">null</span>) st.push(node.left);    <span class="comment">// 添加左节点（空节点不入栈）</span></span><br><span class="line">        } <span class="keyword">else</span> { <span class="comment">// 只有遇到空节点的时候，才将下一个节点放进结果集</span></span><br><span class="line">            st.pop();           <span class="comment">// 将空节点弹出</span></span><br><span class="line">            node = st.peek();    <span class="comment">// 重新取出栈中元素</span></span><br><span class="line">            st.pop();</span><br><span class="line">            result.add(node.val); <span class="comment">// 加入到结果集</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">   <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">postorderTraversal</span><span class="params">(TreeNode root)</span> {</span><br><span class="line">        List&lt;Integer&gt; result = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        Stack&lt;TreeNode&gt; st = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (root != <span class="literal">null</span>) st.push(root);</span><br><span class="line">        <span class="keyword">while</span> (!st.empty()) {</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> st.peek();</span><br><span class="line">            <span class="keyword">if</span> (node != <span class="literal">null</span>) {</span><br><span class="line">                st.pop(); <span class="comment">// 将该节点弹出，避免重复操作，下面再将右中左节点添加到栈中</span></span><br><span class="line">                st.push(node);                          <span class="comment">// 添加中节点</span></span><br><span class="line">                st.push(<span class="literal">null</span>); <span class="comment">// 中节点访问过，但是还没有处理，加入空节点做为标记。</span></span><br><span class="line">                <span class="keyword">if</span> (node.right!=<span class="literal">null</span>) st.push(node.right);  <span class="comment">// 添加右节点（空节点不入栈）</span></span><br><span class="line">                <span class="keyword">if</span> (node.left!=<span class="literal">null</span>) st.push(node.left);    <span class="comment">// 添加左节点（空节点不入栈）         </span></span><br><span class="line">                               </span><br><span class="line">            } <span class="keyword">else</span> { <span class="comment">// 只有遇到空节点的时候，才将下一个节点放进结果集</span></span><br><span class="line">                st.pop();           <span class="comment">// 将空节点弹出</span></span><br><span class="line">                node = st.peek();    <span class="comment">// 重新取出栈中元素</span></span><br><span class="line">                st.pop();</span><br><span class="line">                result.add(node.val); <span class="comment">// 加入到结果集</span></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">   }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="层序遍历"><a href="#层序遍历" class="headerlink" title="层序遍历"></a>层序遍历</h2><p>核心：使用<strong>队列</strong> 因为有<strong>先入先出</strong>的性质 + 用 size 来维护队列（当前层的元素数量，从而保证元素是固定于这一层）</p><blockquote><p>队列和栈真是好兄弟，队列来做BFS，栈来做DFS <span class="github-emoji"><span>😆</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p></blockquote><p><img src="/2023/04/17/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86.gif" alt="二叉树的层序遍历"></p><ol><li>根节点入队</li><li>loop while(!q.isempty())</li><li>int len = q.size()</li><li>while (Len– &gt; 0)</li></ol><h3 id="例题："><a href="#例题：" class="headerlink" title="例题："></a>例题：</h3><ul><li>102.二叉树的层序遍历</li><li>107.二叉树的层次遍历II</li><li>199.二叉树的右视图</li><li>637.二叉树的层平均值</li><li>429.N叉树的层序遍历</li><li>515.在每个树行中找最大值</li><li>116.填充每个节点的下一个右侧节点指针</li><li>117.填充每个节点的下一个右侧节点指针II</li><li>104.二叉树的最大深度</li><li>111.二叉树的最小深度</li></ul><blockquote><p>太多了… 仅需几道题详解</p></blockquote><h4 id="102-二叉树的层序遍历"><a href="#102-二叉树的层序遍历" class="headerlink" title="102. 二叉树的层序遍历"></a><a href="https://leetcode.cn/problems/binary-tree-level-order-traversal/">102. 二叉树的层序遍历</a></h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">levelOrder</span><span class="params">(TreeNode root)</span> {</span><br><span class="line">    Deque&lt;TreeNode&gt; dq = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> res;</span><br><span class="line">    dq.addLast(root); <span class="comment">// &lt;- 头节点入队</span></span><br><span class="line">    <span class="keyword">while</span> (!dq.isEmpty()) {</span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> dq.size(); <span class="comment">// &lt;- get 当前的 size</span></span><br><span class="line">        List&lt;Integer&gt; cur = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++) {</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">top</span> <span class="operator">=</span> dq.pollFirst();</span><br><span class="line">            cur.add(top.val);</span><br><span class="line">            <span class="keyword">if</span> (top.left != <span class="literal">null</span>) dq.addLast(top.left);</span><br><span class="line">            <span class="keyword">if</span> (top.right != <span class="literal">null</span>) dq.addLast(top.right);</span><br><span class="line">        }</span><br><span class="line">        res.add(cur);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="107-二叉树的层序遍历-II"><a href="#107-二叉树的层序遍历-II" class="headerlink" title="107. 二叉树的层序遍历 II"></a><a href="https://leetcode.cn/problems/binary-tree-level-order-traversal-ii/">107. 二叉树的层序遍历 II</a></h4><p>唯一的区别就是用linkedlist把一层的结果加到头部即可</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">levelOrderBottom</span><span class="params">(TreeNode root)</span> {</span><br><span class="line">    LinkedList&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    Deque&lt;TreeNode&gt; dq = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> res;</span><br><span class="line">    dq.addLast(root);</span><br><span class="line">    <span class="keyword">while</span> (!dq.isEmpty()) {</span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> dq.size();</span><br><span class="line">        List&lt;Integer&gt; cur = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++) {</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">curNode</span> <span class="operator">=</span> dq.pollFirst();</span><br><span class="line">            cur.add(curNode.val);</span><br><span class="line">            <span class="keyword">if</span> (curNode.left != <span class="literal">null</span>) dq.add(curNode.left);</span><br><span class="line">            <span class="keyword">if</span> (curNode.right != <span class="literal">null</span>) dq.add(curNode.right);</span><br><span class="line">        }</span><br><span class="line">        res.addFirst(cur);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="例题-1"><a href="#例题-1" class="headerlink" title="例题"></a>例题</h2><h3 id="树计算深度类问题："><a href="#树计算深度类问题：" class="headerlink" title="树计算深度类问题："></a>树计算深度类问题：</h3><blockquote><p>见 <a href="/2023/04/27/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B9%8B%E8%AE%A1%E7%AE%97%E6%B7%B1%E5%BA%A6/" title="二叉树之计算深度">二叉树之计算深度</a> 中包含计算深度类问题的习题以及思路</p></blockquote><h3 id="求节点和的问题"><a href="#求节点和的问题" class="headerlink" title="求节点和的问题"></a>求节点和的问题</h3><h4 id="404-左叶子之和"><a href="#404-左叶子之和" class="headerlink" title="404. 左叶子之和"></a><a href="https://leetcode.cn/problems/sum-of-left-leaves/">404. 左叶子之和</a></h4><p>此题可以分解为三个问题：</p><ol><li>求所有节点的和, 很简单，就是左右树的节点和加root节点</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 先序遍历求所有节点值之和</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sumOfTrees</span><span class="params">(TreeNode root)</span> {</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) {</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="type">int</span> <span class="variable">leave</span> <span class="operator">=</span> root.val;</span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> sumOfTrees(root.left);</span><br><span class="line">    <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> sumOfTrees(root.right);</span><br><span class="line">    <span class="keyword">return</span> left + right + leave;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>求所有叶子结点的和, 也很简单，就只是多了一个判断叶子结点的条件：<code>if (root.left == null &amp;&amp; root.right == null)</code></li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 先序遍历求所有叶子节点值之和</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sumOfLeaves</span><span class="params">(TreeNode root)</span> {</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) {</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="type">int</span> <span class="variable">leave</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 叶子节点</span></span><br><span class="line">    <span class="keyword">if</span> (root.left == <span class="literal">null</span> &amp;&amp; root.right == <span class="literal">null</span>) {</span><br><span class="line">        leave = root.val;</span><br><span class="line">    }</span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> sumOfLeaves(root.left);</span><br><span class="line">    <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> sumOfLeaves(root.right);</span><br><span class="line">    <span class="keyword">return</span> left + right + leave;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>求左叶子结点的和, 也不难，无非是分成两步：<ol><li>该节点是其父节点的左子节点。</li><li>该节点是一个叶子节点，即它没有左右子节点。</li></ol></li></ol><p>即：<code>if (cur.left != null &amp;&amp; cur.left.left == null &amp;&amp; cur.left.right == null)</code></p><p>因此借助二叉树的思维框架我们可以用traverse + 额外变量的方式来解决问题：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sumOfLeftLeaves</span><span class="params">(TreeNode root)</span> {</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    dfs(root);</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(TreeNode cur)</span> {</span><br><span class="line">    <span class="keyword">if</span> (cur == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (cur.left != <span class="literal">null</span> &amp;&amp; cur.left.left == <span class="literal">null</span> &amp;&amp; cur.left.right == <span class="literal">null</span>) {</span><br><span class="line">        <span class="comment">// cur.left 是一个左叶子节点</span></span><br><span class="line">        sum += cur.left.val;</span><br><span class="line">    }</span><br><span class="line">    dfs(cur.left);</span><br><span class="line">    dfs(cur.right);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="构造类问题"><a href="#构造类问题" class="headerlink" title="构造类问题"></a>构造类问题</h3><blockquote><p>见 <a href="/2023/04/27/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B9%8B%E6%9E%84%E9%80%A0%E7%B1%BB%E9%97%AE%E9%A2%98/" title="二叉树之构造类问题">二叉树之构造类问题</a> 中包含构造类问题的习题以及思路</p></blockquote><h3 id="BST-二叉搜索树相关题目"><a href="#BST-二叉搜索树相关题目" class="headerlink" title="BST 二叉搜索树相关题目"></a>BST 二叉搜索树相关题目</h3><blockquote><p>见 <a href="/2023/04/27/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/" title="二叉搜索树">二叉搜索树</a> 中包含二叉搜索树问题的习题以及思路</p></blockquote><h3 id="二叉树公共祖先"><a href="#二叉树公共祖先" class="headerlink" title="二叉树公共祖先"></a>二叉树公共祖先</h3><blockquote><p>见 <a href="/2023/04/27/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B9%8B%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/" title="二叉树之公共祖先">二叉树之公共祖先</a> 中包含公共祖先的习题以及思路</p></blockquote><h3 id="其他例题"><a href="#其他例题" class="headerlink" title="其他例题"></a>其他例题</h3><h4 id="226-翻转二叉树"><a href="#226-翻转二叉树" class="headerlink" title="226. 翻转二叉树"></a><a href="https://leetcode.cn/problems/invert-binary-tree/">226. 翻转二叉树</a></h4><p>二叉树的递归分为<strong>「遍历」</strong>和<strong>「分解问题」</strong>两种思维模式，这道题可以同时使用两种思维模式。</p><h5 id="方法1-递归-分解问题"><a href="#方法1-递归-分解问题" class="headerlink" title="方法1: 递归 - 分解问题"></a>方法1: 递归 - 分解问题</h5><p>第一个自己写出来的递归，‼️终于‼️感受到为什么说递归讲究的就是一个自信 <span class="github-emoji"><span>😆</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">invertTree</span><span class="params">(TreeNode root)</span> {</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">res</span> <span class="operator">=</span> dfs(root);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> TreeNode <span class="title function_">dfsQuestionsDivide</span><span class="params">(TreeNode cur)</span> {</span><br><span class="line">    <span class="keyword">if</span> (cur == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">leftSwappedResult</span> <span class="operator">=</span> dfsQuestionsDivide(cur.left);</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">rightSwappedResult</span> <span class="operator">=</span> dfsQuestionsDivide(cur.right);</span><br><span class="line">    cur.left = rightSwappedResult;</span><br><span class="line">    cur.right = leftSwappedResult;</span><br><span class="line">    <span class="keyword">return</span> cur;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h5 id="方法2-递归-遍历"><a href="#方法2-递归-遍历" class="headerlink" title="方法2: 递归 - 遍历"></a>方法2: 递归 - 遍历</h5><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">invertTree</span><span class="params">(TreeNode root)</span> {</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">res</span> <span class="operator">=</span> dfsTraverse(root);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> TreeNode <span class="title function_">dfsTraverse</span><span class="params">(TreeNode cur)</span> {</span><br><span class="line">    <span class="keyword">if</span> (cur == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"> <span class="comment">/**** 前序位置 ****/</span></span><br><span class="line">    <span class="comment">// 每一个节点需要做的事就是交换它的左右子节点</span></span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">tmp</span> <span class="operator">=</span> cur.left;</span><br><span class="line">    cur.left = cur.right;</span><br><span class="line">    cur.right = tmp;</span><br><span class="line"></span><br><span class="line">    dfsTraverse(cur.left);</span><br><span class="line">    dfsTraverse(cur.right);</span><br><span class="line">    <span class="keyword">return</span> cur;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="257-二叉树的所有路径"><a href="#257-二叉树的所有路径" class="headerlink" title="257. 二叉树的所有路径"></a><a href="https://leetcode.cn/problems/binary-tree-paths/">257. 二叉树的所有路径</a></h4><p>这是一道backtrack的题，这里我先给出代码再解释为什么 root.left后没有 <strong>显性</strong> 的removeLast() 操作</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;String&gt; <span class="title function_">binaryTreePaths</span><span class="params">(TreeNode root)</span> {</span><br><span class="line">    <span class="comment">// backtrack</span></span><br><span class="line">    LinkedList&lt;String&gt; res = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    LinkedList&lt;String&gt; nodesList = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    backtrack(root, res, nodesList);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backtrack</span><span class="params">(TreeNode root, List&lt;String&gt; res, LinkedList&lt;String&gt; nodesList)</span> {</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (root.left == <span class="literal">null</span> &amp;&amp; root.right == <span class="literal">null</span>) {</span><br><span class="line">        nodesList.addLast(String.valueOf(root.val));</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> String.join(<span class="string">"-&gt;"</span>, nodesList);</span><br><span class="line">        res.add(s);</span><br><span class="line">        nodesList.removeLast();</span><br><span class="line">    }</span><br><span class="line">    nodesList.addLast(String.valueOf(root.val));</span><br><span class="line">    backtrack(root.left, res, nodesList);</span><br><span class="line">    backtrack(root.right, res, nodesList);</span><br><span class="line">    <span class="comment">// 撤销操作</span></span><br><span class="line">    nodesList.removeLast();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>假设我们有以下二叉树：</p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">    1</span></span><br><span class="line"><span class="code">   / \</span></span><br><span class="line"><span class="code">  2   3</span></span><br><span class="line"><span class="code"> / \</span></span><br><span class="line"><span class="code">4   5</span></span><br></pre></td></tr></tbody></table></figure><p>当我们调用 <code>traverse(root)</code> 时，执行顺序如下：</p><ol><li>添加 1 到 <code>path</code>，此时 <code>path = [1]</code>。</li><li>调用 <code>traverse(root.left)</code> 以遍历左子树（节点 2）。<ol><li>添加 2 到 <code>path</code>，此时 <code>path = [1, 2]</code>。 </li><li>调用 <code>traverse(root.left)</code> 以遍历左子树（节点 4）。 <ol><li>添加 4 到 <code>path</code>，此时 <code>path = [1, 2, 4]</code>。</li><li>4 是叶子节点，将 <code>path</code> 添加到 <code>res</code>，执行 <code>path.removeLast()</code>，从 <code>path</code> 中移除 4，此时 <code>path = [1, 2]</code>。</li><li>返回上一层递归调用（节点 2）。</li></ol></li><li>调用 <code>traverse(root.right)</code> 以遍历右子树（节点 5）。 <ol><li>添加 5 到 <code>path</code>，此时 <code>path = [1, 2, 5]</code>。 ii. 5 是叶子节点，将 <code>path</code> 添加到 <code>res</code>，执行 <code>path.removeLast()</code>，从 <code>path</code> 中移除 5，此时 <code>path = [1, 2]</code>。 iii. 返回上一层递归调用（节点 2）。</li></ol></li><li>在后序遍历位置，执行 <code>path.removeLast()</code>，从 <code>path</code> 中移除 2，此时 <code>path = [1]</code>。</li></ol></li><li>调用 <code>traverse(root.right)</code> 以遍历右子树（节点 3）。 <ol><li>添加 3 到 <code>path</code>，此时 <code>path = [1, 3]</code>。 </li><li>3 是叶子节点，将 <code>path</code> 添加到 <code>res</code>，执行 <code>path.removeLast()</code>，从 <code>path</code> 中移除 3，此时 <code>path = [1]</code>。</li></ol></li><li>在后序遍历位置，执行 <code>path.removeLast()</code>，从 <code>path</code> 中移除 1，此时 <code>path</code> 为空。</li></ol><p>在这个例子中，我们可以看到，在每次递归调用返回时，<code>path.removeLast()</code> 都会被执行。这样，我们可以确保在遍历过程中，<code>path</code> 变量始终正确地表示从根节点到当前节点的路径。在遍历左子树（节点 2）时，<code>path.removeLast()</code> 被执行了两次：一次是在遍历节点 4 后，另一次是在遍历节点 5 后。这样，我们可以确保在遍历右子树（节点 3）之前，<code>path</code> 变量已经从左子树遍历的影响中恢复。这可以确保在继续遍历过程时，<code>path</code> 变量正确地表示从根节点到当前节点的路径。</p><p>继续遍历右子树（节点 3）：</p><ol><li>调用 <code>traverse(root.right)</code> 以遍历右子树（节点 3）。<ol><li>添加 3 到 <code>path</code>，此时 <code>path = [1, 3]</code>。 </li><li>3 是叶子节点，将 <code>path</code> 添加到 <code>res</code>，执行 <code>path.removeLast()</code>，从 <code>path</code> 中移除 3，此时 <code>path = [1]</code>。</li></ol></li><li>在后序遍历位置，执行 <code>path.removeLast()</code>，从 <code>path</code> 中移除 1，此时 <code>path</code> 为空。</li></ol><p>现在，整个树的遍历已经完成，<code>res</code> 变量包含了所有从根节点到叶子节点的路径，即 <code>["1-&gt;2-&gt;4", "1-&gt;2-&gt;5", "1-&gt;3"]</code>。</p><h4 id="437-路径总和-III"><a href="#437-路径总和-III" class="headerlink" title="437. 路径总和 III"></a><a href="https://leetcode.cn/problems/path-sum-iii/">437. 路径总和 III</a></h4><p>这道题很多知识点，涉及到了前缀和的一些理解：</p><p>我们需要一个 哈希表 来存储前缀和的个数，由于这道题只需要返回答案个数，所以记录个数即可。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    Map&lt;Long, Integer&gt; hmPrefixCount = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span> targetSum;</span><br><span class="line">    <span class="type">long</span> <span class="variable">curSum</span> <span class="operator">=</span> <span class="number">0L</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pathSum</span><span class="params">(TreeNode root, <span class="type">int</span> targetSum)</span> {</span><br><span class="line">        hmPrefixCount.put(<span class="number">0L</span> ,<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">this</span>.targetSum = targetSum;</span><br><span class="line">        <span class="keyword">return</span> traverse(root);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">traverse</span><span class="params">(TreeNode root)</span> {</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        curSum += root.val;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        res += hmPrefixCount.getOrDefault(curSum - targetSum, <span class="number">0</span>); </span><br><span class="line">        hmPrefixCount.put(curSum, hmPrefixCount.getOrDefault(curSum, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">leftTotal</span> <span class="operator">=</span> traverse(root.left);</span><br><span class="line">        <span class="type">int</span> <span class="variable">rightTotal</span> <span class="operator">=</span> traverse(root.right);</span><br><span class="line"></span><br><span class="line">        res = res + leftTotal + rightTotal;</span><br><span class="line"></span><br><span class="line">        hmPrefixCount.put(curSum, hmPrefixCount.get(curSum) - <span class="number">1</span>);</span><br><span class="line">        curSum -= root.val;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>其中我认为最不好理解的：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res += hmPrefixCount.getOrDefault(curSum - targetSum, <span class="number">0</span>); </span><br></pre></td></tr></tbody></table></figure><ol><li>为什么是<code>curSum - targetSum</code>？</li></ol><p>这是因为：</p><p>假设我们有以下路径：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A -&gt; B -&gt; X -&gt; D -&gt; Y</span><br></pre></td></tr></tbody></table></figure><p>从 <code>X</code> 到 <code>Y</code> 的路径和为 <code>target</code>，即 <code>X + D + Y = target</code>。</p><p>从 <code>A</code> 到 <code>Y</code> 的整个路径和为 <code>curSum</code>，即 <code>A + B + X + D + Y = curSum</code>。</p><p>我们的目标是找到从 <code>A</code> 到哪里的路径和，使得剩下的路径和（即从那个位置到 <code>Y</code>）等于 <code>target</code>。如果我们把这个位置称为 <code>Z</code>，那么 <code>Z</code> 就是 <code>X</code> 的前一个位置，即 <code>B</code>。</p><p>为了得到从 <code>A</code> 到 <code>Z</code>（即 <code>B</code>）的路径和，我们可以这样算：</p><p>从 <code>A</code> 到 <code>Y</code> 的路径和减去从 <code>X</code> 到 <code>Y</code> 的路径和，得到：</p><p><code>A + B = curSum - (X + D + Y)</code></p><p>这确实是 <code>A</code> 到 <code>B</code> 的路径和，不是到 <code>X</code>。因此，<code>curSum - target</code> 表示的是从 <code>A</code> 到 <code>B</code> 的路径和。这意味着从 <code>X</code> 开始到 <code>Y</code> 结束的路径和等于 <code>target</code>。</p><ol start="2"><li>为什么这么找而不直接找哪一段路径和为target？</li></ol><p>直接找哪个路径和等于 <code>target</code> 的确是一种方法，但效率不高。为了找到所有与 <code>target</code> 相等的路径和，你必须从每个节点开始，并考虑所有可能的子路径，这导致了O(n^2)的复杂性，其中n是树的节点数。</p><p>使用 <code>prefixMap</code> 和当前累加和 <code>curSum</code> 的方法优化了这个搜索过程。原因如下：</p><ol><li><p><strong>连续子数组问题的解决思路</strong>：这个问题与数组中找连续子数组和等于某个数的问题非常相似。在数组问题中，我们使用一个累加和来记录从数组开始到当前位置的所有元素的和，然后使用一个哈希表来记录之前看到的所有累加和。这种方法可以在O(1)的时间内判断是否存在一个子数组的和等于目标值。</p></li><li><p><strong>时间复杂度</strong>：通过使用 <code>prefixMap</code>，我们可以在O(n)的时间复杂度内解决这个问题。对于每个节点，我们只需要O(1)的时间来更新 <code>prefixMap</code> 和查找 <code>curSum - target</code>。</p></li><li><p><strong>记录所有前缀和</strong>：通过在遍历过程中记录所有可能的前缀和及其出现的次数，我们可以迅速地知道从当前节点回溯到之前的任何节点的路径和是否等于 <code>target</code>。</p></li></ol><p>所以，使用这种方法比直接搜索效率更高，因为它利用了哈希表的查找能力，大大提高了搜索速度。</p><h4 id="1530-好叶子节点对的数量"><a href="#1530-好叶子节点对的数量" class="headerlink" title="1530. 好叶子节点对的数量"></a><a href="https://leetcode.cn/problems/number-of-good-leaf-nodes-pairs/">1530. 好叶子节点对的数量</a></h4><p>利用了后序遍历的特性 – 即我们可以从后续位置得到信息</p><p>以及<code>ArrayList&lt;&gt;(1)</code>是创建了一个size为1的list而不是里面有一个1</p><p>若想创建一个list里面有一个1: <code>Arrays.asList(1);</code></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode {</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() {}</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val) { this.val = val; }</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val, TreeNode left, TreeNode right) {</span></span><br><span class="line"><span class="comment"> *         this.val = val;</span></span><br><span class="line"><span class="comment"> *         this.left = left;</span></span><br><span class="line"><span class="comment"> *         this.right = right;</span></span><br><span class="line"><span class="comment"> *     }</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="type">int</span> distance;</span><br><span class="line">    <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countPairs</span><span class="params">(TreeNode root, <span class="type">int</span> distance)</span> {</span><br><span class="line">        <span class="built_in">this</span>.distance = distance;</span><br><span class="line">        dfsDepth(root);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">private</span> List&lt;Integer&gt; <span class="title function_">dfsDepth</span><span class="params">(TreeNode root)</span> {</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (root.left == <span class="literal">null</span> &amp;&amp; root.right == <span class="literal">null</span>) {</span><br><span class="line">            <span class="keyword">return</span> Arrays.asList(<span class="number">1</span>);</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">        List&lt;Integer&gt; nodeLeftList = dfsDepth(root.left);</span><br><span class="line">        List&lt;Integer&gt; nodeRightList = dfsDepth(root.right);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> leftLen : nodeLeftList) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> rightLen : nodeRightList) {</span><br><span class="line">                <span class="keyword">if</span> (leftLen + rightLen &lt;= distance) {</span><br><span class="line">                    <span class="built_in">this</span>.res++;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        List&lt;Integer&gt; all = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> leftLen : nodeLeftList) {</span><br><span class="line">            leftLen++;</span><br><span class="line">            all.add(leftLen);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> rightLen : nodeRightList) {</span><br><span class="line">            rightLen++;</span><br><span class="line">            all.add(rightLen);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> all;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单调队列和单调栈</title>
      <link href="/2023/04/16/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97%E5%92%8C%E5%8D%95%E8%B0%83%E6%A0%88/"/>
      <url>/2023/04/16/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97%E5%92%8C%E5%8D%95%E8%B0%83%E6%A0%88/</url>
      
        <content type="html"><![CDATA[<h1 id="单调-Monotonic-队列和单调栈"><a href="#单调-Monotonic-队列和单调栈" class="headerlink" title="单调(Monotonic)队列和单调栈"></a>单调(<strong>Monotonic</strong>)队列和单调栈</h1><blockquote><p><a href="https://www.bilibili.com/video/BV1VN411J7S7/?spm_id_from=333.788&amp;vd_source=54f34024c3784d45de85a3f70808ab70">灵茶山艾府 - 单调栈</a></p><p><a href="https://www.bilibili.com/video/BV1bM411X72E/?spm_id_from=333.788&amp;vd_source=54f34024c3784d45de85a3f70808ab70">灵茶山艾府 - 单调队列</a></p></blockquote><p>概念：DIY的一个队列，队列中的元素是单调递增或者单调递减</p><p>目的是为了找到 下一个更大或更小元素</p><p>比如：一个<strong>递减栈，从栈底到栈顶递减</strong>，用来找出从左往右遍历第一个比它大的位置。</p><h1 id="单调栈"><a href="#单调栈" class="headerlink" title="单调栈"></a>单调栈</h1><h2 id="739-每日温度"><a href="#739-每日温度" class="headerlink" title="739. 每日温度"></a><a href="https://leetcode.cn/problems/daily-temperatures/">739. 每日温度</a></h2><p>通过这个题搞清楚从右向左以及从左向右的单调栈的区别。</p><p>假设数组[1, 4, 3, 5, 5, 2, 3, 6]</p><p>从右向左遍历：<code>本质上是把下一个更大的数存到了栈里</code></p><p>检查栈顶以及当前元素num</p><ol><li><p>若 <code>num &gt;= 栈顶</code> pop 掉栈中元素，从而保证栈底到栈顶是单调递减的</p></li><li><p>更新answer[i]为栈顶元素</p></li><li><p>将num加入栈顶</p></li></ol><p><img src="/2023/04/16/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97%E5%92%8C%E5%8D%95%E8%B0%83%E6%A0%88/739_%E4%BB%8E%E5%8F%B3%E5%90%91%E5%B7%A6%E9%81%8D%E5%8E%86.jpeg" alt="739_从右向左遍历"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] dailyTemperatures(<span class="type">int</span>[] temperatures) {</span><br><span class="line">        Stack&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> temperatures.length;</span><br><span class="line">        <span class="type">int</span>[] answer = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) {</span><br><span class="line">            <span class="keyword">while</span> (!stack.isEmpty() &amp;&amp; temperatures[stack.peek()] &lt;= temperatures[i]) {</span><br><span class="line">                stack.pop();</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (!stack.isEmpty()) {</span><br><span class="line">                answer[i] = stack.peek() - i;</span><br><span class="line">            }            </span><br><span class="line">            stack.push(i);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> answer;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>从左向右：<code>本质上是把还没来得及找到下一个更大元素的当前元素放在栈里</code></p><p>一旦发现元素 &gt; 栈顶元素，去掉老的，更新答案</p><p><img src="/2023/04/16/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97%E5%92%8C%E5%8D%95%E8%B0%83%E6%A0%88/739_%E4%BB%8E%E5%B7%A6%E5%90%91%E5%8F%B3%E9%81%8D%E5%8E%86.jpeg" alt="739_从左向右遍历"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] dailyTemperatures(<span class="type">int</span>[] temperatures) {</span><br><span class="line">        Stack&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> temperatures.length;</span><br><span class="line">        <span class="type">int</span>[] answer = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">            <span class="keyword">while</span> (!stack.isEmpty() &amp;&amp; temperatures[stack.peek()] &lt; temperatures[i]) {</span><br><span class="line">                <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">                answer[idx] = i - idx;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (stack.isEmpty()) answer[i] = <span class="number">0</span>;</span><br><span class="line">            stack.push(i);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> answer;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="单调队列"><a href="#单调队列" class="headerlink" title="单调队列"></a>单调队列</h1><h2 id="239-滑动窗口最大值"><a href="#239-滑动窗口最大值" class="headerlink" title="239. 滑动窗口最大值"></a><a href="https://leetcode.cn/problems/sliding-window-maximum/">239. 滑动窗口最大值</a></h2><p>这道题还涵盖了一个滑动窗口的框架</p><blockquote><a href="/2023/04/05/%E5%8F%8C%E6%8C%87%E9%92%88/" title="双指针">双指针</a> 滑动窗口 section</blockquote><p><img src="/2023/04/16/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97%E5%92%8C%E5%8D%95%E8%B0%83%E6%A0%88/239_%E6%80%9D%E8%B7%AF1.png" alt="239_思路1"></p><p><img src="/2023/04/16/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97%E5%92%8C%E5%8D%95%E8%B0%83%E6%A0%88/239_%E6%80%9D%E8%B7%AF_%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97.png" alt="239_思路_单调队列"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] maxSlidingWindow(<span class="type">int</span>[] nums, <span class="type">int</span> k) {</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Deque&lt;Integer&gt; dq = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">            <span class="comment">// 滑动窗口框架：</span></span><br><span class="line">            <span class="comment">// 1. 入</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> nums[i];</span><br><span class="line">            <span class="keyword">while</span> (!dq.isEmpty() &amp;&amp; nums[dq.peekLast()] &lt;= num) {</span><br><span class="line">                dq.pollLast();</span><br><span class="line">            }</span><br><span class="line">            dq.addLast(i);</span><br><span class="line">            <span class="comment">// 2. 出</span></span><br><span class="line">            <span class="keyword">if</span> (i - dq.peekFirst() &gt;= k) {</span><br><span class="line">                dq.pollFirst();</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">// 3. 记录答案</span></span><br><span class="line">            <span class="keyword">if</span> (i &gt;= k - <span class="number">1</span>) {</span><br><span class="line">                res.add(nums[dq.peekFirst()]);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[] resultArray = <span class="keyword">new</span> <span class="title class_">int</span>[res.size()];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; res.size(); i++) {</span><br><span class="line">            resultArray[i] = res.get(i);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> resultArray;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><h2 id="239-滑动窗口最大值-1"><a href="#239-滑动窗口最大值-1" class="headerlink" title="239. 滑动窗口最大值"></a><a href="https://leetcode.cn/problems/sliding-window-maximum/">239. 滑动窗口最大值</a></h2><p>需要自己设计一个数据结构支持：</p><ol><li>Pop()</li><li>Push()</li><li>getMaxValue()</li></ol><p>数据结构内部<strong>单调递减</strong>，也就是单调队列</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] maxSlidingWindow(<span class="type">int</span>[] nums, <span class="type">int</span> k) {</span><br><span class="line">        <span class="type">MonolithicDownQueue</span> <span class="variable">monolithicDownQueue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MonolithicDownQueue</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (right &lt; k) {</span><br><span class="line">            monolithicDownQueue.push(nums[right]);</span><br><span class="line">            right++;</span><br><span class="line">        }</span><br><span class="line">        res.add(monolithicDownQueue.getMaxValue());</span><br><span class="line">        <span class="keyword">while</span> (right &lt; nums.length) {</span><br><span class="line">            monolithicDownQueue.pop(nums[left]);</span><br><span class="line">            monolithicDownQueue.push(nums[right]);</span><br><span class="line">            res.add(monolithicDownQueue.getMaxValue());</span><br><span class="line">            left++;</span><br><span class="line">            right++;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> res.stream().mapToInt(i -&gt; i).toArray();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">MonolithicDownQueue</span> {</span><br><span class="line">        Deque&lt;Integer&gt; dq = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">pop</span><span class="params">(<span class="type">int</span> value)</span> {</span><br><span class="line">            <span class="keyword">if</span> (!dq.isEmpty() &amp;&amp; dq.peekFirst() == value) {</span><br><span class="line">                dq.removeFirst();</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> value)</span> {</span><br><span class="line">            <span class="comment">// 保证数据结构内部单调递减即碰见新元素时，如果新元素大于队尾元素，移除队尾的元素</span></span><br><span class="line">            <span class="keyword">while</span> (!dq.isEmpty() &amp;&amp; value &gt; dq.peekLast()) {</span><br><span class="line">                dq.removeLast();</span><br><span class="line">            }</span><br><span class="line">            dq.addLast(value);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="title function_">getMaxValue</span><span class="params">()</span> {</span><br><span class="line">            <span class="keyword">return</span> dq.isEmpty() ? <span class="number">0</span> : dq.peekFirst();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="1944-队列中可以看到的人数"><a href="#1944-队列中可以看到的人数" class="headerlink" title="1944. 队列中可以看到的人数"></a><a href="https://leetcode.cn/problems/number-of-visible-people-in-a-queue/">1944. 队列中可以看到的人数</a></h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] canSeePersonsCount(<span class="type">int</span>[] heights) {</span><br><span class="line">        Deque&lt;Integer&gt; dq = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> heights.length;</span><br><span class="line">        <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) {</span><br><span class="line">            <span class="keyword">while</span> (!dq.isEmpty() &amp;&amp; dq.peekLast() &lt; heights[i]) {</span><br><span class="line">                res[i]++;</span><br><span class="line">                dq.pollLast();</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (!dq.isEmpty()) res[i] += <span class="number">1</span>;</span><br><span class="line">            dq.addLast(heights[i]);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 单调队列和单调栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java碎碎念</title>
      <link href="/2023/04/15/Java%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
      <url>/2023/04/15/Java%E7%A2%8E%E7%A2%8E%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>收集些容易忽视的Java的用法</p></div><h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><h2 id="Collections-Interface"><a href="#Collections-Interface" class="headerlink" title="Collections Interface"></a>Collections Interface</h2><p><img src="/2023/04/15/Java%E7%A2%8E%E7%A2%8E%E5%BF%B5/Collections-in-Java.png" alt="Collections Interface"></p><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><h4 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h4><h4 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h4><p>LinkedList Methods:</p><table><thead><tr><th>Methods</th><th>Description</th></tr></thead><tbody><tr><td>addFirst()</td><td>Adds an item to the beginning of the list.</td></tr><tr><td>addLast()</td><td>Add an item to the end of the list</td></tr><tr><td>removeFirst()</td><td>Remove an item from the beginning of the list.</td></tr><tr><td>removeLast()</td><td>Remove an item from the end of the list</td></tr><tr><td>getFirst()</td><td>Get the item at the beginning of the list</td></tr><tr><td>getLast()</td><td>Get the item at the end of the list</td></tr></tbody></table><h3 id="Deque"><a href="#Deque" class="headerlink" title="Deque"></a>Deque</h3><h4 id="LinkedList-实现"><a href="#LinkedList-实现" class="headerlink" title="LinkedList 实现"></a>LinkedList 实现</h4><h4 id="ArrayDeque-实现"><a href="#ArrayDeque-实现" class="headerlink" title="ArrayDeque 实现"></a>ArrayDeque 实现</h4><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>其实就是array和linkedlist区别，大部分时间里array会比较快。但是当添加元素时超了array的容积，则ArrayDeque需要resize.</p><h1 id="Stream"><a href="#Stream" class="headerlink" title="Stream()"></a>Stream()</h1><ol><li>List to array one line:</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List.stream().mapToInt(i -&gt; i).toArray();</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>Print elements in an int[]:</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Arrays.stream(ret).forEach(a -&gt; System.out.print(a + <span class="string">" "</span>));</span><br></pre></td></tr></tbody></table></figure><h2 id="Reduce"><a href="#Reduce" class="headerlink" title="Reduce()"></a>Reduce()</h2><p>有三个组成元素：</p><p>identity, accumulator, combiner:</p><ul><li><em>Identity</em> – an element that is the initial value of the reduction operation and the default result if the stream is empty</li><li><em>Accumulator</em> – a function that takes two parameters: a partial result of the reduction operation and the next element of the stream</li><li><em>Combiner</em> – a function used to combine the partial result of the reduction operation when the reduction is parallelized or when there’s a mismatch between the types of the accumulator arguments and the types of the accumulator implementation</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; numbers = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> numbers.stream().reduce(<span class="number">0</span>, (subtotal, element) -&gt; subtotal + element);</span><br><span class="line">assertThat(result).isEqualTo(<span class="number">21</span>);</span><br></pre></td></tr></tbody></table></figure><p>0 <code>is</code> identity</p><p>subtotal, element -&gt; subtotal + element <code>is</code> accumulator</p><h2 id="Pair"><a href="#Pair" class="headerlink" title="Pair"></a>Pair</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Pair&lt;Integer, String&gt; pair = <span class="keyword">new</span> <span class="title class_">Pair</span>&lt;&gt;(<span class="number">1</span>, <span class="string">"One"</span>);</span><br><span class="line"><span class="type">Integer</span> <span class="variable">key</span> <span class="operator">=</span> pair.getKey();</span><br><span class="line"><span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> pair.getValue();</span><br></pre></td></tr></tbody></table></figure><h1 id="Comparator"><a href="#Comparator" class="headerlink" title="Comparator"></a>Comparator</h1><p>在Arrays.sort中使用 Comparator:</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Arrays.sort(costs, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;<span class="type">int</span>[]&gt;(){</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(<span class="type">int</span>[] o1, <span class="type">int</span>[] o2)</span> {</span><br><span class="line">        <span class="keyword">return</span> o1[<span class="number">0</span>] - o1[<span class="number">1</span>] - (o2[<span class="number">0</span>] - o2[<span class="number">1</span>]);</span><br><span class="line">    }</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><p>在Collections.sort中使用：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Collections.sort(costs, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;List&lt;Integer&gt;&gt;(){</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(List&lt;Integer&gt; o1, List&lt;Integer&gt; o2)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">diff1</span> <span class="operator">=</span> o1.get(<span class="number">0</span>) - o1.get(<span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">diff2</span> <span class="operator">=</span> o2.get(<span class="number">0</span>) - o2.get(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> Integer.compare(diff1, diff2);</span><br><span class="line">    }</span><br><span class="line">});</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>和<code>Map.Entry</code> 结合在一起:</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Map.Entry&lt;Character, <span class="type">int</span>[]&gt;&gt; ls = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(hm.entrySet());</span><br><span class="line">Collections.sort(ls, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Map.Entry&lt;Character, <span class="type">int</span>[]&gt;&gt;(){</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Map.Entry&lt;Character, <span class="type">int</span>[]&gt; e1, Map.Entry&lt;Character, <span class="type">int</span>[]&gt; e2)</span> {</span><br><span class="line">        <span class="type">Character</span> <span class="variable">e1Key</span> <span class="operator">=</span> e1.getKey();</span><br><span class="line">        <span class="type">Character</span> <span class="variable">e2Key</span> <span class="operator">=</span> e2.getKey();</span><br><span class="line">        <span class="type">int</span>[] e1Value = e1.getValue();</span><br><span class="line">        <span class="type">int</span>[] e2Value = e2.getValue();</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> e1Value.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">            <span class="type">int</span> <span class="variable">first</span> <span class="operator">=</span> e1Value[i], second = e2Value[i];</span><br><span class="line">            <span class="keyword">if</span> (first == second) {</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                <span class="keyword">return</span> second - first;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> e1Key - e2Key;</span><br><span class="line">    }</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><h1 id="通过位运算来互换大小写"><a href="#通过位运算来互换大小写" class="headerlink" title="通过位运算来互换大小写"></a>通过位运算来互换大小写</h1><p>大写字符与其对应的小写字符的 ASCII 的差为 32</p><p>也就是 <code>1&lt;&lt;5</code></p><p>所以：</p><p>变换大小写这件事等价于： </p><ul><li>如果字符是小写字符，减去 32 得到大写字符； </li><li>如果字符是大写字符，加上 32 得到小写字符。</li></ul><p>而这两者合并起来，就是给这个字符做一次不进位的加法，即异或上 1 &lt;&lt; 5。 </p><blockquote><p>为什么两者合并起来相当于一个不进位的加法?</p><p>考虑一下异或操作的特性：</p><ul><li>0 XOR 0 = 0</li><li>1 XOR 0 = 1</li><li>0 XOR 1 = 1</li><li>1 XOR 1 = 0</li></ul><p>这与不进位加法的规则相同，即：</p><ul><li>0 + 0 = 0</li><li>1 + 0 = 1</li><li>0 + 1 = 1</li><li>1 + 1 = 0 (不考虑进位)</li></ul><p>现在，考虑ASCII值。大写字母与其对应的小写字母的ASCII值之间的差异在第5位上。例如：</p><ul><li>‘A’ = 65 = 1000001 (二进制)</li><li>‘a’ = 97 = 1100001 (二进制)</li></ul><p>请注意第5位的差异。要从’A’转到’a’，我们需要将第5位从0变为1，这可以通过加32（即1左移5位）来实现。反之亦然。</p><p>当我们异或一个数字时，我们实际上是在为该数字的每一位执行不进位加法。因此，当我们对字符值进行异或操作<code>1 &lt;&lt; 5</code>时，我们实际上是在进行以下操作：</p><ul><li>如果第5位是0（即该字符是大写字母），我们将其加上1，从而将该字符转换为小写字母。</li><li>如果第5位是1（即该字符是小写字母），我们将其加上0，从而将该字符转换为大写字母。</li></ul><p>因此，异或操作实际上是实现不进位加法的一种快速方法。在这种情况下，它可以用来在大写和小写字符之间进行快速切换。</p></blockquote><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cArr[startIdx] ^= <span class="number">1</span> &lt;&lt; <span class="number">5</span>;</span><br></pre></td></tr></tbody></table></figure><h2 id="使用此技巧的例题"><a href="#使用此技巧的例题" class="headerlink" title="使用此技巧的例题"></a>使用此技巧的例题</h2><h3 id="784-字母大小写全排列"><a href="#784-字母大小写全排列" class="headerlink" title="784. 字母大小写全排列"></a><a href="https://leetcode.cn/problems/letter-case-permutation/">784. 字母大小写全排列</a></h3><blockquote><p>这个题在 <a href="/2023/08/20/%E4%BB%8E%E4%BA%8C%E5%8F%89%E6%A0%91%E5%88%B0%E5%9B%9E%E6%BA%AF%E5%88%B0DP/" title="从二叉树到回溯到DP">从二叉树到回溯到DP</a> 中</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    List&lt;String&gt; paths = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">char</span>[] cArr;</span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">letterCasePermutation</span><span class="params">(String s)</span> {</span><br><span class="line">        n = s.length();</span><br><span class="line">        cArr = s.toCharArray();</span><br><span class="line">        backtrack(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> paths;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backtrack</span><span class="params">(<span class="type">int</span> startIdx)</span> {</span><br><span class="line">        <span class="keyword">if</span> (startIdx == n) {</span><br><span class="line">            paths.add(<span class="keyword">new</span> <span class="title class_">String</span>(cArr));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (Character.isDigit(cArr[startIdx])) {</span><br><span class="line">            backtrack(startIdx + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        cArr[startIdx] ^= <span class="number">1</span> &lt;&lt; <span class="number">5</span>;</span><br><span class="line">        backtrack(startIdx + <span class="number">1</span>);</span><br><span class="line">        cArr[startIdx] ^= <span class="number">1</span> &lt;&lt; <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">        backtrack(startIdx + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="通过左括号指针判断括号是否合法："><a href="#通过左括号指针判断括号是否合法：" class="headerlink" title="通过左括号指针判断括号是否合法："></a>通过左括号指针判断括号是否合法：</h1><p>思路是用代表左括号的指针移动，碰到左括号右移，右括号左移，如果left == 0证明合法，否则比如左括号的idx &lt; 0则代表右括号&gt;左括号数量，不合法。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(String sb)</span> {</span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">char</span> c : sb.toCharArray()) {</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">'('</span>) {</span><br><span class="line">            left++;</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">')'</span>) {</span><br><span class="line">            left--;</span><br><span class="line">            <span class="keyword">if</span> (left &lt; <span class="number">0</span>) {</span><br><span class="line">                <span class="comment">// 右括号比左括号多，肯定无效</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 如果左括号的数量等于右括号的数量，才是一个有效的括号字符串</span></span><br><span class="line">    <span class="keyword">return</span> left == <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="使用此技巧的例题-1"><a href="#使用此技巧的例题-1" class="headerlink" title="使用此技巧的例题"></a>使用此技巧的例题</h2><h3 id="301-删除无效的括号"><a href="#301-删除无效的括号" class="headerlink" title="301. 删除无效的括号"></a><a href="https://leetcode.cn/problems/remove-invalid-parentheses/">301. 删除无效的括号</a></h3><p>在 <a href="/2023/08/20/%E4%BB%8E%E4%BA%8C%E5%8F%89%E6%A0%91%E5%88%B0%E5%9B%9E%E6%BA%AF%E5%88%B0DP/" title="从二叉树到回溯到DP">从二叉树到回溯到DP</a></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    List&lt;String&gt; paths = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    String s;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">removeInvalidParentheses</span><span class="params">(String s)</span> {</span><br><span class="line">        <span class="built_in">this</span>.s = s;</span><br><span class="line">        n = s.length();</span><br><span class="line">        backtrack(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> filterResult();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; <span class="title function_">filterResult</span><span class="params">()</span> {</span><br><span class="line">        <span class="comment">// 筛选出最长的有效括号字符串</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">maxLen</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (String str : paths) {</span><br><span class="line">            maxLen = Math.max(maxLen, str.length());</span><br><span class="line">        }</span><br><span class="line">        HashSet&lt;String&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String str : paths) {</span><br><span class="line">            <span class="keyword">if</span> (str.length() == maxLen) {</span><br><span class="line">                set.add(str);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;(set);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backtrack</span><span class="params">(<span class="type">int</span> idx)</span> {</span><br><span class="line">        <span class="keyword">if</span> (idx == n) {</span><br><span class="line">            <span class="keyword">if</span> (isValid(sb.toString())) {</span><br><span class="line">                paths.add(sb.toString());</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> s.charAt(idx);</span><br><span class="line">        <span class="keyword">if</span> (c != <span class="string">'('</span> &amp;&amp; c != <span class="string">')'</span>) {</span><br><span class="line">            sb.append(c);</span><br><span class="line">            backtrack(idx + <span class="number">1</span>);</span><br><span class="line">            sb.deleteCharAt(sb.length() - <span class="number">1</span>);</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="comment">// 选择当前的括号</span></span><br><span class="line">            sb.append(c);</span><br><span class="line">            backtrack(idx + <span class="number">1</span>);</span><br><span class="line">            sb.deleteCharAt(sb.length() - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 不选择当前的括号</span></span><br><span class="line">            backtrack(idx + <span class="number">1</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(String sb)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : sb.toCharArray()) {</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">'('</span>) {</span><br><span class="line">                left++;</span><br><span class="line">            } <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">')'</span>) {</span><br><span class="line">                left--;</span><br><span class="line">                <span class="keyword">if</span> (left &lt; <span class="number">0</span>) {</span><br><span class="line">                    <span class="comment">// 右括号比左括号多，肯定无效</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 如果左括号的数量等于右括号的数量，才是一个有效的括号字符串</span></span><br><span class="line">        <span class="keyword">return</span> left == <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h1><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sb.append(c);</span><br><span class="line">backtrack(idx + <span class="number">1</span>);</span><br><span class="line">sb.deleteCharAt(sb.length() - <span class="number">1</span>);</span><br></pre></td></tr></tbody></table></figure><h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
      
      
      <categories>
          
          <category> Programming-Languages </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>队列和栈</title>
      <link href="/2023/04/15/%E9%98%9F%E5%88%97%E5%92%8C%E6%A0%88/"/>
      <url>/2023/04/15/%E9%98%9F%E5%88%97%E5%92%8C%E6%A0%88/</url>
      
        <content type="html"><![CDATA[<div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>此教程参考 <a href="https://programmercarl.com/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80.html">代码随想录-队列与栈篇</a><br>感谢支持！</p></div><h1 id="队列-Queue-and-栈-Stack"><a href="#队列-Queue-and-栈-Stack" class="headerlink" title="队列 (Queue) and 栈 (Stack)"></a>队列 (Queue) and 栈 (Stack)</h1><blockquote><a href="/2023/04/05/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95-%E6%80%BB%E6%B1%87/" title="代码随想录-总汇">代码随想录-总汇</a> 中包含队列和栈的基础知识</blockquote><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="232-用栈实现队列"><a href="#232-用栈实现队列" class="headerlink" title="232. 用栈实现队列"></a><a href="https://leetcode.cn/problems/implement-queue-using-stacks/">232. 用栈实现队列</a></h3><p>双栈实现队列题</p><p>很简单，一个栈负责暂时储存元素，另一个栈若为空的时候从第一个栈拿元素 aka <strong>一个输入栈，一个输出栈</strong>，这里要注意输入栈和输出栈的关系。</p><p><img src="/2023/04/15/%E9%98%9F%E5%88%97%E5%92%8C%E6%A0%88/232.%E7%94%A8%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97.gif" alt="232.用栈实现队列"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyQueue</span> {</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    Deque&lt;Integer&gt; dq1, dq2;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyQueue</span><span class="params">()</span> {</span><br><span class="line">        dq1 = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        dq2 = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> x)</span> {</span><br><span class="line">        count++;</span><br><span class="line">        dq1.push(x);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pop</span><span class="params">()</span> {</span><br><span class="line">        count--;</span><br><span class="line">        moveElements();</span><br><span class="line">        <span class="keyword">return</span> dq2.pop();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">moveElements</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">if</span> (dq2.isEmpty()) {</span><br><span class="line">            <span class="keyword">while</span> (!dq1.isEmpty()) {</span><br><span class="line">                <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> dq1.pop();</span><br><span class="line">                dq2.push(x);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">peek</span><span class="params">()</span> {</span><br><span class="line">        moveElements();</span><br><span class="line">        <span class="keyword">return</span> dq2.peek();</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">empty</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> count == <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="225-用队列实现栈"><a href="#225-用队列实现栈" class="headerlink" title="225. 用队列实现栈"></a><a href="https://leetcode.cn/problems/implement-stack-using-queues/">225. 用队列实现栈</a></h3><p>用两个数组时，核心在于一个辅助数组用于置换，从而始终保持有一个数组的头为最后一个进来的元素，以达到FILO的结果：</p><p><img src="/2023/04/15/%E9%98%9F%E5%88%97%E5%92%8C%E6%A0%88/225_%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E6%A0%88.gif" alt="225_队列实现栈"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyStack</span> {</span><br><span class="line">    Queue&lt;Integer&gt; q1, q2;</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyStack</span><span class="params">()</span> {</span><br><span class="line">        q1 = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        q2 = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> x)</span> {</span><br><span class="line">        q2.offer(x);</span><br><span class="line">        <span class="keyword">while</span> (!q1.isEmpty()) {</span><br><span class="line">            q2.offer(q1.poll());</span><br><span class="line">        }</span><br><span class="line">        Queue&lt;Integer&gt; temp = q1;</span><br><span class="line">        q1 = q2;</span><br><span class="line">        q2 = temp;</span><br><span class="line">        count++;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pop</span><span class="params">()</span> {</span><br><span class="line">        count--;</span><br><span class="line">        <span class="keyword">return</span> q1.poll();</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">top</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> q1.peek();</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">empty</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> count == <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这道题也可以只用一个Queue来做：</p><p>其实相当于形成了个循环队列，只不过开头一定是新进来的那个元素</p><p><img src="/2023/04/15/%E9%98%9F%E5%88%97%E5%92%8C%E6%A0%88/225_%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E6%A0%88_%E4%B8%80%E4%B8%AA%E9%98%9F%E5%88%97%E7%89%88.gif" alt="225-OneQueueVer"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyStack</span> {</span><br><span class="line">    Queue&lt;Integer&gt; q;</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyStack</span><span class="params">()</span> {</span><br><span class="line">        q = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> x)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> q.size();</span><br><span class="line">        q.offer(x);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++) {</span><br><span class="line">            q.offer(q.poll());</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pop</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> q.poll();</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">top</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> q.peek();</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">empty</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> q.isEmpty();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="20-有效的括号"><a href="#20-有效的括号" class="headerlink" title="20. 有效的括号"></a><a href="https://leetcode.cn/problems/valid-parentheses/">20. 有效的括号</a></h3><p><strong>括号匹配是使用栈解决的经典问题。</strong></p><p><img src="/2023/04/15/%E9%98%9F%E5%88%97%E5%92%8C%E6%A0%88/20.%E6%9C%89%E6%95%88%E6%8B%AC%E5%8F%B7.gif" alt="20.有效括号"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(String s)</span> {</span><br><span class="line">        <span class="type">char</span>[] s2Char = s.toCharArray();</span><br><span class="line">        Deque&lt;Character&gt; dq = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : s2Char) {</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">'('</span>) {</span><br><span class="line">                dq.push(<span class="string">')'</span>);</span><br><span class="line">            } <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">'{'</span>) {</span><br><span class="line">                dq.push(<span class="string">'}'</span>);</span><br><span class="line">            } <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">'['</span>) {</span><br><span class="line">                dq.push(<span class="string">']'</span>);</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                <span class="keyword">if</span> (dq.isEmpty() || dq.peek() != c) {</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                }</span><br><span class="line">                dq.pop();</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> dq.isEmpty();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="1047-删除字符串中的所有相邻重复项"><a href="#1047-删除字符串中的所有相邻重复项" class="headerlink" title="1047. 删除字符串中的所有相邻重复项"></a><a href="https://leetcode.cn/problems/remove-all-adjacent-duplicates-in-string/">1047. 删除字符串中的所有相邻重复项</a></h3><p><strong>本题有点像祖玛游戏</strong></p><blockquote><p>Credit to: <a href="https://leetcode.cn/problems/remove-all-adjacent-duplicates-in-string/solution/dong-hua-tu-jie-yong-zhan-bao-cun-wei-be-4u5w/">LC详解 - 负雪明烛</a></p></blockquote><p>本题要点：</p><ol><li>两个相邻且相同字符会被删除。（注意：是两个！）</li><li>删除字符串中两个相邻并且相同的字符可能会产生新的相邻并且相同的字符。 比如对于 abba ，删除 bb 之后， aa 会碰到一起，也需要继续把 aa 删掉。</li></ol><p>所以：</p><p>① 并不能一次删除操作就能达到目的；而应该在每次删除一对相邻且相同的字符之后、再看新的字符串是否存在相邻且相同的一对字符。</p><p>② 如果存在多组的相邻且相同的字符时，先删除哪一对对最终结果是没有影响的。比如对于 abbacca ，无论先删除 bb 还是先删除 cc 最终的结果都是 a 。</p><p>通过 ① 我们得出：需要用一个数据结构缓存结果，这个数据结构应该是<strong>后进先出</strong>，也就是<strong>栈</strong>！<br>通过 ② 我们得出：可以从左到右遍历一次输入字符串 S 的所有字符 Si，把 Si 跟栈顶元素比较</p><p><img src="/2023/04/15/%E9%98%9F%E5%88%97%E5%92%8C%E6%A0%88/1047_%E5%88%A0%E9%99%A4%E9%87%8D%E5%A4%8D%E9%A1%B9.gif" alt="1047_删除重复项"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">removeDuplicates</span><span class="params">(String s)</span> {</span><br><span class="line">    <span class="type">char</span>[] s2Char = s.toCharArray();</span><br><span class="line">    Deque&lt;Character&gt; dq = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">char</span> c : s2Char) {</span><br><span class="line">        <span class="keyword">if</span> (!dq.isEmpty() &amp;&amp; c == dq.peekLast()) {</span><br><span class="line">            dq.removeLast();</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            dq.addLast(c);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    <span class="keyword">while</span> (!dq.isEmpty()) {</span><br><span class="line">        sb.append(dq.removeFirst());</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> sb.toString();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="150-逆波兰表达式求值"><a href="#150-逆波兰表达式求值" class="headerlink" title="150. 逆波兰表达式求值"></a><a href="https://leetcode.cn/problems/evaluate-reverse-polish-notation/">150. 逆波兰表达式求值</a></h3><p>这是一道关于<strong>「表达式计算」</strong>的题目。所有的<strong>「表达式计算」</strong>问题都离不开<strong>「栈」</strong>。</p><p>思路总结：遇到数字压栈，遇到符号取出数字，计算，压栈更新后的数字。</p><p><img src="/2023/04/15/%E9%98%9F%E5%88%97%E5%92%8C%E6%A0%88/150.%E9%80%86%E6%B3%A2%E5%85%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC.gif" alt="150.逆波兰表达式求值"></p><p>用Deque：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">evalRPN</span><span class="params">(String[] tokens)</span> {</span><br><span class="line">    Deque&lt;String&gt; dq = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (String token : tokens) {</span><br><span class="line">        <span class="keyword">if</span> (token.equals(<span class="string">"+"</span>)) {</span><br><span class="line">            <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> Integer.parseInt(dq.removeLast());</span><br><span class="line">            <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> Integer.parseInt(dq.removeLast());</span><br><span class="line">            <span class="type">String</span> <span class="variable">res</span> <span class="operator">=</span> String.valueOf(left + right);</span><br><span class="line">            dq.addLast(res);</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (token.equals(<span class="string">"*"</span>)) {</span><br><span class="line">            <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> Integer.parseInt(dq.removeLast());</span><br><span class="line">            <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> Integer.parseInt(dq.removeLast());</span><br><span class="line">            <span class="type">String</span> <span class="variable">res</span> <span class="operator">=</span> String.valueOf(left * right);</span><br><span class="line">            dq.addLast(res);</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (token.equals(<span class="string">"-"</span>)) {</span><br><span class="line">            <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> Integer.parseInt(dq.removeLast());</span><br><span class="line">            <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> Integer.parseInt(dq.removeLast());</span><br><span class="line">            <span class="type">String</span> <span class="variable">res</span> <span class="operator">=</span> String.valueOf(left - right);</span><br><span class="line">            dq.addLast(res);</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (token.equals(<span class="string">"/"</span>)) {</span><br><span class="line">            <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> Integer.parseInt(dq.removeLast());</span><br><span class="line">            <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> Integer.parseInt(dq.removeLast());</span><br><span class="line">            <span class="type">String</span> <span class="variable">res</span> <span class="operator">=</span> String.valueOf(left / right);</span><br><span class="line">            dq.addLast(res);</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            dq.addLast(token);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="type">int</span> <span class="variable">ret</span> <span class="operator">=</span> Integer.parseInt(dq.removeLast());</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>数组模拟栈：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">evalRPN</span><span class="params">(String[] ts)</span> {</span><br><span class="line">        <span class="type">int</span>[] d = <span class="keyword">new</span> <span class="title class_">int</span>[ts.length];</span><br><span class="line">        <span class="type">int</span> <span class="variable">hh</span> <span class="operator">=</span> <span class="number">0</span>, tt = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (String s : ts) {</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">"+-*/"</span>.contains(s)) {</span><br><span class="line">                <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> d[tt--], a = d[tt--];</span><br><span class="line">                d[++tt] = calc(a, b, s);</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                d[++tt] = Integer.parseInt(s);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> d[tt];</span><br><span class="line">    }</span><br><span class="line">    <span class="type">int</span> <span class="title function_">calc</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, String op)</span> {</span><br><span class="line">        <span class="keyword">if</span> (op.equals(<span class="string">"+"</span>)) <span class="keyword">return</span> a + b;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op.equals(<span class="string">"-"</span>)) <span class="keyword">return</span> a - b;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op.equals(<span class="string">"*"</span>)) <span class="keyword">return</span> a * b;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op.equals(<span class="string">"/"</span>)) <span class="keyword">return</span> a / b;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="239-滑动窗口最大值"><a href="#239-滑动窗口最大值" class="headerlink" title="239. 滑动窗口最大值"></a><a href="https://leetcode.cn/problems/sliding-window-maximum/">239. 滑动窗口最大值</a></h3><p>两个难点：</p><ol><li>我们需要求 k 窗口内的 最大值</li><li>不能够使用优先队列<ol><li>因为优先队列排序后，要pop的元素可能不是排序后的元素了。<ol><li>比如：1 3 -1 -3</li><li>队列中 3 1 -1 -3 此时会pop 3 而不是 1</li></ol></li></ol></li></ol><p>因此需要自己设计一个数据结构支持：</p><ol><li>Pop()</li><li>Push()</li><li>getMaxValue()</li><li>数据结构内部单调递减，也就是 <a href="/2023/04/16/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97%E5%92%8C%E5%8D%95%E8%B0%83%E6%A0%88/" title="单调队列和单调栈">单调队列和单调栈</a></li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] maxSlidingWindow(<span class="type">int</span>[] nums, <span class="type">int</span> k) {</span><br><span class="line">        <span class="type">MonolithicDownQueue</span> <span class="variable">monolithicDownQueue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MonolithicDownQueue</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (right &lt; k) {</span><br><span class="line">            monolithicDownQueue.push(nums[right]);</span><br><span class="line">            right++;</span><br><span class="line">        }</span><br><span class="line">        res.add(monolithicDownQueue.getMaxValue());</span><br><span class="line">        <span class="keyword">while</span> (right &lt; nums.length) {</span><br><span class="line">            monolithicDownQueue.pop(nums[left]);</span><br><span class="line">            monolithicDownQueue.push(nums[right]);</span><br><span class="line">            res.add(monolithicDownQueue.getMaxValue());</span><br><span class="line">            left++;</span><br><span class="line">            right++;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> res.stream().mapToInt(i -&gt; i).toArray();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">MonolithicDownQueue</span> {</span><br><span class="line">        Deque&lt;Integer&gt; dq = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">pop</span><span class="params">(<span class="type">int</span> value)</span> {</span><br><span class="line">            <span class="keyword">if</span> (!dq.isEmpty() &amp;&amp; dq.peekFirst() == value) {</span><br><span class="line">                dq.removeFirst();</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> value)</span> {</span><br><span class="line">            <span class="comment">// 保证数据结构内部单调递减即碰见新元素时，如果新元素大于队尾元素，移除队尾的元素</span></span><br><span class="line">            <span class="keyword">while</span> (!dq.isEmpty() &amp;&amp; value &gt; dq.peekLast()) {</span><br><span class="line">                dq.removeLast();</span><br><span class="line">            }</span><br><span class="line">            dq.addLast(value);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="title function_">getMaxValue</span><span class="params">()</span> {</span><br><span class="line">            <span class="keyword">return</span> dq.isEmpty() ? <span class="number">0</span> : dq.peekFirst();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="347-前-K-个高频元素"><a href="#347-前-K-个高频元素" class="headerlink" title="347. 前 K 个高频元素"></a><a href="https://leetcode.cn/problems/top-k-frequent-elements/">347. 前 K 个高频元素</a></h3><p>本题用到了 <strong>优先队列</strong> + <strong>Map</strong></p><blockquote><p>Highlight: 用的是<strong>小顶堆</strong>，这样就不用维护所有的值而只维护<strong>k个</strong>元素，因为是不断把最小的元素pop()出去, <strong>因为要统计最大前k个元素，只有小顶堆每次将最小的元素弹出，最后小顶堆里积累的才是前k个最大元素。</strong> 从而由 nlogn -&gt; nlogk。</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] topKFrequent(<span class="type">int</span>[] nums, <span class="type">int</span> k) {</span><br><span class="line">    Map&lt;Integer, Integer&gt; num2Count = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i : nums) {</span><br><span class="line">        num2Count.put(i, num2Count.getOrDefault(i, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    PriorityQueue&lt;<span class="type">int</span>[]&gt; pq = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;((o1, o2) -&gt; o1[<span class="number">1</span>] - o2[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;Integer, Integer&gt; numEntry : num2Count.entrySet()) {</span><br><span class="line">        <span class="type">int</span>[] cur = <span class="keyword">new</span> <span class="title class_">int</span>[]{numEntry.getKey(), numEntry.getValue()};</span><br><span class="line">        <span class="keyword">if</span> (pq.size() &lt; k) {</span><br><span class="line">            pq.add(cur);</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="comment">// 确定pop出去的是相对小的元素</span></span><br><span class="line">            <span class="keyword">if</span> (pq.peek()[<span class="number">1</span>] &gt;= numEntry.getValue()) <span class="keyword">continue</span>;</span><br><span class="line">            pq.poll();</span><br><span class="line">            pq.add(cur);</span><br><span class="line">        }</span><br><span class="line"><span class="comment">//                pq.forEach(a -&gt; System.out.print(a[0] + " " + a[1]));</span></span><br><span class="line"><span class="comment">//                System.out.println();</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span>[] ret = <span class="keyword">new</span> <span class="title class_">int</span>[k];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> k - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) {</span><br><span class="line">        ret[i] = pq.poll()[<span class="number">0</span>];</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 队列和栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字符串</title>
      <link href="/2023/04/13/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>/2023/04/13/%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>此教程参考 <a href="https://www.programmercarl.com/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%80%BB%E7%BB%93.html">代码随想录-字符串篇</a><br>感谢支持！</p></div><h1 id="字符串-String"><a href="#字符串-String" class="headerlink" title="字符串 String"></a>字符串 String</h1><blockquote><a href="/2023/04/05/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95-%E6%80%BB%E6%B1%87/" title="代码随想录-总汇">代码随想录-总汇</a> 中包含字符串的基础知识</blockquote><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><a href="https://leetcode.cn/problems/reverse-string/">344. 反转字符串</a></p><p>非常基本的双指针应用题：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reverseString</span><span class="params">(<span class="type">char</span>[] s)</span> {</span><br><span class="line">        <span class="comment">// 双指针swap:</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = s.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) {</span><br><span class="line">            swap(s, left, right);</span><br><span class="line">            left++;</span><br><span class="line">            right--;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">char</span>[] s, <span class="type">int</span> left, <span class="type">int</span> right)</span> {</span><br><span class="line">        <span class="type">char</span> <span class="variable">temp</span> <span class="operator">=</span> s[left];</span><br><span class="line">        s[left] = s[right];</span><br><span class="line">        s[right] = temp;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><a href="https://leetcode.cn/problems/reverse-string-ii/">541. 反转字符串 II</a></p><p>本题难点在于问题转化：题干上：</p><p>给定一个字符串 <code>s</code> 和一个整数 <code>k</code>，从字符串开头算起，每计数至 <code>2k</code> 个字符，就反转这 <code>2k</code> 字符中的前 <code>k</code> 个字符。</p><ul><li>如果剩余字符少于 <code>k</code> 个，则将剩余字符全部反转。</li><li>如果剩余字符小于 <code>2k</code> 但大于或等于 <code>k</code> 个，则反转前 <code>k</code> 个字符，其余字符保持原样。</li></ul><p>如果直接模拟这两条规则的话会比较麻烦，但是其实这两条可以等价转化为如下的问题：</p><p><strong>当剩余元素多于k个，反转前k个 (i, i + k)，否则反转后k个 (i, n - 1)</strong></p><p>那么问题迎刃而解：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">reverseStr</span><span class="params">(String s, <span class="type">int</span> k)</span> {</span><br><span class="line">      <span class="type">char</span>[] s2char = s.toCharArray();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// methodOne(k, s2char);</span></span><br><span class="line">      <span class="comment">// methodTwo:</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>; left &lt; s2char.length; left += <span class="number">2</span> * k) {</span><br><span class="line">          swap(s2char, left, Math.min(left + k, s2char.length) - <span class="number">1</span>);</span><br><span class="line">      }</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> String.valueOf(s2char);</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">methodOne</span><span class="params">(<span class="type">int</span> k, <span class="type">char</span>[] s2char)</span> {</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>; left &lt; s2char.length; left = left + k * <span class="number">2</span>) {</span><br><span class="line">          <span class="keyword">if</span> (left + k &lt;= s2char.length) {</span><br><span class="line">              <span class="comment">// 元素在length里面不会取空</span></span><br><span class="line">              swap(s2char, left, left + k - <span class="number">1</span>);</span><br><span class="line">              <span class="keyword">continue</span>;</span><br><span class="line">          }</span><br><span class="line">          <span class="comment">// 若少于k个，翻转剩余全部字符</span></span><br><span class="line">          swap(s2char, left, s2char.length - <span class="number">1</span>);</span><br><span class="line">      }</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">swap</span> <span class="params">(<span class="type">char</span>[] s2char, <span class="type">int</span> left, <span class="type">int</span> right)</span> {</span><br><span class="line">      <span class="keyword">while</span> (left &lt; right) {</span><br><span class="line">          <span class="type">char</span> <span class="variable">temp</span> <span class="operator">=</span> s2char[left];</span><br><span class="line">          s2char[left] = s2char[right];</span><br><span class="line">          s2char[right] = temp;</span><br><span class="line">          left++;</span><br><span class="line">          right--;</span><br><span class="line">      }</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure><p><a href="https://leetcode.cn/problems/ti-huan-kong-ge-lcof/">剑指 Offer 05. 替换空格</a></p><p>此题的解法有两个分别是：</p><ol><li><p>用到额外的空间 （非常简单，直接秒杀）</p><ol><li>这里简单提一下StringBuilder 和 StringBuffer的区别</li><li>StringBuilder 单线程，会快一些</li></ol></li><li><p>不用额外的空间，原地修改</p><p><img src="/2023/04/13/%E5%AD%97%E7%AC%A6%E4%B8%B2/%E6%9B%BF%E6%8D%A2%E7%A9%BA%E6%A0%BC.gif" alt="替换空格-原地修改"></p><ol><li><strong>其实很多数组填充类的问题，都可以先预先给数组扩容带填充后的大小，然后在从后向前进行操作。</strong></li><li>这么做有两个好处：<ol><li>不用申请新数组。</li><li>从后向前填充元素，避免了从前向后填充元素时，每次添加元素都要将添加元素之后的所有元素向后移动的问题。</li></ol></li></ol></li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">      <span class="keyword">public</span> String <span class="title function_">replaceSpace</span><span class="params">(String s)</span> {</span><br><span class="line">          <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">          <span class="keyword">for</span> (<span class="type">char</span> c : s.toCharArray()) {</span><br><span class="line">              <span class="keyword">if</span> (c == <span class="string">' '</span>) sb.append(<span class="string">" "</span>).append(<span class="string">" "</span>);</span><br><span class="line">          }</span><br><span class="line">          <span class="comment">// older length</span></span><br><span class="line">          <span class="type">int</span> <span class="variable">fast</span> <span class="operator">=</span> s.length() - <span class="number">1</span>;</span><br><span class="line">          s = s + sb;</span><br><span class="line">          <span class="comment">// newer length</span></span><br><span class="line">          <span class="type">int</span> <span class="variable">slow</span> <span class="operator">=</span> s.length() - <span class="number">1</span>;</span><br><span class="line">          <span class="type">char</span>[] sAsChar = s.toCharArray();</span><br><span class="line">          <span class="keyword">while</span> (fast &gt;= <span class="number">0</span>) {</span><br><span class="line">              <span class="keyword">if</span> (sAsChar[fast] != <span class="string">' '</span>) {</span><br><span class="line">                  sAsChar[slow] = sAsChar[fast];</span><br><span class="line">                  fast--;</span><br><span class="line">                  slow--;</span><br><span class="line">              } <span class="keyword">else</span> {</span><br><span class="line">                  sAsChar[slow--] = <span class="string">'0'</span>;</span><br><span class="line">                  sAsChar[slow--] = <span class="string">'2'</span>;</span><br><span class="line">                  sAsChar[slow--] = <span class="string">'%'</span>;</span><br><span class="line">                  fast--;</span><br><span class="line">              }</span><br><span class="line">          }</span><br><span class="line">          <span class="keyword">return</span> String.valueOf(sAsChar);</span><br><span class="line">      }</span><br><span class="line"></span><br><span class="line">      <span class="keyword">private</span> String <span class="title function_">methodOneWithExtraSpace</span><span class="params">(String s)</span> {</span><br><span class="line">          <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">          <span class="keyword">for</span> (<span class="type">char</span> c : s.toCharArray()) {</span><br><span class="line">              <span class="keyword">if</span> (c == <span class="string">' '</span>) {</span><br><span class="line">                  sb.append(<span class="string">"%20"</span>);</span><br><span class="line">              } <span class="keyword">else</span> {</span><br><span class="line">                  sb.append(c);</span><br><span class="line">              }</span><br><span class="line">          }</span><br><span class="line">          <span class="keyword">return</span> sb.toString();</span><br><span class="line">      }</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure><p><a href="https://leetcode.cn/problems/reverse-words-in-a-string/">151. 反转字符串中的单词</a></p><p>依旧是两个解法：</p><ol><li><p>使用库函数：</p><ol><li>String.trim() <ol><li><img src="/2023/04/13/%E5%AD%97%E7%AC%A6%E4%B8%B2/String_Trim.png" alt="String.trim()"></li><li>eliminates leading and trailing spaces.</li><li>Time: <strong>O(N)</strong></li></ol></li><li>String.split(String reges, int limit)<ol><li>breaks a given string around matches of the given regular expression</li><li>Time: <strong>O(N)</strong></li></ol></li><li><img src="/2023/04/13/%E5%AD%97%E7%AC%A6%E4%B8%B2/%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2LC%E9%A2%98%E8%A7%A3.png" alt="151_LC_解法"></li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> String <span class="title function_">methodOneUseLibrary</span><span class="params">(String s)</span> {</span><br><span class="line">    String[] elementsArr = s.trim().split(<span class="string">" "</span>);</span><br><span class="line"><span class="comment">//            Arrays.stream(elementsArr).forEach(e -&gt; System.out.println(e + "/"));</span></span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = elementsArr.length - <span class="number">1</span>; i &gt;= <span class="number">1</span>; i--) {</span><br><span class="line">        <span class="keyword">if</span> (Objects.equals(elementsArr[i], <span class="string">""</span>)) <span class="keyword">continue</span>;</span><br><span class="line">        sb.append(elementsArr[i]).append(<span class="string">" "</span>);</span><br><span class="line">    }</span><br><span class="line">    sb.append(elementsArr[i]);</span><br><span class="line">    <span class="keyword">return</span> sb.toString();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p><a href="https://leetcode.cn/problems/reverse-words-in-a-string/solution/151-fan-zhuan-zi-fu-chuan-li-de-dan-ci-shuang-zh-2/">双指针：</a></p><ol><li>倒序遍历字符串 <em>s</em> ，记录单词左右索引边界 <em>i, j</em></li><li>每确定一个单词的边界，则将其添加至单词列表 <em>res</em> ；</li><li>最终，将单词列表拼接为字符串，并返回即可。</li></ol></li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">reverseWords</span><span class="params">(String s)</span> {</span><br><span class="line">    s = s.trim(); <span class="comment">// 删除首尾空格</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> s.length() - <span class="number">1</span>, right = s.length() - <span class="number">1</span>;</span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    <span class="keyword">while</span> (left &gt;= <span class="number">0</span>) {</span><br><span class="line">        <span class="keyword">while</span> (left &gt;= <span class="number">0</span> &amp;&amp; s.charAt(left) != <span class="string">' '</span>) left--; <span class="comment">// 搜索首个空格</span></span><br><span class="line">        sb.append(s, left + <span class="number">1</span>, right + <span class="number">1</span>).append(<span class="string">" "</span>); <span class="comment">// 添加单词</span></span><br><span class="line">        <span class="keyword">while</span> (left &gt;= <span class="number">0</span> &amp;&amp; s.charAt(left) == <span class="string">' '</span>) left--; <span class="comment">// 跳过单词间空格</span></span><br><span class="line">        right = left; <span class="comment">// right 指向下个单词的尾字符</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> sb.toString().trim(); <span class="comment">// 转化为字符串并返回</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><a href="https://leetcode.cn/problems/zuo-xuan-zhuan-zi-fu-chuan-lcof/">剑指 Offer 58 - II. 左旋转字符串</a></p><p>依旧是两个做法：</p><p>不使用额外空间：整体反转 + 局部反转</p><p><img src="/2023/04/13/%E5%AD%97%E7%AC%A6%E4%B8%B2/%E5%89%91%E6%8C%87Offer58-II.%E5%B7%A6%E6%97%8B%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2.png" alt="左旋转字符串"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">reverseLeftWords</span><span class="params">(String s, <span class="type">int</span> n)</span> {</span><br><span class="line">      <span class="comment">// 局部反转 + 整体反转</span></span><br><span class="line">      <span class="comment">// 反转区间为前n的子串</span></span><br><span class="line">      <span class="comment">// 反转区间为n到末尾的子串</span></span><br><span class="line">      <span class="comment">// 反转整个字符串</span></span><br><span class="line">      <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(s);</span><br><span class="line">      swap(sb, <span class="number">0</span>, n);</span><br><span class="line">      swap(sb, n, s.length());</span><br><span class="line">      swap(sb, <span class="number">0</span>, sb.length());</span><br><span class="line">      <span class="keyword">return</span> sb.toString();</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(StringBuilder sb, <span class="type">int</span> left, <span class="type">int</span> right)</span> {</span><br><span class="line">      <span class="keyword">while</span> (left &lt; right) {</span><br><span class="line">          <span class="type">char</span> <span class="variable">temp</span> <span class="operator">=</span> sb.charAt(left);</span><br><span class="line">          sb.setCharAt(left, sb.charAt(right));</span><br><span class="line">          sb.setCharAt(right, temp);</span><br><span class="line">          left++;</span><br><span class="line">          right--;</span><br><span class="line">      }</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure><p>使用额外空间：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> String <span class="title function_">methodOneUserExtraSpace</span><span class="params">(String s, <span class="type">int</span> n)</span> {</span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(s.substring(n));</span><br><span class="line">    sb.append(s, <span class="number">0</span>, n);</span><br><span class="line">    <span class="keyword">return</span> sb.toString();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>哈希表</title>
      <link href="/2023/04/09/%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
      <url>/2023/04/09/%E5%93%88%E5%B8%8C%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>此教程参考 <a href="https://www.programmercarl.com/%E5%93%88%E5%B8%8C%E8%A1%A8%E6%80%BB%E7%BB%93.html#%E6%95%B0%E7%BB%84%E4%BD%9C%E4%B8%BA%E5%93%88%E5%B8%8C%E8%A1%A8">代码随想录-哈希表篇</a><br>感谢支持！</p></div><h1 id="哈希表-Hash-Table"><a href="#哈希表-Hash-Table" class="headerlink" title="哈希表 Hash Table"></a>哈希表 Hash Table</h1><blockquote><a href="/2023/04/05/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95-%E6%80%BB%E6%B1%87/" title="代码随想录-总汇">代码随想录-总汇</a> 中包含哈希表的基础知识</blockquote><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><a href="https://leetcode.cn/problems/valid-anagram/">242. 有效的字母异位词</a></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAnagram</span><span class="params">(String s, String t)</span> {</span><br><span class="line">    <span class="keyword">if</span> (s.length() != t.length()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="type">int</span>[] alpha = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i&lt; s.length(); i++) {</span><br><span class="line">        alpha[s.charAt(i) - <span class="string">'a'</span>] ++;</span><br><span class="line">        alpha[t.charAt(i) - <span class="string">'a'</span>] --;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)</span><br><span class="line">        <span class="keyword">if</span>(alpha[i] != <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><a href="https://leetcode.cn/problems/intersection-of-two-arrays/">349. 两个数组的交集</a></p><p>没有什么难点，但是有个用法可以学一下: Java 的 stream： 把set中的值变成array:</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] res = resSet.stream().mapToInt(x -&gt; x).toArray();</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] intersection(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2) {</span><br><span class="line">      Set&lt;Integer&gt; resSet = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">      Set&lt;Integer&gt; numSet = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> i : nums1) {</span><br><span class="line">          numSet.add(i);</span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> i : nums2) {</span><br><span class="line">          <span class="keyword">if</span> (numSet.contains(i)) {</span><br><span class="line">              resSet.add(i);</span><br><span class="line">          }</span><br><span class="line">      }</span><br><span class="line">      <span class="type">int</span>[] res = resSet.stream().mapToInt(x -&gt; x).toArray();</span><br><span class="line">      <span class="keyword">return</span> res;</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure><p><a href="https://leetcode.cn/problems/happy-number/">202. 快乐数</a></p><p>这道题主要在于识别题干中的 <strong>无限循环</strong>， 即会出现<strong>sum重复出现</strong>的情况 于是题目就变成：<strong>如何快速查找sum是否已经出现过</strong>，即哈希应用题</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isHappy</span><span class="params">(<span class="type">int</span> n)</span> {</span><br><span class="line">    <span class="comment">// 由于可能出现 无限循环 即会出现sum重复出现的情况</span></span><br><span class="line">    <span class="comment">// 于是题目就变成：如何快速查找sum是否已经出现过，即哈希应用题；</span></span><br><span class="line">    Set&lt;Integer&gt; sumSet = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">nCopy</span> <span class="operator">=</span> n;</span><br><span class="line">    <span class="keyword">while</span> (!sumSet.contains(sum)) {</span><br><span class="line">        <span class="type">int</span> <span class="variable">newN</span> <span class="operator">=</span> nCopy;</span><br><span class="line">        sumSet.add(sum);</span><br><span class="line">        sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (newN &gt; <span class="number">0</span>) {</span><br><span class="line">            sum += (newN % <span class="number">10</span>) * (newN % <span class="number">10</span>);</span><br><span class="line">            newN /= <span class="number">10</span>;</span><br><span class="line">        }</span><br><span class="line">        nCopy = sum;</span><br><span class="line">        <span class="keyword">if</span> (sum == <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><a href="https://leetcode.cn/problems/two-sum/">1. 两数之和</a></p><p>缅怀我逝去的青春 <span class="github-emoji"><span>😋</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f60b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] twoSum(<span class="type">int</span>[] nums, <span class="type">int</span> target) {</span><br><span class="line">    Map&lt;Integer, Integer&gt; val2Idx = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) {</span><br><span class="line">        <span class="type">int</span> <span class="variable">cur</span> <span class="operator">=</span> nums[i];</span><br><span class="line">        <span class="type">int</span> <span class="variable">needNum</span> <span class="operator">=</span> target - cur;</span><br><span class="line">        <span class="keyword">if</span> (val2Idx.containsKey(needNum)) {</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[] {val2Idx.get(needNum), i};</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            val2Idx.put(nums[i], i);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[] {-<span class="number">1</span>, -<span class="number">1</span>};</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><a href="https://leetcode.cn/problems/4sum-ii/">454. 四数相加 II</a></p><p>首先非常丑的暴力做法：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">brutalForce</span><span class="params">(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2, <span class="type">int</span>[] nums3, <span class="type">int</span>[] nums4)</span> {</span><br><span class="line">    <span class="comment">// 非常丑的 暴力： 200^4 = over 10^8 超时</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums1.length; i++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; nums2.length; j++) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; nums3.length; k++) {</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">0</span>; l &lt; nums4.length; l++) {</span><br><span class="line">                    <span class="keyword">if</span> (nums1[i] + nums2[j] + nums3[k] + nums4[l] == <span class="number">0</span>) count++;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>可以考虑用时间换空间，借用两数之和的思想我们可以想到哈希表：</p><p>使用哈希表来优化至 O(N^2) </p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">fourSumCount</span><span class="params">(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2, <span class="type">int</span>[] nums3, <span class="type">int</span>[] nums4)</span> {</span><br><span class="line">  <span class="comment">// 哈希表两两分组：</span></span><br><span class="line">  <span class="comment">// nums1 nums2 一组 的所有可能出现的和 存入哈希表</span></span><br><span class="line">  <span class="comment">// nums3 nums4 一组 在哈希表找可能出现的 -(的所有可能出现的和)</span></span><br><span class="line">  <span class="comment">// 哈希可以使其优化到 O(N^2)</span></span><br><span class="line">  Map&lt;Integer, Integer&gt; sum2Count = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums1.length; i++) {</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; nums2.length; j++) {</span><br><span class="line">          <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> nums1[i] + nums2[j];</span><br><span class="line">          sum2Count.put(sum, sum2Count.getOrDefault(sum, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">      }</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; nums3.length; k++) {</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">0</span>; l &lt; nums4.length; l++) {</span><br><span class="line">          <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> nums3[k] + nums4[l];</span><br><span class="line">          <span class="keyword">if</span> (sum2Count.containsKey(-sum)) {</span><br><span class="line">              count += sum2Count.get(-sum);</span><br><span class="line">          }</span><br><span class="line">      }</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> count;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><a href="https://leetcode.cn/problems/ransom-note/">383. 赎金信</a></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canConstruct</span><span class="params">(String ransomNote, String magazine)</span> {</span><br><span class="line">      <span class="type">int</span>[] hm = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">char</span> r : ransomNote.toCharArray()) {</span><br><span class="line">          <span class="type">int</span> <span class="variable">pos</span> <span class="operator">=</span> r - <span class="string">'a'</span>;</span><br><span class="line">          hm[pos] += <span class="number">1</span>;</span><br><span class="line">      }</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (<span class="type">char</span> m : magazine.toCharArray()) {</span><br><span class="line">          <span class="type">int</span> <span class="variable">pos</span> <span class="operator">=</span> m - <span class="string">'a'</span>;</span><br><span class="line">          hm[pos] -= <span class="number">1</span>;</span><br><span class="line">      }</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> j : hm) {</span><br><span class="line">          <span class="keyword">if</span> (j &gt; <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure><p><a href="https://leetcode.cn/problems/3sum/">15. 三数之和</a></p><p>写做三数之和但是用哈希表来做会非常麻烦由于涉及到去重的操作。因此双指针会简便许多。具体流程如下：</p><p><img src="/2023/04/09/%E5%93%88%E5%B8%8C%E8%A1%A8/15.%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C.gif" alt="三数之和过程"></p><p>另外一些关于去重问题的考虑：</p><p>我们有三个数需要去重 nums[i] nums[left] nums[right]：</p><ol><li>i 的去重<ol><li>在 i 入口处就可以跳过：那么问题是我们应该用 <strong>nums[i] == nums[i + 1]</strong> 还是 <strong>nums[i] == nums[i - 1]</strong><ol><li>答案是用 <strong>nums[i] == nums[i - 1]</strong></li><li>考虑用{-1, -1 ,2} 这组数据，如果用<strong>nums[i] == nums[i + 1]</strong> 当遍历到第一个-1 的时候，判断 下一个也是-1，那这组数据就pass了。</li></ol></li></ol></li><li>nums[left] nums[right] 的 去重：<ol><li>见代码 4. 处</li></ol></li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">threeSum</span><span class="params">(<span class="type">int</span>[] nums)</span> {</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length - <span class="number">2</span>; i++) { <span class="comment">// 1. Change the loop condition</span></span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> i + <span class="number">1</span>, right = nums.length - <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> nums[i];</span><br><span class="line">            <span class="type">int</span> <span class="variable">needNum</span> <span class="operator">=</span> -num;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (left &lt; right) {</span><br><span class="line">                <span class="type">int</span> <span class="variable">currentSum</span> <span class="operator">=</span> nums[left] + nums[right]; <span class="comment">// 2. Calculate the current sum</span></span><br><span class="line">                <span class="keyword">if</span> (currentSum &lt; needNum) {</span><br><span class="line">                    left++;</span><br><span class="line">                } <span class="keyword">else</span> <span class="keyword">if</span> (currentSum &gt; needNum) {</span><br><span class="line">                    right--;</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    List&lt;Integer&gt; temp = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(Arrays.asList(</span><br><span class="line">                            nums[i], nums[left], nums[right] <span class="comment">// 3. Use nums[i], nums[left], nums[right] instead of i, left, right</span></span><br><span class="line">                    ));</span><br><span class="line">                    res.add(temp);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 4. Handle duplicates for left and right pointers</span></span><br><span class="line">                    <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[left] == nums[left + <span class="number">1</span>]) left++;</span><br><span class="line">                    <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[right] == nums[right - <span class="number">1</span>]) right--;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 5. Move left and right pointers inward</span></span><br><span class="line">                    left++;</span><br><span class="line">                    right--;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><p><a href="https://leetcode.cn/problems/4sum/">18. 四数之和</a></p><p>本质上还是三数之和即排序加双指针但是有两个地方需要注意一下看下面的代码块：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">fourSum</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> {</span><br><span class="line">      Arrays.sort(nums);</span><br><span class="line">      List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length - <span class="number">3</span>; i++) {</span><br><span class="line">          <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">          <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; nums.length - <span class="number">2</span>; j++) {</span><br><span class="line">              <span class="comment">// 注意这里是 j &gt; i + 1 不能直接 j &gt; 0 否则 case 例如 [2, 2, 2, 2, 2] 会返回空 （毕竟看到2就都过去了）</span></span><br><span class="line">              <span class="keyword">if</span> (j &gt; i + <span class="number">1</span> &amp;&amp; nums[j] == nums[j - <span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">              <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> j + <span class="number">1</span>, right = nums.length - <span class="number">1</span>;</span><br><span class="line">              <span class="comment">// 注意边界，需要用long for case：</span></span><br><span class="line">              <span class="comment">// [1000000000,1000000000,1000000000,1000000000] -294967296</span></span><br><span class="line">              <span class="type">long</span> <span class="variable">sumIJ</span> <span class="operator">=</span> nums[i] + nums[j];</span><br><span class="line">              <span class="type">long</span> <span class="variable">needSum</span> <span class="operator">=</span> target - sumIJ;</span><br><span class="line">              <span class="keyword">while</span> (left &lt; right) {</span><br><span class="line">                  <span class="type">long</span> <span class="variable">curSum</span> <span class="operator">=</span> nums[left] + nums[right];</span><br><span class="line">                  <span class="keyword">if</span> (curSum &lt; needSum) {</span><br><span class="line">                      left++;</span><br><span class="line">                  } <span class="keyword">else</span> <span class="keyword">if</span> (curSum &gt; needSum) {</span><br><span class="line">                      right--;</span><br><span class="line">                  } <span class="keyword">else</span> {</span><br><span class="line">                      List&lt;Integer&gt; temp = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(</span><br><span class="line">                              Arrays.asList(nums[i], nums[j], nums[left], nums[right])</span><br><span class="line">                      );</span><br><span class="line">                      res.add(temp);</span><br><span class="line"></span><br><span class="line">                      <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[left] == nums[left + <span class="number">1</span>]) left++;</span><br><span class="line">                      <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[right] == nums[right - <span class="number">1</span>]) right--;</span><br><span class="line"></span><br><span class="line">                      left++;</span><br><span class="line">                      right--;</span><br><span class="line">                  }</span><br><span class="line">              }</span><br><span class="line">          }</span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">return</span> res;</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 哈希表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>链表</title>
      <link href="/2023/04/06/%E9%93%BE%E8%A1%A8/"/>
      <url>/2023/04/06/%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>此教程参考 <a href="https://programmercarl.com/%E9%93%BE%E8%A1%A8%E6%80%BB%E7%BB%93%E7%AF%87.html#%E9%93%BE%E8%A1%A8%E7%9A%84%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80">代码随想录-链表篇</a><br>感谢支持！</p></div><h1 id="链表-LinkedList"><a href="#链表-LinkedList" class="headerlink" title="链表 LinkedList"></a>链表 LinkedList</h1><blockquote><a href="/2023/04/05/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95-%E6%80%BB%E6%B1%87/" title="代码随想录-总汇">代码随想录-总汇</a> 中包含链表的基础知识</blockquote><h2 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h2><p><a href="https://leetcode.cn/problems/design-linked-list/">707. 设计链表</a> <br>边界非常多的题目，主要考虑如何更新链表节点的时候不要错误的更新。可以使用printHelper来帮助debug。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyLinkedList</span> {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Node</span> {</span><br><span class="line">        Node prev;</span><br><span class="line">        Node next;</span><br><span class="line">        <span class="type">int</span> val;</span><br><span class="line">        Node() {</span><br><span class="line">        }</span><br><span class="line">        Node(<span class="type">int</span> val) {</span><br><span class="line">            <span class="built_in">this</span>.val = val;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    Node head, tail;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyLinkedList</span><span class="params">()</span> {</span><br><span class="line">        head = <span class="keyword">new</span> <span class="title class_">Node</span>();</span><br><span class="line">        tail = <span class="keyword">new</span> <span class="title class_">Node</span>();</span><br><span class="line">        head.next = tail;</span><br><span class="line">        tail.prev = head;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span> {</span><br><span class="line">        <span class="keyword">if</span> (count &lt;= index) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">int</span> <span class="variable">curIdx</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (curIdx &lt; index &amp;&amp; cur != <span class="literal">null</span>) {</span><br><span class="line">            cur = cur.next;</span><br><span class="line">            curIdx++;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> curIdx == index ? cur.val : -<span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAtHead</span><span class="params">(<span class="type">int</span> val)</span> {</span><br><span class="line">        <span class="type">Node</span> <span class="variable">cur</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(val);</span><br><span class="line">        <span class="type">Node</span> <span class="variable">headNext</span> <span class="operator">=</span> head.next;</span><br><span class="line">        head.next = cur;</span><br><span class="line">        cur.prev = head;</span><br><span class="line">        cur.next = headNext;</span><br><span class="line">        headNext.prev = cur;</span><br><span class="line">        count++;</span><br><span class="line">        <span class="comment">// printHelper();</span></span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAtTail</span><span class="params">(<span class="type">int</span> val)</span> {</span><br><span class="line">        <span class="type">Node</span> <span class="variable">cur</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(val);</span><br><span class="line">        <span class="type">Node</span> <span class="variable">tailPrev</span> <span class="operator">=</span> tail.prev;</span><br><span class="line">        tail.prev = cur;</span><br><span class="line">        tailPrev.next = cur;</span><br><span class="line">        cur.prev = tailPrev;</span><br><span class="line">        cur.next = tail;</span><br><span class="line">        count++;</span><br><span class="line">        <span class="comment">// System.out.println("add at tail");</span></span><br><span class="line">        <span class="comment">// printHelper();</span></span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAtIndex</span><span class="params">(<span class="type">int</span> index, <span class="type">int</span> val)</span> {</span><br><span class="line">        <span class="keyword">if</span> (index &gt; count) <span class="keyword">return</span>;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">int</span> <span class="variable">curIdx</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (curIdx &lt; index &amp;&amp; cur != <span class="literal">null</span>) {</span><br><span class="line">            cur = cur.next;</span><br><span class="line">            curIdx++;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (index == curIdx) {</span><br><span class="line">            <span class="type">Node</span> <span class="variable">curPrev</span> <span class="operator">=</span> cur.prev;</span><br><span class="line">            <span class="type">Node</span> <span class="variable">needAdd</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(val);</span><br><span class="line">            curPrev.next = needAdd;</span><br><span class="line">            needAdd.next = cur;</span><br><span class="line">            needAdd.prev = curPrev;</span><br><span class="line">            cur.prev = needAdd;</span><br><span class="line">        }</span><br><span class="line">        count++;</span><br><span class="line">        <span class="comment">// printHelper();</span></span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteAtIndex</span><span class="params">(<span class="type">int</span> index)</span> {</span><br><span class="line">        <span class="keyword">if</span> (count &lt;= index) {</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="type">Node</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">int</span> <span class="variable">curIdx</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (curIdx &lt; index &amp;&amp; cur != <span class="literal">null</span>) {</span><br><span class="line">            cur = cur.next;</span><br><span class="line">            curIdx++;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (index == curIdx) {</span><br><span class="line">            <span class="type">Node</span> <span class="variable">curPrev</span> <span class="operator">=</span> cur.prev;</span><br><span class="line">            curPrev.next = cur.next;</span><br><span class="line">            cur.next.prev = curPrev;</span><br><span class="line">        }</span><br><span class="line">        count--;</span><br><span class="line">        <span class="comment">// printHelper();</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">printHelper</span><span class="params">()</span> {</span><br><span class="line">        <span class="type">Node</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="literal">null</span>) {</span><br><span class="line">            System.out.print(cur.val + <span class="string">"-&gt;"</span>);</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        }</span><br><span class="line">        System.out.println();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><a href="https://leetcode.cn/problems/remove-linked-list-elements/">203. 移除链表元素</a> <br>非常基础的删除链表中的元素题。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">removeElements</span><span class="params">(ListNode head, <span class="type">int</span> val)</span> {</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">dummyHead</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>();</span><br><span class="line">        dummyHead.next = head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">prev</span> <span class="operator">=</span> dummyHead;</span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="literal">null</span>) {</span><br><span class="line">            <span class="keyword">if</span> (cur.val == val) {</span><br><span class="line">                prev.next = cur.next;</span><br><span class="line">                cur = cur.next;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            }</span><br><span class="line">            prev = prev.next;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> dummyHead.next;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><a href="https://leetcode.cn/problems/reverse-linked-list/">206. 反转链表</a><br>这道题主要在于如何使用递归：<br>递归实现反转链表常常用来考察递归思想，我这里就用<strong>纯递归</strong>来翻转链表。对于递归算法，最重要的就是明确递归函数的定义。具体来说，我们的 reverse 函数定义是这样的：输入一个节点 head，将「以 head 为起点」的链表反转，并返回反转之后的头结点。</p><blockquote><p>quote: <a href="https://labuladong.github.io/algo/di-yi-zhan-da78c/shou-ba-sh-8f30d/di-gui-mo--10b77/">Labuladong 的翻转链表集合</a><br>想通递归函数定义后就很好实现了</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">reverseList</span><span class="params">(ListNode head)</span> {</span><br><span class="line">        <span class="keyword">return</span> reverse(head);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ListNode <span class="title function_">reverse</span><span class="params">(ListNode cur)</span> {</span><br><span class="line">        <span class="keyword">if</span> (cur == <span class="literal">null</span> || cur.next == <span class="literal">null</span>) <span class="keyword">return</span> cur;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">last</span> <span class="operator">=</span> reverse(cur.next);</span><br><span class="line">        cur.next.next = cur; <span class="comment">// 这里是为了让head变成tail</span></span><br><span class="line">        cur.next = <span class="literal">null</span>; <span class="comment">// 注意这里要归为null否则会成环</span></span><br><span class="line">        <span class="keyword">return</span> last;</span><br><span class="line">    } </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><a href="https://leetcode.cn/problems/swap-nodes-in-pairs/">24. 两两交换链表中的节点</a></p><p>使用虚拟头节点来大幅简化问题的一道模拟题：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">swapPairs</span><span class="params">(ListNode head)</span> {</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">dummyHead</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(-<span class="number">1</span>);</span><br><span class="line">        dummyHead.next = head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">prev</span> <span class="operator">=</span> dummyHead;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="literal">null</span> &amp;&amp; cur.next != <span class="literal">null</span>) {</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">secondNode</span> <span class="operator">=</span> cur.next;</span><br><span class="line">            cur.next = secondNode.next;</span><br><span class="line">            secondNode.next = cur;</span><br><span class="line">            prev.next = secondNode;</span><br><span class="line">            prev = cur;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">            <span class="comment">// helperPrint(dummyHead.next);</span></span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> dummyHead.next;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">helperPrint</span><span class="params">(ListNode head)</span> {</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">dm</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span> (dm != <span class="literal">null</span>) {</span><br><span class="line">            System.out.print(dm.val + <span class="string">"-&gt;"</span>);</span><br><span class="line">            dm = dm.next;</span><br><span class="line">        }</span><br><span class="line">        System.out.println();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p><a href="https://leetcode.cn/problems/remove-nth-node-from-end-of-list/">19.删除链表的倒数第N个节点</a> <br>写做链表，但其实本质还是双指针 - 快慢指针的一道应用题：<br>如果要删除倒数第n个节点，让fast移动n步，然后让fast和slow同时移动，直到fast指向链表末尾。删掉slow所指向的节点就可以了。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">removeNthFromEnd</span><span class="params">(ListNode head, <span class="type">int</span> n)</span> {</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">dmh</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(-<span class="number">1</span>);</span><br><span class="line">        dmh.next = head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">fast</span> <span class="operator">=</span> dmh;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">slow</span> <span class="operator">=</span> dmh;</span><br><span class="line">        <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> n;</span><br><span class="line">        <span class="comment">// 先让fast移动k步</span></span><br><span class="line">        <span class="keyword">while</span> (k &gt; <span class="number">0</span>) {</span><br><span class="line">            fast = fast.next;</span><br><span class="line">            k--;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">while</span> (fast != <span class="literal">null</span> &amp;&amp; fast.next != <span class="literal">null</span>) {</span><br><span class="line">            fast = fast.next;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">        }</span><br><span class="line">        slow.next = slow.next.next;</span><br><span class="line">        <span class="comment">// System.out.println(fast.val + " " + slow.val);</span></span><br><span class="line">        <span class="keyword">return</span> dmh.next;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">printHelper</span><span class="params">(ListNode head)</span> {</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="literal">null</span>) {</span><br><span class="line">            System.out.print(cur.val + <span class="string">"-&gt;"</span>);</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        }</span><br><span class="line">        System.out.println();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><a href="https://leetcode.cn/problems/intersection-of-two-linked-lists-lcci/">面试题 02.07.链表相交</a><br>其实还是双指针但是要先找长的链表要先移动几步从而可以让两条链表同一起点：<br><img src="/2023/04/06/%E9%93%BE%E8%A1%A8/%E9%9D%A2%E8%AF%95%E9%A2%9802.07.%E9%93%BE%E8%A1%A8%E7%9B%B8%E4%BA%A4_2.png" alt="链表相交"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">getIntersectionNode</span><span class="params">(ListNode headA, ListNode headB)</span> {</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">curLong</span> <span class="operator">=</span> headA, curShort = headB;</span><br><span class="line">        <span class="type">int</span> <span class="variable">lenLong</span> <span class="operator">=</span> <span class="number">0</span>, lenShort = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (curLong != <span class="literal">null</span>) {</span><br><span class="line">            lenLong++;</span><br><span class="line">            curLong = curLong.next;</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (curShort != <span class="literal">null</span>) {</span><br><span class="line">            lenShort++;</span><br><span class="line">            curShort = curShort.next;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        curLong = headA;</span><br><span class="line">        curShort = headB;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// always make sure lenLong and curLong is the longer one</span></span><br><span class="line">        <span class="keyword">if</span> (lenShort &gt; lenLong) {</span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> lenShort;</span><br><span class="line">            lenShort = lenLong;</span><br><span class="line">            lenLong = temp;</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">tempNode</span> <span class="operator">=</span> curLong;</span><br><span class="line">            curLong = curShort;</span><br><span class="line">            curShort = tempNode;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">gap</span> <span class="operator">=</span> lenLong - lenShort;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (gap &gt; <span class="number">0</span>) {</span><br><span class="line">            curLong = curLong.next;</span><br><span class="line">            gap--;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// printHelper(curLong);</span></span><br><span class="line">        <span class="comment">// printHelper(curShort);</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (curLong != <span class="literal">null</span> &amp;&amp; curShort != <span class="literal">null</span>) {</span><br><span class="line">            <span class="keyword">if</span> (curLong == curShort) <span class="keyword">return</span> curLong;</span><br><span class="line">            curLong = curLong.next;</span><br><span class="line">            curShort = curShort.next;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">printHelper</span><span class="params">(ListNode head)</span> {</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="literal">null</span>) {</span><br><span class="line">            System.out.print(cur.val + <span class="string">"-&gt;"</span>);</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        }</span><br><span class="line">        System.out.println();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><a href="https://leetcode.cn/problems/linked-list-cycle-ii/">142.环形链表II</a><br>考察的其实还是双指针 - 快慢指针，但是加了一点数学。<br>需要做到两点：</p><ol><li><p>判断链表是否含有环</p><ol><li>使用快慢指针法，分别定义 fast 和 slow 指针，从头结点出发，fast指针每次移动两个节点，slow指针每次移动一个节点，如果 fast 和 slow指针在途中相遇 ，说明这个链表有环。<br><img src="/2023/04/06/%E9%93%BE%E8%A1%A8/141.%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8.gif" alt="检查有环"></li></ol></li><li><p>若有环，怎么找环开始的地方</p><ol><li>从头结点出发一个指针，从相遇节点 也出发一个指针，这两个指针每次只走一个节点， 那么当这两个指针相遇的时候就是 环形入口的节点。<br><img src="/2023/04/06/%E9%93%BE%E8%A1%A8/142.%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8II%EF%BC%88%E6%B1%82%E5%85%A5%E5%8F%A3%EF%BC%89.gif" alt="环的入口"><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">detectCycle</span><span class="params">(ListNode head)</span> {</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">fast</span> <span class="operator">=</span> head, slow = head;</span><br><span class="line">        <span class="keyword">while</span> (fast != <span class="literal">null</span> &amp;&amp; fast.next != <span class="literal">null</span>) {</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            <span class="keyword">if</span> (fast == slow) {</span><br><span class="line">                <span class="type">ListNode</span> <span class="variable">idxStart</span> <span class="operator">=</span> head, meetStart = fast;</span><br><span class="line">                <span class="keyword">while</span> (idxStart != meetStart) {</span><br><span class="line">                    idxStart = idxStart.next;</span><br><span class="line">                    meetStart = meetStart.next;</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">return</span> idxStart;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> Algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>双指针</title>
      <link href="/2023/04/05/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
      <url>/2023/04/05/%E5%8F%8C%E6%8C%87%E9%92%88/</url>
      
        <content type="html"><![CDATA[<h1 id="双指针"><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h1><h2 id="快慢指针："><a href="#快慢指针：" class="headerlink" title="快慢指针："></a>快慢指针：</h2><p>慢指针用于保存性质，快指针用于探路。[0, 慢指针] 均满足性质</p><p><a href="https://leetcode.cn/problems/remove-element/">27.移除元素</a> </p><ul><li>快指针：寻找新数组的元素 ，新数组就是不含有目标元素的数组</li><li>慢指针：指向更新 新数组下标的位置</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">removeElement</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> val)</span> {</span><br><span class="line">        <span class="comment">// brutal force:</span></span><br><span class="line">       <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> nums.length;</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; count; i++) {</span><br><span class="line">           <span class="keyword">if</span> (nums[i] == val) {</span><br><span class="line">               <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; count; j++) {</span><br><span class="line">                   nums[j - <span class="number">1</span>] = nums[j];</span><br><span class="line">               }</span><br><span class="line">               i -= <span class="number">1</span>;</span><br><span class="line">               count--;</span><br><span class="line">           }</span><br><span class="line">       }</span><br><span class="line">       <span class="keyword">return</span> count;</span><br><span class="line">        <span class="comment">// fast-slow pointers:</span></span><br><span class="line">        <span class="comment">// 快指针：寻找新数组的元素 ，新数组就是不含有目标元素的数组</span></span><br><span class="line">        <span class="comment">// 慢指针：指向更新 新数组下标的位置</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">fast</span> <span class="operator">=</span> <span class="number">0</span>, slow = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (fast &lt; nums.length) {</span><br><span class="line">            <span class="keyword">while</span> (fast &lt; nums.length &amp;&amp; nums[fast] == val) {</span><br><span class="line">                fast++;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (fast == nums.length) <span class="keyword">break</span>;</span><br><span class="line">            nums[slow] = nums[fast];</span><br><span class="line">            fast++;</span><br><span class="line">            slow++;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> slow;</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><h2 id="相向双指针"><a href="#相向双指针" class="headerlink" title="相向双指针"></a>相向双指针</h2><p><a href="https://leetcode.cn/problems/remove-element/">977.有序数组的平方</a></p><p>由于满足性质：如果想要非递减顺序那么数组平方后的最大值一定在两侧并向中间收敛，因此相向双指针</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">int</span>[] twoPointers(<span class="type">int</span>[] nums) {</span><br><span class="line">    <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[nums.length];</span><br><span class="line">    <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> nums.length - <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = nums.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) {</span><br><span class="line">        <span class="keyword">if</span> (Math.abs(nums[left]) &gt; Math.abs(nums[right])){</span><br><span class="line">            res[k--] = nums[left] * nums[left];</span><br><span class="line">            left++;</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            res[k--] = nums[right] * nums[right];</span><br><span class="line">            right--;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h2><p>框架：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">    <span class="comment">// 滑动窗口框架：</span></span><br><span class="line">    <span class="comment">// 1. 入</span></span><br><span class="line">    <span class="comment">// 2. 出</span></span><br><span class="line">    <span class="comment">// 3. 记录答案</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><a href="https://leetcode.cn/problems/squares-of-a-sorted-array/">209.长度最小的子数组</a></p><p>窗口内满足题目要求的性质，不断更新并在过程中寻找最小值。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">whileLoopVersionSlidingWindow</span><span class="params">(<span class="type">int</span> target, <span class="type">int</span>[] nums)</span> {</span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> nums[<span class="number">0</span>];</span><br><span class="line">    <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) {</span><br><span class="line">        <span class="keyword">if</span> (sum &lt; target) {</span><br><span class="line">            right++;</span><br><span class="line">            <span class="keyword">if</span> (right &lt; nums.length) {</span><br><span class="line">                sum += nums[right];</span><br><span class="line">            } <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            res = Math.min(res, right - left + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (left + <span class="number">1</span> &lt; nums.length) {</span><br><span class="line">                sum -= nums[left];</span><br><span class="line">                left++;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> res == Integer.MAX_VALUE ? <span class="number">0</span> : res;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">forLoopVersionSlidingWindow</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> s)</span> {</span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> <span class="number">0</span>; right &lt; nums.length; right++) {</span><br><span class="line">        sum += nums[right];</span><br><span class="line">        <span class="keyword">while</span> (sum &gt;= s) {</span><br><span class="line">            result = Math.min(result, right - left + <span class="number">1</span>);</span><br><span class="line">            sum -= nums[left++];</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> result == Integer.MAX_VALUE ? <span class="number">0</span> : result;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 双指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二分查找</title>
      <link href="/2023/04/05/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
      <url>/2023/04/05/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="二分查找，-Binary-Search"><a href="#二分查找，-Binary-Search" class="headerlink" title="二分查找， Binary Search"></a>二分查找， Binary Search</h1><p><a href="https://leetcode.cn/problems/binary-search/">704.二分查找</a></p><p>二分查找有两个模板：</p><ol><li><p>左闭右闭</p><ol><li><p>leetcode 704:</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">binarySearchCloseInterval</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> {</span><br><span class="line">        <span class="comment">// 左闭右闭：我们要考虑右区间的数然后和target比较</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) {</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (left + right) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &gt; target) {</span><br><span class="line">                <span class="comment">// 因为接下来要继续判断 left &lt;= right 而 right = mid 一定不为答案</span></span><br><span class="line">                <span class="comment">// 但我们的定义又要求 right 是有意义的因此 right = mid - 1</span></span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            } <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target){</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure></li></ol></li><li><p>左闭右开</p><ol><li><p>leetcode 704:</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">binarySearchOpenInterval</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> {</span><br><span class="line">       <span class="comment">// 左闭右开：我们无需考虑右区间的数然后和target比较</span></span><br><span class="line">       <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = nums.length;</span><br><span class="line">       <span class="keyword">while</span> (left &lt; right) {</span><br><span class="line">           <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (left + right) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">           <span class="keyword">if</span> (nums[mid] &gt; target) {</span><br><span class="line">               <span class="comment">// 此时 我们 用 left &lt; right 保证在下一次不考虑right因此直接用 right = mid 即可</span></span><br><span class="line">               right = mid;</span><br><span class="line">           } <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target) {</span><br><span class="line">               left = mid + <span class="number">1</span>;</span><br><span class="line">           } <span class="keyword">else</span> {</span><br><span class="line">               <span class="keyword">return</span> mid;</span><br><span class="line">           }</span><br><span class="line">       }</span><br><span class="line">       <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"> }</span><br></pre></td></tr></tbody></table></figure></li></ol><p>两者方法的本质上的差别是要不要考虑右区间:</p><ol><li>若[left, right] 即 left &lt;= right<ol><li>right = nums.length - 1 &lt;- 很好理解，因为right本身在比较之中因此right = nums.length - 1</li><li>right = mid - 1 &lt;- 因为若 nums[mid] &gt; target 也就是说 right 一定不为答案，且在while中我们会考虑right因为它不为答案我们需要考虑其之前的一个数: right = mid - 1;</li></ol></li><li>若[left, right) 即 left &lt; right:<ol><li>right = nums.length, 同理，因为right本身不含在我们的比较计划中，因此right = nums.length即可</li><li>right = mid &lt;- 因为若 nums[mid] &gt; target 也就是说 right 一定不为答案，且在while中我们<strong>不</strong>会考虑right因为它不为答案我们<strong>不</strong>需要考虑其之前的一个数: right = mid;</li></ol></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> Algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分查找 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码随想录-总汇</title>
      <link href="/2023/04/05/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95-%E6%80%BB%E6%B1%87/"/>
      <url>/2023/04/05/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95-%E6%80%BB%E6%B1%87/</url>
      
        <content type="html"><![CDATA[<h1 id="代码随想录"><a href="#代码随想录" class="headerlink" title="代码随想录"></a>代码随想录</h1><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><p><a href="https://leetcode.cn/problems/binary-search/">704.二分查找</a><br>题目建议： 大家能把 704 掌握就可以，35.搜索插入位置 和 34. 在排序数组中查找元素的第一个和最后一个位置 ，如果有时间就去看一下，没时间可以先不看，二刷的时候在看。<br>先把 704写熟练，要熟悉 根据 左闭右开，左闭右闭 两种区间规则 写出来的二分法。</p><blockquote><p>见 <a href="/2023/04/05/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/" title="二分查找">二分查找</a> 专题</p></blockquote><p><a href="https://leetcode.cn/problems/remove-element/">27.移除元素</a><br>题目建议：  暴力的解法，可以锻炼一下我们的代码实现能力，建议先把暴力写法写一遍。 双指针法 是本题的精髓，今日需要掌握，至于拓展题目可以先不看。 </p><blockquote><p>见 <a href="/2023/04/05/%E5%8F%8C%E6%8C%87%E9%92%88/" title="双指针">双指针</a> 专题</p></blockquote><p><a href="https://leetcode.cn/problems/remove-element/">977.有序数组的平方</a><br>题目建议： 本题关键在于理解双指针思想 </p><blockquote><p>见 <a href="/2023/04/05/%E5%8F%8C%E6%8C%87%E9%92%88/" title="双指针">双指针</a> 专题</p></blockquote><p><a href="https://leetcode.cn/problems/squares-of-a-sorted-array/">209.长度最小的子数组</a><br>题目建议： 本题关键在于理解滑动窗口，这个滑动窗口看文字讲解 还挺难理解的，建议大家先看视频讲解。  拓展题目可以先不做。</p><blockquote><p>见 <a href="/2023/04/05/%E5%8F%8C%E6%8C%87%E9%92%88/" title="双指针">双指针</a> 专题</p></blockquote><p><a href="https://leetcode.cn/problems/spiral-matrix-ii/">59.螺旋矩阵II</a><br>题目建议：  本题关键还是在转圈的逻辑，在二分搜索中提到的区间定义，在这里又用上了。 </p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[][] generateMatrix(<span class="type">int</span> n) {</span><br><span class="line">    <span class="comment">// 此题的关键点在于循环不变量</span></span><br><span class="line">    <span class="comment">// 即 每次循环中都要遵循一个准则，</span></span><br><span class="line">    <span class="comment">// 如二分法中的 左闭右闭 或 左闭右开 性质的定义</span></span><br><span class="line">    <span class="comment">// 我们规定左闭右开，即每一行/列的最后一个值交由下一次循环处理：</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">startX</span> <span class="operator">=</span> <span class="number">0</span>, startY = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">offset</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span>[][] res = <span class="keyword">new</span> <span class="title class_">int</span>[n][n];</span><br><span class="line">    <span class="type">int</span> <span class="variable">circleCount</span> <span class="operator">=</span> n / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span> (circleCount &gt; <span class="number">0</span>) {</span><br><span class="line">        <span class="comment">// 处理上边的行：（左到右）</span></span><br><span class="line">        <span class="keyword">for</span> (j = startY; j &lt; n - offset; j++) {</span><br><span class="line">            res[startX][j] = count++;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 处理右边的列：（上到下）</span></span><br><span class="line">        <span class="keyword">for</span> (i = startX; i &lt; n - offset; i++) {</span><br><span class="line">            res[i][j] = count++;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 处理下边的行：（右到左）</span></span><br><span class="line">        <span class="keyword">for</span> (; j &gt; startY; j--) {</span><br><span class="line">            res[i][j] = count++;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 处理左边的列：（下到上）</span></span><br><span class="line">        <span class="keyword">for</span> (; i &gt; startX; i--) {</span><br><span class="line">            res[i][j] = count++;</span><br><span class="line">        }</span><br><span class="line">        startX++;</span><br><span class="line">        startY++;</span><br><span class="line">        offset++;</span><br><span class="line">        circleCount--;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (n % <span class="number">2</span> != <span class="number">0</span>) {</span><br><span class="line">        res[startX][startY] = count;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><h3 id="基本知识："><a href="#基本知识：" class="headerlink" title="基本知识："></a>基本知识：</h3><blockquote><p>其是一种通过指针串联在一起的 <strong>线性</strong> 数据结构，每一个节点都包含：<strong>数据域</strong> 和 <strong>指针域</strong>，最后一个节点的指针域指向null, aka 空指针。</p></blockquote><p>常见的包含三种类型：单链表（上述），双链表，循环链表：</p><h4 id="单链表："><a href="#单链表：" class="headerlink" title="单链表："></a>单链表：</h4><p>上述，它的指针域只能指向节点的下一个节点。<br><img src="/2023/04/05/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95-%E6%80%BB%E6%B1%87/%E5%8D%95%E9%93%BE%E8%A1%A8.png" alt="单链表"></p><h4 id="双链表："><a href="#双链表：" class="headerlink" title="双链表："></a>双链表：</h4><p>每一个节点有两个指针域，一个指向下一个节点，一个指向上一个节点。因此双链表可以向前以及向后查。<br><img src="/2023/04/05/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95-%E6%80%BB%E6%B1%87/%E5%8F%8C%E9%93%BE%E8%A1%A8.png" alt="双链表"></p><h4 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h4><p>链表首尾相连，可以用来解决<a href="https://zh.wikipedia.org/wiki/%E7%BA%A6%E7%91%9F%E5%A4%AB%E6%96%AF%E9%97%AE%E9%A2%98">约瑟夫环</a>的问题<br><img src="/2023/04/05/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95-%E6%80%BB%E6%B1%87/%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8.png" alt="循环链表"></p><h4 id="存储方式："><a href="#存储方式：" class="headerlink" title="存储方式："></a>存储方式：</h4><ol><li>不是连续分布，instead, 散乱分布</li><li>通过指针链接内存中的各个节点</li></ol><h4 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ListNode</span> {</span><br><span class="line">    <span class="comment">// 结点的值</span></span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 下一个结点</span></span><br><span class="line">    ListNode next;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 节点的构造函数(无参)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ListNode</span><span class="params">()</span> {</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 节点的构造函数(有一个参数)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ListNode</span><span class="params">(<span class="type">int</span> val)</span> {</span><br><span class="line">        <span class="built_in">this</span>.val = val;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 节点的构造函数(有两个参数)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ListNode</span><span class="params">(<span class="type">int</span> val, ListNode next)</span> {</span><br><span class="line">        <span class="built_in">this</span>.val = val;</span><br><span class="line">        <span class="built_in">this</span>.next = next;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h4><p>删除节点：<br>next指向下一个即可</p><p>添加节点：取消原本的next，指向新的节点，新的节点指向下一个节点。</p><p>可以看出链表的增添和删除都是O(1)操作，也不会影响到其他节点。但是要注意，要是删除第五个节点，需要从头节点查找到第四个节点通过next指针进行删除操作，查找的时间复杂度是O(n)。</p><p><img src="/2023/04/05/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95-%E6%80%BB%E6%B1%87/%E9%93%BE%E8%A1%A8%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90.png" alt="链表性能分析"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote><p>数组在定义的时候，长度就是固定的，如果想改动数组的长度，就需要重新定义一个新的数组。</p></blockquote><blockquote><p>链表的长度可以是不固定的，并且可以动态增删， 适合数据量不固定，频繁增删，较少查询的场景。</p></blockquote><h3 id="例题："><a href="#例题：" class="headerlink" title="例题："></a>例题：</h3><blockquote><p>例题详解见 <a href="/2023/04/06/%E9%93%BE%E8%A1%A8/" title="链表">链表</a></p></blockquote><p>● 203.移除链表元素<br>● 707.设计链表<br>● 206.反转链表<br>● 24. 两两交换链表中的节点<br>● 19.删除链表的倒数第N个节点<br>● 面试题 02.07. 链表相交<br>● 142.环形链表II </p><h2 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h2><h3 id="基本知识：-1"><a href="#基本知识：-1" class="headerlink" title="基本知识："></a>基本知识：</h3><p>即 Hash Table, 又称散列表。<br>哈希表是根据关键码的值而直接进行防卫的数据结构。e.g.数组就是哈希表的一个非常好的应用因为可以通过下标来返回对应值。<br><strong>主要解决的问题：</strong> 快速判断一个元素是否出现在集合里。 <br>值 -&gt; 哈希表 的 <strong>映射</strong> 即为Hash Function aka 哈希函数 \</p><h4 id="哈希函数"><a href="#哈希函数" class="headerlink" title="哈希函数"></a>哈希函数</h4><p><img src="/2023/04/05/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95-%E6%80%BB%E6%B1%87/%E5%93%88%E5%B8%8C%E5%87%BD%E6%95%B0.png" alt="哈希函数"><br>把学生姓名映射到了哈希表存储的函数过程。通过<strong>hashCode</strong>把<strong>名字转化为数值</strong>，一般hashcode是通过特定编码方式，可以将其他数据格式转化为不同的数值，这样就把学生名字映射为哈希表上的索引数字了。</p><blockquote><p>问题1: 如果hashCode得到的数值大于 哈希表的大小了，也就是大于tableSize了 怎么办？ </p></blockquote><blockquote><p>此时为了保证映射出来的索引数值都落在哈希表上，我们会在再次对数值做一个取模的操作，就要我们就保证了学生姓名一定可以映射到哈希表上了。</p></blockquote><blockquote><p>问题2: 如果学生的数量大于哈希表的大小，此时就算哈希函数计算的再均匀，也避免不了会有几位学生的名字同时映射到哈希表 同一个索引下标的位置。</p></blockquote><blockquote><p>即哈希碰撞的处理问题 </p></blockquote><h4 id="哈希碰撞-Hash-Collisions："><a href="#哈希碰撞-Hash-Collisions：" class="headerlink" title="哈希碰撞, Hash Collisions："></a>哈希碰撞, Hash Collisions：</h4><blockquote><p>两个值映射到了同一个位置即为Hash Collisions</p></blockquote><p><img src="/2023/04/05/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95-%E6%80%BB%E6%B1%87/%E5%93%88%E5%B8%8C%E7%A2%B0%E6%92%9E.png" alt="哈希碰撞"><br>解决方法：</p><ol><li>拉链法</li><li>线性探测法</li></ol><h5 id="拉链法"><a href="#拉链法" class="headerlink" title="拉链法"></a>拉链法</h5><p>从冲突的位置拉一条链表出来：<br><img src="/2023/04/05/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95-%E6%80%BB%E6%B1%87/%E6%8B%89%E9%93%BE%E6%B3%95.png" alt="拉链法"><br>需要注意的是链表上的查询需要一个一个查，因此大小很重要。</p><h5 id="线性探测法"><a href="#线性探测法" class="headerlink" title="线性探测法"></a>线性探测法</h5><blockquote><p>要求 hash table 的大小 <strong>一定</strong> 要大于 data size 因为需要依赖哈希表中的空位来解决碰撞问题。线性探测法要把冲突的元素放在下一个 <strong>空闲的</strong> 位置 </p></blockquote><p><img src="/2023/04/05/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95-%E6%80%BB%E6%B1%87/%E7%BA%BF%E6%80%A7%E5%86%B2%E7%AA%81%E6%B3%95.png" alt="线性冲突法"></p><p>图中小王需要放到小李的下面的位置。</p><h4 id="常见的哈希结构："><a href="#常见的哈希结构：" class="headerlink" title="常见的哈希结构："></a>常见的哈希结构：</h4><p>一般会有以下三种结构：</p><ol><li>数组</li><li>hashset</li><li>hashmap</li></ol><table><thead><tr><th>数据结构</th><th>底层实现</th><th>是否有序</th><th>数值是否可以重复</th><th>能否更改数值</th><th>查询效率</th><th>增删效率</th></tr></thead><tbody><tr><td>HashMap</td><td>哈希表（数组 + 链表/红黑树）</td><td>无序</td><td>键不可重复，值可重复</td><td>可以</td><td>O(1) ~ O(n)</td><td>O(1) ~ O(n)</td></tr><tr><td>HashSet</td><td>基于HashMap实现</td><td>无序</td><td>不可重复</td><td>间接支持</td><td>O(1) ~ O(n)</td><td>O(1) ~ O(n)</td></tr><tr><td>TreeMap</td><td>红黑树</td><td>有序</td><td>键不可重复，值可重复</td><td>可以</td><td>O(log n)</td><td>O(log n)</td></tr></tbody></table><table><thead><tr><th>HashMap</th><th>HashSet</th><th>TreeMap</th></tr></thead><tbody><tr><td>底层实现：哈希表（数组 + 链表/红黑树）</td><td>基于HashMap实现</td><td>红黑树</td></tr><tr><td>是否有序：无序</td><td>无序</td><td>有序</td></tr><tr><td>数值是否可以重复：键不可重复，值可重复</td><td>不可重复</td><td>键不可重复，值可重复</td></tr><tr><td>能否更改数值：可以 通过put()方法更新键对应的值。</td><td>间接支持</td><td>可以通过put()方法更新键对应的值</td></tr><tr><td>查询效率：O(1) ~ O(n)</td><td>O(1) ~ O(n)</td><td>O(log n) 由于红黑树是平衡的</td></tr><tr><td>增删效率：O(1) ~ O(n)</td><td>O(1) ~ O(n)</td><td>O(log n) 由于红黑树是平衡的</td></tr></tbody></table><ol start="3"><li>TreeMap</li></ol><p>底层实现：基于红黑树实现，红黑树是一种自平衡的二叉搜索树。是否有序：保证有序。TreeMap中的元素按照键（Key）的自然顺序或者提供的比较器（Comparator）进行排序。数值是否可以重复：键（Key）不可重复，值（Value）可重复。能否更改数值：可以更改数值。通过put()方法更新键对应的值。查询效率：时间复杂度为O(log n)，其中n为元素数量。由于红黑树是平衡的，查询效率相对较高。增删效率：时间复杂度为O(log n)，其中n为元素数量。由于红黑树具有自平衡特性，增删操作效率相对较高。</p><h3 id="例题-1"><a href="#例题-1" class="headerlink" title="例题"></a>例题</h3><blockquote><p>例题详解见 <a href="/2023/04/09/%E5%93%88%E5%B8%8C%E8%A1%A8/" title="哈希表">哈希表</a></p></blockquote><p>● 242.有效的字母异位词 </p><p>● 349. 两个数组的交集 </p><p>● 202. 快乐数 </p><p>● 1. 两数之和</p><p>● 454.四数相加II </p><p>● 383. 赎金信 </p><p>● 15. 三数之和 </p><p>● 18. 四数之和 </p><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><ol><li><strong>当我们遇到了要快速判断一个元素是否出现集合里的时候，就要考虑哈希法</strong>。其本质是通过<strong>通过空间换了时间</strong> </li><li>经典题目：<ol><li>数组作为哈希表：eg: int[] = new int[26]; <ol><li>在<a href="https://programmercarl.com/0242.%E6%9C%89%E6%95%88%E7%9A%84%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D.html">242.有效的字母异位词</a>中，我们提到了数组就是简单的哈希表，但是数组的大小是受限的！这道题目包含小写字母，那么使用数组来做哈希最合适不过。在<a href="https://programmercarl.com/0383.%E8%B5%8E%E9%87%91%E4%BF%A1.html">383.赎金信</a>中同样要求只有小写字母，那么就给我们浓浓的暗示，用数组！和<a href="https://programmercarl.com/0242.%E6%9C%89%E6%95%88%E7%9A%84%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D.html">242.有效的字母异位词</a>很像，<a href="https://programmercarl.com/0242.%E6%9C%89%E6%95%88%E7%9A%84%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D.html">242.有效的字母异位词</a>是求 字符串a 和 字符串b 是否可以相互组成，在<a href="https://programmercarl.com/0383.%E8%B5%8E%E9%87%91%E4%BF%A1.html">383.赎金信</a>中是求字符串a能否组成字符串b，而不用管字符串b 能不能组成字符串a。</li></ol></li><li>Set作为哈希表：<ol><li>在<a href="https://programmercarl.com/0349.%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84%E7%9A%84%E4%BA%A4%E9%9B%86.html">349. 两个数组的交集 (opens new window)</a>中我们给出了什么时候用数组就不行了，需要用set。这道题目没有限制数值的大小，就无法使用数组来做哈希表了。</li><li><strong>主要因为如下两点：</strong><ol><li>数组的大小是有限的，受到系统栈空间（不是数据结构的栈）的限制。</li><li>如果数组空间够大，但哈希值比较少、特别分散、跨度非常大，使用数组就造成空间的极大浪费。</li></ol></li></ol></li><li>Map本身作为哈希表：<ol><li>e g: 两数之和</li><li>数组的大小是受限制的，而且如果元素很少，而哈希值太大会造成内存空间的浪费。</li><li>set是一个集合，里面放的元素只能是一个key，而两数之和这道题目，不仅要判断y是否存在而且还要记录y的下标位置，因为要返回x 和 y的下标。所以set 也不能用。</li></ol></li></ol></li></ol><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><ol><li>字符串是字符组成的有限序列</li><li>使用方法：<ol><li>双指针：<ol><li>344.反转字符串 </li><li>剑指Offer 05.替换空格</li></ol></li><li>反转<ol><li>例题： 541. 反转字符串II</li><li>例题：151.翻转字符串里的单词</li></ol></li><li>KMP</li></ol></li></ol><h3 id="例题-2"><a href="#例题-2" class="headerlink" title="例题"></a>例题</h3><blockquote><p> 例题详解见 <a href="/2023/04/13/%E5%AD%97%E7%AC%A6%E4%B8%B2/" title="字符串">字符串</a></p></blockquote><p>● 344.反转字符串</p><p>● 541. 反转字符串II</p><p>● 剑指Offer 05.替换空格</p><p>● 151.翻转字符串里的单词</p><p>● 剑指Offer58-II.左旋转字符串</p><p>● 28. 实现 strStr()</p><p>● 459.重复的子字符串</p><h2 id="队列-Queue-and-栈-Stack"><a href="#队列-Queue-and-栈-Stack" class="headerlink" title="队列 (Queue) and 栈 (Stack)"></a>队列 (Queue) and 栈 (Stack)</h2><blockquote><p>例题详解见 <a href="/2023/04/15/%E9%98%9F%E5%88%97%E5%92%8C%E6%A0%88/" title="队列和栈">队列和栈</a></p></blockquote><ol><li>队列先进先出 FIFO 栈先进后出 FILO</li></ol><h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><p>在 Java 中，栈（Stack）和队列（Queue）是两种常用的数据结构。它们可以通过 Java 集合框架中的类来实现。</p><h4 id="栈（Stack）实现方法："><a href="#栈（Stack）实现方法：" class="headerlink" title="栈（Stack）实现方法："></a>栈（Stack）实现方法：</h4><p>Java 有一个名为 Stack 的类。但是，由于 Stack 类被认为是过时的，不推荐使用。相反，我们可以使用 Deque（双端队列）来实现栈。以下是使用 Deque 实现栈的方法：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Deque;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StackExample</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        Deque&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 入栈</span></span><br><span class="line">        stack.push(<span class="number">1</span>);</span><br><span class="line">        stack.push(<span class="number">2</span>);</span><br><span class="line">        stack.push(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 出栈</span></span><br><span class="line">        System.out.println(stack.pop());</span><br><span class="line">        System.out.println(stack.pop());</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>栈的底层实现是<strong>通过数组或链表</strong>。在这个例子中，我们使用了 LinkedList（链表）作为底层实现。栈的主要操作（push 和 pop）的时间复杂度是 O(1)。</p><h4 id="队列（Queue）实现方法："><a href="#队列（Queue）实现方法：" class="headerlink" title="队列（Queue）实现方法："></a>队列（Queue）实现方法：</h4><p>Java 提供了 Queue 接口来实现队列。以下是使用 LinkedList 实现队列的方法</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.Queue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QueueExample</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        Queue&lt;Integer&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 入队</span></span><br><span class="line">        queue.offer(<span class="number">1</span>);</span><br><span class="line">        queue.offer(<span class="number">2</span>);</span><br><span class="line">        queue.offer(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 出队</span></span><br><span class="line">        System.out.println(queue.poll());</span><br><span class="line">        System.out.println(queue.poll());</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>队列的底层实现可以是数组或链表。在这个例子中，我们使用了 LinkedList（链表）作为底层实现。队列的主要操作（offer 和 poll）的时间复杂度是 O(1)。</p><p>注意：虽然在上面的例子中，我们使用 LinkedList 作为底层实现，但实际上还有其他实现方式，如 ArrayDeque（基于数组的双端队列），它在某些情况下可能比 LinkedList 更高效。另外，Java 还提供了 PriorityQueue（优先队列），其底层实现是基于二叉堆的数据结构，用于实现具有优先级的队列。</p><h4 id="优先队列-Priority-Queue"><a href="#优先队列-Priority-Queue" class="headerlink" title="优先队列 (Priority Queue):"></a>优先队列 (Priority Queue):</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PriorityQueueExample</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="comment">// 创建一个整数优先队列</span></span><br><span class="line">        PriorityQueue&lt;Integer&gt; intQueue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将整数添加到优先队列</span></span><br><span class="line">        intQueue.offer(<span class="number">5</span>);</span><br><span class="line">        intQueue.offer(<span class="number">2</span>);</span><br><span class="line">        intQueue.offer(<span class="number">8</span>);</span><br><span class="line">        intQueue.offer(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将整数从优先队列中删除并打印（默认为自然顺序，即升序）</span></span><br><span class="line">        <span class="keyword">while</span> (!intQueue.isEmpty()) {</span><br><span class="line">            System.out.println(intQueue.poll());</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个字符串优先队列，使用自定义的 Comparator 对象</span></span><br><span class="line">        PriorityQueue&lt;String&gt; stringQueue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">StringLengthComparator</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将字符串添加到优先队列</span></span><br><span class="line">        stringQueue.offer(<span class="string">"apple"</span>);</span><br><span class="line">        stringQueue.offer(<span class="string">"banana"</span>);</span><br><span class="line">        stringQueue.offer(<span class="string">"cherry"</span>);</span><br><span class="line">        stringQueue.offer(<span class="string">"date"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将字符串从优先队列中删除并打印（根据字符串长度排序）</span></span><br><span class="line">        <span class="keyword">while</span> (!stringQueue.isEmpty()) {</span><br><span class="line">            System.out.println(stringQueue.poll());</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自定义的 Comparator 类，按字符串长度进行排序</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">StringLengthComparator</span> <span class="keyword">implements</span> <span class="title class_">Comparator</span>&lt;String&gt; {</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(String s1, String s2)</span> {</span><br><span class="line">            <span class="keyword">return</span> s1.length() - s2.length();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>Comparator in one line:</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PriorityQueueExample</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="comment">// 创建一个字符串优先队列，使用自定义的 Comparator 对象</span></span><br><span class="line">        PriorityQueue&lt;String&gt; stringQueue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;String&gt;() {</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(String s1, String s2)</span> {</span><br><span class="line">                <span class="keyword">return</span> s1.length() - s2.length();</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将字符串添加到优先队列</span></span><br><span class="line">        stringQueue.offer(<span class="string">"apple"</span>);</span><br><span class="line">        stringQueue.offer(<span class="string">"banana"</span>);</span><br><span class="line">        stringQueue.offer(<span class="string">"cherry"</span>);</span><br><span class="line">        stringQueue.offer(<span class="string">"date"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将字符串从优先队列中删除并打印（根据字符串长度排序）</span></span><br><span class="line">        <span class="keyword">while</span> (!stringQueue.isEmpty()) {</span><br><span class="line">            System.out.println(stringQueue.poll());</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="例题-3"><a href="#例题-3" class="headerlink" title="例题"></a>例题</h3><blockquote><p> 例题详解见 <a href="/2023/04/15/%E9%98%9F%E5%88%97%E5%92%8C%E6%A0%88/" title="队列和栈">队列和栈</a></p></blockquote><p>● 232.用栈实现队列</p><p>● 225. 用队列实现栈</p><p>● 20. 有效的括号</p><p>● 1047. 删除字符串中的所有相邻重复项</p><p>● 150. 逆波兰表达式求值</p><p>● 239. 滑动窗口最大值</p><p>● 347.前 K 个高频元素</p><h3 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h3><ol><li>225.用队列实现栈：一个队列在模拟栈弹出元素的时候只要将队列头部的元素（除了最后一个元素外） 重新添加到队列尾部，此时在去弹出元素就是栈的顺序了。</li></ol><h5 id="栈的应用"><a href="#栈的应用" class="headerlink" title="栈的应用"></a>栈的应用</h5><ol><li><strong>括号匹配（有效的括号）, 表达式（逆波兰表达式求值），字符串相邻元素去重（删除字符串中的所有相邻重复项）</strong>都是使用<strong>栈</strong>解决的经典问题其核心是<strong>匹配</strong>问题</li></ol><h5 id="队列的应用"><a href="#队列的应用" class="headerlink" title="队列的应用"></a>队列的应用</h5><ol><li>滑动窗口最大值问题中，队列<strong>没有</strong>必要维护窗口里的所有元素，<strong>只需要</strong>维护有可能成为窗口里<strong>最大值的元素</strong>就可以了，同时<strong>保证队列里的元素数值是由大到小的。</strong></li><li>单调队列 ≠ 优先队列</li><li><strong>单调队列不是一成不变的，而是不同场景不同写法</strong>，总之要保证队列里单调递减或递增的原则，所以叫做单调队列。</li></ol><h5 id="优先队列"><a href="#优先队列" class="headerlink" title="优先队列"></a>优先队列</h5><p><strong>一个披着队列外衣的堆</strong>，优先队列对外接口只是从队头取元素，从队尾添加元素，再无其他取元素的方式，看起来就是一个队列。</p><p><strong>堆是一棵完全二叉树，树中每个结点的值都不小于（或不大于）其左右孩子的值。</strong> 如果父亲结点是大于等于左右孩子就是<strong>大顶堆</strong>，小于等于左右孩子就是<strong>小顶堆</strong>。</p><p>前 K 个高频元素 用到了优先队列</p><h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><p><img src="/2023/04/05/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95-%E6%80%BB%E6%B1%87/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86.png" alt="二叉树基本知识"></p><h3 id="二叉树种类"><a href="#二叉树种类" class="headerlink" title="二叉树种类"></a>二叉树种类</h3><p>主要有两种：<strong>满二叉树</strong>以及<strong>完全二叉树</strong></p><p>节点的高度：节点到最远叶子节点的最长路径上边的数量。叶子节点高度为0。<br>节点的深度：节点到根节点的路径上边的数量。所有根节点深度为0。<br>树的高度：树的高度等于根节点的高度，等于最远叶子节点的深度。<br>树的深度：树的深度等于树的高度。<br>树的宽度：两个最长路径的叶子节点之间节点数。</p><p><img src="/2023/04/05/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95-%E6%80%BB%E6%B1%87/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%90%8D%E8%AF%8D.webp" alt="二叉树名词"></p><h4 id="满二叉树"><a href="#满二叉树" class="headerlink" title="满二叉树"></a>满二叉树</h4><p>定义：除最后一层无任何子节点外，每一层上的所有结点都有两个子结点（最后一层上的无子结点的结点为 叶子结点 ）。也可以这样理解，除叶子结点外的所有结点均有两个子结点。节点数达到最大值。所有叶子结点必须在同一层上.</p><p>例子：<img src="/2023/04/05/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95-%E6%80%BB%E6%B1%87/%E6%BB%A1%E4%BA%8C%E5%8F%89%E6%A0%91.png" alt="满二叉树"></p><p>深度为k，有 2 ^ (k-1) 个节点的二叉树</p><h4 id="完全二叉树"><a href="#完全二叉树" class="headerlink" title="完全二叉树"></a>完全二叉树</h4><p>除了最底层节点可能没填满外，其余每层节点数都达到最大值，并且最下面一层的节点都集中在该层<strong>最左边</strong>的若干位置。若最底层为第 h 层，则该层包含 1~ 2^(h-1) 个节点。</p><p><img src="/2023/04/05/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95-%E6%80%BB%E6%B1%87/%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91.png" alt="完全二叉树"></p><p>ps: 优先队列 用到了 堆 而堆就是一个完全二叉树但保证了父子节点的顺序关系</p><h4 id="二叉搜索树"><a href="#二叉搜索树" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h4><p>二叉搜索树，有值，且其是一个有序树。对节点没有要求，对顺序有要求</p><p>有以下三个特点：</p><ul><li>若它的左子树不空，则<strong>左子树上所有结点的值均小于它的根结点</strong>的值；</li><li>若它的右子树不空，则<strong>右子树上所有结点的值均大于它的根结点</strong>的值；</li><li>它的左、右子树也分别为二叉排序树</li></ul><p><img src="/2023/04/05/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95-%E6%80%BB%E6%B1%87/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91.png" alt="二叉搜索树"></p><h4 id="平衡二叉搜索树"><a href="#平衡二叉搜索树" class="headerlink" title="平衡二叉搜索树"></a>平衡二叉搜索树</h4><p><strong>平衡二叉查找树</strong>：简称平衡二叉树 </p><p>特点：任一节点对应的两棵子树的最大高度差为1，因此它也被称为高度平衡树。查找、插入和删除在平均和最坏情况下的时间复杂度都是 O(logN)</p><p>总结：</p><ol><li>可以是空树。</li><li>假如不是空树，任何一个结点的左子树与右子树都是平衡二叉树，并且高度之差的绝对值不超过 1。</li></ol><p><img src="/2023/04/05/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95-%E6%80%BB%E6%B1%87/%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91.png" alt="平衡二叉搜索树"></p><h3 id="二叉树的存储方式"><a href="#二叉树的存储方式" class="headerlink" title="二叉树的存储方式"></a>二叉树的存储方式</h3><p>两种：</p><ol><li>用<strong>指针</strong>的<strong>链式存储</strong></li></ol><p><img src="/2023/04/05/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95-%E6%80%BB%E6%B1%87/%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8.png" alt="链式存储"></p><ol><li>用<strong>数组</strong>的<strong>顺序存储</strong></li></ol><p><img src="/2023/04/05/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95-%E6%80%BB%E6%B1%87/%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8.png" alt="顺序存储"></p><p>如果父节点的数组下标是 i，那么它的<strong>左孩子就是 i * 2 + 1</strong>，<strong>右孩子就是 i * 2 + 2</strong>。</p><h3 id="二叉树的遍历"><a href="#二叉树的遍历" class="headerlink" title="二叉树的遍历"></a>二叉树的遍历</h3><p>二叉树主要有两种遍历方式：</p><ol><li><p><strong>深度优先遍历</strong>：先往深走，遇到叶子节点再往回走。</p><ol><li>前序遍历（递归法，迭代法）</li><li>中序遍历（递归法，迭代法）</li><li>后序遍历（递归法，迭代法）</li></ol><p>前中后，其实指的就是<strong>中间节点</strong>的<strong>遍历顺序</strong>，前中后序指的就是中间节点的位置：</p><ul><li>前序遍历：中左右</li><li>中序遍历：左中右</li><li>后序遍历：左右中</li></ul><p><img src="/2023/04/05/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95-%E6%80%BB%E6%B1%87/%E5%89%8D%E4%B8%AD%E5%90%8E%E7%9A%84%E9%81%8D%E5%8E%86.png" alt="前中后的遍历"></p></li><li><p><strong>广度优先遍历</strong>：一层一层的去遍历。</p><ol><li>层次遍历（迭代法）</li></ol></li></ol><h3 id="二叉树定义-链式存储"><a href="#二叉树定义-链式存储" class="headerlink" title="二叉树定义(链式存储)"></a>二叉树定义(链式存储)</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TreeNode</span> {</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">  TreeNode left;</span><br><span class="line">  TreeNode right;</span><br><span class="line">  TreeNode() {}</span><br><span class="line">  TreeNode(<span class="type">int</span> val) { <span class="built_in">this</span>.val = val; }</span><br><span class="line">  TreeNode(<span class="type">int</span> val, TreeNode left, TreeNode right) {</span><br><span class="line">    <span class="built_in">this</span>.val = val;</span><br><span class="line">    <span class="built_in">this</span>.left = left;</span><br><span class="line">    <span class="built_in">this</span>.right = right;</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="例题-4"><a href="#例题-4" class="headerlink" title="例题"></a>例题</h3><blockquote><p>例题详解见 <a href="/2023/04/17/%E4%BA%8C%E5%8F%89%E6%A0%91/" title="二叉树">二叉树</a></p></blockquote><ul><li>递归遍历<ul><li>144.二叉树的前序遍历</li><li>145.二叉树的后序遍历</li><li>94.二叉树的中序遍历</li></ul></li><li>迭代遍历</li><li>统一迭代</li><li>层序遍历：<ul><li>102.二叉树的层序遍历</li><li>107.二叉树的层次遍历II</li><li>199.二叉树的右视图</li><li>637.二叉树的层平均值</li><li>429.N叉树的层序遍历</li><li>515.在每个树行中找最大值</li><li>116.填充每个节点的下一个右侧节点指针</li><li>117.填充每个节点的下一个右侧节点指针II</li><li>104.二叉树的最大深度</li><li>111.二叉树的最小深度</li></ul></li><li>226.翻转二叉树 </li><li>101.对称二叉树 2  </li><li>104.二叉树的最大深度  </li><li>559.n叉树的最大深度</li><li>111.二叉树的最小深度</li><li>222.完全二叉树的节点个数</li><li>110.平衡二叉树 </li><li>257.二叉树的所有路径 </li><li>404.左叶子之和</li></ul>]]></content>
      
      
      <categories>
          
          <category> Algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码随想录 </tag>
            
            <tag> 总汇 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/04/04/hello-world/"/>
      <url>/2023/04/04/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
