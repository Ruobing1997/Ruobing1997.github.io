<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>图论</title>
      <link href="/2023/05/10/%E5%9B%BE%E8%AE%BA/"/>
      <url>/2023/05/10/%E5%9B%BE%E8%AE%BA/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>拓扑序列</title>
      <link href="/2023/05/10/%E6%8B%93%E6%89%91%E5%BA%8F%E5%88%97/"/>
      <url>/2023/05/10/%E6%8B%93%E6%89%91%E5%BA%8F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>此教程参考 <a href="https://raelum.blog.csdn.net/article/details/129650604?ydreferer=aHR0cHM6Ly93d3cuYWN3aW5nLmNvbS8=">还不会拓扑排序？看这一篇就够了</a> 以及 <a href="https://www.acwing.com/video/280/">acwing 算法基础课 848</a></p></div> <h1 id="拓扑序列"><a href="#拓扑序列" class="headerlink" title="拓扑序列"></a>拓扑序列</h1><ol><li>一定得是有向图才（可能）会有拓扑序列</li><li>必须是由起点指向终点不能从后指向前</li><li>有向无环图一定存在拓扑序列<ol><li>DAG也被称为拓扑图</li></ol></li><li>度数：<ol><li>入度和出度<ol><li>入度：有多少条边指向自己</li><li>出度：有多少条边出去</li><li><img src="/2023/05/10/%E6%8B%93%E6%89%91%E5%BA%8F%E5%88%97/%E5%85%A5%E5%BA%A6%E5%92%8C%E5%87%BA%E5%BA%A6.png" alt="入度和出度"></li></ol></li></ol></li></ol><h2 id="如何求拓扑序列"><a href="#如何求拓扑序列" class="headerlink" title="如何求拓扑序列"></a>如何求拓扑序列</h2><ol><li>任何入度为0的都可以作为起点（当前最前面的位置）</li><li>BFS</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 入队 queue.add(入度为0的点)</span></span><br><span class="line">Queue.add(所有入度为<span class="number">0</span>的点)</span><br><span class="line"><span class="keyword">while</span> !queue.isEmpty() {</span><br><span class="line">  <span class="comment">// 拿出队头 t</span></span><br><span class="line">  <span class="comment">// 枚举对头 t 的所有出边 t -&gt; j</span></span><br><span class="line">  <span class="comment">// 删掉 t -&gt; j, j的入度 减1</span></span><br><span class="line">  <span class="comment">// if d[j] == 0; 此时j为新的入度为0的点，j 入队</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>如果图中有环，那么一定会有点无法入队；反之，所有点都会在queue中</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>拓扑排序其是一种有向无环图 (DAG) 的顶点排序方法，它将一个有向无环图的所有顶点排成一个线性序列，使得<strong>图中任意一条有向边的起点排在终点的前面</strong></p><table><thead><tr><th>课程编号</th><th>课程名称</th><th>先修课程</th></tr></thead><tbody><tr><td>1</td><td>高等数学</td><td>−</td></tr><tr><td>2</td><td>程序设计基础</td><td>−</td></tr><tr><td>3</td><td>离散数学</td><td>1, 2</td></tr><tr><td>4</td><td>数据结构</td><td>2, 3</td></tr><tr><td>5</td><td>高级语言程序设计</td><td>2</td></tr><tr><td>6</td><td>编译方法</td><td>4,5</td></tr><tr><td>7</td><td>操作系统</td><td>4,9</td></tr><tr><td>8</td><td>普通物理</td><td>1</td></tr><tr><td>9</td><td>计算机原理</td><td>8</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> 拓扑序列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回溯之集合划分问题</title>
      <link href="/2023/05/09/%E5%9B%9E%E6%BA%AF%E4%B9%8B%E9%9B%86%E5%90%88%E5%88%92%E5%88%86%E9%97%AE%E9%A2%98/"/>
      <url>/2023/05/09/%E5%9B%9E%E6%BA%AF%E4%B9%8B%E9%9B%86%E5%90%88%E5%88%92%E5%88%86%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 回溯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回溯之排列-组合-子集问题</title>
      <link href="/2023/05/09/%E5%9B%9E%E6%BA%AF%E4%B9%8B%E6%8E%92%E5%88%97-%E7%BB%84%E5%90%88-%E5%AD%90%E9%9B%86%E9%97%AE%E9%A2%98/"/>
      <url>/2023/05/09/%E5%9B%9E%E6%BA%AF%E4%B9%8B%E6%8E%92%E5%88%97-%E7%BB%84%E5%90%88-%E5%AD%90%E9%9B%86%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="题目综述"><a href="#题目综述" class="headerlink" title="题目综述"></a>题目综述</h1><p>这类问题一般就是说 从 <strong>序列</strong> <code>nums</code> 中 <strong>以给定规则取若干元素</strong> 有如下几种变体：</p><ol><li>元素<strong>无重不可复选</strong>，即 <code>nums</code> 中的元素都是唯一的，每个元素最多只能被使用一次，这也是<strong>最基本</strong>的形式<ol><li>以组合为例，如果输入 <code>nums = [2,3,6,7]</code>，和为 7 的组合应该只有 <code>[7]</code>。</li></ol></li><li><strong>元素可重不可复选</strong>，即 <code>nums</code> 中的元素可以<strong>存在重复</strong>，每个元素最多只能被使用一次。<ol><li>以组合为例，如果输入 <code>nums = [2,5,2,1,2]</code>，和为 7 的组合应该有两种 <code>[2,2,2,1]</code> 和 <code>[5,2]</code>。</li></ol></li><li><strong>元素无重可复选</strong>，即 <code>nums</code> 中的<strong>元素都是唯一</strong>的，每个元素可以被<strong>使用若干次</strong>。<ol><li>以组合为例，如果输入 <code>nums = [2,3,6,7]</code>，和为 7 的组合应该有两种 <code>[2,2,3]</code> 和 <code>[7]</code>。</li></ol></li></ol><p>PS: 也可以说有第四种形式，即<strong>元素可重可复选</strong>。但既然元素可复选，那又<strong>何必存在重复元素</strong>呢？元素去重之后就等同于形式三，所以这种情况不用考虑。</p><p>排列、组合、子集问题都可以有这三种基本形式，所以共有 9 种变化。但无论形式怎么变化，其本质就是<strong>穷举所有解</strong>，而这些解呈现树形结构，所以合理使用回溯算法框架，稍改代码框架即可把这些问题一网打尽。</p><p><img src="/2023/05/09/%E5%9B%9E%E6%BA%AF%E4%B9%8B%E6%8E%92%E5%88%97-%E7%BB%84%E5%90%88-%E5%AD%90%E9%9B%86%E9%97%AE%E9%A2%98/%E5%9B%9E%E6%BA%AF%E7%BB%84%E5%90%88_%E5%AD%90%E9%9B%86%E6%A0%91.jpeg" alt="回溯组合_子集树"></p><p><img src="/2023/05/09/%E5%9B%9E%E6%BA%AF%E4%B9%8B%E6%8E%92%E5%88%97-%E7%BB%84%E5%90%88-%E5%AD%90%E9%9B%86%E9%97%AE%E9%A2%98/%E5%9B%9E%E6%BA%AF%E6%8E%92%E5%88%97%E6%A0%91.jpeg" alt="回溯排列树"></p><h1 id="元素无重不可复选"><a href="#元素无重不可复选" class="headerlink" title="元素无重不可复选"></a>元素无重不可复选</h1><h2 id="78-子集"><a href="#78-子集" class="headerlink" title="78. 子集"></a><a href="https://leetcode.cn/problems/subsets/">78. 子集</a></h2><p><img src="/2023/05/09/%E5%9B%9E%E6%BA%AF%E4%B9%8B%E6%8E%92%E5%88%97-%E7%BB%84%E5%90%88-%E5%AD%90%E9%9B%86%E9%97%AE%E9%A2%98/lc78%E5%AD%90%E9%9B%86.jpeg" alt="lc78子集"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    LinkedList&lt;Integer&gt; path = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">subsets</span><span class="params">(<span class="type">int</span>[] nums)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">startIdx</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        backtracking(nums, startIdx);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> startIdx)</span> {</span><br><span class="line">      <span class="comment">// 直接将路径加入答案中</span></span><br><span class="line">        res.add(<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;(path));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> startIdx; i &lt; nums.length; i++) {</span><br><span class="line">            <span class="type">int</span> <span class="variable">cur</span> <span class="operator">=</span> nums[i];</span><br><span class="line">            path.add(cur);</span><br><span class="line">            backtracking(nums, i + <span class="number">1</span>);</span><br><span class="line">            path.removeLast();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="77-组合"><a href="#77-组合" class="headerlink" title="77. 组合"></a><a href="https://leetcode.cn/problems/combinations/">77. 组合</a></h2><p><img src="/2023/05/09/%E5%9B%9E%E6%BA%AF%E4%B9%8B%E6%8E%92%E5%88%97-%E7%BB%84%E5%90%88-%E5%AD%90%E9%9B%86%E9%97%AE%E9%A2%98/lc77_%E7%BB%84%E5%90%88_%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95.jpg" alt="lc77_组合_代码随想录"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combine</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k)</span> {</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; paths = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        List&lt;Integer&gt; path = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        backtracking(idx, paths, path, n, k);</span><br><span class="line">        <span class="keyword">return</span> paths;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(<span class="type">int</span> idx, List&lt;List&lt;Integer&gt;&gt; paths, List&lt;Integer&gt; path, <span class="type">int</span> n, <span class="type">int</span> k)</span> {</span><br><span class="line">        <span class="keyword">if</span> (path.size() == k) {</span><br><span class="line">            paths.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(path));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> idx; i &lt;= n; i++) {</span><br><span class="line">            path.add(i);</span><br><span class="line">            backtracking(i + <span class="number">1</span>, paths, path, n, k);</span><br><span class="line">            path.remove(path.size() - <span class="number">1</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="剪枝-（只需要当元素不够时剪掉即可）-gt-n-k-path-size-1"><a href="#剪枝-（只需要当元素不够时剪掉即可）-gt-n-k-path-size-1" class="headerlink" title="剪枝 （只需要当元素不够时剪掉即可）-> n - (k - path.size()) + 1"></a>剪枝 （只需要当元素不够时剪掉即可）-&gt; n - (k - path.size()) + 1</h3><p>当所需要的元素 &gt; 可选选项可以提供的元素时，我们就无需再往后面进行计算了，直接剪掉</p><p><img src="/2023/05/09/%E5%9B%9E%E6%BA%AF%E4%B9%8B%E6%8E%92%E5%88%97-%E7%BB%84%E5%90%88-%E5%AD%90%E9%9B%86%E9%97%AE%E9%A2%98/%E7%BB%84%E5%90%88%E2%80%94%E5%89%AA%E6%9E%9D.png" alt="组合—剪枝"></p><p>优化过程如下：</p><ol><li>已经选择的元素个数：path.size();</li><li>所需需要的元素个数为: k - path.size();</li><li>列表中剩余元素（n-i） &gt;= 所需需要的元素个数（k - path.size()）</li><li>在集合n中至多要从该起始位置 : i &lt;= n - (k - path.size()) + 1，开始遍历</li></ol><p>为什么有个+1呢，因为包括起始位置，我们要是一个左闭的集合。</p><p>举个例子，n = 4，k = 3， 目前已经选取的元素为0（path.size为0），n - (k - 0) + 1 即 4 - ( 3 - 0) + 1 = 2。</p><p>从2开始搜索都是合理的，可以是组合[2, 3, 4]。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combine</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k)</span> {</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; paths = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        List&lt;Integer&gt; path = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        backtracking(idx, paths, path, n, k);</span><br><span class="line">        <span class="keyword">return</span> paths;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(<span class="type">int</span> idx, List&lt;List&lt;Integer&gt;&gt; paths, List&lt;Integer&gt; path, <span class="type">int</span> n, <span class="type">int</span> k)</span> {</span><br><span class="line">        <span class="keyword">if</span> (path.size() == k) {</span><br><span class="line">            paths.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(path));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> idx; i &lt;= n - (k - path.size()) + <span class="number">1</span>; i++) {</span><br><span class="line">            path.add(i);</span><br><span class="line">            backtracking(i + <span class="number">1</span>, paths, path, n, k);</span><br><span class="line">            path.remove(path.size() - <span class="number">1</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="46-全排列"><a href="#46-全排列" class="headerlink" title="46. 全排列"></a><a href="https://leetcode.cn/problems/permutations/">46. 全排列</a></h2><p><img src="/2023/05/09/%E5%9B%9E%E6%BA%AF%E4%B9%8B%E6%8E%92%E5%88%97-%E7%BB%84%E5%90%88-%E5%AD%90%E9%9B%86%E9%97%AE%E9%A2%98/lc46_%E5%85%A8%E6%8E%92%E5%88%97.jpeg" alt="lc46_全排列"></p><p>全排列和上边的组合和子集不同的是，我们需要左边的元素，因此不能用<code>startIdx</code>来避免掉重复元素，并且我们<strong>不能</strong>重复选择一个元素，那么我们就需要一个额外的数据结构来跟踪哪些值是被用过了</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    LinkedList&lt;Integer&gt; path = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    Set&lt;Integer&gt; visited = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">permute</span><span class="params">(<span class="type">int</span>[] nums)</span> {</span><br><span class="line">        backtracking(nums);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(<span class="type">int</span>[] nums)</span> {</span><br><span class="line">        <span class="keyword">if</span> (path.size() == nums.length) {</span><br><span class="line">            res.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(path));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) {</span><br><span class="line">            <span class="keyword">if</span> (visited.contains(nums[i])) <span class="keyword">continue</span>;</span><br><span class="line">            path.add(nums[i]);</span><br><span class="line">            visited.add(nums[i]);</span><br><span class="line">            backtracking(nums);</span><br><span class="line">            path.removeLast();</span><br><span class="line">            visited.remove(nums[i]);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>注意hashset在这里是有局限性的因为这道题的元素不重复因此可以用hashset，但应该用<code>boolean visited[]</code>更通用一些：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line"></span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    LinkedList&lt;Integer&gt; track = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">boolean</span>[] used;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">permuteUnique</span><span class="params">(<span class="type">int</span>[] nums)</span> {</span><br><span class="line">        used = <span class="keyword">new</span> <span class="title class_">boolean</span>[nums.length];</span><br><span class="line">        backtrack(nums);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">backtrack</span><span class="params">(<span class="type">int</span>[] nums)</span> {</span><br><span class="line">        <span class="keyword">if</span> (track.size() == nums.length) {</span><br><span class="line">            res.add(<span class="keyword">new</span> <span class="title class_">LinkedList</span>(track));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) {</span><br><span class="line">            <span class="keyword">if</span> (used[i]) {</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            }</span><br><span class="line">            track.add(nums[i]);</span><br><span class="line">            used[i] = <span class="literal">true</span>;</span><br><span class="line">            backtrack(nums);</span><br><span class="line">            track.removeLast();</span><br><span class="line">            used[i] = <span class="literal">false</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="子集-还是-组合："><a href="#子集-还是-组合：" class="headerlink" title="子集 还是 组合："></a>子集 还是 组合：</h3><p>要求大小为 2 的所有组合，就是所有大小为 2 的子集</p><p>所以 <strong>组合和子集是一样的：大小为 <code>k</code> 的组合就是大小为 <code>k</code> 的子集</strong>。</p><p>比如：</p><p>LC77：给定两个整数 <code>n</code> 和 <code>k</code>，返回范围 <code>[1, n]</code> 中所有可能的 <code>k</code> 个数的组合。</p><p>就是：</p><p>给你输入一个数组 <code>nums = [1,2..,n]</code> 和一个正整数 <code>k</code>，请你生成所有大小为 <code>k</code> 的子集。</p><p>也就是LC78：给你一个整数数组 <code>nums</code> ，数组中的元素 <strong>互不相同</strong> 。返回该数组所有可能的子集（幂集）。</p><p>这个组合和子集的唯一区别就是我们现在只需要输出第k层的记过，而不是在前序位置每条路径都加入</p><p><img src="/2023/05/09/%E5%9B%9E%E6%BA%AF%E4%B9%8B%E6%8E%92%E5%88%97-%E7%BB%84%E5%90%88-%E5%AD%90%E9%9B%86%E9%97%AE%E9%A2%98/LC77_%E7%BB%84%E5%90%88_labuladong.jpeg" alt="LC77_组合_labuladong"></p><h3 id="全排列的index："><a href="#全排列的index：" class="headerlink" title="全排列的index："></a>全排列的index：</h3><p>排列问题本身就是让你穷举元素的位置，<code>nums[i]</code> 之后也可以出现 <code>nums[i]</code> 左边的元素，所以之前的那一套使用 <code>startIndex</code> 的就不行了，需要额外使用 <code>used</code> 数组或者<code>hashSet</code>来标记哪些元素还可以被选择。</p><p>如果题目不让你算全排列，而是让你算元素个数为 <code>k</code> 的排列，怎么算？也很简单，改下 <code>backtrack</code> 函数的 base case，仅收集第 <code>k</code> 层的节点值即可：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 回溯算法核心函数</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">backtrack</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> {</span><br><span class="line">    <span class="comment">// base case，到达第 k 层，收集节点的值</span></span><br><span class="line">    <span class="keyword">if</span> (track.size() == k) {</span><br><span class="line">        <span class="comment">// 第 k 层节点的值就是大小为 k 的排列</span></span><br><span class="line">        res.add(<span class="keyword">new</span> <span class="title class_">LinkedList</span>(track));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 回溯算法标准框架</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) {</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        backtrack(nums, k);</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="元素可重不可复选"><a href="#元素可重不可复选" class="headerlink" title="元素可重不可复选"></a>元素可重不可复选</h1><h2 id="90-子集-II"><a href="#90-子集-II" class="headerlink" title="90. 子集 II"></a><a href="https://leetcode.cn/problems/subsets-ii/">90. 子集 II</a></h2><p><img src="/2023/05/09/%E5%9B%9E%E6%BA%AF%E4%B9%8B%E6%8E%92%E5%88%97-%E7%BB%84%E5%90%88-%E5%AD%90%E9%9B%86%E9%97%AE%E9%A2%98/lc90_subset2_tree.jpeg" alt="lc90_subset2_tree"></p><p>如图中所示，我们可以看到的是，同一层的相邻元素如果相同，我们就不需要再处理。</p><p>为了保证相邻元素是相同的我们就需要用一个sort</p><p>综上我们有：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    LinkedList&lt;Integer&gt; path = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">subsetsWithDup</span><span class="params">(<span class="type">int</span>[] nums)</span> {</span><br><span class="line">      <span class="comment">// 排序来保证相邻元素一定是相同的（如果有的话）</span></span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        backtracking(nums, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> startIdx)</span> {</span><br><span class="line">        res.add(<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;(path));</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> startIdx; i &lt; nums.length; i++) {</span><br><span class="line">            <span class="comment">// 注意这里的剪枝逻辑</span></span><br><span class="line">            <span class="keyword">if</span> (i &gt; startIdx &amp;&amp; nums[i] == nums[i - <span class="number">1</span>]) {</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            }</span><br><span class="line">            path.addLast(nums[i]);</span><br><span class="line">            backtracking(nums, i + <span class="number">1</span>);</span><br><span class="line">            path.removeLast();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="40-组合总和-II"><a href="#40-组合总和-II" class="headerlink" title="40. 组合总和 II"></a><a href="https://leetcode.cn/problems/combination-sum-ii/">40. 组合总和 II</a></h2><p>子集问题就是组合的一种问题</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line"></span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    LinkedList&lt;Integer&gt; path = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span> <span class="variable">curSum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combinationSum2</span><span class="params">(<span class="type">int</span>[] candidates, <span class="type">int</span> target)</span> {</span><br><span class="line">        Arrays.sort(candidates);</span><br><span class="line">        backtracking(candidates, target, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(<span class="type">int</span>[] candidates, <span class="type">int</span> target, <span class="type">int</span> startIdx)</span> {</span><br><span class="line">        <span class="keyword">if</span> (curSum == target) {</span><br><span class="line">            res.add(<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;(path));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 进行额外的剪枝，否则会超时</span></span><br><span class="line">        <span class="keyword">if</span> (curSum &gt; target) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> startIdx; i &lt; candidates.length; i++) {</span><br><span class="line">            <span class="keyword">if</span> (i &gt; startIdx &amp;&amp; candidates[i] == candidates[i - <span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">            curSum += candidates[i];</span><br><span class="line">            path.add(candidates[i]);</span><br><span class="line">            backtracking(candidates, target, i + <span class="number">1</span>);</span><br><span class="line">            path.removeLast();</span><br><span class="line">            curSum -= candidates[i];</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="47-全排列-II"><a href="#47-全排列-II" class="headerlink" title="47. 全排列 II"></a><a href="https://leetcode.cn/problems/permutations-ii/">47. 全排列 II</a></h2><ol><li>用used数组来跟踪哪些数在<strong>递归（向下生长时）</strong>被用过，从而避免重复</li><li><code>i &gt; 0 &amp;&amp; nums[i - 1] == nums[i] &amp;&amp; !used[i - 1]</code><ol><li>主要是用来判断当前的数和之前是否相同，如果相同且之前在<strong>同一层</strong>时候处理过，那么我们不需要再处理一遍，跳过即可</li><li>其实核心就是 <strong>保证相同元素在排列中的相对位置保持不变</strong>。</li><li>效果： <strong>当出现重复元素时，比如输入 <code>nums = [1,2,2',2'']</code>，<code>2'</code> 只有在 <code>2</code> 已经被使用的情况下才会被选择，同理，<code>2''</code> 只有在 <code>2'</code> 已经被使用的情况下才会被选择，这就保证了相同元素在排列中的相对位置保证固定</strong>。</li></ol></li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    LinkedList&lt;Integer&gt; path = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">boolean</span>[] used;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">permuteUnique</span><span class="params">(<span class="type">int</span>[] nums)</span> {</span><br><span class="line">        used = <span class="keyword">new</span> <span class="title class_">boolean</span>[nums.length];</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        backtracking(nums);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(<span class="type">int</span>[] nums)</span> {</span><br><span class="line">        <span class="keyword">if</span> (nums.length == path.size()) {</span><br><span class="line">            res.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(path));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) {</span><br><span class="line">            <span class="keyword">if</span> (used[i]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i - <span class="number">1</span>] == nums[i] &amp;&amp; !used[i - <span class="number">1</span>]) {</span><br><span class="line">                <span class="comment">// 这里的 nums[i - 1] == nums[i] &amp;&amp; !used[i - 1]</span></span><br><span class="line">                <span class="comment">// 主要是为了说明现在出现了一个新的和之前一样的数，那么由于之前已经计算过，现在已经不需要重复算了</span></span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            }</span><br><span class="line">            path.addLast(nums[i]);</span><br><span class="line">            used[i] = <span class="literal">true</span>;</span><br><span class="line">            backtracking(nums);</span><br><span class="line">            path.removeLast();</span><br><span class="line">            used[i] = <span class="literal">false</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 回溯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉树之公共祖先</title>
      <link href="/2023/04/27/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B9%8B%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/"/>
      <url>/2023/04/27/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B9%8B%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/</url>
      
        <content type="html"><![CDATA[<h1 id="二叉树之（最近）公共祖先"><a href="#二叉树之（最近）公共祖先" class="headerlink" title="二叉树之（最近）公共祖先"></a>二叉树之（最近）公共祖先</h1><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><p>考虑问题一个简单的问题：如何寻找一个或多个元素:<br>Eg: 寻找值为 <code>val1</code> <strong>或</strong> <code>val2</code> 的节点</p><p>非常简单：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义：在以 root 为根的二叉树中寻找值为 val1 或 val2 的节点</span></span><br><span class="line">TreeNode <span class="title function_">find</span><span class="params">(TreeNode root, <span class="type">int</span> val1, <span class="type">int</span> val2)</span> {</span><br><span class="line">    <span class="comment">// base case</span></span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) {</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 前序位置，看看 root 是不是目标值</span></span><br><span class="line">    <span class="keyword">if</span> (root.val == val1 || root.val == val2) {</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 去左右子树寻找</span></span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">left</span> <span class="operator">=</span> find(root.left, val1, val2);</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">right</span> <span class="operator">=</span> find(root.right, val1, val2);</span><br><span class="line">    <span class="comment">// 后序位置，已经知道左右子树是否存在目标值</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> left != <span class="literal">null</span> ? left : right;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="236-二叉树的最近公共祖先"><a href="#236-二叉树的最近公共祖先" class="headerlink" title="236. 二叉树的最近公共祖先"></a><a href="https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-tree/">236. 二叉树的最近公共祖先</a></h2><p><img src="/2023/04/27/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B9%8B%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/lc236_%E4%BA%8C%E5%8F%89%E6%A0%91%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88.png" alt="LC236公共祖先"></p><p>那么对于寻找LCA来说，其实就是找 <strong>在一个子树下面是否能够同时找到p和q</strong>，寻找最近的公共节点就是寻找最深的公共节点，因此要选择<strong>后序遍历</strong></p><p>那么我们就会得出：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">lowestCommonAncestor</span><span class="params">(TreeNode root, TreeNode p, TreeNode q)</span> {</span><br><span class="line">    <span class="comment">// 通过这个function 来找到子树里是否含有 p 和 q：</span></span><br><span class="line">    <span class="keyword">return</span> findTargeValues(root, p, q);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> TreeNode <span class="title function_">findTargeValues</span><span class="params">(TreeNode root, TreeNode p, TreeNode q)</span> {</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 前序遍历位置，解决情况二：一旦发现有值等于target值，那么它本身就作为最近的祖先；</span></span><br><span class="line">    <span class="comment">// 因为题目说了 p 和 q 一定存在于二叉树中(这点很重要），</span></span><br><span class="line">    <span class="comment">// 所以即便我们遇到 q 就直接返回，根本没遍历到 p，也依然可以断定 p 在 q 底下，q 就是 LCA 节点。</span></span><br><span class="line">    <span class="keyword">if</span> (root.val == p.val || root.val == q.val) {</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">leftValue</span> <span class="operator">=</span> findTargeValues(root.left, p, q);</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">rightValue</span> <span class="operator">=</span> findTargeValues(root.right, p, q);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 后序遍历位置，如果leftValue != null 证明左子树中含有target值，rightValue同理</span></span><br><span class="line">    <span class="comment">// 若同时满足，那么当前root就为最近的公共祖先。</span></span><br><span class="line">    <span class="keyword">if</span> (leftValue != <span class="literal">null</span> &amp;&amp; rightValue != <span class="literal">null</span>) {</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回不是null的那个或者全是null的，不是null的优先返回。</span></span><br><span class="line">    <span class="keyword">return</span> leftValue == <span class="literal">null</span> ? rightValue : leftValue;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="/2023/04/27/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B9%8B%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88%E7%9A%84%E5%9B%9E%E6%BA%AF.png" alt="公共祖先的回溯"></p><p>注意</p><p><code>leftValue == null ? rightValue : leftValue</code></p><p>就是</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(left == <span class="literal">null</span> &amp;&amp; right == <span class="literal">null</span>) { <span class="comment">// 若未找到节点 p 或 q</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">}<span class="keyword">else</span> <span class="keyword">if</span>(left == <span class="literal">null</span> &amp;&amp; right != <span class="literal">null</span>) { <span class="comment">// 若找到一个节点</span></span><br><span class="line">    <span class="keyword">return</span> right;</span><br><span class="line">}<span class="keyword">else</span> <span class="keyword">if</span>(left != <span class="literal">null</span> &amp;&amp; right == <span class="literal">null</span>) { <span class="comment">// 若找到一个节点</span></span><br><span class="line">    <span class="keyword">return</span> left;</span><br><span class="line">}<span class="keyword">else</span> { <span class="comment">// 若找到两个节点</span></span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="1676-二叉树的最近公共祖先-IV"><a href="#1676-二叉树的最近公共祖先-IV" class="headerlink" title="1676. 二叉树的最近公共祖先 IV"></a><a href="https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-tree-iv/">1676. 二叉树的最近公共祖先 IV</a></h2><p>本题  <strong>不再是p，q，而是一组node</strong></p><p>只需要稍微修改一下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">lowestCommonAncestor</span><span class="params">(TreeNode root, TreeNode[] nodes)</span> {</span><br><span class="line">    Set&lt;Integer&gt; hs = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (TreeNode node : nodes) {</span><br><span class="line">        hs.add(node.val);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> findTargetsFromNodes(root, hs);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> TreeNode <span class="title function_">findTargetsFromNodes</span><span class="params">(TreeNode root, Set&lt;Integer&gt; nodes)</span> {</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) {</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 依旧是找当前 root 是否本身即为最近公共祖先， 但是为了快速查找且题目要求node值都不相同，</span></span><br><span class="line">    <span class="comment">// 用 hashset来快速找值</span></span><br><span class="line">    <span class="keyword">if</span> (nodes.contains(root.val)) {</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">leftValue</span> <span class="operator">=</span> findTargetsFromNodes(root.left, nodes);</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">rightValue</span> <span class="operator">=</span> findTargetsFromNodes(root.right, nodes);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (leftValue != <span class="literal">null</span> &amp;&amp; rightValue != <span class="literal">null</span>) {</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> leftValue != <span class="literal">null</span> ? leftValue : rightValue;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="1644-二叉树的最近公共祖先-II"><a href="#1644-二叉树的最近公共祖先-II" class="headerlink" title="1644. 二叉树的最近公共祖先 II"></a><a href="https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-tree-ii/">1644. 二叉树的最近公共祖先 II</a></h2><p>之前的题目都说target节点都在树里，但是本题 <strong>不保证树里一定有p 和 q</strong></p><p>那么，对于上边两道题在前序遍历位置时发现当前root节点和target值相等直接返回就不能用了，<strong>因为不能保证是不是另一个也存在</strong>，我们需要知道树的<strong>所有信息</strong>才行，也就是要在<strong>后序遍历</strong>的位置，即：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="variable">isPExist</span> <span class="operator">=</span> <span class="literal">false</span>, isQExist = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">lowestCommonAncestor</span><span class="params">(TreeNode root, TreeNode p, TreeNode q)</span> {</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">ret</span> <span class="operator">=</span> findTargetValues(root, p, q);</span><br><span class="line">    <span class="keyword">if</span> (!isQExist || !isPExist) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> TreeNode <span class="title function_">findTargetValues</span><span class="params">(TreeNode root, TreeNode p, TreeNode q)</span> {</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">leftValue</span> <span class="operator">=</span> findTargetValues(root.left, p, q);</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">rightValue</span> <span class="operator">=</span> findTargetValues(root.right, p, q);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (leftValue != <span class="literal">null</span> &amp;&amp; rightValue != <span class="literal">null</span>) {</span><br><span class="line">        <span class="comment">// 解决情况1，自身节点不是LCA</span></span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (root.val == p.val) {</span><br><span class="line">        <span class="comment">// 解决情况2，自身节点是LCA：</span></span><br><span class="line">        isPExist = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (root.val == q.val) {</span><br><span class="line">        isQExist = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> leftValue == <span class="literal">null</span> ? rightValue : leftValue;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="235-二叉搜索树的最近公共祖先"><a href="#235-二叉搜索树的最近公共祖先" class="headerlink" title="235. 二叉搜索树的最近公共祖先"></a><a href="https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-search-tree/">235. 二叉搜索树的最近公共祖先</a></h2><p>本题最重要的是利用BST的性质</p><p><img src="/2023/04/27/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B9%8B%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/BST_%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88.png" alt="BST_公共祖先"></p><ol><li>当根节点值小于p和q 即 小于 p，q的最小值<ol><li>说明要的公共祖先在右边的树里</li></ol></li><li>当根节点值大于p和q 即 大于 p，q的最大值<ol><li>说明要的公共祖先在左边的树里</li></ol></li><li>当根节点介于中间时则一定为最近的公共祖先<ol><li>为什么最近？<ol><li>因为如果还要进行下去，要么往左走要么往右走总会丢失一个</li><li>按图中的例子，如果5下面还有更近的祖先，那么假设5往左走，那么会丢失q，同理，向右走则会丢失p</li></ol></li></ol></li></ol><p><strong>结论: <code>Math.min(q.val, p.val) &lt;= root.val &lt;= Math.max(q.val, p.val)</code>那么此时的root即为最近的公共祖先</strong></p><p>pseudocode:</p><p><img src="/2023/04/27/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B9%8B%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/BST_%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88_%E4%BC%AA%E4%BB%A3%E7%A0%81.png" alt="BST_公共祖先_伪代码"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">lowestCommonAncestor</span><span class="params">(TreeNode root, TreeNode p, TreeNode q)</span> {</span><br><span class="line">    <span class="type">int</span> <span class="variable">val1</span> <span class="operator">=</span> Math.min(p.val, q.val);</span><br><span class="line">    <span class="type">int</span> <span class="variable">val2</span> <span class="operator">=</span> Math.max(p.val, q.val);</span><br><span class="line">    <span class="keyword">return</span> findTarget(root, val1, val2);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> TreeNode <span class="title function_">findTarget</span><span class="params">(TreeNode root, <span class="type">int</span> val1, <span class="type">int</span> val2)</span> {</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (root.val &lt; val1) {</span><br><span class="line">        <span class="comment">// 值太小了，应该去右边找</span></span><br><span class="line">        <span class="keyword">return</span> findTarget(root.right, val1, val2);</span><br><span class="line">    } </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (root.val &gt; val2) {</span><br><span class="line">        <span class="comment">// 值太大了， 应该去左边找</span></span><br><span class="line">       <span class="keyword">return</span> findTarget(root.left, val1, val2);</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// root.val &gt;= val1 root.val &lt;= val2 此时就是一个合法的公共祖先</span></span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="1650-二叉树的最近公共祖先-III"><a href="#1650-二叉树的最近公共祖先-III" class="headerlink" title="1650. 二叉树的最近公共祖先 III"></a><a href="https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-tree-iii/">1650. 二叉树的最近公共祖先 III</a></h2><p>本题包含了对父节点的引用：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> val;</span><br><span class="line">    <span class="keyword">public</span> Node left;</span><br><span class="line">    <span class="keyword">public</span> Node right;</span><br><span class="line">    <span class="keyword">public</span> Node parent;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这道题用的是链表合并的思路：</p><p>即让两个指针p1 指向A的指针，p2指向B的指针，<strong>能够同时到达相交节点 <code>c1</code></strong></p><blockquote><p>用两个指针 <code>p1</code> 和 <code>p2</code> 分别在两条链表上前进，我们可以让 <code>p1</code> 遍历完链表 <code>A</code> 之后开始遍历链表 <code>B</code>，让 <code>p2</code> 遍历完链表 <code>B</code> 之后开始遍历链表 <code>A</code>，这样相当于「逻辑上」两条链表接在了一起。</p></blockquote><p><img src="/2023/04/27/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B9%8B%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/%E9%93%BE%E8%A1%A8%E5%90%88%E5%B9%B6.png" alt="链表合并"></p><p>稍微替换一下，借用parent:</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Node <span class="title function_">lowestCommonAncestor</span><span class="params">(Node p, Node q)</span> {</span><br><span class="line">    <span class="type">Node</span> <span class="variable">pPointer</span> <span class="operator">=</span> p, qPointer = q;</span><br><span class="line">    <span class="keyword">while</span> (pPointer != qPointer) {</span><br><span class="line">        <span class="keyword">if</span> (pPointer == <span class="literal">null</span>) pPointer = q;</span><br><span class="line">        <span class="keyword">else</span> pPointer = pPointer.parent;</span><br><span class="line">        <span class="keyword">if</span> (qPointer == <span class="literal">null</span>) qPointer = p;</span><br><span class="line">        <span class="keyword">else</span> qPointer = qPointer.parent;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> pPointer;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉搜索树</title>
      <link href="/2023/04/27/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/"/>
      <url>/2023/04/27/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h1 id="二叉搜索树-BST"><a href="#二叉搜索树-BST" class="headerlink" title="二叉搜索树-BST"></a>二叉搜索树-BST</h1><h2 id="基本知识以及操作："><a href="#基本知识以及操作：" class="headerlink" title="基本知识以及操作："></a>基本知识以及操作：</h2><blockquote><ol><li>提到 BST 就要想到中序遍历：<ol><li>BST的<strong>中序</strong>遍历是<strong>有序的</strong></li></ol></li><li>性质：<ol><li>左子树所有的值都**(严格)小于**根节点</li><li>右子树所有的值都**(严格)大于**根节点</li></ol></li><li>几乎完美的数据结构，复杂度为树高</li><li>最左边的叶子结点是最小值，最右边的叶子结点是最大值</li></ol></blockquote><p>那么对于一个数据结构，无非做的事情就是增删查改。</p><p>那么就是分成两步：1. 找到要操作的位置 （其实就是<strong>查</strong>）2. 操作</p><p>要找到位置：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> TreeNode <span class="title function_">find</span><span class="params">(TreeNode root, <span class="type">int</span> val)</span> {</span><br><span class="line">  <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>; </span><br><span class="line">  <span class="keyword">if</span> (root.val == val) {</span><br><span class="line">      <span class="comment">// 找到节点，返回</span></span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">  } <span class="keyword">else</span> <span class="keyword">if</span> (root.val &lt; val) {</span><br><span class="line">      <span class="comment">// 利用BST的性质，此时说明需要继续去右边找：</span></span><br><span class="line">      <span class="keyword">return</span> find(root.right, val);</span><br><span class="line">  } <span class="keyword">else</span> <span class="keyword">if</span> (root.val &gt; val) {</span><br><span class="line">      <span class="comment">// 利用BST的性质，此时说明需要继续去左边找：</span></span><br><span class="line">      <span class="keyword">return</span> = find(root.left, val);</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"><span class="comment">// 还有一种补充的写法。不过干的事情其实是一样的，只不过返回位置不同</span></span><br><span class="line">TreeNode <span class="title function_">searchBST</span><span class="params">(TreeNode root, <span class="type">int</span> target)</span> {</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) {</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 去左子树搜索</span></span><br><span class="line">    <span class="keyword">if</span> (root.val &gt; target) {</span><br><span class="line">        <span class="keyword">return</span> searchBST(root.left, target);</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 去右子树搜索</span></span><br><span class="line">    <span class="keyword">if</span> (root.val &lt; target) {</span><br><span class="line">        <span class="keyword">return</span> searchBST(root.right, target);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="关于删除操作后的维护："><a href="#关于删除操作后的维护：" class="headerlink" title="关于删除操作后的维护："></a>关于删除操作后的维护：</h3><p>需要分三种情况：</p><h4 id="root-是叶子结点"><a href="#root-是叶子结点" class="headerlink" title="root 是叶子结点"></a>root 是叶子结点</h4><p>直接删除叶子结点 即 直接return null 让上一层接收：</p><p><img src="/2023/04/27/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/BST_%E5%88%A0%E9%99%A4%E5%8F%B6%E5%AD%90%E7%BB%93%E7%82%B9.png" alt="BST_删除叶子结点"></p><h4 id="root-左右有一个子节点为空"><a href="#root-左右有一个子节点为空" class="headerlink" title="root 左右有一个子节点为空"></a>root 左右有一个子节点为空</h4><h5 id="当左子树不为空："><a href="#当左子树不为空：" class="headerlink" title="当左子树不为空："></a>当左子树不为空：</h5><p>直接把左子树拼接上去即可，即返回左子树让上一层接收</p><p><img src="/2023/04/27/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/BST_%E5%88%A0%E9%99%A4%E8%8A%82%E7%82%B9_%E5%B7%A6%E5%AD%90%E6%A0%91%E4%B8%8D%E4%B8%BA%E7%A9%BA.png" alt="删除节点_左子树不为空"></p><p><img src="/2023/04/27/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/BST_%E5%88%A0%E9%99%A4%E8%8A%82%E7%82%B9_%E5%B7%A6%E5%AD%90%E6%A0%91%E4%B8%8D%E4%B8%BA%E7%A9%BA_%E6%8B%BC%E6%8E%A5%E5%90%8E.png" alt="删除节点_左子树不为空_拼接后"></p><h5 id="当右子树不为空："><a href="#当右子树不为空：" class="headerlink" title="当右子树不为空："></a>当右子树不为空：</h5><p>直接把右子树拼接上去即可，即返回右子树让上一层接收</p><p><img src="/2023/04/27/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/BST_%E5%88%A0%E9%99%A4%E8%8A%82%E7%82%B9_%E5%8F%B3%E5%AD%90%E6%A0%91%E4%B8%8D%E4%B8%BA%E7%A9%BA.png" alt="删除节点_右子树不为空"></p><p><img src="/2023/04/27/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/BST_%E5%88%A0%E9%99%A4%E8%8A%82%E7%82%B9_%E5%8F%B3%E5%AD%90%E6%A0%91%E4%B8%8D%E4%B8%BA%E7%A9%BA_%E6%8B%BC%E6%8E%A5%E5%90%8E.png"></p><h4 id="root-左右均不为空"><a href="#root-左右均不为空" class="headerlink" title="root 左右均不为空"></a>root 左右均不为空</h4><p><img src="/2023/04/27/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/BST_%E5%88%A0%E9%99%A4%E8%8A%82%E7%82%B9_%E5%B7%A6%E5%8F%B3%E5%AD%90%E6%A0%91%E5%9D%87%E4%B8%8D%E4%B8%BA%E7%A9%BA.png" alt="左右子树均不为空"></p><p>那么情况会变的复杂一些，这是由于要找到能够接替被删除节点位置的节点。这时，我们会有两种选择：</p><ul><li>找左子树的最大值</li><li>找右子树的最小值</li></ul><p><img src="/2023/04/27/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/BST_%E5%88%A0%E9%99%A4%E8%8A%82%E7%82%B9_%E5%B7%A6%E5%8F%B3%E5%AD%90%E6%A0%91%E5%9D%87%E4%B8%8D%E4%B8%BA%E7%A9%BA_%E5%B7%A6%E5%AD%90%E6%A0%91%E6%9C%80%E5%A4%A7%E5%80%BC.png" alt="左子树最大值"></p><h2 id="98-验证二叉搜索树"><a href="#98-验证二叉搜索树" class="headerlink" title="98. 验证二叉搜索树"></a><a href="https://leetcode.cn/problems/validate-binary-search-tree/">98. 验证二叉搜索树</a></h2><p>中序遍历而不是前序遍历的原因是：</p><p>中序遍历的特性。中序遍历按照“左-根-右”的顺序访问树中的节点。对于二叉搜索树，中序遍历会按照升序的方式访问树中的所有节点。因此，我们可以通过检查在中序遍历过程中每个相邻节点之间的值的大小关系来验证这棵树是否是有效的二叉搜索树。如果遍历的过程中发现某个节点的值小于等于前一个节点的值，那么这棵树就不是一个有效的二叉搜索树。</p><p>相反，前序遍历按照“根-左-右”的顺序访问树中的节点，这种顺序无法直接用来验证二叉搜索树的性质。因为前序遍历不保证访问的节点值是按照升序排列的，所以使用前序遍历会使得验证二叉搜索树的过程变得更加复杂。</p><p>总之，使用中序遍历是因为它可以直接利用二叉搜索树的性质，按照升序访问树中的节点，从而简化了验证二叉搜索树的过程。</p><p>三个方法：</p><ol><li>使用中序遍历的有序性质 + 辅助数组</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; inOrderResult = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValidBST</span><span class="params">(TreeNode root)</span> {</span><br><span class="line">    traverse(root);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = i + <span class="number">1</span>; j &lt; inOrderResult.size();) {</span><br><span class="line">        <span class="keyword">if</span> (inOrderResult.get(j) &lt;= inOrderResult.get(i)) {</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        }</span><br><span class="line">        i++;</span><br><span class="line">        j++;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">traverse</span><span class="params">(TreeNode root)</span> {</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    traverse(root.left);</span><br><span class="line">    inOrderResult.add(root.val);</span><br><span class="line">    traverse(root.right);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>借用一个非常小的值 继续使用中序遍历 PS：这里使用long minValue的原因是有可能存在int的最小值从而使得无法正确判断当左叶子结点特别小（Int MinValue）的情况。</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">long</span> <span class="variable">longMin</span> <span class="operator">=</span> Long.MIN_VALUE;</span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValidBST</span><span class="params">(TreeNode root)</span> {</span><br><span class="line">    <span class="keyword">return</span> traverse(root);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">traverse</span><span class="params">(TreeNode root)</span> {</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">left</span> <span class="operator">=</span> traverse(root.left);</span><br><span class="line">    <span class="keyword">if</span> (root.val &lt;= longMin) {</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line">    longMin = root.val;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">right</span> <span class="operator">=</span> traverse(root.right);</span><br><span class="line">    <span class="keyword">return</span> left &amp;&amp; right;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>双指针，注意previousNode应该作为全局变量从而每一个更新都能被正确更新。</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">TreeNode</span> <span class="variable">previousNode</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValidBST</span><span class="params">(TreeNode root)</span> {</span><br><span class="line">    <span class="keyword">return</span> traverse(root);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">traverse</span><span class="params">(TreeNode root)</span> {</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">left</span> <span class="operator">=</span> traverse(root.left);</span><br><span class="line">    <span class="keyword">if</span> (previousNode != <span class="literal">null</span> &amp;&amp; previousNode.val &gt;= root.val) {</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line">    previousNode = root;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">right</span> <span class="operator">=</span> traverse(root.right);</span><br><span class="line">    <span class="keyword">return</span> left &amp;&amp; right;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>作为参数传递的方法：</p><p>之前<code>previousNode</code>没有正确地更新的原因是：Java中的参数传递采用的是值传递（pass-by-value）。虽然Java中的对象是引用类型，但实际上传递的是引用的副本。因此，在函数<code>traverse</code>内部修改<code>previousNode</code>的值（例如<code>previousNode = root;</code>）不会影响到调用方的<code>previousNode</code>。</p><p>要解决这个问题，可以将<code>previousNode</code>的引用包装在一个可变的容器类中，例如一个单元素的数组。这样，在递归调用中，<code>previousNode</code>的更新将会影响到调用方。以下是修改后的代码：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">TreeNode[] previousNode = <span class="keyword">new</span> <span class="title class_">TreeNode</span>[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValidBST</span><span class="params">(TreeNode root)</span> {</span><br><span class="line">    <span class="keyword">return</span> traverse(root, previousNode);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">traverse</span><span class="params">(TreeNode root, TreeNode[] previousNode)</span> {</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">left</span> <span class="operator">=</span> traverse(root.left, previousNode);</span><br><span class="line">    <span class="keyword">if</span> (previousNode[<span class="number">0</span>] != <span class="literal">null</span> &amp;&amp; previousNode[<span class="number">0</span>].val &gt;= root.val) {</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line">    previousNode[<span class="number">0</span>] = root;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">right</span> <span class="operator">=</span> traverse(root.right, previousNode);</span><br><span class="line">    <span class="keyword">return</span> left &amp;&amp; right;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="701-二叉搜索树中的插入操作"><a href="#701-二叉搜索树中的插入操作" class="headerlink" title="701. 二叉搜索树中的插入操作"></a><a href="https://leetcode.cn/problems/insert-into-a-binary-search-tree/">701. 二叉搜索树中的插入操作</a></h2><blockquote><p>插入操作和二叉树的构造类型题非常类似详情见 <a href="/2023/04/27/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B9%8B%E6%9E%84%E9%80%A0%E7%B1%BB%E9%97%AE%E9%A2%98/" title="二叉树之构造类问题">二叉树之构造类问题</a></p></blockquote><p>不难，详情看代码注释即可。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">insertIntoBST</span><span class="params">(TreeNode root, <span class="type">int</span> val)</span> {</span><br><span class="line">    <span class="keyword">return</span> insert(root, val);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> TreeNode <span class="title function_">insert</span><span class="params">(TreeNode root, <span class="type">int</span> val)</span> {</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(val); <span class="comment">// 这里指找到了插入位置，那么构造一个TreeNode，返回上去，让上一层接收</span></span><br><span class="line">    <span class="keyword">if</span> (root.val &lt; val) {</span><br><span class="line">        <span class="comment">// 利用BST的性质，此时说明需要继续去右边找：</span></span><br><span class="line">        root.right = insert(root.right, val);</span><br><span class="line">    } <span class="keyword">else</span> <span class="keyword">if</span> (root.val &gt; val) {</span><br><span class="line">        <span class="comment">// 利用BST的性质，此时说明需要继续去左边找：</span></span><br><span class="line">        root.left = insert(root.left, val);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> root; <span class="comment">// 将更新好的节点不断向上返回。</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="450-删除二叉搜索树中的节点"><a href="#450-删除二叉搜索树中的节点" class="headerlink" title="450. 删除二叉搜索树中的节点"></a><a href="https://leetcode.cn/problems/delete-node-in-a-bst/">450. 删除二叉搜索树中的节点</a></h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">deleteNode</span><span class="params">(TreeNode root, <span class="type">int</span> key)</span> {</span><br><span class="line">    <span class="keyword">return</span> delete(root, key);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> TreeNode <span class="title function_">delete</span><span class="params">(TreeNode root, <span class="type">int</span> key)</span> {</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (root.val &gt; key) {</span><br><span class="line">        <span class="comment">// 要删除的key在当前节点的左边</span></span><br><span class="line">        root.left = delete(root.left, key);</span><br><span class="line">    } <span class="keyword">else</span> <span class="keyword">if</span> (root.val &lt; key) {</span><br><span class="line">        <span class="comment">// 要删除的key在当前节点的右边</span></span><br><span class="line">        root.right = delete(root.right, key);</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="comment">// 找到了要删除的点：</span></span><br><span class="line">        <span class="keyword">if</span> (root.left == <span class="literal">null</span>) {</span><br><span class="line">            <span class="keyword">return</span> root.right;</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (root.right == <span class="literal">null</span>) {</span><br><span class="line">            <span class="keyword">return</span> root.left;</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">leftTreeMaxNode</span> <span class="operator">=</span> findLeftTreeMaxNode(root.left);</span><br><span class="line">            root.left = removeLeftTreeMaxNode(root.left);</span><br><span class="line">            leftTreeMaxNode.left = root.left;</span><br><span class="line">            leftTreeMaxNode.right = root.right;</span><br><span class="line">            root = leftTreeMaxNode;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 找到左子树中的最大的节点：</span></span><br><span class="line"><span class="keyword">private</span> TreeNode <span class="title function_">findLeftTreeMaxNode</span><span class="params">(TreeNode root)</span> {</span><br><span class="line">    <span class="keyword">while</span> (root.right != <span class="literal">null</span>) {</span><br><span class="line">        root = root.right;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 像移除链表中的最后一个元素一样移除root</span></span><br><span class="line"><span class="keyword">private</span> TreeNode <span class="title function_">removeLeftTreeMaxNode</span><span class="params">(TreeNode root)</span> {</span><br><span class="line">    <span class="keyword">if</span> (root.right == <span class="literal">null</span>) {</span><br><span class="line">        <span class="comment">// 当二叉树走到头时，返回当前节点的左树，这是因为左树中还有节点，如果直接返回null则相当于删除了整个左子树</span></span><br><span class="line">        <span class="keyword">return</span> root.left;</span><br><span class="line">    }</span><br><span class="line">    root.right = removeLeftTreeMaxNode(root.right);</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="669-修剪二叉搜索树"><a href="#669-修剪二叉搜索树" class="headerlink" title="669. 修剪二叉搜索树"></a><a href="https://leetcode.cn/problems/trim-a-binary-search-tree/">669. 修剪二叉搜索树</a></h2><p>利用BST的性质 <strong>递归的处理左树和右树</strong></p><p>1、**<code>root.val &lt; lo</code>，这种情况下 <code>root</code> 节点本身和 <code>root</code> 的左子树全都是小于 <code>lo</code> 的，都需要被剪掉**。</p><p>2、**<code>root.val &gt; hi</code>，这种情况下 <code>root</code> 节点本身和 <code>root</code> 的右子树全都是大于 <code>hi</code> 的，都需要被剪掉**。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">trimBST</span><span class="params">(TreeNode root, <span class="type">int</span> low, <span class="type">int</span> high)</span> {</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">rootTrimmed</span> <span class="operator">=</span> buildTree(root, low, high);</span><br><span class="line">        <span class="keyword">return</span> rootTrimmed;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TreeNode <span class="title function_">buildTree</span><span class="params">(TreeNode root, <span class="type">int</span> low, <span class="type">int</span> high)</span> {</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (root.val &lt; low) {</span><br><span class="line">            <span class="comment">// 注意这里不能直接返回右子树: return root.right 我们需要继续递归的处理子树才行，因为我们要的是最终的结果而不是一次性的结果</span></span><br><span class="line">            <span class="keyword">return</span> buildTree(root.right, low, high);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (root.val &gt; high) {</span><br><span class="line">            <span class="comment">// 注意这里不能直接返回左子树: return root.left 我们需要继续递归的处理子树才行，因为我们要的是最终的结果而不是一次性的结果</span></span><br><span class="line">            <span class="keyword">return</span> buildTree(root.left, low, high);</span><br><span class="line">        }</span><br><span class="line">        root.left = buildTree(root.left, low, high);</span><br><span class="line">        root.right = buildTree(root.right, low, high);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="108-将有序数组转换为二叉搜索树"><a href="#108-将有序数组转换为二叉搜索树" class="headerlink" title="108. 将有序数组转换为二叉搜索树"></a><a href="https://leetcode.cn/problems/convert-sorted-array-to-binary-search-tree/">108. 将有序数组转换为二叉搜索树</a></h2><p>和利用前序和后序数组构造二叉树题目类型非常相似，确定好左右区间，确定好根节点即可：</p><blockquote><p>关于 前序和后序数组<strong>构造</strong>二叉树题目 见 <a href="/2023/04/27/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B9%8B%E6%9E%84%E9%80%A0%E7%B1%BB%E9%97%AE%E9%A2%98/" title="二叉树之构造类问题">二叉树之构造类问题</a></p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">sortedArrayToBST</span><span class="params">(<span class="type">int</span>[] nums)</span> {</span><br><span class="line">        <span class="keyword">return</span> buildTree(nums, <span class="number">0</span>, nums.length - <span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">private</span> TreeNode <span class="title function_">buildTree</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> left, <span class="type">int</span> right)</span> {</span><br><span class="line">        <span class="keyword">if</span> (left &gt; right) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (left + right) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(nums[mid]);</span><br><span class="line">        root.left = buildTree(nums, left, mid - <span class="number">1</span>);</span><br><span class="line">        root.right = buildTree(nums, mid + <span class="number">1</span>, right);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="538-把二叉搜索树转换为累加树"><a href="#538-把二叉搜索树转换为累加树" class="headerlink" title="538. 把二叉搜索树转换为累加树"></a><a href="https://leetcode.cn/problems/convert-bst-to-greater-tree/">538. 把二叉搜索树转换为累加树</a></h2><p>利用BST性质，降序输出，这个也是利用了双指针的性质：</p><p>可以想象成一个数组：</p><p>6 7 8</p><p>需要一个 <strong>累加</strong> 数组，此时用双指针 pre cur 指向 7 8</p><p>那么问题就好解决了，同理，是用双指针：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="type">int</span> <span class="variable">pre</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">convertBST</span><span class="params">(TreeNode root)</span> {</span><br><span class="line">        <span class="comment">// 使用双指针</span></span><br><span class="line">        traverse(root);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">traverse</span><span class="params">(TreeNode root)</span> {</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        traverse(root.right); <span class="comment">// 先遍历右树，使得其按照降序输出</span></span><br><span class="line">        root.val += pre;</span><br><span class="line">        pre = root.val;</span><br><span class="line">        traverse(root.left);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>第二种解法：使用sum作为外部变量</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">convertBST</span><span class="params">(TreeNode root)</span> {</span><br><span class="line">        <span class="comment">// 中序遍历可以按照升序排列来输出，</span></span><br><span class="line">        <span class="comment">// 那么我们只需要做一些修改使其按照降序排列来输出 并 同时维护一个外部变量sum即可</span></span><br><span class="line">        traverse(root);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">traverse</span><span class="params">(TreeNode root)</span> {</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        traverse(root.right); <span class="comment">// 先遍历右树，使得其按照降序输出</span></span><br><span class="line">        sum += root.val;</span><br><span class="line">        root.val = sum;</span><br><span class="line">        traverse(root.left);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
            <tag> 二叉搜索树 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉树之构造类问题</title>
      <link href="/2023/04/27/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B9%8B%E6%9E%84%E9%80%A0%E7%B1%BB%E9%97%AE%E9%A2%98/"/>
      <url>/2023/04/27/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B9%8B%E6%9E%84%E9%80%A0%E7%B1%BB%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="构造类问题思路："><a href="#构造类问题思路：" class="headerlink" title="构造类问题思路："></a>构造类问题思路：</h1><blockquote><p><a href="https://labuladong.github.io/algo/di-yi-zhan-da78c/shou-ba-sh-66994/dong-ge-da-172f0/">labuladong</a>的总结很好</p></blockquote><p>二叉树的构造问题一般都是使用<strong>「分解问题」</strong>的思路：<strong>构造整棵树 = 根节点 + 构造左子树 + 构造右子树。</strong></p><p>经典的构造题有三道：</p><h2 id="654-最大二叉树"><a href="#654-最大二叉树" class="headerlink" title="654. 最大二叉树"></a><a href="https://leetcode.cn/problems/maximum-binary-tree/">654. 最大二叉树</a></h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">constructMaximumBinaryTree</span><span class="params">(<span class="type">int</span>[] nums)</span> {</span><br><span class="line">    <span class="comment">// 使用分解问题的思路解题，构造顺序为 根节点 + 构造左树 + 构造的右树</span></span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">root</span> <span class="operator">=</span> constructTree(nums);</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> TreeNode <span class="title function_">constructTree</span><span class="params">(<span class="type">int</span>[] nums)</span> {</span><br><span class="line">    <span class="keyword">if</span> (nums.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">maxIdx</span> <span class="operator">=</span> findMaxNumIndex(nums);</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(nums[maxIdx]);</span><br><span class="line">    <span class="comment">// Arrays.copyOfRange 时间复杂度是O(N)</span></span><br><span class="line">    root.left = constructTree(Arrays.copyOfRange(nums, <span class="number">0</span>, maxIdx));</span><br><span class="line">    root.right = constructTree(Arrays.copyOfRange(nums, maxIdx + <span class="number">1</span>, nums.length));</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">findMaxNumIndex</span><span class="params">(<span class="type">int</span>[] nums)</span> {</span><br><span class="line">    <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">maxValue</span> <span class="operator">=</span> Integer.MIN_VALUE;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) {</span><br><span class="line">        <span class="keyword">if</span> (nums[i] &gt; maxValue) {</span><br><span class="line">            maxValue = nums[i];</span><br><span class="line">            idx = i;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> idx;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>⚠️由于使用了Arrays.copyOfRange此方法会有些慢</p><p>优化后：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 主函数 */</span></span><br><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">constructMaximumBinaryTree</span><span class="params">(<span class="type">int</span>[] nums)</span> {</span><br><span class="line">    <span class="keyword">return</span> build(nums, <span class="number">0</span>, nums.length - <span class="number">1</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 定义：将 nums[lo..hi] 构造成符合条件的树，返回根节点 */</span></span><br><span class="line">TreeNode <span class="title function_">build</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> lo, <span class="type">int</span> hi)</span> {</span><br><span class="line">    <span class="comment">// base case</span></span><br><span class="line">    <span class="keyword">if</span> (lo &gt; hi) {</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 找到数组中的最大值和对应的索引</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> -<span class="number">1</span>, maxVal = Integer.MIN_VALUE;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> lo; i &lt;= hi; i++) {</span><br><span class="line">        <span class="keyword">if</span> (maxVal &lt; nums[i]) {</span><br><span class="line">            index = i;</span><br><span class="line">            maxVal = nums[i];</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(maxVal);</span><br><span class="line">    <span class="comment">// 递归调用构造左右子树</span></span><br><span class="line">    root.left = build(nums, lo, index - <span class="number">1</span>);</span><br><span class="line">    root.right = build(nums, index + <span class="number">1</span>, hi);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="105-从前序与中序遍历序列构造二叉树"><a href="#105-从前序与中序遍历序列构造二叉树" class="headerlink" title="105. 从前序与中序遍历序列构造二叉树"></a><a href="https://leetcode.cn/problems/construct-binary-tree-from-preorder-and-inorder-traversal/">105. 从前序与中序遍历序列构造二叉树</a></h2><p>此题依然沿用思路：使用分解子问题的方法解题：根节点 + 左子树 + 右子树</p><ul><li>对于根节点：利用<strong>前</strong>序遍历的性质，中左右，开头第一个即为根节点</li><li>对于左右子树：利用中序遍历的性质，左右中，我们可以找到root对应的index从而找到左右子树的范围<ul><li>对于左子树来说，<strong>前</strong>序遍历的数组从 preStart + 1 开始 到 preStart + leftSize，中序遍历的数组则从inStart 开始 到 rootIdxInOrder - 1:</li><li>对于右子树来说，<strong>前</strong>序遍历的数组从 preStart + leftSize + 1 开始 到 preEnd，中序遍历的数组则从 rootIdxInOrder + 1 开始 到 inEnd:</li></ul></li><li>❗️总结：利用前序遍历找到root节点，利用中序遍历确定左右子树的区间</li></ul><p>ps: 一点优化：用于快速查找root在inorder array里面的位置，由于tree里面的值保证不重复</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;Integer, Integer&gt; val2idxMap;</span><br><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">buildTree</span><span class="params">(<span class="type">int</span>[] preorder, <span class="type">int</span>[] inorder)</span> {</span><br><span class="line">    <span class="comment">// 继续使用分解子问题的方法解题：根节点 + 左子树 + 右子树</span></span><br><span class="line">    <span class="comment">// 利用前序遍历的性质，中左右，开头第一个即为根节点</span></span><br><span class="line">    <span class="comment">// 利用中序遍历的性质，左右中，我们可以找到root对应的index从而找到左右子树的范围</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用于快速查找root在inorder array里面的位置，由于tree里面的值保证不重复：</span></span><br><span class="line">    val2idxMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; inorder.length; i++) {</span><br><span class="line">        val2idxMap.put(inorder[i], i);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">preStart</span> <span class="operator">=</span> <span class="number">0</span>, preEnd = preorder.length - <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">inStart</span> <span class="operator">=</span> <span class="number">0</span>, inEnd = inorder.length - <span class="number">1</span>;</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">root</span> <span class="operator">=</span> build(preorder, preStart, preEnd, inorder, inStart, inEnd);</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> TreeNode <span class="title function_">build</span><span class="params">(<span class="type">int</span>[] preorder, <span class="type">int</span> preStart, <span class="type">int</span> preEnd,</span></span><br><span class="line"><span class="params">                   <span class="type">int</span>[] inorder, <span class="type">int</span> inStart, <span class="type">int</span> inEnd)</span> {</span><br><span class="line">    <span class="keyword">if</span> (preStart &gt; preEnd) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (inStart &gt; inEnd) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">val</span> <span class="operator">=</span> preorder[preStart];</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(val);</span><br><span class="line">    <span class="type">int</span> <span class="variable">rootIdxInOrder</span> <span class="operator">=</span> val2idxMap.get(val);</span><br><span class="line">    <span class="type">int</span> <span class="variable">leftSize</span> <span class="operator">=</span> rootIdxInOrder - inStart;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对于左子树来说，</span></span><br><span class="line">    <span class="comment">// 前序遍历的数组从 preStart + 1 开始 到 preStart + leftSize</span></span><br><span class="line">    <span class="comment">// 中序遍历的数组则从inStart 开始 到 rootIdxInOrder - 1:</span></span><br><span class="line">    root.left = build(preorder, preStart + <span class="number">1</span>, preStart + leftSize,</span><br><span class="line">            inorder, inStart, rootIdxInOrder - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对于右子树来说，</span></span><br><span class="line">    <span class="comment">// 前序遍历的数组从 preStart + leftSize + 1 开始 到 preEnd</span></span><br><span class="line">    <span class="comment">// 中序遍历的数组则从 rootIdxInOrder + 1 开始 到 inEnd:</span></span><br><span class="line">    root.right = build(preorder, preStart + leftSize + <span class="number">1</span>, preEnd,</span><br><span class="line">            inorder, rootIdxInOrder + <span class="number">1</span>, inEnd);</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="106-从中序与后序遍历序列构造二叉树"><a href="#106-从中序与后序遍历序列构造二叉树" class="headerlink" title="106. 从中序与后序遍历序列构造二叉树"></a><a href="https://leetcode.cn/problems/construct-binary-tree-from-inorder-and-postorder-traversal/">106. 从中序与后序遍历序列构造二叉树</a></h2><p>继续沿用上题思路：</p><p>使用分解子问题的方法解题：根节点 + 左子树 + 右子树</p><ul><li>对于根节点：利用<strong>后</strong>序遍历的性质，左右中，右手边第一个即为根节点</li><li>对于左右子树：利用中序遍历的性质，左右中，我们可以找到root对应的index从而找到左右子树的范围<ul><li>PS: ⚠️为了测试，我这里使用rightTreeSize 但是使用leftTreeSize也是可以的：</li><li>对于左子树来说，<strong>后</strong>序遍历的数组从 postStart 开始 到 postEnd - rightTreeSize - 1，中序遍历的数组则从inStart 开始 到 rootIdx - 1:</li><li>对于右子树来说，<strong>后</strong>序遍历的数组从postEnd - rightTreeSize - 1 开始 到 postEnd - 1，中序遍历的数组则从 rootIdx + 1 开始 到 inEnd:</li></ul></li><li>❗️总结：利用<strong>后</strong>序遍历找到root节点，利用中序遍历确定左右子树的区间</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;Integer, Integer&gt; val2IdxMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">buildTree</span><span class="params">(<span class="type">int</span>[] inorder, <span class="type">int</span>[] postorder)</span> {</span><br><span class="line">    <span class="comment">// 继续 找根 + 左子树范围 + 右子树范围</span></span><br><span class="line">    <span class="comment">// 用后序找根因为后序遍历的从后往前第一个是根节点</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; inorder.length; i++) {</span><br><span class="line">        val2IdxMap.put(inorder[i], i);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">postStart</span> <span class="operator">=</span> <span class="number">0</span>, postEnd = postorder.length - <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">inStart</span> <span class="operator">=</span> <span class="number">0</span>, inEnd = inorder.length - <span class="number">1</span>;</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">root</span> <span class="operator">=</span> build(postorder, postStart, postEnd, inorder, inStart, inEnd);</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> TreeNode <span class="title function_">build</span><span class="params">(<span class="type">int</span>[] postorder, <span class="type">int</span> postStart, <span class="type">int</span> postEnd,</span></span><br><span class="line"><span class="params">                        <span class="type">int</span>[] inorder, <span class="type">int</span> inStart, <span class="type">int</span> inEnd)</span> {</span><br><span class="line">    <span class="keyword">if</span> (postStart &gt; postEnd) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (inStart &gt; inEnd) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">rootVal</span> <span class="operator">=</span> postorder[postEnd];</span><br><span class="line">    <span class="type">int</span> <span class="variable">rootIdx</span> <span class="operator">=</span> val2IdxMap.get(rootVal);</span><br><span class="line">    <span class="type">int</span> <span class="variable">rightTreeSize</span> <span class="operator">=</span> inEnd - rootIdx;</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(rootVal);</span><br><span class="line">    root.left = build(postorder, postStart, postEnd - rightTreeSize - <span class="number">1</span>,</span><br><span class="line">            inorder, inStart, rootIdx - <span class="number">1</span>);</span><br><span class="line">    root.right = build(postorder, postEnd - rightTreeSize - <span class="number">1</span>, postEnd - <span class="number">1</span>,</span><br><span class="line">            inorder, rootIdx + <span class="number">1</span>, inEnd);</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>使用leftTreeSize的解法如下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">TreeNode <span class="title function_">build</span><span class="params">(<span class="type">int</span>[] inorder, <span class="type">int</span> inStart, <span class="type">int</span> inEnd,</span></span><br><span class="line"><span class="params">               <span class="type">int</span>[] postorder, <span class="type">int</span> postStart, <span class="type">int</span> postEnd)</span> {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (inStart &gt; inEnd) {</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// root 节点对应的值就是后序遍历数组的最后一个元素</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">rootVal</span> <span class="operator">=</span> postorder[postEnd];</span><br><span class="line">    <span class="comment">// rootVal 在中序遍历数组中的索引</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> valToIndex.get(rootVal);</span><br><span class="line">    <span class="comment">// 左子树的节点个数</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">leftSize</span> <span class="operator">=</span> index - inStart;</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(rootVal);</span><br><span class="line">    <span class="comment">// 递归构造左右子树</span></span><br><span class="line">    root.left = build(inorder, inStart, index - <span class="number">1</span>,</span><br><span class="line">                        postorder, postStart, postStart + leftSize - <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    root.right = build(inorder, index + <span class="number">1</span>, inEnd,</span><br><span class="line">                        postorder, postStart + leftSize, postEnd - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="889-根据前序和后序遍历构造二叉树"><a href="#889-根据前序和后序遍历构造二叉树" class="headerlink" title="889. 根据前序和后序遍历构造二叉树"></a><a href="https://leetcode.cn/problems/construct-binary-tree-from-preorder-and-postorder-traversal/">889. 根据前序和后序遍历构造二叉树</a></h2><p>思路其实是相通的，但是：</p><p>⚠️<strong>通过前序中序，或者后序中序遍历结果可以确定唯一一棵原始二叉树，但是通过前序后序遍历结果无法确定唯一的原始二叉树</strong>。⚠️</p><p>思路：</p><ol><li>首先把前序遍历结果的第一个元素或者后序遍历结果的最后一个元素确定为根节点的值。</li><li>然后把前序遍历结果的第二个元素作为左子树的根节点的值。</li><li>在后序遍历结果中寻找左子树根节点的值，从而确定了左子树的索引边界，进而确定右子树的索引边界，递归构造左右子树即可。</li></ol><p><img src="/2023/04/27/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B9%8B%E6%9E%84%E9%80%A0%E7%B1%BB%E9%97%AE%E9%A2%98/%E9%80%9A%E8%BF%87%E5%89%8D%E5%BA%8F%E5%90%8E%E5%BA%8F%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91.jpeg" alt="通过前序后序构造二叉树"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;Integer, Integer&gt; val2Idx = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">constructFromPrePost</span><span class="params">(<span class="type">int</span>[] preorder, <span class="type">int</span>[] postorder)</span> {</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; postorder.length; i++) {</span><br><span class="line">        val2Idx.put(postorder[i], i);</span><br><span class="line">    }</span><br><span class="line">    <span class="type">int</span> <span class="variable">preStart</span> <span class="operator">=</span> <span class="number">0</span>, preEnd = preorder.length - <span class="number">1</span>,</span><br><span class="line">            postStart = <span class="number">0</span>, postEnd = postorder.length - <span class="number">1</span>;</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">root</span> <span class="operator">=</span> build(preorder, preStart, preEnd, postorder, postStart, postEnd);</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> TreeNode <span class="title function_">build</span><span class="params">(<span class="type">int</span>[] preorder, <span class="type">int</span> preStart, <span class="type">int</span> preEnd,</span></span><br><span class="line"><span class="params">                        <span class="type">int</span>[] postorder, <span class="type">int</span> postStart, <span class="type">int</span> postEnd)</span> {</span><br><span class="line">    <span class="keyword">if</span> (preStart &gt; preEnd) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (postStart &gt; postEnd) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (preEnd == preStart) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(preorder[preStart]);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">rootVal</span> <span class="operator">=</span> preorder[preStart];</span><br><span class="line">    <span class="type">int</span> <span class="variable">leftRootVal</span> <span class="operator">=</span> preorder[preStart + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">leftTreeRootIdxInPostOrder</span> <span class="operator">=</span> val2Idx.get(leftRootVal);</span><br><span class="line">    <span class="type">int</span> <span class="variable">leftTreeSize</span> <span class="operator">=</span> leftTreeRootIdxInPostOrder - postStart + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(rootVal);</span><br><span class="line">    root.left = build(preorder, preStart + <span class="number">1</span>, preStart + leftTreeSize,</span><br><span class="line">            postorder, postStart, leftTreeRootIdxInPostOrder);</span><br><span class="line">    root.right = build(preorder, preStart + leftTreeSize + <span class="number">1</span>, preEnd,</span><br><span class="line">            postorder, leftTreeRootIdxInPostOrder + <span class="number">1</span>, postEnd - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>额外多了一个检查：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (preEnd == preStart) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(preorder[preStart]);</span><br></pre></td></tr></tbody></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
      
      
      <categories>
          
          <category> Algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉树之计算深度</title>
      <link href="/2023/04/27/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B9%8B%E8%AE%A1%E7%AE%97%E6%B7%B1%E5%BA%A6/"/>
      <url>/2023/04/27/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B9%8B%E8%AE%A1%E7%AE%97%E6%B7%B1%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="树计算深度类问题："><a href="#树计算深度类问题：" class="headerlink" title="树计算深度类问题："></a>树计算深度类问题：</h1><h2 id="111-二叉树的最小深度"><a href="#111-二叉树的最小深度" class="headerlink" title="111. 二叉树的最小深度"></a><a href="https://leetcode.cn/problems/minimum-depth-of-binary-tree/">111. 二叉树的最小深度</a></h2><h3 id="方法1-DFS"><a href="#方法1-DFS" class="headerlink" title="方法1 DFS:"></a>方法1 DFS:</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minDepth</span><span class="params">(TreeNode root)</span> {</span><br><span class="line">    <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span>  dfsCompose(root);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">dfsCompose</span><span class="params">(TreeNode cur)</span> {</span><br><span class="line">    <span class="comment">// 函数定义：返回当前树的最小深度 注意最小深度是根结点到叶子结点</span></span><br><span class="line">    <span class="keyword">if</span>(cur == <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//这道题递归条件里分为三种情况</span></span><br><span class="line">    <span class="comment">//1.左孩子和有孩子都为空的情况，说明到达了叶子节点，直接返回1即可</span></span><br><span class="line">    <span class="keyword">if</span>(cur.left == <span class="literal">null</span> &amp;&amp; cur.right == <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//2.如果左孩子和由孩子其中一个为空，那么需要返回比较大的那个孩子的深度        </span></span><br><span class="line">    <span class="type">int</span> <span class="variable">m1</span> <span class="operator">=</span> minDepth(cur.left);</span><br><span class="line">    <span class="type">int</span> <span class="variable">m2</span> <span class="operator">=</span> minDepth(cur.right);</span><br><span class="line">    <span class="comment">//这里其中一个节点为空，说明m1和m2有一个必然为0，所以可以返回m1 + m2 + 1;</span></span><br><span class="line">    <span class="keyword">if</span>(cur.left == <span class="literal">null</span> || cur.right == <span class="literal">null</span>) <span class="keyword">return</span> m1 + m2 + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.最后一种情况，也就是左右孩子都不为空，返回最小深度+1即可</span></span><br><span class="line">    <span class="keyword">return</span> Math.min(m1,m2) + <span class="number">1</span>; </span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">dfsCompose</span><span class="params">(TreeNode cur, <span class="type">int</span> curDepth)</span> {</span><br><span class="line">    <span class="comment">// 函数定义：返回当前树的最小深度 注意最小深度是根结点到叶子结点</span></span><br><span class="line">    <span class="keyword">if</span> (cur == <span class="literal">null</span>) <span class="keyword">return</span> Integer.MAX_VALUE;</span><br><span class="line">    <span class="keyword">if</span> (cur.left == <span class="literal">null</span> &amp;&amp; cur.right == <span class="literal">null</span>) <span class="keyword">return</span> curDepth;</span><br><span class="line">    <span class="type">int</span> <span class="variable">leftMin</span> <span class="operator">=</span> dfsCompose(cur.left, curDepth + <span class="number">1</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">rightMin</span> <span class="operator">=</span> dfsCompose(cur.right, curDepth + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> Math.min(leftMin, rightMin);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="方法2-BFS"><a href="#方法2-BFS" class="headerlink" title="方法2 BFS"></a>方法2 BFS</h3><p>第一版：（⚠️有瑕疵）</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minDepth</span><span class="params">(TreeNode root)</span> {</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> bfs(root);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">bfs</span><span class="params">(TreeNode cur)</span> {</span><br><span class="line">    <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">    Deque&lt;TreeNode&gt; dq = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">    dq.addLast(cur);</span><br><span class="line">    <span class="type">int</span> <span class="variable">height</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (!dq.isEmpty()) {</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> dq.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len; i++) {</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">levelCur</span> <span class="operator">=</span> dq.pollFirst();</span><br><span class="line">            <span class="keyword">if</span> (levelCur.left == <span class="literal">null</span> &amp;&amp; levelCur.right == <span class="literal">null</span>) min = Math.min(min, height);</span><br><span class="line">            <span class="keyword">if</span> (levelCur.left != <span class="literal">null</span>) dq.addLast(levelCur.left);</span><br><span class="line">            <span class="keyword">if</span> (levelCur.right != <span class="literal">null</span>) dq.addLast(levelCur.right);</span><br><span class="line">        }</span><br><span class="line">        height++;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> min;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>这个版本有瑕疵的原因是BFS<strong>第一个碰到的叶子结点一定是最短的</strong>。因为他是一层一层下去的</p></blockquote><p>因此无需维护min, 可以直接return 所以可以优化为：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minDepth</span><span class="params">(TreeNode root)</span> {</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> bfs(root);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">bfs</span><span class="params">(TreeNode cur)</span> {</span><br><span class="line">    Deque&lt;TreeNode&gt; dq = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">    dq.addLast(cur);</span><br><span class="line">    <span class="type">int</span> <span class="variable">height</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (!dq.isEmpty()) {</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> dq.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len; i++) {</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">levelCur</span> <span class="operator">=</span> dq.pollFirst();</span><br><span class="line">            <span class="keyword">if</span> (levelCur.left == <span class="literal">null</span> &amp;&amp; levelCur.right == <span class="literal">null</span>) <span class="keyword">return</span> height;</span><br><span class="line">            <span class="keyword">if</span> (levelCur.left != <span class="literal">null</span>) dq.addLast(levelCur.left);</span><br><span class="line">            <span class="keyword">if</span> (levelCur.right != <span class="literal">null</span>) dq.addLast(levelCur.right);</span><br><span class="line">        }</span><br><span class="line">        height++;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> height;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>优化前：</p><p><img src="/2023/04/27/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B9%8B%E8%AE%A1%E7%AE%97%E6%B7%B1%E5%BA%A6/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%B0%8F%E6%B7%B1%E5%BA%A6BFS%E4%BC%98%E5%8C%96%E5%89%8D.png" alt="111. 二叉树的最小深度BFS优化前.png"></p><p>优化后：</p><p><img src="/2023/04/27/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B9%8B%E8%AE%A1%E7%AE%97%E6%B7%B1%E5%BA%A6/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%B0%8F%E6%B7%B1%E5%BA%A6BFS%E4%BC%98%E5%8C%96%E5%90%8E.png" alt="111. 二叉树的最小深度BFS优化后.png"></p><h2 id="104-二叉树的最大深度"><a href="#104-二叉树的最大深度" class="headerlink" title="104. 二叉树的最大深度"></a><a href="https://leetcode.cn/problems/maximum-depth-of-binary-tree/">104. 二叉树的最大深度</a></h2><h3 id="dfs的两个解法："><a href="#dfs的两个解法：" class="headerlink" title="dfs的两个解法："></a>dfs的两个解法：</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxDepth</span><span class="params">(TreeNode root)</span> {</span><br><span class="line">    traverse(root);</span><br><span class="line">    <span class="keyword">return</span> res == Integer.MIN_VALUE ? <span class="number">0</span> : res;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">getMax</span><span class="params">(TreeNode cur)</span> {</span><br><span class="line">    <span class="keyword">if</span> (cur == <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">leftMax</span> <span class="operator">=</span> getMax(cur.left);</span><br><span class="line">    <span class="type">int</span> <span class="variable">rightMax</span> <span class="operator">=</span> getMax(cur.right);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">maxDepth</span> <span class="operator">=</span> Math.max(leftMax, rightMax) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> maxDepth;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">depth</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> Integer.MIN_VALUE;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">traverse</span><span class="params">(TreeNode cur)</span> {</span><br><span class="line">    <span class="keyword">if</span> (cur == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">    depth++;</span><br><span class="line">    <span class="keyword">if</span> (cur.left == <span class="literal">null</span> &amp;&amp; cur.right == <span class="literal">null</span>) {</span><br><span class="line">        res = Math.max(depth, res);</span><br><span class="line">    }</span><br><span class="line">    traverse(cur.left);</span><br><span class="line">    traverse(cur.right);</span><br><span class="line">    depth--;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="559-N-叉树的最大深度"><a href="#559-N-叉树的最大深度" class="headerlink" title="559. N 叉树的最大深度"></a><a href="https://leetcode.cn/problems/maximum-depth-of-n-ary-tree/">559. N 叉树的最大深度</a></h2><h3 id="回溯：方法1"><a href="#回溯：方法1" class="headerlink" title="回溯：方法1"></a>回溯：方法1</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxDepth</span><span class="params">(Node root)</span> {</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    traverse(root); </span><br><span class="line">    <span class="keyword">return</span> res + <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> Integer.MIN_VALUE;</span><br><span class="line"><span class="type">int</span> depth;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">traverse</span><span class="params">(Node root)</span> {</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (root.children.size() == <span class="number">0</span>) {</span><br><span class="line">        res = Math.max(res, depth);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (Node child : root.children) {</span><br><span class="line">        depth++;</span><br><span class="line">        traverse(child);</span><br><span class="line">        depth--;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="回溯：格式2"><a href="#回溯：格式2" class="headerlink" title="回溯：格式2"></a>回溯：格式2</h3><p>⚠️注意depth的位置以及res在maxDepth中return的变化⚠️</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxDepth</span><span class="params">(Node root)</span> {</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    traverse(root); </span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> Integer.MIN_VALUE;</span><br><span class="line"><span class="type">int</span> depth;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">traverse</span><span class="params">(Node root)</span> {</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">    depth++;</span><br><span class="line">    <span class="keyword">if</span> (root.children.size() == <span class="number">0</span>) {</span><br><span class="line">        res = Math.max(res, depth);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (Node child : root.children) {</span><br><span class="line">        traverse(child);</span><br><span class="line">    }</span><br><span class="line">    depth--;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
      
      
      <categories>
          
          <category> Algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回溯</title>
      <link href="/2023/04/20/%E5%9B%9E%E6%BA%AF/"/>
      <url>/2023/04/20/%E5%9B%9E%E6%BA%AF/</url>
      
        <content type="html"><![CDATA[<div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>此教程参考  <a href="https://labuladong.github.io/algo/di-ling-zh-bfe1b/hui-su-sua-c26da/">labuladong - 回溯算法框架</a> 以及 <a href="https://www.programmercarl.com/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80.html#%E9%A2%98%E7%9B%AE%E5%88%86%E7%B1%BB%E5%A4%A7%E7%BA%B2%E5%A6%82%E4%B8%8B">代码随想录 - 回溯篇</a><br>感谢支持！</p></div><div class="note green icon-padding flat"><i class="note-icon fas fa-rocket"></i><p>📚 文档目录：</p><p>此文档包含以下几个部分：</p><ul><li><a href="/2023/05/09/%E5%9B%9E%E6%BA%AF%E4%B9%8B%E6%8E%92%E5%88%97-%E7%BB%84%E5%90%88-%E5%AD%90%E9%9B%86%E9%97%AE%E9%A2%98/" title="回溯之排列-组合-子集问题">回溯之排列-组合-子集问题</a></li><li><a href="/2023/05/09/%E5%9B%9E%E6%BA%AF%E4%B9%8B%E9%9B%86%E5%90%88%E5%88%92%E5%88%86%E9%97%AE%E9%A2%98/" title="回溯之集合划分问题">回溯之集合划分问题</a></li></ul></div><h1 id="回溯算法框架"><a href="#回溯算法框架" class="headerlink" title="回溯算法框架"></a>回溯算法框架</h1><p>回溯算法和我们常说的 DFS 算法非常类似，本质上就是一种暴力穷举算法。</p><p>回溯算法和 DFS 算法的细微差别是：<strong>回溯算法是在遍历「树枝」，DFS 算法是在遍历「节点」</strong></p><h2 id="关于回溯的撤销"><a href="#关于回溯的撤销" class="headerlink" title="关于回溯的撤销"></a>关于回溯的撤销</h2><p>回溯撤销操作通常在以下情况下执行：</p><ol><li>当你已经完成了<strong>当前层级的所有操作，并且需要返回到上一层级以尝试其他可能性时</strong>。在这种情况下，撤销操作可以帮助你恢复到之前的状态，从而允许你继续探索其他可能的解决方案。</li><li>当你在当前层级上遇到了一个<strong>不满足约束条件的解时</strong>。在这种情况下，你需要撤销在这个解上所做的操作，以便回到之前的状态并尝试其他选择。</li></ol><p>在递归算法中，回溯撤销操作通常在递归调用之后执行。这是因为，在递归调用返回时，你已经完成了该层级的所有操作，现在需要恢复到之前的状态以便探索其他可能性。</p><p>回溯撤销操作应在完成<strong>当前层级的所有操作</strong>后执行，以便在回溯过程中恢复到之前的状态并尝试其他可能性。</p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>为了解决回溯的相关问题，就是解决一个决策树的遍历</p><p>站在回溯树的一个节点上，需要思考 3 个问题：</p><p>1、路径：也就是已经做出的选择。</p><p>2、选择列表：也就是你当前可以做的选择。</p><p>3、结束条件：也就是到达决策树底层，无法再做选择的条件。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">result = []</span><br><span class="line">def <span class="title function_">backtrack</span><span class="params">(路径, 选择列表)</span>:</span><br><span class="line">    <span class="keyword">if</span> 满足结束条件:</span><br><span class="line">        result.add(路径)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> 选择 in 选择列表:</span><br><span class="line">        做选择</span><br><span class="line">        backtrack(路径, 选择列表)</span><br><span class="line">        撤销选择</span><br></pre></td></tr></tbody></table></figure><p><strong>核心就是 for 循环里面的递归，在递归调用之前「做选择」，在递归调用之后「撤销选择」</strong></p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ul><li>排列</li><li>组合</li><li>子集</li><li>切割</li><li>棋盘</li></ul><p>关键在于<strong>需要暴力去搜索</strong>的算法</p><h2 id="77-组合"><a href="#77-组合" class="headerlink" title="77. 组合"></a><a href="https://leetcode.cn/problems/combinations/">77. 组合</a></h2><p><img src="/2023/04/20/%E5%9B%9E%E6%BA%AF/%E7%BB%84%E5%90%88_77.jpg" alt="组合_77"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combine</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k)</span> {</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; paths = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        List&lt;Integer&gt; path = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        backtracking(idx, paths, path, n, k);</span><br><span class="line">        <span class="keyword">return</span> paths;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(<span class="type">int</span> idx, List&lt;List&lt;Integer&gt;&gt; paths, List&lt;Integer&gt; path, <span class="type">int</span> n, <span class="type">int</span> k)</span> {</span><br><span class="line">        <span class="keyword">if</span> (path.size() == k) {</span><br><span class="line">            paths.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(path));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> idx; i &lt;= n; i++) {</span><br><span class="line">            path.add(i);</span><br><span class="line">            backtracking(i + <span class="number">1</span>, paths, path, n, k);</span><br><span class="line">            path.remove(path.size() - <span class="number">1</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="剪枝-（只需要当元素不够时剪掉即可）-gt-n-k-path-size-1"><a href="#剪枝-（只需要当元素不够时剪掉即可）-gt-n-k-path-size-1" class="headerlink" title="剪枝 （只需要当元素不够时剪掉即可）-> n - (k - path.size()) + 1"></a>剪枝 （只需要当元素不够时剪掉即可）-&gt; n - (k - path.size()) + 1</h3><p>当所需要的元素 &gt; 可选选项可以提供的元素时，我们就无需再往后面进行计算了，直接剪掉</p><p><img src="/2023/04/20/%E5%9B%9E%E6%BA%AF/%E7%BB%84%E5%90%88%E2%80%94%E5%89%AA%E6%9E%9D.png" alt="组合—剪枝"></p><p>优化过程如下：</p><ol><li>已经选择的元素个数：path.size();</li><li>所需需要的元素个数为: k - path.size();</li><li>列表中剩余元素（n-i） &gt;= 所需需要的元素个数（k - path.size()）</li><li>在集合n中至多要从该起始位置 : i &lt;= n - (k - path.size()) + 1，开始遍历</li></ol><p>为什么有个+1呢，因为包括起始位置，我们要是一个左闭的集合。</p><p>举个例子，n = 4，k = 3， 目前已经选取的元素为0（path.size为0），n - (k - 0) + 1 即 4 - ( 3 - 0) + 1 = 2。</p><p>从2开始搜索都是合理的，可以是组合[2, 3, 4]。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combine</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k)</span> {</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; paths = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        List&lt;Integer&gt; path = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        backtracking(idx, paths, path, n, k);</span><br><span class="line">        <span class="keyword">return</span> paths;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(<span class="type">int</span> idx, List&lt;List&lt;Integer&gt;&gt; paths, List&lt;Integer&gt; path, <span class="type">int</span> n, <span class="type">int</span> k)</span> {</span><br><span class="line">        <span class="keyword">if</span> (path.size() == k) {</span><br><span class="line">            paths.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(path));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> idx; i &lt;= n - (k - path.size()) + <span class="number">1</span>; i++) {</span><br><span class="line">            path.add(i);</span><br><span class="line">            backtracking(i + <span class="number">1</span>, paths, path, n, k);</span><br><span class="line">            path.remove(path.size() - <span class="number">1</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="216-组合总和-II"><a href="#216-组合总和-II" class="headerlink" title="216. 组合总和 II"></a><a href="https://leetcode.cn/problems/combination-sum-iii/">216. 组合总和 II</a></h2><p>上一道题的应用，几乎一模一样</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="type">int</span> <span class="variable">curSum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combinationSum3</span><span class="params">(<span class="type">int</span> k, <span class="type">int</span> n)</span> {</span><br><span class="line">        List&lt;Integer&gt; path = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; paths = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        backTracking(path, paths, k, n, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> paths;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backTracking</span><span class="params">(List&lt;Integer&gt; path, List&lt;List&lt;Integer&gt;&gt; paths, <span class="type">int</span> k, <span class="type">int</span> n, <span class="type">int</span> startIdx)</span> {</span><br><span class="line">        <span class="keyword">if</span> (path.size() == k) {</span><br><span class="line">            <span class="keyword">if</span> (curSum == n) {</span><br><span class="line">                paths.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(path));</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> startIdx; i &lt;= <span class="number">9</span>; i++) {</span><br><span class="line">            path.add(i);</span><br><span class="line">            curSum += i;</span><br><span class="line">            backTracking(path, paths, k, n, i + <span class="number">1</span>);</span><br><span class="line">            path.remove(path.size() - <span class="number">1</span>);</span><br><span class="line">            curSum -= i;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="剪枝"><a href="#剪枝" class="headerlink" title="剪枝"></a>剪枝</h3><p>这道题剪枝有两个： 剩余元素的剪枝 + 求和的剪枝</p><p> 剩余元素的剪枝:</p><p>即，可选列表中的元素 &lt; 要用的元素 </p><p>求和的剪枝：</p><p>即，当前和已经大于了题目要求的和</p><p><img src="/2023/04/20/%E5%9B%9E%E6%BA%AF/%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8C3-%E5%89%AA%E6%9E%9D.png" alt="组合总和3-剪枝"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="type">int</span> <span class="variable">curSum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combinationSum3</span><span class="params">(<span class="type">int</span> k, <span class="type">int</span> n)</span> {</span><br><span class="line">        List&lt;Integer&gt; path = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; paths = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        backTracking(path, paths, k, n, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> paths;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backTracking</span><span class="params">(List&lt;Integer&gt; path, List&lt;List&lt;Integer&gt;&gt; paths, <span class="type">int</span> k, <span class="type">int</span> n, <span class="type">int</span> startIdx)</span> {</span><br><span class="line">        <span class="keyword">if</span> (path.size() == k) {</span><br><span class="line">            <span class="keyword">if</span> (curSum == n) {</span><br><span class="line">                paths.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(path));</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> startIdx; i &lt;= <span class="number">9</span> - (k - path.size()) + <span class="number">1</span>; i++) {</span><br><span class="line">            path.add(i);</span><br><span class="line">            curSum += i;</span><br><span class="line">            <span class="keyword">if</span> (curSum &gt; n) {</span><br><span class="line">                curSum -= i;</span><br><span class="line">                path.remove(path.size() - <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            }</span><br><span class="line">            backTracking(path, paths, k, n, i + <span class="number">1</span>);</span><br><span class="line">            path.remove(path.size() - <span class="number">1</span>);</span><br><span class="line">            curSum -= i;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="17-电话号码的字母组合"><a href="#17-电话号码的字母组合" class="headerlink" title="17. 电话号码的字母组合"></a><a href="https://leetcode.cn/problems/letter-combinations-of-a-phone-number/">17. 电话号码的字母组合</a></h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">        Map&lt;Character, String&gt; phoneMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">letterCombinations</span><span class="params">(String digits)</span> {</span><br><span class="line">            phoneMap.put(<span class="string">'2'</span>, <span class="string">"abc"</span>);</span><br><span class="line">            phoneMap.put(<span class="string">'3'</span>, <span class="string">"def"</span>);</span><br><span class="line">            phoneMap.put(<span class="string">'4'</span>, <span class="string">"ghi"</span>);</span><br><span class="line">            phoneMap.put(<span class="string">'5'</span>, <span class="string">"jkl"</span>);</span><br><span class="line">            phoneMap.put(<span class="string">'6'</span>, <span class="string">"mno"</span>);</span><br><span class="line">            phoneMap.put(<span class="string">'7'</span>, <span class="string">"pqrs"</span>);</span><br><span class="line">            phoneMap.put(<span class="string">'8'</span>, <span class="string">"tuv"</span>);</span><br><span class="line">            phoneMap.put(<span class="string">'9'</span>, <span class="string">"wxyz"</span>);</span><br><span class="line">            List&lt;String&gt; res = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">cur</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">            <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            backtracking(digits, cur, res, idx);</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(String digits, StringBuilder cur, List&lt;String&gt; res, <span class="type">int</span> idx)</span> {</span><br><span class="line">            <span class="keyword">if</span> (idx &gt; digits.length() - <span class="number">1</span>) {</span><br><span class="line">                res.add(cur.toString());</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="type">char</span> <span class="variable">digit</span> <span class="operator">=</span> digits.charAt(idx);</span><br><span class="line">            <span class="type">String</span> <span class="variable">digit2Chars</span> <span class="operator">=</span> phoneMap.get(digit);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; digit2Chars.length(); i++) {</span><br><span class="line">                <span class="type">char</span> <span class="variable">target</span> <span class="operator">=</span> digit2Chars.charAt(i);</span><br><span class="line">                cur.append(target);</span><br><span class="line">                backtracking(digits, cur, res, idx + <span class="number">1</span>);</span><br><span class="line">                cur.deleteCharAt(cur.length() - <span class="number">1</span>);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><h2 id="46-全排列"><a href="#46-全排列" class="headerlink" title="46. 全排列"></a><a href="https://leetcode.cn/problems/permutations/">46. 全排列</a></h2><p><img src="/2023/04/20/%E5%9B%9E%E6%BA%AF/%E5%85%A8%E6%8E%92%E5%88%97-%E8%B7%AF%E5%BE%84.jpeg" alt="全排列-路径"></p><p><strong><code>[2]</code> 就是「路径」，记录你已经做过的选择；</strong></p><p><strong><code>[1,3]</code> 就是「选择列表」，表示你当前可以做出的选择；</strong></p><p><strong>「结束条件」就是遍历到树的底层叶子节点，这里也就是选择列表为空的时候</strong>。</p><p><img src="/2023/04/20/%E5%9B%9E%E6%BA%AF/%E5%85%A8%E6%8E%92%E5%88%97-%E5%81%9A%E9%80%89%E6%8B%A9.jpeg" alt="全排列-做选择"></p><h2 id="51-N-皇后"><a href="#51-N-皇后" class="headerlink" title="51. N 皇后"></a><a href="https://leetcode.cn/problems/n-queens/">51. N 皇后</a></h2>]]></content>
      
      
      <categories>
          
          <category> Algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 回溯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>递归</title>
      <link href="/2023/04/17/%E9%80%92%E5%BD%92/"/>
      <url>/2023/04/17/%E9%80%92%E5%BD%92/</url>
      
        <content type="html"><![CDATA[<div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>递归 is all I hate </p></div><h1 id="递归🐢"><a href="#递归🐢" class="headerlink" title="递归🐢"></a>递归🐢</h1><blockquote><p>递归讲究的就是一个自信，<strong>相信自己的函数定义和它的return值</strong>，做下去，wow amazing，你就得到了结果</p></blockquote><p>递归算法的<strong>时间</strong>复杂度 = <strong>递归的次数</strong> x <strong>函数本身的时间复杂度</strong></p><p>递归算法的<strong>空间</strong>复杂度 = <strong>递归堆栈的深度</strong> + <strong>算法申请的存储空间</strong></p><p>或者再说得直观一点：</p><p>递归算法的时间复杂度 = <strong>递归树的节点个数</strong> x <strong>每个节点的时间复杂度</strong></p><p>递归算法的空间复杂度 = <strong>递归树的高度</strong> + <strong>算法申请的存储空间</strong></p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><h3 id="226-翻转二叉树"><a href="#226-翻转二叉树" class="headerlink" title="226. 翻转二叉树"></a><a href="https://leetcode.cn/problems/invert-binary-tree/">226. 翻转二叉树</a></h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">invertTree</span><span class="params">(TreeNode root)</span> {</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">res</span> <span class="operator">=</span> dfs(root);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> TreeNode <span class="title function_">dfs</span><span class="params">(TreeNode cur)</span> {</span><br><span class="line">    <span class="keyword">if</span> (cur == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">leftSwappedResult</span> <span class="operator">=</span> dfs(cur.left);</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">rightSwappedResult</span> <span class="operator">=</span> dfs(cur.right);</span><br><span class="line">    cur.left = rightSwappedResult;</span><br><span class="line">    cur.right = leftSwappedResult;</span><br><span class="line">    <span class="keyword">return</span> cur;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Programming-Languages </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉树</title>
      <link href="/2023/04/17/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
      <url>/2023/04/17/%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>此教程参考 <a href="https://programmercarl.com/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80.html">代码随想录-二叉树篇</a> 以及 <a href="https://labuladong.github.io/algo/di-ling-zh-bfe1b/dong-ge-da-334dd/">labuladong - 二叉树</a><br>感谢支持！</p></div><h1 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h1><h2 id="定义概念："><a href="#定义概念：" class="headerlink" title="定义概念："></a>定义概念：</h2><p><img src="/2023/04/17/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%AB%98%E5%BA%A6%E5%92%8C%E6%B7%B1%E5%BA%A6.png" alt="二叉树的高度和深度"></p><p>高度：二叉树中任意一个节点到<strong>叶子节点</strong>的距离 &lt;- 经常用<strong>后序遍历</strong>解决问题</p><ul><li>通过将子节点的高度返回给父节点父节点高度 +1 即可解决问题</li></ul><p>深度：二叉树中任意一个节点到<strong>根节点</strong>的距离 &lt;- 经常用<strong>前序遍历</strong>解决问题</p><ul><li>一往下就深度就 +1</li></ul><h2 id="思维方法："><a href="#思维方法：" class="headerlink" title="思维方法："></a>思维方法：</h2><p>遇到一道二叉树的题目时的<strong>通用思考</strong>过程是：</p><p>1、是否可以通过遍历一遍二叉树得到答案？如果可以，用一个 traverse 函数配合外部变量来实现。</p><p>2、是否可以定义一个递归函数，通过子问题（子树）的答案推导出原问题的答案？如果可以，写出这个递归函数的定义，并充分利用这个函数的返回值。</p><p>3、无论使用哪一种思维模式，你都要明白二叉树的每一个节点需要做什么，需要在什么时候（前中后序）做。</p><p>关于后序遍历：</p><p>后序遍历好在：前序位置的代码只能从<strong>函数参数中获取父节点传递来的数据</strong>，而后序位置的代码<strong>不仅可以获取参数数据，还可以获取到子树通过函数返回值传递回来的数据。</strong></p><p><strong>一旦发现题目和子树有关，那大概率要给函数设置合理的定义和返回值，在后序位置写代码了</strong>。</p><blockquote><p>根据刷题经验的补充：可以尝试把树抽象成为数组，来看看用数组怎么解决问题</p></blockquote><h2 id="递归遍历"><a href="#递归遍历" class="headerlink" title="递归遍历"></a>递归遍历</h2><blockquote><p>🤣 一入递归深似海，走到尽头出不来 :P</p></blockquote><ol><li>确定递归函数的参数和返回值</li><li>确定终止条件</li><li>确定单层递归的逻辑</li></ol><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><ul><li>144.二叉树的前序遍历</li><li>145.二叉树的后序遍历</li><li>94.二叉树的中序遍历</li></ul><p>核心就是 traverse function：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">traversalMain</span><span class="params">(TreeNode root)</span> {</span><br><span class="line">    List&lt;Integer&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    traverse(root, res);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">traverse</span><span class="params">(TreeNode cur, List&lt;Integer&gt; res)</span> {</span><br><span class="line">  <span class="keyword">if</span> (cur == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">  <span class="comment">// res.add(cur.val); &lt;- 前序遍历位置</span></span><br><span class="line">  traverse(cur.left, res);</span><br><span class="line">  <span class="comment">// res.add(cur.val); &lt;- 中序遍历位置</span></span><br><span class="line">  traverse(cur.right, res);</span><br><span class="line">  <span class="comment">// res.add(cur.val); &lt;- 后序遍历位置</span></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="迭代遍历"><a href="#迭代遍历" class="headerlink" title="迭代遍历"></a>迭代遍历</h2><p>其实就是用迭代法实现前中后序的遍历</p><blockquote><p>前序 中左右 </p><p>中序 左中右 </p><p>后序 左右中</p></blockquote><p>前序和后序可以归类为一种而中序略微有些差别：</p><p>前序和中序可以被归类为 类似于层序遍历的遍历：</p><p>对于前序来说由于我们需要的结果为 中左右 那么借助栈的先进后出的性质我们需要放入中/根 (pop) 右左：</p><p><img src="/2023/04/17/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86%EF%BC%88%E8%BF%AD%E4%BB%A3%E6%B3%95%EF%BC%89.gif" alt="二叉树前序遍历（迭代法）"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">preorderTraversal</span><span class="params">(TreeNode root)</span> {</span><br><span class="line">    <span class="comment">// 迭代法：前序需要满足 中左右 的遍历顺序</span></span><br><span class="line">    Deque&lt;TreeNode&gt; dq = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">    List&lt;Integer&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> res;</span><br><span class="line">    dq.addLast(root);</span><br><span class="line">    <span class="keyword">while</span> (!dq.isEmpty()) {</span><br><span class="line">        <span class="keyword">if</span> (dq.peekLast() == <span class="literal">null</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">cur</span> <span class="operator">=</span> dq.pollLast();</span><br><span class="line">        res.add(cur.val);</span><br><span class="line">        <span class="keyword">if</span> (cur.right != <span class="literal">null</span>) dq.addLast(cur.right);</span><br><span class="line">        <span class="keyword">if</span> (cur.left != <span class="literal">null</span>) dq.addLast(cur.left);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>对于后序遍历来说，我们只需要完成如下的操作：</p><ol><li>调整层里的右左（前序） -&gt; 左右（后序）</li><li>反转结果即可</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">postorderTraversal</span><span class="params">(TreeNode root)</span> {</span><br><span class="line">    <span class="comment">// 迭代法：后序 需要满足 左右中 的遍历顺序</span></span><br><span class="line">    <span class="comment">// 前序 中左右</span></span><br><span class="line">    <span class="comment">// 通过 中右左 -&gt; 左右中 来达成效果</span></span><br><span class="line">    Deque&lt;TreeNode&gt; dq = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">    List&lt;Integer&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> res;</span><br><span class="line">    dq.addLast(root);</span><br><span class="line">    <span class="keyword">while</span> (!dq.isEmpty()) {</span><br><span class="line">        <span class="keyword">if</span> (dq.peekLast() == <span class="literal">null</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">cur</span> <span class="operator">=</span> dq.pollLast();</span><br><span class="line">        res.add(cur.val);</span><br><span class="line">        <span class="keyword">if</span> (cur.left != <span class="literal">null</span>) dq.addLast(cur.left);</span><br><span class="line">        <span class="keyword">if</span> (cur.right != <span class="literal">null</span>) dq.addLast(cur.right);</span><br><span class="line">    }</span><br><span class="line">    Collections.reverse(res);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>中序遍历会有所不同，因为现在的中不在是上一层的根，而是需要左节点遍历完成后的祖先。因此，我们需要一个额外的遍历的指针来记录visit过的节点：</p><p><img src="/2023/04/17/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86%EF%BC%88%E8%BF%AD%E4%BB%A3%E6%B3%95%EF%BC%89.gif" alt="二叉树中序遍历（迭代法）"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">inorderTraversal</span><span class="params">(TreeNode root)</span> {</span><br><span class="line">    <span class="comment">// 迭代法的中序遍历：左中右</span></span><br><span class="line">    Deque&lt;TreeNode&gt; dq = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">    List&lt;Integer&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">  <span class="comment">// cur 这里只作为一个跟踪的指针用，换成root也没有区别。</span></span><br><span class="line">  <span class="type">TreeNode</span> <span class="variable">cur</span> <span class="operator">=</span> root;</span><br><span class="line">    <span class="keyword">while</span> (!dq.isEmpty() || cur != <span class="literal">null</span>) {</span><br><span class="line">        <span class="keyword">if</span> (cur != <span class="literal">null</span>) {</span><br><span class="line">            dq.addLast(cur);</span><br><span class="line">            cur = cur.left;</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            cur = dq.pollLast();</span><br><span class="line">            res.add(cur.val);</span><br><span class="line">            cur = cur.right;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="统一后的迭代遍历"><a href="#统一后的迭代遍历" class="headerlink" title="统一后的迭代遍历"></a>统一后的迭代遍历</h3><p>为了风格统一，来用以下的方法来做三序的迭代法本质上是用了<strong>标记法</strong>：<strong>就是要处理的节点放入栈之后，紧接着放入一个空指针作为标记。</strong></p><p>中序遍历的标记法例子：</p><p><img src="/2023/04/17/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86%E8%BF%AD%E4%BB%A3%EF%BC%88%E7%BB%9F%E4%B8%80%E5%86%99%E6%B3%95%EF%BC%89.gif" alt="中序遍历迭代（统一写法）"></p><h4 id="前序遍历"><a href="#前序遍历" class="headerlink" title="前序遍历"></a>前序遍历</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">preorderTraversal</span><span class="params">(TreeNode root)</span> {</span><br><span class="line">        List&lt;Integer&gt; result = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        Stack&lt;TreeNode&gt; st = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (root != <span class="literal">null</span>) st.push(root);</span><br><span class="line">        <span class="keyword">while</span> (!st.empty()) {</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> st.peek();</span><br><span class="line">            <span class="keyword">if</span> (node != <span class="literal">null</span>) {</span><br><span class="line">                st.pop(); <span class="comment">// 将该节点弹出，避免重复操作，下面再将右中左节点添加到栈中</span></span><br><span class="line">                <span class="keyword">if</span> (node.right!=<span class="literal">null</span>) st.push(node.right);  <span class="comment">// 添加右节点（空节点不入栈）</span></span><br><span class="line">                <span class="keyword">if</span> (node.left!=<span class="literal">null</span>) st.push(node.left);    <span class="comment">// 添加左节点（空节点不入栈）</span></span><br><span class="line">                st.push(node);                          <span class="comment">// 添加中节点</span></span><br><span class="line">                st.push(<span class="literal">null</span>); <span class="comment">// 中节点访问过，但是还没有处理，加入空节点做为标记。</span></span><br><span class="line">                </span><br><span class="line">            } <span class="keyword">else</span> { <span class="comment">// 只有遇到空节点的时候，才将下一个节点放进结果集</span></span><br><span class="line">                st.pop();           <span class="comment">// 将空节点弹出</span></span><br><span class="line">                node = st.peek();    <span class="comment">// 重新取出栈中元素</span></span><br><span class="line">                st.pop();</span><br><span class="line">                result.add(node.val); <span class="comment">// 加入到结果集</span></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">inorderTraversal</span><span class="params">(TreeNode root)</span> {</span><br><span class="line">        List&lt;Integer&gt; result = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    Stack&lt;TreeNode&gt; st = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (root != <span class="literal">null</span>) st.push(root);</span><br><span class="line">    <span class="keyword">while</span> (!st.empty()) {</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> st.peek();</span><br><span class="line">        <span class="keyword">if</span> (node != <span class="literal">null</span>) {</span><br><span class="line">            st.pop(); <span class="comment">// 将该节点弹出，避免重复操作，下面再将右中左节点添加到栈中</span></span><br><span class="line">            <span class="keyword">if</span> (node.right!=<span class="literal">null</span>) st.push(node.right);  <span class="comment">// 添加右节点（空节点不入栈）</span></span><br><span class="line">            st.push(node);                          <span class="comment">// 添加中节点</span></span><br><span class="line">            st.push(<span class="literal">null</span>); <span class="comment">// 中节点访问过，但是还没有处理，加入空节点做为标记。</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (node.left!=<span class="literal">null</span>) st.push(node.left);    <span class="comment">// 添加左节点（空节点不入栈）</span></span><br><span class="line">        } <span class="keyword">else</span> { <span class="comment">// 只有遇到空节点的时候，才将下一个节点放进结果集</span></span><br><span class="line">            st.pop();           <span class="comment">// 将空节点弹出</span></span><br><span class="line">            node = st.peek();    <span class="comment">// 重新取出栈中元素</span></span><br><span class="line">            st.pop();</span><br><span class="line">            result.add(node.val); <span class="comment">// 加入到结果集</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">   <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">postorderTraversal</span><span class="params">(TreeNode root)</span> {</span><br><span class="line">        List&lt;Integer&gt; result = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        Stack&lt;TreeNode&gt; st = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (root != <span class="literal">null</span>) st.push(root);</span><br><span class="line">        <span class="keyword">while</span> (!st.empty()) {</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> st.peek();</span><br><span class="line">            <span class="keyword">if</span> (node != <span class="literal">null</span>) {</span><br><span class="line">                st.pop(); <span class="comment">// 将该节点弹出，避免重复操作，下面再将右中左节点添加到栈中</span></span><br><span class="line">                st.push(node);                          <span class="comment">// 添加中节点</span></span><br><span class="line">                st.push(<span class="literal">null</span>); <span class="comment">// 中节点访问过，但是还没有处理，加入空节点做为标记。</span></span><br><span class="line">                <span class="keyword">if</span> (node.right!=<span class="literal">null</span>) st.push(node.right);  <span class="comment">// 添加右节点（空节点不入栈）</span></span><br><span class="line">                <span class="keyword">if</span> (node.left!=<span class="literal">null</span>) st.push(node.left);    <span class="comment">// 添加左节点（空节点不入栈）         </span></span><br><span class="line">                               </span><br><span class="line">            } <span class="keyword">else</span> { <span class="comment">// 只有遇到空节点的时候，才将下一个节点放进结果集</span></span><br><span class="line">                st.pop();           <span class="comment">// 将空节点弹出</span></span><br><span class="line">                node = st.peek();    <span class="comment">// 重新取出栈中元素</span></span><br><span class="line">                st.pop();</span><br><span class="line">                result.add(node.val); <span class="comment">// 加入到结果集</span></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">   }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="层序遍历"><a href="#层序遍历" class="headerlink" title="层序遍历"></a>层序遍历</h2><p>核心：使用<strong>队列</strong> 因为有<strong>先入先出</strong>的性质 + 用 size 来维护队列（当前层的元素数量，从而保证元素是固定于这一层）</p><blockquote><p>队列和栈真是好兄弟，队列来做BFS，栈来做DFS <span class="github-emoji"><span>😆</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p></blockquote><p><img src="/2023/04/17/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86.gif" alt="二叉树的层序遍历"></p><ol><li>根节点入队</li><li>loop while(!q.isempty())</li><li>int len = q.size()</li><li>while (Len– &gt; 0)</li></ol><h3 id="例题："><a href="#例题：" class="headerlink" title="例题："></a>例题：</h3><ul><li>102.二叉树的层序遍历</li><li>107.二叉树的层次遍历II</li><li>199.二叉树的右视图</li><li>637.二叉树的层平均值</li><li>429.N叉树的层序遍历</li><li>515.在每个树行中找最大值</li><li>116.填充每个节点的下一个右侧节点指针</li><li>117.填充每个节点的下一个右侧节点指针II</li><li>104.二叉树的最大深度</li><li>111.二叉树的最小深度</li></ul><blockquote><p>太多了… 仅需几道题详解</p></blockquote><h4 id="102-二叉树的层序遍历"><a href="#102-二叉树的层序遍历" class="headerlink" title="102. 二叉树的层序遍历"></a><a href="https://leetcode.cn/problems/binary-tree-level-order-traversal/">102. 二叉树的层序遍历</a></h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">levelOrder</span><span class="params">(TreeNode root)</span> {</span><br><span class="line">    Deque&lt;TreeNode&gt; dq = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> res;</span><br><span class="line">    dq.addLast(root); <span class="comment">// &lt;- 头节点入队</span></span><br><span class="line">    <span class="keyword">while</span> (!dq.isEmpty()) {</span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> dq.size(); <span class="comment">// &lt;- get 当前的 size</span></span><br><span class="line">        List&lt;Integer&gt; cur = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++) {</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">top</span> <span class="operator">=</span> dq.pollFirst();</span><br><span class="line">            cur.add(top.val);</span><br><span class="line">            <span class="keyword">if</span> (top.left != <span class="literal">null</span>) dq.addLast(top.left);</span><br><span class="line">            <span class="keyword">if</span> (top.right != <span class="literal">null</span>) dq.addLast(top.right);</span><br><span class="line">        }</span><br><span class="line">        res.add(cur);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="107-二叉树的层序遍历-II"><a href="#107-二叉树的层序遍历-II" class="headerlink" title="107. 二叉树的层序遍历 II"></a><a href="https://leetcode.cn/problems/binary-tree-level-order-traversal-ii/">107. 二叉树的层序遍历 II</a></h4><p>唯一的区别就是用linkedlist把一层的结果加到头部即可</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">levelOrderBottom</span><span class="params">(TreeNode root)</span> {</span><br><span class="line">    LinkedList&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    Deque&lt;TreeNode&gt; dq = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> res;</span><br><span class="line">    dq.addLast(root);</span><br><span class="line">    <span class="keyword">while</span> (!dq.isEmpty()) {</span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> dq.size();</span><br><span class="line">        List&lt;Integer&gt; cur = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++) {</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">curNode</span> <span class="operator">=</span> dq.pollFirst();</span><br><span class="line">            cur.add(curNode.val);</span><br><span class="line">            <span class="keyword">if</span> (curNode.left != <span class="literal">null</span>) dq.add(curNode.left);</span><br><span class="line">            <span class="keyword">if</span> (curNode.right != <span class="literal">null</span>) dq.add(curNode.right);</span><br><span class="line">        }</span><br><span class="line">        res.addFirst(cur);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="例题-1"><a href="#例题-1" class="headerlink" title="例题"></a>例题</h2><h3 id="树计算深度类问题："><a href="#树计算深度类问题：" class="headerlink" title="树计算深度类问题："></a>树计算深度类问题：</h3><blockquote><p>见 <a href="/2023/04/27/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B9%8B%E8%AE%A1%E7%AE%97%E6%B7%B1%E5%BA%A6/" title="二叉树之计算深度">二叉树之计算深度</a> 中包含计算深度类问题的习题以及思路</p></blockquote><h3 id="求节点和的问题"><a href="#求节点和的问题" class="headerlink" title="求节点和的问题"></a>求节点和的问题</h3><h4 id="404-左叶子之和"><a href="#404-左叶子之和" class="headerlink" title="404. 左叶子之和"></a><a href="https://leetcode.cn/problems/sum-of-left-leaves/">404. 左叶子之和</a></h4><p>此题可以分解为三个问题：</p><ol><li>求所有节点的和, 很简单，就是左右树的节点和加root节点</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 先序遍历求所有节点值之和</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sumOfTrees</span><span class="params">(TreeNode root)</span> {</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) {</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="type">int</span> <span class="variable">leave</span> <span class="operator">=</span> root.val;</span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> sumOfTrees(root.left);</span><br><span class="line">    <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> sumOfTrees(root.right);</span><br><span class="line">    <span class="keyword">return</span> left + right + leave;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>求所有叶子结点的和, 也很简单，就只是多了一个判断叶子结点的条件：<code>if (root.left == null &amp;&amp; root.right == null)</code></li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 先序遍历求所有叶子节点值之和</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sumOfLeaves</span><span class="params">(TreeNode root)</span> {</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) {</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="type">int</span> <span class="variable">leave</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 叶子节点</span></span><br><span class="line">    <span class="keyword">if</span> (root.left == <span class="literal">null</span> &amp;&amp; root.right == <span class="literal">null</span>) {</span><br><span class="line">        leave = root.val;</span><br><span class="line">    }</span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> sumOfLeaves(root.left);</span><br><span class="line">    <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> sumOfLeaves(root.right);</span><br><span class="line">    <span class="keyword">return</span> left + right + leave;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>求左叶子结点的和, 也不难，无非是分成两步：<ol><li>该节点是其父节点的左子节点。</li><li>该节点是一个叶子节点，即它没有左右子节点。</li></ol></li></ol><p>即：<code>if (cur.left != null &amp;&amp; cur.left.left == null &amp;&amp; cur.left.right == null)</code></p><p>因此借助二叉树的思维框架我们可以用traverse + 额外变量的方式来解决问题：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sumOfLeftLeaves</span><span class="params">(TreeNode root)</span> {</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    dfs(root);</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(TreeNode cur)</span> {</span><br><span class="line">    <span class="keyword">if</span> (cur == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (cur.left != <span class="literal">null</span> &amp;&amp; cur.left.left == <span class="literal">null</span> &amp;&amp; cur.left.right == <span class="literal">null</span>) {</span><br><span class="line">        <span class="comment">// cur.left 是一个左叶子节点</span></span><br><span class="line">        sum += cur.left.val;</span><br><span class="line">    }</span><br><span class="line">    dfs(cur.left);</span><br><span class="line">    dfs(cur.right);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="构造类问题"><a href="#构造类问题" class="headerlink" title="构造类问题"></a>构造类问题</h3><blockquote><p>见 <a href="/2023/04/27/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B9%8B%E6%9E%84%E9%80%A0%E7%B1%BB%E9%97%AE%E9%A2%98/" title="二叉树之构造类问题">二叉树之构造类问题</a> 中包含构造类问题的习题以及思路</p></blockquote><h3 id="BST-二叉搜索树相关题目"><a href="#BST-二叉搜索树相关题目" class="headerlink" title="BST 二叉搜索树相关题目"></a>BST 二叉搜索树相关题目</h3><blockquote><p>见 <a href="/2023/04/27/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/" title="二叉搜索树">二叉搜索树</a> 中包含二叉搜索树问题的习题以及思路</p></blockquote><h3 id="二叉树公共祖先"><a href="#二叉树公共祖先" class="headerlink" title="二叉树公共祖先"></a>二叉树公共祖先</h3><blockquote><p>见 <a href="/2023/04/27/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B9%8B%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/" title="二叉树之公共祖先">二叉树之公共祖先</a> 中包含公共祖先的习题以及思路</p></blockquote><h3 id="其他例题"><a href="#其他例题" class="headerlink" title="其他例题"></a>其他例题</h3><h4 id="226-翻转二叉树"><a href="#226-翻转二叉树" class="headerlink" title="226. 翻转二叉树"></a><a href="https://leetcode.cn/problems/invert-binary-tree/">226. 翻转二叉树</a></h4><p>二叉树的递归分为<strong>「遍历」</strong>和<strong>「分解问题」</strong>两种思维模式，这道题可以同时使用两种思维模式。</p><h5 id="方法1-递归-分解问题"><a href="#方法1-递归-分解问题" class="headerlink" title="方法1: 递归 - 分解问题"></a>方法1: 递归 - 分解问题</h5><p>第一个自己写出来的递归，‼️终于‼️感受到为什么说递归讲究的就是一个自信 <span class="github-emoji"><span>😆</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">invertTree</span><span class="params">(TreeNode root)</span> {</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">res</span> <span class="operator">=</span> dfs(root);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> TreeNode <span class="title function_">dfsQuestionsDivide</span><span class="params">(TreeNode cur)</span> {</span><br><span class="line">    <span class="keyword">if</span> (cur == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">leftSwappedResult</span> <span class="operator">=</span> dfsQuestionsDivide(cur.left);</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">rightSwappedResult</span> <span class="operator">=</span> dfsQuestionsDivide(cur.right);</span><br><span class="line">    cur.left = rightSwappedResult;</span><br><span class="line">    cur.right = leftSwappedResult;</span><br><span class="line">    <span class="keyword">return</span> cur;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h5 id="方法2-递归-遍历"><a href="#方法2-递归-遍历" class="headerlink" title="方法2: 递归 - 遍历"></a>方法2: 递归 - 遍历</h5><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">invertTree</span><span class="params">(TreeNode root)</span> {</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">res</span> <span class="operator">=</span> dfsTraverse(root);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> TreeNode <span class="title function_">dfsTraverse</span><span class="params">(TreeNode cur)</span> {</span><br><span class="line">    <span class="keyword">if</span> (cur == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"> <span class="comment">/**** 前序位置 ****/</span></span><br><span class="line">    <span class="comment">// 每一个节点需要做的事就是交换它的左右子节点</span></span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">tmp</span> <span class="operator">=</span> cur.left;</span><br><span class="line">    cur.left = cur.right;</span><br><span class="line">    cur.right = tmp;</span><br><span class="line"></span><br><span class="line">    dfsTraverse(cur.left);</span><br><span class="line">    dfsTraverse(cur.right);</span><br><span class="line">    <span class="keyword">return</span> cur;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="257-二叉树的所有路径"><a href="#257-二叉树的所有路径" class="headerlink" title="257. 二叉树的所有路径"></a><a href="https://leetcode.cn/problems/binary-tree-paths/">257. 二叉树的所有路径</a></h4><p>这是一道backtrack的题，这里我先给出代码再解释为什么 root.left后没有 <strong>显性</strong> 的removeLast() 操作</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;String&gt; <span class="title function_">binaryTreePaths</span><span class="params">(TreeNode root)</span> {</span><br><span class="line">    <span class="comment">// backtrack</span></span><br><span class="line">    LinkedList&lt;String&gt; res = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    LinkedList&lt;String&gt; nodesList = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    backtrack(root, res, nodesList);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backtrack</span><span class="params">(TreeNode root, List&lt;String&gt; res, LinkedList&lt;String&gt; nodesList)</span> {</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (root.left == <span class="literal">null</span> &amp;&amp; root.right == <span class="literal">null</span>) {</span><br><span class="line">        nodesList.addLast(String.valueOf(root.val));</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> String.join(<span class="string">"-&gt;"</span>, nodesList);</span><br><span class="line">        res.add(s);</span><br><span class="line">        nodesList.removeLast();</span><br><span class="line">    }</span><br><span class="line">    nodesList.addLast(String.valueOf(root.val));</span><br><span class="line">    backtrack(root.left, res, nodesList);</span><br><span class="line">    backtrack(root.right, res, nodesList);</span><br><span class="line">    <span class="comment">// 撤销操作</span></span><br><span class="line">    nodesList.removeLast();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>假设我们有以下二叉树：</p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">    1</span></span><br><span class="line"><span class="code">   / \</span></span><br><span class="line"><span class="code">  2   3</span></span><br><span class="line"><span class="code"> / \</span></span><br><span class="line"><span class="code">4   5</span></span><br></pre></td></tr></tbody></table></figure><p>当我们调用 <code>traverse(root)</code> 时，执行顺序如下：</p><ol><li>添加 1 到 <code>path</code>，此时 <code>path = [1]</code>。</li><li>调用 <code>traverse(root.left)</code> 以遍历左子树（节点 2）。<ol><li>添加 2 到 <code>path</code>，此时 <code>path = [1, 2]</code>。 </li><li>调用 <code>traverse(root.left)</code> 以遍历左子树（节点 4）。 <ol><li>添加 4 到 <code>path</code>，此时 <code>path = [1, 2, 4]</code>。</li><li>4 是叶子节点，将 <code>path</code> 添加到 <code>res</code>，执行 <code>path.removeLast()</code>，从 <code>path</code> 中移除 4，此时 <code>path = [1, 2]</code>。</li><li>返回上一层递归调用（节点 2）。</li></ol></li><li>调用 <code>traverse(root.right)</code> 以遍历右子树（节点 5）。 <ol><li>添加 5 到 <code>path</code>，此时 <code>path = [1, 2, 5]</code>。 ii. 5 是叶子节点，将 <code>path</code> 添加到 <code>res</code>，执行 <code>path.removeLast()</code>，从 <code>path</code> 中移除 5，此时 <code>path = [1, 2]</code>。 iii. 返回上一层递归调用（节点 2）。</li></ol></li><li>在后序遍历位置，执行 <code>path.removeLast()</code>，从 <code>path</code> 中移除 2，此时 <code>path = [1]</code>。</li></ol></li><li>调用 <code>traverse(root.right)</code> 以遍历右子树（节点 3）。 <ol><li>添加 3 到 <code>path</code>，此时 <code>path = [1, 3]</code>。 </li><li>3 是叶子节点，将 <code>path</code> 添加到 <code>res</code>，执行 <code>path.removeLast()</code>，从 <code>path</code> 中移除 3，此时 <code>path = [1]</code>。</li></ol></li><li>在后序遍历位置，执行 <code>path.removeLast()</code>，从 <code>path</code> 中移除 1，此时 <code>path</code> 为空。</li></ol><p>在这个例子中，我们可以看到，在每次递归调用返回时，<code>path.removeLast()</code> 都会被执行。这样，我们可以确保在遍历过程中，<code>path</code> 变量始终正确地表示从根节点到当前节点的路径。在遍历左子树（节点 2）时，<code>path.removeLast()</code> 被执行了两次：一次是在遍历节点 4 后，另一次是在遍历节点 5 后。这样，我们可以确保在遍历右子树（节点 3）之前，<code>path</code> 变量已经从左子树遍历的影响中恢复。这可以确保在继续遍历过程时，<code>path</code> 变量正确地表示从根节点到当前节点的路径。</p><p>继续遍历右子树（节点 3）：</p><ol><li>调用 <code>traverse(root.right)</code> 以遍历右子树（节点 3）。<ol><li>添加 3 到 <code>path</code>，此时 <code>path = [1, 3]</code>。 </li><li>3 是叶子节点，将 <code>path</code> 添加到 <code>res</code>，执行 <code>path.removeLast()</code>，从 <code>path</code> 中移除 3，此时 <code>path = [1]</code>。</li></ol></li><li>在后序遍历位置，执行 <code>path.removeLast()</code>，从 <code>path</code> 中移除 1，此时 <code>path</code> 为空。</li></ol><p>现在，整个树的遍历已经完成，<code>res</code> 变量包含了所有从根节点到叶子节点的路径，即 <code>["1-&gt;2-&gt;4", "1-&gt;2-&gt;5", "1-&gt;3"]</code>。</p>]]></content>
      
      
      <categories>
          
          <category> Algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单调队列和单调栈</title>
      <link href="/2023/04/16/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97%E5%92%8C%E5%8D%95%E8%B0%83%E6%A0%88/"/>
      <url>/2023/04/16/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97%E5%92%8C%E5%8D%95%E8%B0%83%E6%A0%88/</url>
      
        <content type="html"><![CDATA[<h1 id="单调队列和单调栈"><a href="#单调队列和单调栈" class="headerlink" title="单调队列和单调栈"></a>单调队列和单调栈</h1><p>概念：DIY的一个队列，队列中的元素是单调递增或者单调递减</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="239-滑动窗口最大值"><a href="#239-滑动窗口最大值" class="headerlink" title="239. 滑动窗口最大值"></a><a href="https://leetcode.cn/problems/sliding-window-maximum/">239. 滑动窗口最大值</a></h3><p>需要自己设计一个数据结构支持：</p><ol><li>Pop()</li><li>Push()</li><li>getMaxValue()</li></ol><p>数据结构内部<strong>单调递减</strong>，也就是单调队列</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] maxSlidingWindow(<span class="type">int</span>[] nums, <span class="type">int</span> k) {</span><br><span class="line">        <span class="type">MonolithicDownQueue</span> <span class="variable">monolithicDownQueue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MonolithicDownQueue</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (right &lt; k) {</span><br><span class="line">            monolithicDownQueue.push(nums[right]);</span><br><span class="line">            right++;</span><br><span class="line">        }</span><br><span class="line">        res.add(monolithicDownQueue.getMaxValue());</span><br><span class="line">        <span class="keyword">while</span> (right &lt; nums.length) {</span><br><span class="line">            monolithicDownQueue.pop(nums[left]);</span><br><span class="line">            monolithicDownQueue.push(nums[right]);</span><br><span class="line">            res.add(monolithicDownQueue.getMaxValue());</span><br><span class="line">            left++;</span><br><span class="line">            right++;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> res.stream().mapToInt(i -&gt; i).toArray();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">MonolithicDownQueue</span> {</span><br><span class="line">        Deque&lt;Integer&gt; dq = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">pop</span><span class="params">(<span class="type">int</span> value)</span> {</span><br><span class="line">            <span class="keyword">if</span> (!dq.isEmpty() &amp;&amp; dq.peekFirst() == value) {</span><br><span class="line">                dq.removeFirst();</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> value)</span> {</span><br><span class="line">            <span class="comment">// 保证数据结构内部单调递减即碰见新元素时，如果新元素大于队尾元素，移除队尾的元素</span></span><br><span class="line">            <span class="keyword">while</span> (!dq.isEmpty() &amp;&amp; value &gt; dq.peekLast()) {</span><br><span class="line">                dq.removeLast();</span><br><span class="line">            }</span><br><span class="line">            dq.addLast(value);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="title function_">getMaxValue</span><span class="params">()</span> {</span><br><span class="line">            <span class="keyword">return</span> dq.isEmpty() ? <span class="number">0</span> : dq.peekFirst();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 单调队列和单调栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java碎碎念</title>
      <link href="/2023/04/15/Java%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
      <url>/2023/04/15/Java%E7%A2%8E%E7%A2%8E%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>收集些容易忽视的Java的用法</p></div><h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><h2 id="Collections-Interface"><a href="#Collections-Interface" class="headerlink" title="Collections Interface"></a>Collections Interface</h2><p><img src="/2023/04/15/Java%E7%A2%8E%E7%A2%8E%E5%BF%B5/Collections-in-Java.png" alt="Collections Interface"></p><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><h4 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h4><h4 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h4><p>LinkedList Methods:</p><table><thead><tr><th>Methods</th><th>Description</th></tr></thead><tbody><tr><td>addFirst()</td><td>Adds an item to the beginning of the list.</td></tr><tr><td>addLast()</td><td>Add an item to the end of the list</td></tr><tr><td>removeFirst()</td><td>Remove an item from the beginning of the list.</td></tr><tr><td>removeLast()</td><td>Remove an item from the end of the list</td></tr><tr><td>getFirst()</td><td>Get the item at the beginning of the list</td></tr><tr><td>getLast()</td><td>Get the item at the end of the list</td></tr></tbody></table><h3 id="Deque"><a href="#Deque" class="headerlink" title="Deque"></a>Deque</h3><h4 id="LinkedList-实现"><a href="#LinkedList-实现" class="headerlink" title="LinkedList 实现"></a>LinkedList 实现</h4><h4 id="ArrayDeque-实现"><a href="#ArrayDeque-实现" class="headerlink" title="ArrayDeque 实现"></a>ArrayDeque 实现</h4><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>其实就是array和linkedlist区别，大部分时间里array会比较快。但是当添加元素时超了array的容积，则ArrayDeque需要resize.</p><h2 id="Stream"><a href="#Stream" class="headerlink" title="Stream()"></a>Stream()</h2><ol><li>List to array one line:</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List.stream().mapToInt(i -&gt; i).toArray();</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>Print elements in an int[]:</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Arrays.stream(ret).forEach(a -&gt; System.out.print(a + <span class="string">" "</span>));</span><br></pre></td></tr></tbody></table></figure><h2 id="Pair"><a href="#Pair" class="headerlink" title="Pair"></a>Pair</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Pair&lt;Integer, String&gt; pair = <span class="keyword">new</span> <span class="title class_">Pair</span>&lt;&gt;(<span class="number">1</span>, <span class="string">"One"</span>);</span><br><span class="line"><span class="type">Integer</span> <span class="variable">key</span> <span class="operator">=</span> pair.getKey();</span><br><span class="line"><span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> pair.getValue();</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Programming-Languages </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>队列和栈</title>
      <link href="/2023/04/15/%E9%98%9F%E5%88%97%E5%92%8C%E6%A0%88/"/>
      <url>/2023/04/15/%E9%98%9F%E5%88%97%E5%92%8C%E6%A0%88/</url>
      
        <content type="html"><![CDATA[<div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>此教程参考 <a href="https://programmercarl.com/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80.html">代码随想录-队列与栈篇</a><br>感谢支持！</p></div><h1 id="队列-Queue-and-栈-Stack"><a href="#队列-Queue-and-栈-Stack" class="headerlink" title="队列 (Queue) and 栈 (Stack)"></a>队列 (Queue) and 栈 (Stack)</h1><blockquote><a href="/2023/04/05/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95-%E6%80%BB%E6%B1%87/" title="代码随想录-总汇">代码随想录-总汇</a> 中包含队列和栈的基础知识</blockquote><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="232-用栈实现队列"><a href="#232-用栈实现队列" class="headerlink" title="232. 用栈实现队列"></a><a href="https://leetcode.cn/problems/implement-queue-using-stacks/">232. 用栈实现队列</a></h3><p>双栈实现队列题</p><p>很简单，一个栈负责暂时储存元素，另一个栈若为空的时候从第一个栈拿元素 aka <strong>一个输入栈，一个输出栈</strong>，这里要注意输入栈和输出栈的关系。</p><p><img src="/2023/04/15/%E9%98%9F%E5%88%97%E5%92%8C%E6%A0%88/232.%E7%94%A8%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97.gif" alt="232.用栈实现队列"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyQueue</span> {</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    Deque&lt;Integer&gt; dq1, dq2;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyQueue</span><span class="params">()</span> {</span><br><span class="line">        dq1 = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        dq2 = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> x)</span> {</span><br><span class="line">        count++;</span><br><span class="line">        dq1.push(x);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pop</span><span class="params">()</span> {</span><br><span class="line">        count--;</span><br><span class="line">        moveElements();</span><br><span class="line">        <span class="keyword">return</span> dq2.pop();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">moveElements</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">if</span> (dq2.isEmpty()) {</span><br><span class="line">            <span class="keyword">while</span> (!dq1.isEmpty()) {</span><br><span class="line">                <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> dq1.pop();</span><br><span class="line">                dq2.push(x);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">peek</span><span class="params">()</span> {</span><br><span class="line">        moveElements();</span><br><span class="line">        <span class="keyword">return</span> dq2.peek();</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">empty</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> count == <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="225-用队列实现栈"><a href="#225-用队列实现栈" class="headerlink" title="225. 用队列实现栈"></a><a href="https://leetcode.cn/problems/implement-stack-using-queues/">225. 用队列实现栈</a></h3><p>用两个数组时，核心在于一个辅助数组用于置换，从而始终保持有一个数组的头为最后一个进来的元素，以达到FILO的结果：</p><p><img src="/2023/04/15/%E9%98%9F%E5%88%97%E5%92%8C%E6%A0%88/225_%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E6%A0%88.gif" alt="225_队列实现栈"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyStack</span> {</span><br><span class="line">    Queue&lt;Integer&gt; q1, q2;</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyStack</span><span class="params">()</span> {</span><br><span class="line">        q1 = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        q2 = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> x)</span> {</span><br><span class="line">        q2.offer(x);</span><br><span class="line">        <span class="keyword">while</span> (!q1.isEmpty()) {</span><br><span class="line">            q2.offer(q1.poll());</span><br><span class="line">        }</span><br><span class="line">        Queue&lt;Integer&gt; temp = q1;</span><br><span class="line">        q1 = q2;</span><br><span class="line">        q2 = temp;</span><br><span class="line">        count++;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pop</span><span class="params">()</span> {</span><br><span class="line">        count--;</span><br><span class="line">        <span class="keyword">return</span> q1.poll();</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">top</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> q1.peek();</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">empty</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> count == <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这道题也可以只用一个Queue来做：</p><p>其实相当于形成了个循环队列，只不过开头一定是新进来的那个元素</p><p><img src="/2023/04/15/%E9%98%9F%E5%88%97%E5%92%8C%E6%A0%88/225_%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E6%A0%88_%E4%B8%80%E4%B8%AA%E9%98%9F%E5%88%97%E7%89%88.gif" alt="225-OneQueueVer"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyStack</span> {</span><br><span class="line">    Queue&lt;Integer&gt; q;</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyStack</span><span class="params">()</span> {</span><br><span class="line">        q = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> x)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> q.size();</span><br><span class="line">        q.offer(x);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++) {</span><br><span class="line">            q.offer(q.poll());</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pop</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> q.poll();</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">top</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> q.peek();</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">empty</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> q.isEmpty();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="20-有效的括号"><a href="#20-有效的括号" class="headerlink" title="20. 有效的括号"></a><a href="https://leetcode.cn/problems/valid-parentheses/">20. 有效的括号</a></h3><p><strong>括号匹配是使用栈解决的经典问题。</strong></p><p><img src="/2023/04/15/%E9%98%9F%E5%88%97%E5%92%8C%E6%A0%88/20.%E6%9C%89%E6%95%88%E6%8B%AC%E5%8F%B7.gif" alt="20.有效括号"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(String s)</span> {</span><br><span class="line">        <span class="type">char</span>[] s2Char = s.toCharArray();</span><br><span class="line">        Deque&lt;Character&gt; dq = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : s2Char) {</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">'('</span>) {</span><br><span class="line">                dq.push(<span class="string">')'</span>);</span><br><span class="line">            } <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">'{'</span>) {</span><br><span class="line">                dq.push(<span class="string">'}'</span>);</span><br><span class="line">            } <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">'['</span>) {</span><br><span class="line">                dq.push(<span class="string">']'</span>);</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                <span class="keyword">if</span> (dq.isEmpty() || dq.peek() != c) {</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                }</span><br><span class="line">                dq.pop();</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> dq.isEmpty();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="1047-删除字符串中的所有相邻重复项"><a href="#1047-删除字符串中的所有相邻重复项" class="headerlink" title="1047. 删除字符串中的所有相邻重复项"></a><a href="https://leetcode.cn/problems/remove-all-adjacent-duplicates-in-string/">1047. 删除字符串中的所有相邻重复项</a></h3><p><strong>本题有点像祖玛游戏</strong></p><blockquote><p>Credit to: <a href="https://leetcode.cn/problems/remove-all-adjacent-duplicates-in-string/solution/dong-hua-tu-jie-yong-zhan-bao-cun-wei-be-4u5w/">LC详解 - 负雪明烛</a></p></blockquote><p>本题要点：</p><ol><li>两个相邻且相同字符会被删除。（注意：是两个！）</li><li>删除字符串中两个相邻并且相同的字符可能会产生新的相邻并且相同的字符。 比如对于 abba ，删除 bb 之后， aa 会碰到一起，也需要继续把 aa 删掉。</li></ol><p>所以：</p><p>① 并不能一次删除操作就能达到目的；而应该在每次删除一对相邻且相同的字符之后、再看新的字符串是否存在相邻且相同的一对字符。</p><p>② 如果存在多组的相邻且相同的字符时，先删除哪一对对最终结果是没有影响的。比如对于 abbacca ，无论先删除 bb 还是先删除 cc 最终的结果都是 a 。</p><p>通过 ① 我们得出：需要用一个数据结构缓存结果，这个数据结构应该是<strong>后进先出</strong>，也就是<strong>栈</strong>！<br>通过 ② 我们得出：可以从左到右遍历一次输入字符串 S 的所有字符 Si，把 Si 跟栈顶元素比较</p><p><img src="/2023/04/15/%E9%98%9F%E5%88%97%E5%92%8C%E6%A0%88/1047_%E5%88%A0%E9%99%A4%E9%87%8D%E5%A4%8D%E9%A1%B9.gif" alt="1047_删除重复项"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">removeDuplicates</span><span class="params">(String s)</span> {</span><br><span class="line">    <span class="type">char</span>[] s2Char = s.toCharArray();</span><br><span class="line">    Deque&lt;Character&gt; dq = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">char</span> c : s2Char) {</span><br><span class="line">        <span class="keyword">if</span> (!dq.isEmpty() &amp;&amp; c == dq.peekLast()) {</span><br><span class="line">            dq.removeLast();</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            dq.addLast(c);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    <span class="keyword">while</span> (!dq.isEmpty()) {</span><br><span class="line">        sb.append(dq.removeFirst());</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> sb.toString();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="150-逆波兰表达式求值"><a href="#150-逆波兰表达式求值" class="headerlink" title="150. 逆波兰表达式求值"></a><a href="https://leetcode.cn/problems/evaluate-reverse-polish-notation/">150. 逆波兰表达式求值</a></h3><p>这是一道关于<strong>「表达式计算」</strong>的题目。所有的<strong>「表达式计算」</strong>问题都离不开<strong>「栈」</strong>。</p><p>思路总结：遇到数字压栈，遇到符号取出数字，计算，压栈更新后的数字。</p><p><img src="/2023/04/15/%E9%98%9F%E5%88%97%E5%92%8C%E6%A0%88/150.%E9%80%86%E6%B3%A2%E5%85%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC.gif" alt="150.逆波兰表达式求值"></p><p>用Deque：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">evalRPN</span><span class="params">(String[] tokens)</span> {</span><br><span class="line">    Deque&lt;String&gt; dq = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (String token : tokens) {</span><br><span class="line">        <span class="keyword">if</span> (token.equals(<span class="string">"+"</span>)) {</span><br><span class="line">            <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> Integer.parseInt(dq.removeLast());</span><br><span class="line">            <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> Integer.parseInt(dq.removeLast());</span><br><span class="line">            <span class="type">String</span> <span class="variable">res</span> <span class="operator">=</span> String.valueOf(left + right);</span><br><span class="line">            dq.addLast(res);</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (token.equals(<span class="string">"*"</span>)) {</span><br><span class="line">            <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> Integer.parseInt(dq.removeLast());</span><br><span class="line">            <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> Integer.parseInt(dq.removeLast());</span><br><span class="line">            <span class="type">String</span> <span class="variable">res</span> <span class="operator">=</span> String.valueOf(left * right);</span><br><span class="line">            dq.addLast(res);</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (token.equals(<span class="string">"-"</span>)) {</span><br><span class="line">            <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> Integer.parseInt(dq.removeLast());</span><br><span class="line">            <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> Integer.parseInt(dq.removeLast());</span><br><span class="line">            <span class="type">String</span> <span class="variable">res</span> <span class="operator">=</span> String.valueOf(left - right);</span><br><span class="line">            dq.addLast(res);</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (token.equals(<span class="string">"/"</span>)) {</span><br><span class="line">            <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> Integer.parseInt(dq.removeLast());</span><br><span class="line">            <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> Integer.parseInt(dq.removeLast());</span><br><span class="line">            <span class="type">String</span> <span class="variable">res</span> <span class="operator">=</span> String.valueOf(left / right);</span><br><span class="line">            dq.addLast(res);</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            dq.addLast(token);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="type">int</span> <span class="variable">ret</span> <span class="operator">=</span> Integer.parseInt(dq.removeLast());</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>数组模拟栈：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">evalRPN</span><span class="params">(String[] ts)</span> {</span><br><span class="line">        <span class="type">int</span>[] d = <span class="keyword">new</span> <span class="title class_">int</span>[ts.length];</span><br><span class="line">        <span class="type">int</span> <span class="variable">hh</span> <span class="operator">=</span> <span class="number">0</span>, tt = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (String s : ts) {</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">"+-*/"</span>.contains(s)) {</span><br><span class="line">                <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> d[tt--], a = d[tt--];</span><br><span class="line">                d[++tt] = calc(a, b, s);</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                d[++tt] = Integer.parseInt(s);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> d[tt];</span><br><span class="line">    }</span><br><span class="line">    <span class="type">int</span> <span class="title function_">calc</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, String op)</span> {</span><br><span class="line">        <span class="keyword">if</span> (op.equals(<span class="string">"+"</span>)) <span class="keyword">return</span> a + b;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op.equals(<span class="string">"-"</span>)) <span class="keyword">return</span> a - b;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op.equals(<span class="string">"*"</span>)) <span class="keyword">return</span> a * b;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op.equals(<span class="string">"/"</span>)) <span class="keyword">return</span> a / b;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="239-滑动窗口最大值"><a href="#239-滑动窗口最大值" class="headerlink" title="239. 滑动窗口最大值"></a><a href="https://leetcode.cn/problems/sliding-window-maximum/">239. 滑动窗口最大值</a></h3><p>两个难点：</p><ol><li>我们需要求 k 窗口内的 最大值</li><li>不能够使用优先队列<ol><li>因为优先队列排序后，要pop的元素可能不是排序后的元素了。<ol><li>比如：1 3 -1 -3</li><li>队列中 3 1 -1 -3 此时会pop 3 而不是 1</li></ol></li></ol></li></ol><p>因此需要自己设计一个数据结构支持：</p><ol><li>Pop()</li><li>Push()</li><li>getMaxValue()</li><li>数据结构内部单调递减，也就是 <a href="/2023/04/16/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97%E5%92%8C%E5%8D%95%E8%B0%83%E6%A0%88/" title="单调队列和单调栈">单调队列和单调栈</a></li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] maxSlidingWindow(<span class="type">int</span>[] nums, <span class="type">int</span> k) {</span><br><span class="line">        <span class="type">MonolithicDownQueue</span> <span class="variable">monolithicDownQueue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MonolithicDownQueue</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (right &lt; k) {</span><br><span class="line">            monolithicDownQueue.push(nums[right]);</span><br><span class="line">            right++;</span><br><span class="line">        }</span><br><span class="line">        res.add(monolithicDownQueue.getMaxValue());</span><br><span class="line">        <span class="keyword">while</span> (right &lt; nums.length) {</span><br><span class="line">            monolithicDownQueue.pop(nums[left]);</span><br><span class="line">            monolithicDownQueue.push(nums[right]);</span><br><span class="line">            res.add(monolithicDownQueue.getMaxValue());</span><br><span class="line">            left++;</span><br><span class="line">            right++;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> res.stream().mapToInt(i -&gt; i).toArray();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">MonolithicDownQueue</span> {</span><br><span class="line">        Deque&lt;Integer&gt; dq = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">pop</span><span class="params">(<span class="type">int</span> value)</span> {</span><br><span class="line">            <span class="keyword">if</span> (!dq.isEmpty() &amp;&amp; dq.peekFirst() == value) {</span><br><span class="line">                dq.removeFirst();</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> value)</span> {</span><br><span class="line">            <span class="comment">// 保证数据结构内部单调递减即碰见新元素时，如果新元素大于队尾元素，移除队尾的元素</span></span><br><span class="line">            <span class="keyword">while</span> (!dq.isEmpty() &amp;&amp; value &gt; dq.peekLast()) {</span><br><span class="line">                dq.removeLast();</span><br><span class="line">            }</span><br><span class="line">            dq.addLast(value);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="title function_">getMaxValue</span><span class="params">()</span> {</span><br><span class="line">            <span class="keyword">return</span> dq.isEmpty() ? <span class="number">0</span> : dq.peekFirst();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="347-前-K-个高频元素"><a href="#347-前-K-个高频元素" class="headerlink" title="347. 前 K 个高频元素"></a><a href="https://leetcode.cn/problems/top-k-frequent-elements/">347. 前 K 个高频元素</a></h3><p>本题用到了 <strong>优先队列</strong> + <strong>Map</strong></p><blockquote><p>Highlight: 用的是<strong>小顶堆</strong>，这样就不用维护所有的值而只维护<strong>k个</strong>元素，因为是不断把最小的元素pop()出去, <strong>因为要统计最大前k个元素，只有小顶堆每次将最小的元素弹出，最后小顶堆里积累的才是前k个最大元素。</strong> 从而由 nlogn -&gt; nlogk。</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] topKFrequent(<span class="type">int</span>[] nums, <span class="type">int</span> k) {</span><br><span class="line">    Map&lt;Integer, Integer&gt; num2Count = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i : nums) {</span><br><span class="line">        num2Count.put(i, num2Count.getOrDefault(i, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    PriorityQueue&lt;<span class="type">int</span>[]&gt; pq = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;((o1, o2) -&gt; o1[<span class="number">1</span>] - o2[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;Integer, Integer&gt; numEntry : num2Count.entrySet()) {</span><br><span class="line">        <span class="type">int</span>[] cur = <span class="keyword">new</span> <span class="title class_">int</span>[]{numEntry.getKey(), numEntry.getValue()};</span><br><span class="line">        <span class="keyword">if</span> (pq.size() &lt; k) {</span><br><span class="line">            pq.add(cur);</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="comment">// 确定pop出去的是相对小的元素</span></span><br><span class="line">            <span class="keyword">if</span> (pq.peek()[<span class="number">1</span>] &gt;= numEntry.getValue()) <span class="keyword">continue</span>;</span><br><span class="line">            pq.poll();</span><br><span class="line">            pq.add(cur);</span><br><span class="line">        }</span><br><span class="line"><span class="comment">//                pq.forEach(a -&gt; System.out.print(a[0] + " " + a[1]));</span></span><br><span class="line"><span class="comment">//                System.out.println();</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span>[] ret = <span class="keyword">new</span> <span class="title class_">int</span>[k];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> k - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) {</span><br><span class="line">        ret[i] = pq.poll()[<span class="number">0</span>];</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 队列和栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字符串</title>
      <link href="/2023/04/13/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>/2023/04/13/%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>此教程参考 <a href="https://www.programmercarl.com/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%80%BB%E7%BB%93.html">代码随想录-字符串篇</a><br>感谢支持！</p></div><h1 id="字符串-String"><a href="#字符串-String" class="headerlink" title="字符串 String"></a>字符串 String</h1><blockquote><a href="/2023/04/05/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95-%E6%80%BB%E6%B1%87/" title="代码随想录-总汇">代码随想录-总汇</a> 中包含字符串的基础知识</blockquote><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><a href="https://leetcode.cn/problems/reverse-string/">344. 反转字符串</a></p><p>非常基本的双指针应用题：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reverseString</span><span class="params">(<span class="type">char</span>[] s)</span> {</span><br><span class="line">        <span class="comment">// 双指针swap:</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = s.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) {</span><br><span class="line">            swap(s, left, right);</span><br><span class="line">            left++;</span><br><span class="line">            right--;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">char</span>[] s, <span class="type">int</span> left, <span class="type">int</span> right)</span> {</span><br><span class="line">        <span class="type">char</span> <span class="variable">temp</span> <span class="operator">=</span> s[left];</span><br><span class="line">        s[left] = s[right];</span><br><span class="line">        s[right] = temp;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><a href="https://leetcode.cn/problems/reverse-string-ii/">541. 反转字符串 II</a></p><p>本题难点在于问题转化：题干上：</p><p>给定一个字符串 <code>s</code> 和一个整数 <code>k</code>，从字符串开头算起，每计数至 <code>2k</code> 个字符，就反转这 <code>2k</code> 字符中的前 <code>k</code> 个字符。</p><ul><li>如果剩余字符少于 <code>k</code> 个，则将剩余字符全部反转。</li><li>如果剩余字符小于 <code>2k</code> 但大于或等于 <code>k</code> 个，则反转前 <code>k</code> 个字符，其余字符保持原样。</li></ul><p>如果直接模拟这两条规则的话会比较麻烦，但是其实这两条可以等价转化为如下的问题：</p><p><strong>当剩余元素多于k个，反转前k个 (i, i + k)，否则反转后k个 (i, n - 1)</strong></p><p>那么问题迎刃而解：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">reverseStr</span><span class="params">(String s, <span class="type">int</span> k)</span> {</span><br><span class="line">      <span class="type">char</span>[] s2char = s.toCharArray();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// methodOne(k, s2char);</span></span><br><span class="line">      <span class="comment">// methodTwo:</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>; left &lt; s2char.length; left += <span class="number">2</span> * k) {</span><br><span class="line">          swap(s2char, left, Math.min(left + k, s2char.length) - <span class="number">1</span>);</span><br><span class="line">      }</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> String.valueOf(s2char);</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">methodOne</span><span class="params">(<span class="type">int</span> k, <span class="type">char</span>[] s2char)</span> {</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>; left &lt; s2char.length; left = left + k * <span class="number">2</span>) {</span><br><span class="line">          <span class="keyword">if</span> (left + k &lt;= s2char.length) {</span><br><span class="line">              <span class="comment">// 元素在length里面不会取空</span></span><br><span class="line">              swap(s2char, left, left + k - <span class="number">1</span>);</span><br><span class="line">              <span class="keyword">continue</span>;</span><br><span class="line">          }</span><br><span class="line">          <span class="comment">// 若少于k个，翻转剩余全部字符</span></span><br><span class="line">          swap(s2char, left, s2char.length - <span class="number">1</span>);</span><br><span class="line">      }</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">swap</span> <span class="params">(<span class="type">char</span>[] s2char, <span class="type">int</span> left, <span class="type">int</span> right)</span> {</span><br><span class="line">      <span class="keyword">while</span> (left &lt; right) {</span><br><span class="line">          <span class="type">char</span> <span class="variable">temp</span> <span class="operator">=</span> s2char[left];</span><br><span class="line">          s2char[left] = s2char[right];</span><br><span class="line">          s2char[right] = temp;</span><br><span class="line">          left++;</span><br><span class="line">          right--;</span><br><span class="line">      }</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure><p><a href="https://leetcode.cn/problems/ti-huan-kong-ge-lcof/">剑指 Offer 05. 替换空格</a></p><p>此题的解法有两个分别是：</p><ol><li><p>用到额外的空间 （非常简单，直接秒杀）</p><ol><li>这里简单提一下StringBuilder 和 StringBuffer的区别</li><li>StringBuilder 单线程，会快一些</li></ol></li><li><p>不用额外的空间，原地修改</p><p><img src="/2023/04/13/%E5%AD%97%E7%AC%A6%E4%B8%B2/%E6%9B%BF%E6%8D%A2%E7%A9%BA%E6%A0%BC.gif" alt="替换空格-原地修改"></p><ol><li><strong>其实很多数组填充类的问题，都可以先预先给数组扩容带填充后的大小，然后在从后向前进行操作。</strong></li><li>这么做有两个好处：<ol><li>不用申请新数组。</li><li>从后向前填充元素，避免了从前向后填充元素时，每次添加元素都要将添加元素之后的所有元素向后移动的问题。</li></ol></li></ol></li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">      <span class="keyword">public</span> String <span class="title function_">replaceSpace</span><span class="params">(String s)</span> {</span><br><span class="line">          <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">          <span class="keyword">for</span> (<span class="type">char</span> c : s.toCharArray()) {</span><br><span class="line">              <span class="keyword">if</span> (c == <span class="string">' '</span>) sb.append(<span class="string">" "</span>).append(<span class="string">" "</span>);</span><br><span class="line">          }</span><br><span class="line">          <span class="comment">// older length</span></span><br><span class="line">          <span class="type">int</span> <span class="variable">fast</span> <span class="operator">=</span> s.length() - <span class="number">1</span>;</span><br><span class="line">          s = s + sb;</span><br><span class="line">          <span class="comment">// newer length</span></span><br><span class="line">          <span class="type">int</span> <span class="variable">slow</span> <span class="operator">=</span> s.length() - <span class="number">1</span>;</span><br><span class="line">          <span class="type">char</span>[] sAsChar = s.toCharArray();</span><br><span class="line">          <span class="keyword">while</span> (fast &gt;= <span class="number">0</span>) {</span><br><span class="line">              <span class="keyword">if</span> (sAsChar[fast] != <span class="string">' '</span>) {</span><br><span class="line">                  sAsChar[slow] = sAsChar[fast];</span><br><span class="line">                  fast--;</span><br><span class="line">                  slow--;</span><br><span class="line">              } <span class="keyword">else</span> {</span><br><span class="line">                  sAsChar[slow--] = <span class="string">'0'</span>;</span><br><span class="line">                  sAsChar[slow--] = <span class="string">'2'</span>;</span><br><span class="line">                  sAsChar[slow--] = <span class="string">'%'</span>;</span><br><span class="line">                  fast--;</span><br><span class="line">              }</span><br><span class="line">          }</span><br><span class="line">          <span class="keyword">return</span> String.valueOf(sAsChar);</span><br><span class="line">      }</span><br><span class="line"></span><br><span class="line">      <span class="keyword">private</span> String <span class="title function_">methodOneWithExtraSpace</span><span class="params">(String s)</span> {</span><br><span class="line">          <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">          <span class="keyword">for</span> (<span class="type">char</span> c : s.toCharArray()) {</span><br><span class="line">              <span class="keyword">if</span> (c == <span class="string">' '</span>) {</span><br><span class="line">                  sb.append(<span class="string">"%20"</span>);</span><br><span class="line">              } <span class="keyword">else</span> {</span><br><span class="line">                  sb.append(c);</span><br><span class="line">              }</span><br><span class="line">          }</span><br><span class="line">          <span class="keyword">return</span> sb.toString();</span><br><span class="line">      }</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure><p><a href="https://leetcode.cn/problems/reverse-words-in-a-string/">151. 反转字符串中的单词</a></p><p>依旧是两个解法：</p><ol><li><p>使用库函数：</p><ol><li>String.trim() <ol><li><img src="/2023/04/13/%E5%AD%97%E7%AC%A6%E4%B8%B2/String_Trim.png" alt="String.trim()"></li><li>eliminates leading and trailing spaces.</li><li>Time: <strong>O(N)</strong></li></ol></li><li>String.split(String reges, int limit)<ol><li>breaks a given string around matches of the given regular expression</li><li>Time: <strong>O(N)</strong></li></ol></li><li><img src="/2023/04/13/%E5%AD%97%E7%AC%A6%E4%B8%B2/%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2LC%E9%A2%98%E8%A7%A3.png" alt="151_LC_解法"></li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> String <span class="title function_">methodOneUseLibrary</span><span class="params">(String s)</span> {</span><br><span class="line">    String[] elementsArr = s.trim().split(<span class="string">" "</span>);</span><br><span class="line"><span class="comment">//            Arrays.stream(elementsArr).forEach(e -&gt; System.out.println(e + "/"));</span></span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = elementsArr.length - <span class="number">1</span>; i &gt;= <span class="number">1</span>; i--) {</span><br><span class="line">        <span class="keyword">if</span> (Objects.equals(elementsArr[i], <span class="string">""</span>)) <span class="keyword">continue</span>;</span><br><span class="line">        sb.append(elementsArr[i]).append(<span class="string">" "</span>);</span><br><span class="line">    }</span><br><span class="line">    sb.append(elementsArr[i]);</span><br><span class="line">    <span class="keyword">return</span> sb.toString();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p><a href="https://leetcode.cn/problems/reverse-words-in-a-string/solution/151-fan-zhuan-zi-fu-chuan-li-de-dan-ci-shuang-zh-2/">双指针：</a></p><ol><li>倒序遍历字符串 <em>s</em> ，记录单词左右索引边界 <em>i, j</em></li><li>每确定一个单词的边界，则将其添加至单词列表 <em>res</em> ；</li><li>最终，将单词列表拼接为字符串，并返回即可。</li></ol></li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">reverseWords</span><span class="params">(String s)</span> {</span><br><span class="line">    s = s.trim(); <span class="comment">// 删除首尾空格</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> s.length() - <span class="number">1</span>, right = s.length() - <span class="number">1</span>;</span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    <span class="keyword">while</span> (left &gt;= <span class="number">0</span>) {</span><br><span class="line">        <span class="keyword">while</span> (left &gt;= <span class="number">0</span> &amp;&amp; s.charAt(left) != <span class="string">' '</span>) left--; <span class="comment">// 搜索首个空格</span></span><br><span class="line">        sb.append(s, left + <span class="number">1</span>, right + <span class="number">1</span>).append(<span class="string">" "</span>); <span class="comment">// 添加单词</span></span><br><span class="line">        <span class="keyword">while</span> (left &gt;= <span class="number">0</span> &amp;&amp; s.charAt(left) == <span class="string">' '</span>) left--; <span class="comment">// 跳过单词间空格</span></span><br><span class="line">        right = left; <span class="comment">// right 指向下个单词的尾字符</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> sb.toString().trim(); <span class="comment">// 转化为字符串并返回</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><a href="https://leetcode.cn/problems/zuo-xuan-zhuan-zi-fu-chuan-lcof/">剑指 Offer 58 - II. 左旋转字符串</a></p><p>依旧是两个做法：</p><p>不使用额外空间：整体反转 + 局部反转</p><p><img src="/2023/04/13/%E5%AD%97%E7%AC%A6%E4%B8%B2/%E5%89%91%E6%8C%87Offer58-II.%E5%B7%A6%E6%97%8B%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2.png" alt="左旋转字符串"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">reverseLeftWords</span><span class="params">(String s, <span class="type">int</span> n)</span> {</span><br><span class="line">      <span class="comment">// 局部反转 + 整体反转</span></span><br><span class="line">      <span class="comment">// 反转区间为前n的子串</span></span><br><span class="line">      <span class="comment">// 反转区间为n到末尾的子串</span></span><br><span class="line">      <span class="comment">// 反转整个字符串</span></span><br><span class="line">      <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(s);</span><br><span class="line">      swap(sb, <span class="number">0</span>, n);</span><br><span class="line">      swap(sb, n, s.length());</span><br><span class="line">      swap(sb, <span class="number">0</span>, sb.length());</span><br><span class="line">      <span class="keyword">return</span> sb.toString();</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(StringBuilder sb, <span class="type">int</span> left, <span class="type">int</span> right)</span> {</span><br><span class="line">      <span class="keyword">while</span> (left &lt; right) {</span><br><span class="line">          <span class="type">char</span> <span class="variable">temp</span> <span class="operator">=</span> sb.charAt(left);</span><br><span class="line">          sb.setCharAt(left, sb.charAt(right));</span><br><span class="line">          sb.setCharAt(right, temp);</span><br><span class="line">          left++;</span><br><span class="line">          right--;</span><br><span class="line">      }</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure><p>使用额外空间：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> String <span class="title function_">methodOneUserExtraSpace</span><span class="params">(String s, <span class="type">int</span> n)</span> {</span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(s.substring(n));</span><br><span class="line">    sb.append(s, <span class="number">0</span>, n);</span><br><span class="line">    <span class="keyword">return</span> sb.toString();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>哈希表</title>
      <link href="/2023/04/09/%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
      <url>/2023/04/09/%E5%93%88%E5%B8%8C%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>此教程参考 <a href="https://www.programmercarl.com/%E5%93%88%E5%B8%8C%E8%A1%A8%E6%80%BB%E7%BB%93.html#%E6%95%B0%E7%BB%84%E4%BD%9C%E4%B8%BA%E5%93%88%E5%B8%8C%E8%A1%A8">代码随想录-哈希表篇</a><br>感谢支持！</p></div><h1 id="哈希表-Hash-Table"><a href="#哈希表-Hash-Table" class="headerlink" title="哈希表 Hash Table"></a>哈希表 Hash Table</h1><blockquote><a href="/2023/04/05/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95-%E6%80%BB%E6%B1%87/" title="代码随想录-总汇">代码随想录-总汇</a> 中包含哈希表的基础知识</blockquote><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><a href="https://leetcode.cn/problems/valid-anagram/">242. 有效的字母异位词</a></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAnagram</span><span class="params">(String s, String t)</span> {</span><br><span class="line">    <span class="keyword">if</span> (s.length() != t.length()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="type">int</span>[] alpha = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i&lt; s.length(); i++) {</span><br><span class="line">        alpha[s.charAt(i) - <span class="string">'a'</span>] ++;</span><br><span class="line">        alpha[t.charAt(i) - <span class="string">'a'</span>] --;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)</span><br><span class="line">        <span class="keyword">if</span>(alpha[i] != <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><a href="https://leetcode.cn/problems/intersection-of-two-arrays/">349. 两个数组的交集</a></p><p>没有什么难点，但是有个用法可以学一下: Java 的 stream： 把set中的值变成array:</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] res = resSet.stream().mapToInt(x -&gt; x).toArray();</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] intersection(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2) {</span><br><span class="line">      Set&lt;Integer&gt; resSet = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">      Set&lt;Integer&gt; numSet = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> i : nums1) {</span><br><span class="line">          numSet.add(i);</span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> i : nums2) {</span><br><span class="line">          <span class="keyword">if</span> (numSet.contains(i)) {</span><br><span class="line">              resSet.add(i);</span><br><span class="line">          }</span><br><span class="line">      }</span><br><span class="line">      <span class="type">int</span>[] res = resSet.stream().mapToInt(x -&gt; x).toArray();</span><br><span class="line">      <span class="keyword">return</span> res;</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure><p><a href="https://leetcode.cn/problems/happy-number/">202. 快乐数</a></p><p>这道题主要在于识别题干中的 <strong>无限循环</strong>， 即会出现<strong>sum重复出现</strong>的情况 于是题目就变成：<strong>如何快速查找sum是否已经出现过</strong>，即哈希应用题</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isHappy</span><span class="params">(<span class="type">int</span> n)</span> {</span><br><span class="line">    <span class="comment">// 由于可能出现 无限循环 即会出现sum重复出现的情况</span></span><br><span class="line">    <span class="comment">// 于是题目就变成：如何快速查找sum是否已经出现过，即哈希应用题；</span></span><br><span class="line">    Set&lt;Integer&gt; sumSet = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">nCopy</span> <span class="operator">=</span> n;</span><br><span class="line">    <span class="keyword">while</span> (!sumSet.contains(sum)) {</span><br><span class="line">        <span class="type">int</span> <span class="variable">newN</span> <span class="operator">=</span> nCopy;</span><br><span class="line">        sumSet.add(sum);</span><br><span class="line">        sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (newN &gt; <span class="number">0</span>) {</span><br><span class="line">            sum += (newN % <span class="number">10</span>) * (newN % <span class="number">10</span>);</span><br><span class="line">            newN /= <span class="number">10</span>;</span><br><span class="line">        }</span><br><span class="line">        nCopy = sum;</span><br><span class="line">        <span class="keyword">if</span> (sum == <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><a href="https://leetcode.cn/problems/two-sum/">1. 两数之和</a></p><p>缅怀我逝去的青春 <span class="github-emoji"><span>😋</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f60b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] twoSum(<span class="type">int</span>[] nums, <span class="type">int</span> target) {</span><br><span class="line">    Map&lt;Integer, Integer&gt; val2Idx = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) {</span><br><span class="line">        <span class="type">int</span> <span class="variable">cur</span> <span class="operator">=</span> nums[i];</span><br><span class="line">        <span class="type">int</span> <span class="variable">needNum</span> <span class="operator">=</span> target - cur;</span><br><span class="line">        <span class="keyword">if</span> (val2Idx.containsKey(needNum)) {</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[] {val2Idx.get(needNum), i};</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            val2Idx.put(nums[i], i);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[] {-<span class="number">1</span>, -<span class="number">1</span>};</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><a href="https://leetcode.cn/problems/4sum-ii/">454. 四数相加 II</a></p><p>首先非常丑的暴力做法：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">brutalForce</span><span class="params">(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2, <span class="type">int</span>[] nums3, <span class="type">int</span>[] nums4)</span> {</span><br><span class="line">    <span class="comment">// 非常丑的 暴力： 200^4 = over 10^8 超时</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums1.length; i++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; nums2.length; j++) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; nums3.length; k++) {</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">0</span>; l &lt; nums4.length; l++) {</span><br><span class="line">                    <span class="keyword">if</span> (nums1[i] + nums2[j] + nums3[k] + nums4[l] == <span class="number">0</span>) count++;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>可以考虑用时间换空间，借用两数之和的思想我们可以想到哈希表：</p><p>使用哈希表来优化至 O(N^2) </p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">fourSumCount</span><span class="params">(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2, <span class="type">int</span>[] nums3, <span class="type">int</span>[] nums4)</span> {</span><br><span class="line">  <span class="comment">// 哈希表两两分组：</span></span><br><span class="line">  <span class="comment">// nums1 nums2 一组 的所有可能出现的和 存入哈希表</span></span><br><span class="line">  <span class="comment">// nums3 nums4 一组 在哈希表找可能出现的 -(的所有可能出现的和)</span></span><br><span class="line">  <span class="comment">// 哈希可以使其优化到 O(N^2)</span></span><br><span class="line">  Map&lt;Integer, Integer&gt; sum2Count = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums1.length; i++) {</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; nums2.length; j++) {</span><br><span class="line">          <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> nums1[i] + nums2[j];</span><br><span class="line">          sum2Count.put(sum, sum2Count.getOrDefault(sum, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">      }</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; nums3.length; k++) {</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">0</span>; l &lt; nums4.length; l++) {</span><br><span class="line">          <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> nums3[k] + nums4[l];</span><br><span class="line">          <span class="keyword">if</span> (sum2Count.containsKey(-sum)) {</span><br><span class="line">              count += sum2Count.get(-sum);</span><br><span class="line">          }</span><br><span class="line">      }</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> count;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><a href="https://leetcode.cn/problems/ransom-note/">383. 赎金信</a></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canConstruct</span><span class="params">(String ransomNote, String magazine)</span> {</span><br><span class="line">      <span class="type">int</span>[] hm = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">char</span> r : ransomNote.toCharArray()) {</span><br><span class="line">          <span class="type">int</span> <span class="variable">pos</span> <span class="operator">=</span> r - <span class="string">'a'</span>;</span><br><span class="line">          hm[pos] += <span class="number">1</span>;</span><br><span class="line">      }</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (<span class="type">char</span> m : magazine.toCharArray()) {</span><br><span class="line">          <span class="type">int</span> <span class="variable">pos</span> <span class="operator">=</span> m - <span class="string">'a'</span>;</span><br><span class="line">          hm[pos] -= <span class="number">1</span>;</span><br><span class="line">      }</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> j : hm) {</span><br><span class="line">          <span class="keyword">if</span> (j &gt; <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure><p><a href="https://leetcode.cn/problems/3sum/">15. 三数之和</a></p><p>写做三数之和但是用哈希表来做会非常麻烦由于涉及到去重的操作。因此双指针会简便许多。具体流程如下：</p><p><img src="/2023/04/09/%E5%93%88%E5%B8%8C%E8%A1%A8/15.%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C.gif" alt="三数之和过程"></p><p>另外一些关于去重问题的考虑：</p><p>我们有三个数需要去重 nums[i] nums[left] nums[right]：</p><ol><li>i 的去重<ol><li>在 i 入口处就可以跳过：那么问题是我们应该用 <strong>nums[i] == nums[i + 1]</strong> 还是 <strong>nums[i] == nums[i - 1]</strong><ol><li>答案是用 <strong>nums[i] == nums[i - 1]</strong></li><li>考虑用{-1, -1 ,2} 这组数据，如果用<strong>nums[i] == nums[i + 1]</strong> 当遍历到第一个-1 的时候，判断 下一个也是-1，那这组数据就pass了。</li></ol></li></ol></li><li>nums[left] nums[right] 的 去重：<ol><li>见代码 4. 处</li></ol></li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">threeSum</span><span class="params">(<span class="type">int</span>[] nums)</span> {</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length - <span class="number">2</span>; i++) { <span class="comment">// 1. Change the loop condition</span></span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> i + <span class="number">1</span>, right = nums.length - <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> nums[i];</span><br><span class="line">            <span class="type">int</span> <span class="variable">needNum</span> <span class="operator">=</span> -num;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (left &lt; right) {</span><br><span class="line">                <span class="type">int</span> <span class="variable">currentSum</span> <span class="operator">=</span> nums[left] + nums[right]; <span class="comment">// 2. Calculate the current sum</span></span><br><span class="line">                <span class="keyword">if</span> (currentSum &lt; needNum) {</span><br><span class="line">                    left++;</span><br><span class="line">                } <span class="keyword">else</span> <span class="keyword">if</span> (currentSum &gt; needNum) {</span><br><span class="line">                    right--;</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    List&lt;Integer&gt; temp = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(Arrays.asList(</span><br><span class="line">                            nums[i], nums[left], nums[right] <span class="comment">// 3. Use nums[i], nums[left], nums[right] instead of i, left, right</span></span><br><span class="line">                    ));</span><br><span class="line">                    res.add(temp);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 4. Handle duplicates for left and right pointers</span></span><br><span class="line">                    <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[left] == nums[left + <span class="number">1</span>]) left++;</span><br><span class="line">                    <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[right] == nums[right - <span class="number">1</span>]) right--;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 5. Move left and right pointers inward</span></span><br><span class="line">                    left++;</span><br><span class="line">                    right--;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><p><a href="https://leetcode.cn/problems/4sum/">18. 四数之和</a></p><p>本质上还是三数之和即排序加双指针但是有两个地方需要注意一下看下面的代码块：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">fourSum</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> {</span><br><span class="line">      Arrays.sort(nums);</span><br><span class="line">      List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length - <span class="number">3</span>; i++) {</span><br><span class="line">          <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">          <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; nums.length - <span class="number">2</span>; j++) {</span><br><span class="line">              <span class="comment">// 注意这里是 j &gt; i + 1 不能直接 j &gt; 0 否则 case 例如 [2, 2, 2, 2, 2] 会返回空 （毕竟看到2就都过去了）</span></span><br><span class="line">              <span class="keyword">if</span> (j &gt; i + <span class="number">1</span> &amp;&amp; nums[j] == nums[j - <span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">              <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> j + <span class="number">1</span>, right = nums.length - <span class="number">1</span>;</span><br><span class="line">              <span class="comment">// 注意边界，需要用long for case：</span></span><br><span class="line">              <span class="comment">// [1000000000,1000000000,1000000000,1000000000] -294967296</span></span><br><span class="line">              <span class="type">long</span> <span class="variable">sumIJ</span> <span class="operator">=</span> nums[i] + nums[j];</span><br><span class="line">              <span class="type">long</span> <span class="variable">needSum</span> <span class="operator">=</span> target - sumIJ;</span><br><span class="line">              <span class="keyword">while</span> (left &lt; right) {</span><br><span class="line">                  <span class="type">long</span> <span class="variable">curSum</span> <span class="operator">=</span> nums[left] + nums[right];</span><br><span class="line">                  <span class="keyword">if</span> (curSum &lt; needSum) {</span><br><span class="line">                      left++;</span><br><span class="line">                  } <span class="keyword">else</span> <span class="keyword">if</span> (curSum &gt; needSum) {</span><br><span class="line">                      right--;</span><br><span class="line">                  } <span class="keyword">else</span> {</span><br><span class="line">                      List&lt;Integer&gt; temp = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(</span><br><span class="line">                              Arrays.asList(nums[i], nums[j], nums[left], nums[right])</span><br><span class="line">                      );</span><br><span class="line">                      res.add(temp);</span><br><span class="line"></span><br><span class="line">                      <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[left] == nums[left + <span class="number">1</span>]) left++;</span><br><span class="line">                      <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[right] == nums[right - <span class="number">1</span>]) right--;</span><br><span class="line"></span><br><span class="line">                      left++;</span><br><span class="line">                      right--;</span><br><span class="line">                  }</span><br><span class="line">              }</span><br><span class="line">          }</span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">return</span> res;</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 哈希表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>链表</title>
      <link href="/2023/04/06/%E9%93%BE%E8%A1%A8/"/>
      <url>/2023/04/06/%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>此教程参考 <a href="https://programmercarl.com/%E9%93%BE%E8%A1%A8%E6%80%BB%E7%BB%93%E7%AF%87.html#%E9%93%BE%E8%A1%A8%E7%9A%84%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80">代码随想录-链表篇</a><br>感谢支持！</p></div><h1 id="链表-LinkedList"><a href="#链表-LinkedList" class="headerlink" title="链表 LinkedList"></a>链表 LinkedList</h1><blockquote><a href="/2023/04/05/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95-%E6%80%BB%E6%B1%87/" title="代码随想录-总汇">代码随想录-总汇</a> 中包含链表的基础知识</blockquote><h2 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h2><p><a href="https://leetcode.cn/problems/design-linked-list/">707. 设计链表</a> <br>边界非常多的题目，主要考虑如何更新链表节点的时候不要错误的更新。可以使用printHelper来帮助debug。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyLinkedList</span> {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Node</span> {</span><br><span class="line">        Node prev;</span><br><span class="line">        Node next;</span><br><span class="line">        <span class="type">int</span> val;</span><br><span class="line">        Node() {</span><br><span class="line">        }</span><br><span class="line">        Node(<span class="type">int</span> val) {</span><br><span class="line">            <span class="built_in">this</span>.val = val;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    Node head, tail;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyLinkedList</span><span class="params">()</span> {</span><br><span class="line">        head = <span class="keyword">new</span> <span class="title class_">Node</span>();</span><br><span class="line">        tail = <span class="keyword">new</span> <span class="title class_">Node</span>();</span><br><span class="line">        head.next = tail;</span><br><span class="line">        tail.prev = head;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span> {</span><br><span class="line">        <span class="keyword">if</span> (count &lt;= index) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">int</span> <span class="variable">curIdx</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (curIdx &lt; index &amp;&amp; cur != <span class="literal">null</span>) {</span><br><span class="line">            cur = cur.next;</span><br><span class="line">            curIdx++;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> curIdx == index ? cur.val : -<span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAtHead</span><span class="params">(<span class="type">int</span> val)</span> {</span><br><span class="line">        <span class="type">Node</span> <span class="variable">cur</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(val);</span><br><span class="line">        <span class="type">Node</span> <span class="variable">headNext</span> <span class="operator">=</span> head.next;</span><br><span class="line">        head.next = cur;</span><br><span class="line">        cur.prev = head;</span><br><span class="line">        cur.next = headNext;</span><br><span class="line">        headNext.prev = cur;</span><br><span class="line">        count++;</span><br><span class="line">        <span class="comment">// printHelper();</span></span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAtTail</span><span class="params">(<span class="type">int</span> val)</span> {</span><br><span class="line">        <span class="type">Node</span> <span class="variable">cur</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(val);</span><br><span class="line">        <span class="type">Node</span> <span class="variable">tailPrev</span> <span class="operator">=</span> tail.prev;</span><br><span class="line">        tail.prev = cur;</span><br><span class="line">        tailPrev.next = cur;</span><br><span class="line">        cur.prev = tailPrev;</span><br><span class="line">        cur.next = tail;</span><br><span class="line">        count++;</span><br><span class="line">        <span class="comment">// System.out.println("add at tail");</span></span><br><span class="line">        <span class="comment">// printHelper();</span></span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAtIndex</span><span class="params">(<span class="type">int</span> index, <span class="type">int</span> val)</span> {</span><br><span class="line">        <span class="keyword">if</span> (index &gt; count) <span class="keyword">return</span>;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">int</span> <span class="variable">curIdx</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (curIdx &lt; index &amp;&amp; cur != <span class="literal">null</span>) {</span><br><span class="line">            cur = cur.next;</span><br><span class="line">            curIdx++;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (index == curIdx) {</span><br><span class="line">            <span class="type">Node</span> <span class="variable">curPrev</span> <span class="operator">=</span> cur.prev;</span><br><span class="line">            <span class="type">Node</span> <span class="variable">needAdd</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(val);</span><br><span class="line">            curPrev.next = needAdd;</span><br><span class="line">            needAdd.next = cur;</span><br><span class="line">            needAdd.prev = curPrev;</span><br><span class="line">            cur.prev = needAdd;</span><br><span class="line">        }</span><br><span class="line">        count++;</span><br><span class="line">        <span class="comment">// printHelper();</span></span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteAtIndex</span><span class="params">(<span class="type">int</span> index)</span> {</span><br><span class="line">        <span class="keyword">if</span> (count &lt;= index) {</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="type">Node</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">int</span> <span class="variable">curIdx</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (curIdx &lt; index &amp;&amp; cur != <span class="literal">null</span>) {</span><br><span class="line">            cur = cur.next;</span><br><span class="line">            curIdx++;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (index == curIdx) {</span><br><span class="line">            <span class="type">Node</span> <span class="variable">curPrev</span> <span class="operator">=</span> cur.prev;</span><br><span class="line">            curPrev.next = cur.next;</span><br><span class="line">            cur.next.prev = curPrev;</span><br><span class="line">        }</span><br><span class="line">        count--;</span><br><span class="line">        <span class="comment">// printHelper();</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">printHelper</span><span class="params">()</span> {</span><br><span class="line">        <span class="type">Node</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="literal">null</span>) {</span><br><span class="line">            System.out.print(cur.val + <span class="string">"-&gt;"</span>);</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        }</span><br><span class="line">        System.out.println();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><a href="https://leetcode.cn/problems/remove-linked-list-elements/">203. 移除链表元素</a> <br>非常基础的删除链表中的元素题。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">removeElements</span><span class="params">(ListNode head, <span class="type">int</span> val)</span> {</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">dummyHead</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>();</span><br><span class="line">        dummyHead.next = head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">prev</span> <span class="operator">=</span> dummyHead;</span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="literal">null</span>) {</span><br><span class="line">            <span class="keyword">if</span> (cur.val == val) {</span><br><span class="line">                prev.next = cur.next;</span><br><span class="line">                cur = cur.next;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            }</span><br><span class="line">            prev = prev.next;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> dummyHead.next;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><a href="https://leetcode.cn/problems/reverse-linked-list/">206. 反转链表</a><br>这道题主要在于如何使用递归：<br>递归实现反转链表常常用来考察递归思想，我这里就用<strong>纯递归</strong>来翻转链表。对于递归算法，最重要的就是明确递归函数的定义。具体来说，我们的 reverse 函数定义是这样的：输入一个节点 head，将「以 head 为起点」的链表反转，并返回反转之后的头结点。</p><blockquote><p>quote: <a href="https://labuladong.github.io/algo/di-yi-zhan-da78c/shou-ba-sh-8f30d/di-gui-mo--10b77/">Labuladong 的翻转链表集合</a><br>想通递归函数定义后就很好实现了</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">reverseList</span><span class="params">(ListNode head)</span> {</span><br><span class="line">        <span class="keyword">return</span> reverse(head);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ListNode <span class="title function_">reverse</span><span class="params">(ListNode cur)</span> {</span><br><span class="line">        <span class="keyword">if</span> (cur == <span class="literal">null</span> || cur.next == <span class="literal">null</span>) <span class="keyword">return</span> cur;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">last</span> <span class="operator">=</span> reverse(cur.next);</span><br><span class="line">        cur.next.next = cur; <span class="comment">// 这里是为了让head变成tail</span></span><br><span class="line">        cur.next = <span class="literal">null</span>; <span class="comment">// 注意这里要归为null否则会成环</span></span><br><span class="line">        <span class="keyword">return</span> last;</span><br><span class="line">    } </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><a href="https://leetcode.cn/problems/swap-nodes-in-pairs/">24. 两两交换链表中的节点</a></p><p>使用虚拟头节点来大幅简化问题的一道模拟题：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">swapPairs</span><span class="params">(ListNode head)</span> {</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">dummyHead</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(-<span class="number">1</span>);</span><br><span class="line">        dummyHead.next = head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">prev</span> <span class="operator">=</span> dummyHead;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="literal">null</span> &amp;&amp; cur.next != <span class="literal">null</span>) {</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">secondNode</span> <span class="operator">=</span> cur.next;</span><br><span class="line">            cur.next = secondNode.next;</span><br><span class="line">            secondNode.next = cur;</span><br><span class="line">            prev.next = secondNode;</span><br><span class="line">            prev = cur;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">            <span class="comment">// helperPrint(dummyHead.next);</span></span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> dummyHead.next;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">helperPrint</span><span class="params">(ListNode head)</span> {</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">dm</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span> (dm != <span class="literal">null</span>) {</span><br><span class="line">            System.out.print(dm.val + <span class="string">"-&gt;"</span>);</span><br><span class="line">            dm = dm.next;</span><br><span class="line">        }</span><br><span class="line">        System.out.println();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p><a href="https://leetcode.cn/problems/remove-nth-node-from-end-of-list/">19.删除链表的倒数第N个节点</a> <br>写做链表，但其实本质还是双指针 - 快慢指针的一道应用题：<br>如果要删除倒数第n个节点，让fast移动n步，然后让fast和slow同时移动，直到fast指向链表末尾。删掉slow所指向的节点就可以了。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">removeNthFromEnd</span><span class="params">(ListNode head, <span class="type">int</span> n)</span> {</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">dmh</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(-<span class="number">1</span>);</span><br><span class="line">        dmh.next = head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">fast</span> <span class="operator">=</span> dmh;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">slow</span> <span class="operator">=</span> dmh;</span><br><span class="line">        <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> n;</span><br><span class="line">        <span class="comment">// 先让fast移动k步</span></span><br><span class="line">        <span class="keyword">while</span> (k &gt; <span class="number">0</span>) {</span><br><span class="line">            fast = fast.next;</span><br><span class="line">            k--;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">while</span> (fast != <span class="literal">null</span> &amp;&amp; fast.next != <span class="literal">null</span>) {</span><br><span class="line">            fast = fast.next;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">        }</span><br><span class="line">        slow.next = slow.next.next;</span><br><span class="line">        <span class="comment">// System.out.println(fast.val + " " + slow.val);</span></span><br><span class="line">        <span class="keyword">return</span> dmh.next;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">printHelper</span><span class="params">(ListNode head)</span> {</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="literal">null</span>) {</span><br><span class="line">            System.out.print(cur.val + <span class="string">"-&gt;"</span>);</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        }</span><br><span class="line">        System.out.println();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><a href="https://leetcode.cn/problems/intersection-of-two-linked-lists-lcci/">面试题 02.07.链表相交</a><br>其实还是双指针但是要先找长的链表要先移动几步从而可以让两条链表同一起点：<br><img src="/2023/04/06/%E9%93%BE%E8%A1%A8/%E9%9D%A2%E8%AF%95%E9%A2%9802.07.%E9%93%BE%E8%A1%A8%E7%9B%B8%E4%BA%A4_2.png" alt="链表相交"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">getIntersectionNode</span><span class="params">(ListNode headA, ListNode headB)</span> {</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">curLong</span> <span class="operator">=</span> headA, curShort = headB;</span><br><span class="line">        <span class="type">int</span> <span class="variable">lenLong</span> <span class="operator">=</span> <span class="number">0</span>, lenShort = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (curLong != <span class="literal">null</span>) {</span><br><span class="line">            lenLong++;</span><br><span class="line">            curLong = curLong.next;</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (curShort != <span class="literal">null</span>) {</span><br><span class="line">            lenShort++;</span><br><span class="line">            curShort = curShort.next;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        curLong = headA;</span><br><span class="line">        curShort = headB;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// always make sure lenLong and curLong is the longer one</span></span><br><span class="line">        <span class="keyword">if</span> (lenShort &gt; lenLong) {</span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> lenShort;</span><br><span class="line">            lenShort = lenLong;</span><br><span class="line">            lenLong = temp;</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">tempNode</span> <span class="operator">=</span> curLong;</span><br><span class="line">            curLong = curShort;</span><br><span class="line">            curShort = tempNode;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">gap</span> <span class="operator">=</span> lenLong - lenShort;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (gap &gt; <span class="number">0</span>) {</span><br><span class="line">            curLong = curLong.next;</span><br><span class="line">            gap--;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// printHelper(curLong);</span></span><br><span class="line">        <span class="comment">// printHelper(curShort);</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (curLong != <span class="literal">null</span> &amp;&amp; curShort != <span class="literal">null</span>) {</span><br><span class="line">            <span class="keyword">if</span> (curLong == curShort) <span class="keyword">return</span> curLong;</span><br><span class="line">            curLong = curLong.next;</span><br><span class="line">            curShort = curShort.next;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">printHelper</span><span class="params">(ListNode head)</span> {</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="literal">null</span>) {</span><br><span class="line">            System.out.print(cur.val + <span class="string">"-&gt;"</span>);</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        }</span><br><span class="line">        System.out.println();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><a href="https://leetcode.cn/problems/linked-list-cycle-ii/">142.环形链表II</a><br>考察的其实还是双指针 - 快慢指针，但是加了一点数学。<br>需要做到两点：</p><ol><li><p>判断链表是否含有环</p><ol><li>使用快慢指针法，分别定义 fast 和 slow 指针，从头结点出发，fast指针每次移动两个节点，slow指针每次移动一个节点，如果 fast 和 slow指针在途中相遇 ，说明这个链表有环。<br><img src="/2023/04/06/%E9%93%BE%E8%A1%A8/141.%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8.gif" alt="检查有环"></li></ol></li><li><p>若有环，怎么找环开始的地方</p><ol><li>从头结点出发一个指针，从相遇节点 也出发一个指针，这两个指针每次只走一个节点， 那么当这两个指针相遇的时候就是 环形入口的节点。<br><img src="/2023/04/06/%E9%93%BE%E8%A1%A8/142.%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8II%EF%BC%88%E6%B1%82%E5%85%A5%E5%8F%A3%EF%BC%89.gif" alt="环的入口"><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">detectCycle</span><span class="params">(ListNode head)</span> {</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">fast</span> <span class="operator">=</span> head, slow = head;</span><br><span class="line">        <span class="keyword">while</span> (fast != <span class="literal">null</span> &amp;&amp; fast.next != <span class="literal">null</span>) {</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            <span class="keyword">if</span> (fast == slow) {</span><br><span class="line">                <span class="type">ListNode</span> <span class="variable">idxStart</span> <span class="operator">=</span> head, meetStart = fast;</span><br><span class="line">                <span class="keyword">while</span> (idxStart != meetStart) {</span><br><span class="line">                    idxStart = idxStart.next;</span><br><span class="line">                    meetStart = meetStart.next;</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">return</span> idxStart;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> Algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>双指针</title>
      <link href="/2023/04/05/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
      <url>/2023/04/05/%E5%8F%8C%E6%8C%87%E9%92%88/</url>
      
        <content type="html"><![CDATA[<h1 id="双指针"><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h1><h2 id="快慢指针："><a href="#快慢指针：" class="headerlink" title="快慢指针："></a>快慢指针：</h2><p>慢指针用于保存性质，快指针用于探路。[0, 慢指针] 均满足性质</p><p><a href="https://leetcode.cn/problems/remove-element/">27.移除元素</a> </p><ul><li>快指针：寻找新数组的元素 ，新数组就是不含有目标元素的数组</li><li>慢指针：指向更新 新数组下标的位置</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">removeElement</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> val)</span> {</span><br><span class="line">        <span class="comment">// brutal force:</span></span><br><span class="line">       <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> nums.length;</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; count; i++) {</span><br><span class="line">           <span class="keyword">if</span> (nums[i] == val) {</span><br><span class="line">               <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; count; j++) {</span><br><span class="line">                   nums[j - <span class="number">1</span>] = nums[j];</span><br><span class="line">               }</span><br><span class="line">               i -= <span class="number">1</span>;</span><br><span class="line">               count--;</span><br><span class="line">           }</span><br><span class="line">       }</span><br><span class="line">       <span class="keyword">return</span> count;</span><br><span class="line">        <span class="comment">// fast-slow pointers:</span></span><br><span class="line">        <span class="comment">// 快指针：寻找新数组的元素 ，新数组就是不含有目标元素的数组</span></span><br><span class="line">        <span class="comment">// 慢指针：指向更新 新数组下标的位置</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">fast</span> <span class="operator">=</span> <span class="number">0</span>, slow = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (fast &lt; nums.length) {</span><br><span class="line">            <span class="keyword">while</span> (fast &lt; nums.length &amp;&amp; nums[fast] == val) {</span><br><span class="line">                fast++;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (fast == nums.length) <span class="keyword">break</span>;</span><br><span class="line">            nums[slow] = nums[fast];</span><br><span class="line">            fast++;</span><br><span class="line">            slow++;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> slow;</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><h2 id="相向双指针"><a href="#相向双指针" class="headerlink" title="相向双指针"></a>相向双指针</h2><p><a href="https://leetcode.cn/problems/remove-element/">977.有序数组的平方</a></p><p>由于满足性质：如果想要非递减顺序那么数组平方后的最大值一定在两侧并向中间收敛，因此相向双指针</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">int</span>[] twoPointers(<span class="type">int</span>[] nums) {</span><br><span class="line">    <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[nums.length];</span><br><span class="line">    <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> nums.length - <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = nums.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) {</span><br><span class="line">        <span class="keyword">if</span> (Math.abs(nums[left]) &gt; Math.abs(nums[right])){</span><br><span class="line">            res[k--] = nums[left] * nums[left];</span><br><span class="line">            left++;</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            res[k--] = nums[right] * nums[right];</span><br><span class="line">            right--;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h2><p><a href="https://leetcode.cn/problems/squares-of-a-sorted-array/">209.长度最小的子数组</a></p><p>窗口内满足题目要求的性质，不断更新并在过程中寻找最小值。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">whileLoopVersionSlidingWindow</span><span class="params">(<span class="type">int</span> target, <span class="type">int</span>[] nums)</span> {</span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> nums[<span class="number">0</span>];</span><br><span class="line">    <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) {</span><br><span class="line">        <span class="keyword">if</span> (sum &lt; target) {</span><br><span class="line">            right++;</span><br><span class="line">            <span class="keyword">if</span> (right &lt; nums.length) {</span><br><span class="line">                sum += nums[right];</span><br><span class="line">            } <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            res = Math.min(res, right - left + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (left + <span class="number">1</span> &lt; nums.length) {</span><br><span class="line">                sum -= nums[left];</span><br><span class="line">                left++;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> res == Integer.MAX_VALUE ? <span class="number">0</span> : res;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">forLoopVersionSlidingWindow</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> s)</span> {</span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> <span class="number">0</span>; right &lt; nums.length; right++) {</span><br><span class="line">        sum += nums[right];</span><br><span class="line">        <span class="keyword">while</span> (sum &gt;= s) {</span><br><span class="line">            result = Math.min(result, right - left + <span class="number">1</span>);</span><br><span class="line">            sum -= nums[left++];</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> result == Integer.MAX_VALUE ? <span class="number">0</span> : result;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 双指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二分查找</title>
      <link href="/2023/04/05/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
      <url>/2023/04/05/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="二分查找，-Binary-Search"><a href="#二分查找，-Binary-Search" class="headerlink" title="二分查找， Binary Search"></a>二分查找， Binary Search</h1><p><a href="https://leetcode.cn/problems/binary-search/">704.二分查找</a></p><p>二分查找有两个模板：</p><ol><li><p>左闭右闭</p><ol><li><p>leetcode 704:</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">binarySearchCloseInterval</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> {</span><br><span class="line">        <span class="comment">// 左闭右闭：我们要考虑右区间的数然后和target比较</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) {</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (left + right) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &gt; target) {</span><br><span class="line">                <span class="comment">// 因为接下来要继续判断 left &lt;= right 而 right = mid 一定不为答案</span></span><br><span class="line">                <span class="comment">// 但我们的定义又要求 right 是有意义的因此 right = mid - 1</span></span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            } <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target){</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure></li></ol></li><li><p>左闭右开</p><ol><li><p>leetcode 704:</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">binarySearchOpenInterval</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> {</span><br><span class="line">       <span class="comment">// 左闭右开：我们无需考虑右区间的数然后和target比较</span></span><br><span class="line">       <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = nums.length;</span><br><span class="line">       <span class="keyword">while</span> (left &lt; right) {</span><br><span class="line">           <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (left + right) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">           <span class="keyword">if</span> (nums[mid] &gt; target) {</span><br><span class="line">               <span class="comment">// 此时 我们 用 left &lt; right 保证在下一次不考虑right因此直接用 right = mid 即可</span></span><br><span class="line">               right = mid;</span><br><span class="line">           } <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target) {</span><br><span class="line">               left = mid + <span class="number">1</span>;</span><br><span class="line">           } <span class="keyword">else</span> {</span><br><span class="line">               <span class="keyword">return</span> mid;</span><br><span class="line">           }</span><br><span class="line">       }</span><br><span class="line">       <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"> }</span><br></pre></td></tr></tbody></table></figure></li></ol><p>两者方法的本质上的差别是要不要考虑右区间:</p><ol><li>若[left, right] 即 left &lt;= right<ol><li>right = nums.length - 1 &lt;- 很好理解，因为right本身在比较之中因此right = nums.length - 1</li><li>right = mid - 1 &lt;- 因为若 nums[mid] &gt; target 也就是说 right 一定不为答案，且在while中我们会考虑right因为它不为答案我们需要考虑其之前的一个数: right = mid - 1;</li></ol></li><li>若[left, right) 即 left &lt; right:<ol><li>right = nums.length, 同理，因为right本身不含在我们的比较计划中，因此right = nums.length即可</li><li>right = mid &lt;- 因为若 nums[mid] &gt; target 也就是说 right 一定不为答案，且在while中我们<strong>不</strong>会考虑right因为它不为答案我们<strong>不</strong>需要考虑其之前的一个数: right = mid;</li></ol></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> Algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分查找 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码随想录-总汇</title>
      <link href="/2023/04/05/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95-%E6%80%BB%E6%B1%87/"/>
      <url>/2023/04/05/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95-%E6%80%BB%E6%B1%87/</url>
      
        <content type="html"><![CDATA[<h1 id="代码随想录"><a href="#代码随想录" class="headerlink" title="代码随想录"></a>代码随想录</h1><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><p><a href="https://leetcode.cn/problems/binary-search/">704.二分查找</a><br>题目建议： 大家能把 704 掌握就可以，35.搜索插入位置 和 34. 在排序数组中查找元素的第一个和最后一个位置 ，如果有时间就去看一下，没时间可以先不看，二刷的时候在看。<br>先把 704写熟练，要熟悉 根据 左闭右开，左闭右闭 两种区间规则 写出来的二分法。</p><blockquote><p>见 <a href="/2023/04/05/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/" title="二分查找">二分查找</a> 专题</p></blockquote><p><a href="https://leetcode.cn/problems/remove-element/">27.移除元素</a><br>题目建议：  暴力的解法，可以锻炼一下我们的代码实现能力，建议先把暴力写法写一遍。 双指针法 是本题的精髓，今日需要掌握，至于拓展题目可以先不看。 </p><blockquote><p>见 <a href="/2023/04/05/%E5%8F%8C%E6%8C%87%E9%92%88/" title="双指针">双指针</a> 专题</p></blockquote><p><a href="https://leetcode.cn/problems/remove-element/">977.有序数组的平方</a><br>题目建议： 本题关键在于理解双指针思想 </p><blockquote><p>见 <a href="/2023/04/05/%E5%8F%8C%E6%8C%87%E9%92%88/" title="双指针">双指针</a> 专题</p></blockquote><p><a href="https://leetcode.cn/problems/squares-of-a-sorted-array/">209.长度最小的子数组</a><br>题目建议： 本题关键在于理解滑动窗口，这个滑动窗口看文字讲解 还挺难理解的，建议大家先看视频讲解。  拓展题目可以先不做。</p><blockquote><p>见 <a href="/2023/04/05/%E5%8F%8C%E6%8C%87%E9%92%88/" title="双指针">双指针</a> 专题</p></blockquote><p><a href="https://leetcode.cn/problems/spiral-matrix-ii/">59.螺旋矩阵II</a><br>题目建议：  本题关键还是在转圈的逻辑，在二分搜索中提到的区间定义，在这里又用上了。 </p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[][] generateMatrix(<span class="type">int</span> n) {</span><br><span class="line">    <span class="comment">// 此题的关键点在于循环不变量</span></span><br><span class="line">    <span class="comment">// 即 每次循环中都要遵循一个准则，</span></span><br><span class="line">    <span class="comment">// 如二分法中的 左闭右闭 或 左闭右开 性质的定义</span></span><br><span class="line">    <span class="comment">// 我们规定左闭右开，即每一行/列的最后一个值交由下一次循环处理：</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">startX</span> <span class="operator">=</span> <span class="number">0</span>, startY = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">offset</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span>[][] res = <span class="keyword">new</span> <span class="title class_">int</span>[n][n];</span><br><span class="line">    <span class="type">int</span> <span class="variable">circleCount</span> <span class="operator">=</span> n / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span> (circleCount &gt; <span class="number">0</span>) {</span><br><span class="line">        <span class="comment">// 处理上边的行：（左到右）</span></span><br><span class="line">        <span class="keyword">for</span> (j = startY; j &lt; n - offset; j++) {</span><br><span class="line">            res[startX][j] = count++;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 处理右边的列：（上到下）</span></span><br><span class="line">        <span class="keyword">for</span> (i = startX; i &lt; n - offset; i++) {</span><br><span class="line">            res[i][j] = count++;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 处理下边的行：（右到左）</span></span><br><span class="line">        <span class="keyword">for</span> (; j &gt; startY; j--) {</span><br><span class="line">            res[i][j] = count++;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 处理左边的列：（下到上）</span></span><br><span class="line">        <span class="keyword">for</span> (; i &gt; startX; i--) {</span><br><span class="line">            res[i][j] = count++;</span><br><span class="line">        }</span><br><span class="line">        startX++;</span><br><span class="line">        startY++;</span><br><span class="line">        offset++;</span><br><span class="line">        circleCount--;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (n % <span class="number">2</span> != <span class="number">0</span>) {</span><br><span class="line">        res[startX][startY] = count;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><h3 id="基本知识："><a href="#基本知识：" class="headerlink" title="基本知识："></a>基本知识：</h3><blockquote><p>其是一种通过指针串联在一起的 <strong>线性</strong> 数据结构，每一个节点都包含：<strong>数据域</strong> 和 <strong>指针域</strong>，最后一个节点的指针域指向null, aka 空指针。</p></blockquote><p>常见的包含三种类型：单链表（上述），双链表，循环链表：</p><h4 id="单链表："><a href="#单链表：" class="headerlink" title="单链表："></a>单链表：</h4><p>上述，它的指针域只能指向节点的下一个节点。<br><img src="/2023/04/05/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95-%E6%80%BB%E6%B1%87/%E5%8D%95%E9%93%BE%E8%A1%A8.png" alt="单链表"></p><h4 id="双链表："><a href="#双链表：" class="headerlink" title="双链表："></a>双链表：</h4><p>每一个节点有两个指针域，一个指向下一个节点，一个指向上一个节点。因此双链表可以向前以及向后查。<br><img src="/2023/04/05/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95-%E6%80%BB%E6%B1%87/%E5%8F%8C%E9%93%BE%E8%A1%A8.png" alt="双链表"></p><h4 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h4><p>链表首尾相连，可以用来解决<a href="https://zh.wikipedia.org/wiki/%E7%BA%A6%E7%91%9F%E5%A4%AB%E6%96%AF%E9%97%AE%E9%A2%98">约瑟夫环</a>的问题<br><img src="/2023/04/05/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95-%E6%80%BB%E6%B1%87/%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8.png" alt="循环链表"></p><h4 id="存储方式："><a href="#存储方式：" class="headerlink" title="存储方式："></a>存储方式：</h4><ol><li>不是连续分布，instead, 散乱分布</li><li>通过指针链接内存中的各个节点</li></ol><h4 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ListNode</span> {</span><br><span class="line">    <span class="comment">// 结点的值</span></span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 下一个结点</span></span><br><span class="line">    ListNode next;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 节点的构造函数(无参)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ListNode</span><span class="params">()</span> {</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 节点的构造函数(有一个参数)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ListNode</span><span class="params">(<span class="type">int</span> val)</span> {</span><br><span class="line">        <span class="built_in">this</span>.val = val;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 节点的构造函数(有两个参数)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ListNode</span><span class="params">(<span class="type">int</span> val, ListNode next)</span> {</span><br><span class="line">        <span class="built_in">this</span>.val = val;</span><br><span class="line">        <span class="built_in">this</span>.next = next;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h4><p>删除节点：<br>next指向下一个即可</p><p>添加节点：取消原本的next，指向新的节点，新的节点指向下一个节点。</p><p>可以看出链表的增添和删除都是O(1)操作，也不会影响到其他节点。但是要注意，要是删除第五个节点，需要从头节点查找到第四个节点通过next指针进行删除操作，查找的时间复杂度是O(n)。</p><p><img src="/2023/04/05/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95-%E6%80%BB%E6%B1%87/%E9%93%BE%E8%A1%A8%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90.png" alt="链表性能分析"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote><p>数组在定义的时候，长度就是固定的，如果想改动数组的长度，就需要重新定义一个新的数组。</p></blockquote><blockquote><p>链表的长度可以是不固定的，并且可以动态增删， 适合数据量不固定，频繁增删，较少查询的场景。</p></blockquote><h3 id="例题："><a href="#例题：" class="headerlink" title="例题："></a>例题：</h3><blockquote><p>例题详解见 <a href="/2023/04/06/%E9%93%BE%E8%A1%A8/" title="链表">链表</a></p></blockquote><p>● 203.移除链表元素<br>● 707.设计链表<br>● 206.反转链表<br>● 24. 两两交换链表中的节点<br>● 19.删除链表的倒数第N个节点<br>● 面试题 02.07. 链表相交<br>● 142.环形链表II </p><h2 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h2><h3 id="基本知识：-1"><a href="#基本知识：-1" class="headerlink" title="基本知识："></a>基本知识：</h3><p>即 Hash Table, 又称散列表。<br>哈希表是根据关键码的值而直接进行防卫的数据结构。e.g.数组就是哈希表的一个非常好的应用因为可以通过下标来返回对应值。<br><strong>主要解决的问题：</strong> 快速判断一个元素是否出现在集合里。 <br>值 -&gt; 哈希表 的 <strong>映射</strong> 即为Hash Function aka 哈希函数 \</p><h4 id="哈希函数"><a href="#哈希函数" class="headerlink" title="哈希函数"></a>哈希函数</h4><p><img src="/2023/04/05/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95-%E6%80%BB%E6%B1%87/%E5%93%88%E5%B8%8C%E5%87%BD%E6%95%B0.png" alt="哈希函数"><br>把学生姓名映射到了哈希表存储的函数过程。通过<strong>hashCode</strong>把<strong>名字转化为数值</strong>，一般hashcode是通过特定编码方式，可以将其他数据格式转化为不同的数值，这样就把学生名字映射为哈希表上的索引数字了。</p><blockquote><p>问题1: 如果hashCode得到的数值大于 哈希表的大小了，也就是大于tableSize了 怎么办？ </p></blockquote><blockquote><p>此时为了保证映射出来的索引数值都落在哈希表上，我们会在再次对数值做一个取模的操作，就要我们就保证了学生姓名一定可以映射到哈希表上了。</p></blockquote><blockquote><p>问题2: 如果学生的数量大于哈希表的大小，此时就算哈希函数计算的再均匀，也避免不了会有几位学生的名字同时映射到哈希表 同一个索引下标的位置。</p></blockquote><blockquote><p>即哈希碰撞的处理问题 </p></blockquote><h4 id="哈希碰撞-Hash-Collisions："><a href="#哈希碰撞-Hash-Collisions：" class="headerlink" title="哈希碰撞, Hash Collisions："></a>哈希碰撞, Hash Collisions：</h4><blockquote><p>两个值映射到了同一个位置即为Hash Collisions</p></blockquote><p><img src="/2023/04/05/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95-%E6%80%BB%E6%B1%87/%E5%93%88%E5%B8%8C%E7%A2%B0%E6%92%9E.png" alt="哈希碰撞"><br>解决方法：</p><ol><li>拉链法</li><li>线性探测法</li></ol><h5 id="拉链法"><a href="#拉链法" class="headerlink" title="拉链法"></a>拉链法</h5><p>从冲突的位置拉一条链表出来：<br><img src="/2023/04/05/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95-%E6%80%BB%E6%B1%87/%E6%8B%89%E9%93%BE%E6%B3%95.png" alt="拉链法"><br>需要注意的是链表上的查询需要一个一个查，因此大小很重要。</p><h5 id="线性探测法"><a href="#线性探测法" class="headerlink" title="线性探测法"></a>线性探测法</h5><blockquote><p>要求 hash table 的大小 <strong>一定</strong> 要大于 data size 因为需要依赖哈希表中的空位来解决碰撞问题。线性探测法要把冲突的元素放在下一个 <strong>空闲的</strong> 位置 </p></blockquote><p><img src="/2023/04/05/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95-%E6%80%BB%E6%B1%87/%E7%BA%BF%E6%80%A7%E5%86%B2%E7%AA%81%E6%B3%95.png" alt="线性冲突法"></p><p>图中小王需要放到小李的下面的位置。</p><h4 id="常见的哈希结构："><a href="#常见的哈希结构：" class="headerlink" title="常见的哈希结构："></a>常见的哈希结构：</h4><p>一般会有以下三种结构：</p><ol><li>数组</li><li>hashset</li><li>hashmap</li></ol><table><thead><tr><th>数据结构</th><th>底层实现</th><th>是否有序</th><th>数值是否可以重复</th><th>能否更改数值</th><th>查询效率</th><th>增删效率</th></tr></thead><tbody><tr><td>HashMap</td><td>哈希表（数组 + 链表/红黑树）</td><td>无序</td><td>键不可重复，值可重复</td><td>可以</td><td>O(1) ~ O(n)</td><td>O(1) ~ O(n)</td></tr><tr><td>HashSet</td><td>基于HashMap实现</td><td>无序</td><td>不可重复</td><td>间接支持</td><td>O(1) ~ O(n)</td><td>O(1) ~ O(n)</td></tr><tr><td>TreeMap</td><td>红黑树</td><td>有序</td><td>键不可重复，值可重复</td><td>可以</td><td>O(log n)</td><td>O(log n)</td></tr></tbody></table><table><thead><tr><th>HashMap</th><th>HashSet</th><th>TreeMap</th></tr></thead><tbody><tr><td>底层实现：哈希表（数组 + 链表/红黑树）</td><td>基于HashMap实现</td><td>红黑树</td></tr><tr><td>是否有序：无序</td><td>无序</td><td>有序</td></tr><tr><td>数值是否可以重复：键不可重复，值可重复</td><td>不可重复</td><td>键不可重复，值可重复</td></tr><tr><td>能否更改数值：可以 通过put()方法更新键对应的值。</td><td>间接支持</td><td>可以通过put()方法更新键对应的值</td></tr><tr><td>查询效率：O(1) ~ O(n)</td><td>O(1) ~ O(n)</td><td>O(log n) 由于红黑树是平衡的</td></tr><tr><td>增删效率：O(1) ~ O(n)</td><td>O(1) ~ O(n)</td><td>O(log n) 由于红黑树是平衡的</td></tr></tbody></table><ol start="3"><li>TreeMap</li></ol><p>底层实现：基于红黑树实现，红黑树是一种自平衡的二叉搜索树。是否有序：保证有序。TreeMap中的元素按照键（Key）的自然顺序或者提供的比较器（Comparator）进行排序。数值是否可以重复：键（Key）不可重复，值（Value）可重复。能否更改数值：可以更改数值。通过put()方法更新键对应的值。查询效率：时间复杂度为O(log n)，其中n为元素数量。由于红黑树是平衡的，查询效率相对较高。增删效率：时间复杂度为O(log n)，其中n为元素数量。由于红黑树具有自平衡特性，增删操作效率相对较高。</p><h3 id="例题-1"><a href="#例题-1" class="headerlink" title="例题"></a>例题</h3><blockquote><p>例题详解见 <a href="/2023/04/09/%E5%93%88%E5%B8%8C%E8%A1%A8/" title="哈希表">哈希表</a></p></blockquote><p>● 242.有效的字母异位词 </p><p>● 349. 两个数组的交集 </p><p>● 202. 快乐数 </p><p>● 1. 两数之和</p><p>● 454.四数相加II </p><p>● 383. 赎金信 </p><p>● 15. 三数之和 </p><p>● 18. 四数之和 </p><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><ol><li><strong>当我们遇到了要快速判断一个元素是否出现集合里的时候，就要考虑哈希法</strong>。其本质是通过<strong>通过空间换了时间</strong> </li><li>经典题目：<ol><li>数组作为哈希表：eg: int[] = new int[26]; <ol><li>在<a href="https://programmercarl.com/0242.%E6%9C%89%E6%95%88%E7%9A%84%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D.html">242.有效的字母异位词</a>中，我们提到了数组就是简单的哈希表，但是数组的大小是受限的！这道题目包含小写字母，那么使用数组来做哈希最合适不过。在<a href="https://programmercarl.com/0383.%E8%B5%8E%E9%87%91%E4%BF%A1.html">383.赎金信</a>中同样要求只有小写字母，那么就给我们浓浓的暗示，用数组！和<a href="https://programmercarl.com/0242.%E6%9C%89%E6%95%88%E7%9A%84%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D.html">242.有效的字母异位词</a>很像，<a href="https://programmercarl.com/0242.%E6%9C%89%E6%95%88%E7%9A%84%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D.html">242.有效的字母异位词</a>是求 字符串a 和 字符串b 是否可以相互组成，在<a href="https://programmercarl.com/0383.%E8%B5%8E%E9%87%91%E4%BF%A1.html">383.赎金信</a>中是求字符串a能否组成字符串b，而不用管字符串b 能不能组成字符串a。</li></ol></li><li>Set作为哈希表：<ol><li>在<a href="https://programmercarl.com/0349.%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84%E7%9A%84%E4%BA%A4%E9%9B%86.html">349. 两个数组的交集 (opens new window)</a>中我们给出了什么时候用数组就不行了，需要用set。这道题目没有限制数值的大小，就无法使用数组来做哈希表了。</li><li><strong>主要因为如下两点：</strong><ol><li>数组的大小是有限的，受到系统栈空间（不是数据结构的栈）的限制。</li><li>如果数组空间够大，但哈希值比较少、特别分散、跨度非常大，使用数组就造成空间的极大浪费。</li></ol></li></ol></li><li>Map本身作为哈希表：<ol><li>e g: 两数之和</li><li>数组的大小是受限制的，而且如果元素很少，而哈希值太大会造成内存空间的浪费。</li><li>set是一个集合，里面放的元素只能是一个key，而两数之和这道题目，不仅要判断y是否存在而且还要记录y的下标位置，因为要返回x 和 y的下标。所以set 也不能用。</li></ol></li></ol></li></ol><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><ol><li>字符串是字符组成的有限序列</li><li>使用方法：<ol><li>双指针：<ol><li>344.反转字符串 </li><li>剑指Offer 05.替换空格</li></ol></li><li>反转<ol><li>例题： 541. 反转字符串II</li><li>例题：151.翻转字符串里的单词</li></ol></li><li>KMP</li></ol></li></ol><h3 id="例题-2"><a href="#例题-2" class="headerlink" title="例题"></a>例题</h3><blockquote><p> 例题详解见 <a href="/2023/04/13/%E5%AD%97%E7%AC%A6%E4%B8%B2/" title="字符串">字符串</a></p></blockquote><p>● 344.反转字符串</p><p>● 541. 反转字符串II</p><p>● 剑指Offer 05.替换空格</p><p>● 151.翻转字符串里的单词</p><p>● 剑指Offer58-II.左旋转字符串</p><p>● 28. 实现 strStr()</p><p>● 459.重复的子字符串</p><h2 id="队列-Queue-and-栈-Stack"><a href="#队列-Queue-and-栈-Stack" class="headerlink" title="队列 (Queue) and 栈 (Stack)"></a>队列 (Queue) and 栈 (Stack)</h2><blockquote><p>例题详解见 <a href="/2023/04/15/%E9%98%9F%E5%88%97%E5%92%8C%E6%A0%88/" title="队列和栈">队列和栈</a></p></blockquote><ol><li>队列先进先出 FIFO 栈先进后出 FILO</li></ol><h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><p>在 Java 中，栈（Stack）和队列（Queue）是两种常用的数据结构。它们可以通过 Java 集合框架中的类来实现。</p><h4 id="栈（Stack）实现方法："><a href="#栈（Stack）实现方法：" class="headerlink" title="栈（Stack）实现方法："></a>栈（Stack）实现方法：</h4><p>Java 有一个名为 Stack 的类。但是，由于 Stack 类被认为是过时的，不推荐使用。相反，我们可以使用 Deque（双端队列）来实现栈。以下是使用 Deque 实现栈的方法：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Deque;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StackExample</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        Deque&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 入栈</span></span><br><span class="line">        stack.push(<span class="number">1</span>);</span><br><span class="line">        stack.push(<span class="number">2</span>);</span><br><span class="line">        stack.push(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 出栈</span></span><br><span class="line">        System.out.println(stack.pop());</span><br><span class="line">        System.out.println(stack.pop());</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>栈的底层实现是<strong>通过数组或链表</strong>。在这个例子中，我们使用了 LinkedList（链表）作为底层实现。栈的主要操作（push 和 pop）的时间复杂度是 O(1)。</p><h4 id="队列（Queue）实现方法："><a href="#队列（Queue）实现方法：" class="headerlink" title="队列（Queue）实现方法："></a>队列（Queue）实现方法：</h4><p>Java 提供了 Queue 接口来实现队列。以下是使用 LinkedList 实现队列的方法</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.Queue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QueueExample</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        Queue&lt;Integer&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 入队</span></span><br><span class="line">        queue.offer(<span class="number">1</span>);</span><br><span class="line">        queue.offer(<span class="number">2</span>);</span><br><span class="line">        queue.offer(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 出队</span></span><br><span class="line">        System.out.println(queue.poll());</span><br><span class="line">        System.out.println(queue.poll());</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>队列的底层实现可以是数组或链表。在这个例子中，我们使用了 LinkedList（链表）作为底层实现。队列的主要操作（offer 和 poll）的时间复杂度是 O(1)。</p><p>注意：虽然在上面的例子中，我们使用 LinkedList 作为底层实现，但实际上还有其他实现方式，如 ArrayDeque（基于数组的双端队列），它在某些情况下可能比 LinkedList 更高效。另外，Java 还提供了 PriorityQueue（优先队列），其底层实现是基于二叉堆的数据结构，用于实现具有优先级的队列。</p><h4 id="优先队列-Priority-Queue"><a href="#优先队列-Priority-Queue" class="headerlink" title="优先队列 (Priority Queue):"></a>优先队列 (Priority Queue):</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PriorityQueueExample</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="comment">// 创建一个整数优先队列</span></span><br><span class="line">        PriorityQueue&lt;Integer&gt; intQueue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将整数添加到优先队列</span></span><br><span class="line">        intQueue.offer(<span class="number">5</span>);</span><br><span class="line">        intQueue.offer(<span class="number">2</span>);</span><br><span class="line">        intQueue.offer(<span class="number">8</span>);</span><br><span class="line">        intQueue.offer(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将整数从优先队列中删除并打印（默认为自然顺序，即升序）</span></span><br><span class="line">        <span class="keyword">while</span> (!intQueue.isEmpty()) {</span><br><span class="line">            System.out.println(intQueue.poll());</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个字符串优先队列，使用自定义的 Comparator 对象</span></span><br><span class="line">        PriorityQueue&lt;String&gt; stringQueue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">StringLengthComparator</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将字符串添加到优先队列</span></span><br><span class="line">        stringQueue.offer(<span class="string">"apple"</span>);</span><br><span class="line">        stringQueue.offer(<span class="string">"banana"</span>);</span><br><span class="line">        stringQueue.offer(<span class="string">"cherry"</span>);</span><br><span class="line">        stringQueue.offer(<span class="string">"date"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将字符串从优先队列中删除并打印（根据字符串长度排序）</span></span><br><span class="line">        <span class="keyword">while</span> (!stringQueue.isEmpty()) {</span><br><span class="line">            System.out.println(stringQueue.poll());</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自定义的 Comparator 类，按字符串长度进行排序</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">StringLengthComparator</span> <span class="keyword">implements</span> <span class="title class_">Comparator</span>&lt;String&gt; {</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(String s1, String s2)</span> {</span><br><span class="line">            <span class="keyword">return</span> s1.length() - s2.length();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>Comparator in one line:</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PriorityQueueExample</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="comment">// 创建一个字符串优先队列，使用自定义的 Comparator 对象</span></span><br><span class="line">        PriorityQueue&lt;String&gt; stringQueue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;String&gt;() {</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(String s1, String s2)</span> {</span><br><span class="line">                <span class="keyword">return</span> s1.length() - s2.length();</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将字符串添加到优先队列</span></span><br><span class="line">        stringQueue.offer(<span class="string">"apple"</span>);</span><br><span class="line">        stringQueue.offer(<span class="string">"banana"</span>);</span><br><span class="line">        stringQueue.offer(<span class="string">"cherry"</span>);</span><br><span class="line">        stringQueue.offer(<span class="string">"date"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将字符串从优先队列中删除并打印（根据字符串长度排序）</span></span><br><span class="line">        <span class="keyword">while</span> (!stringQueue.isEmpty()) {</span><br><span class="line">            System.out.println(stringQueue.poll());</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="例题-3"><a href="#例题-3" class="headerlink" title="例题"></a>例题</h3><blockquote><p> 例题详解见 <a href="/2023/04/15/%E9%98%9F%E5%88%97%E5%92%8C%E6%A0%88/" title="队列和栈">队列和栈</a></p></blockquote><p>● 232.用栈实现队列</p><p>● 225. 用队列实现栈</p><p>● 20. 有效的括号</p><p>● 1047. 删除字符串中的所有相邻重复项</p><p>● 150. 逆波兰表达式求值</p><p>● 239. 滑动窗口最大值</p><p>● 347.前 K 个高频元素</p><h3 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h3><ol><li>225.用队列实现栈：一个队列在模拟栈弹出元素的时候只要将队列头部的元素（除了最后一个元素外） 重新添加到队列尾部，此时在去弹出元素就是栈的顺序了。</li></ol><h5 id="栈的应用"><a href="#栈的应用" class="headerlink" title="栈的应用"></a>栈的应用</h5><ol><li><strong>括号匹配（有效的括号）, 表达式（逆波兰表达式求值），字符串相邻元素去重（删除字符串中的所有相邻重复项）</strong>都是使用<strong>栈</strong>解决的经典问题其核心是<strong>匹配</strong>问题</li></ol><h5 id="队列的应用"><a href="#队列的应用" class="headerlink" title="队列的应用"></a>队列的应用</h5><ol><li>滑动窗口最大值问题中，队列<strong>没有</strong>必要维护窗口里的所有元素，<strong>只需要</strong>维护有可能成为窗口里<strong>最大值的元素</strong>就可以了，同时<strong>保证队列里的元素数值是由大到小的。</strong></li><li>单调队列 ≠ 优先队列</li><li><strong>单调队列不是一成不变的，而是不同场景不同写法</strong>，总之要保证队列里单调递减或递增的原则，所以叫做单调队列。</li></ol><h5 id="优先队列"><a href="#优先队列" class="headerlink" title="优先队列"></a>优先队列</h5><p><strong>一个披着队列外衣的堆</strong>，优先队列对外接口只是从队头取元素，从队尾添加元素，再无其他取元素的方式，看起来就是一个队列。</p><p><strong>堆是一棵完全二叉树，树中每个结点的值都不小于（或不大于）其左右孩子的值。</strong> 如果父亲结点是大于等于左右孩子就是<strong>大顶堆</strong>，小于等于左右孩子就是<strong>小顶堆</strong>。</p><p>前 K 个高频元素 用到了优先队列</p><h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><p><img src="/2023/04/05/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95-%E6%80%BB%E6%B1%87/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86.png" alt="二叉树基本知识"></p><h3 id="二叉树种类"><a href="#二叉树种类" class="headerlink" title="二叉树种类"></a>二叉树种类</h3><p>主要有两种：<strong>满二叉树</strong>以及<strong>完全二叉树</strong></p><p>节点的高度：节点到最远叶子节点的最长路径上边的数量。叶子节点高度为0。<br>节点的深度：节点到根节点的路径上边的数量。所有根节点深度为0。<br>树的高度：树的高度等于根节点的高度，等于最远叶子节点的深度。<br>树的深度：树的深度等于树的高度。<br>树的宽度：两个最长路径的叶子节点之间节点数。</p><p><img src="/2023/04/05/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95-%E6%80%BB%E6%B1%87/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%90%8D%E8%AF%8D.webp" alt="二叉树名词"></p><h4 id="满二叉树"><a href="#满二叉树" class="headerlink" title="满二叉树"></a>满二叉树</h4><p>定义：除最后一层无任何子节点外，每一层上的所有结点都有两个子结点（最后一层上的无子结点的结点为 叶子结点 ）。也可以这样理解，除叶子结点外的所有结点均有两个子结点。节点数达到最大值。所有叶子结点必须在同一层上.</p><p>例子：<img src="/2023/04/05/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95-%E6%80%BB%E6%B1%87/%E6%BB%A1%E4%BA%8C%E5%8F%89%E6%A0%91.png" alt="满二叉树"></p><p>深度为k，有 2 ^ (k-1) 个节点的二叉树</p><h4 id="完全二叉树"><a href="#完全二叉树" class="headerlink" title="完全二叉树"></a>完全二叉树</h4><p>除了最底层节点可能没填满外，其余每层节点数都达到最大值，并且最下面一层的节点都集中在该层<strong>最左边</strong>的若干位置。若最底层为第 h 层，则该层包含 1~ 2^(h-1) 个节点。</p><p><img src="/2023/04/05/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95-%E6%80%BB%E6%B1%87/%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91.png" alt="完全二叉树"></p><p>ps: 优先队列 用到了 堆 而堆就是一个完全二叉树但保证了父子节点的顺序关系</p><h4 id="二叉搜索树"><a href="#二叉搜索树" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h4><p>二叉搜索树，有值，且其是一个有序树。对节点没有要求，对顺序有要求</p><p>有以下三个特点：</p><ul><li>若它的左子树不空，则<strong>左子树上所有结点的值均小于它的根结点</strong>的值；</li><li>若它的右子树不空，则<strong>右子树上所有结点的值均大于它的根结点</strong>的值；</li><li>它的左、右子树也分别为二叉排序树</li></ul><p><img src="/2023/04/05/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95-%E6%80%BB%E6%B1%87/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91.png" alt="二叉搜索树"></p><h4 id="平衡二叉搜索树"><a href="#平衡二叉搜索树" class="headerlink" title="平衡二叉搜索树"></a>平衡二叉搜索树</h4><p><strong>平衡二叉查找树</strong>：简称平衡二叉树 </p><p>特点：任一节点对应的两棵子树的最大高度差为1，因此它也被称为高度平衡树。查找、插入和删除在平均和最坏情况下的时间复杂度都是 O(logN)</p><p>总结：</p><ol><li>可以是空树。</li><li>假如不是空树，任何一个结点的左子树与右子树都是平衡二叉树，并且高度之差的绝对值不超过 1。</li></ol><p><img src="/2023/04/05/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95-%E6%80%BB%E6%B1%87/%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91.png" alt="平衡二叉搜索树"></p><h3 id="二叉树的存储方式"><a href="#二叉树的存储方式" class="headerlink" title="二叉树的存储方式"></a>二叉树的存储方式</h3><p>两种：</p><ol><li>用<strong>指针</strong>的<strong>链式存储</strong></li></ol><p><img src="/2023/04/05/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95-%E6%80%BB%E6%B1%87/%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8.png" alt="链式存储"></p><ol><li>用<strong>数组</strong>的<strong>顺序存储</strong></li></ol><p><img src="/2023/04/05/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95-%E6%80%BB%E6%B1%87/%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8.png" alt="顺序存储"></p><p>如果父节点的数组下标是 i，那么它的<strong>左孩子就是 i * 2 + 1</strong>，<strong>右孩子就是 i * 2 + 2</strong>。</p><h3 id="二叉树的遍历"><a href="#二叉树的遍历" class="headerlink" title="二叉树的遍历"></a>二叉树的遍历</h3><p>二叉树主要有两种遍历方式：</p><ol><li><p><strong>深度优先遍历</strong>：先往深走，遇到叶子节点再往回走。</p><ol><li>前序遍历（递归法，迭代法）</li><li>中序遍历（递归法，迭代法）</li><li>后序遍历（递归法，迭代法）</li></ol><p>前中后，其实指的就是<strong>中间节点</strong>的<strong>遍历顺序</strong>，前中后序指的就是中间节点的位置：</p><ul><li>前序遍历：中左右</li><li>中序遍历：左中右</li><li>后序遍历：左右中</li></ul><p><img src="/2023/04/05/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95-%E6%80%BB%E6%B1%87/%E5%89%8D%E4%B8%AD%E5%90%8E%E7%9A%84%E9%81%8D%E5%8E%86.png" alt="前中后的遍历"></p></li><li><p><strong>广度优先遍历</strong>：一层一层的去遍历。</p><ol><li>层次遍历（迭代法）</li></ol></li></ol><h3 id="二叉树定义-链式存储"><a href="#二叉树定义-链式存储" class="headerlink" title="二叉树定义(链式存储)"></a>二叉树定义(链式存储)</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TreeNode</span> {</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">  TreeNode left;</span><br><span class="line">  TreeNode right;</span><br><span class="line">  TreeNode() {}</span><br><span class="line">  TreeNode(<span class="type">int</span> val) { <span class="built_in">this</span>.val = val; }</span><br><span class="line">  TreeNode(<span class="type">int</span> val, TreeNode left, TreeNode right) {</span><br><span class="line">    <span class="built_in">this</span>.val = val;</span><br><span class="line">    <span class="built_in">this</span>.left = left;</span><br><span class="line">    <span class="built_in">this</span>.right = right;</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="例题-4"><a href="#例题-4" class="headerlink" title="例题"></a>例题</h3><blockquote><p>例题详解见 <a href="/2023/04/17/%E4%BA%8C%E5%8F%89%E6%A0%91/" title="二叉树">二叉树</a></p></blockquote><ul><li>递归遍历<ul><li>144.二叉树的前序遍历</li><li>145.二叉树的后序遍历</li><li>94.二叉树的中序遍历</li></ul></li><li>迭代遍历</li><li>统一迭代</li><li>层序遍历：<ul><li>102.二叉树的层序遍历</li><li>107.二叉树的层次遍历II</li><li>199.二叉树的右视图</li><li>637.二叉树的层平均值</li><li>429.N叉树的层序遍历</li><li>515.在每个树行中找最大值</li><li>116.填充每个节点的下一个右侧节点指针</li><li>117.填充每个节点的下一个右侧节点指针II</li><li>104.二叉树的最大深度</li><li>111.二叉树的最小深度</li></ul></li><li>226.翻转二叉树 </li><li>101.对称二叉树 2  </li><li>104.二叉树的最大深度  </li><li>559.n叉树的最大深度</li><li>111.二叉树的最小深度</li><li>222.完全二叉树的节点个数</li><li>110.平衡二叉树 </li><li>257.二叉树的所有路径 </li><li>404.左叶子之和</li></ul>]]></content>
      
      
      <categories>
          
          <category> Algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码随想录 </tag>
            
            <tag> 总汇 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/04/04/hello-world/"/>
      <url>/2023/04/04/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
